
audio_model.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000064a4  0800f120  0800f120  0001f120  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080155c4  080155c4  000325d4  2**0
                  CONTENTS
  4 .ARM          00000008  080155c4  080155c4  000255c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080155cc  080155cc  000325d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080155cc  080155cc  000255cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080155d0  080155d0  000255d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000025d4  20000000  080155d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  200025d4  08017ba8  000325d4  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  2000292c  08017ba8  0003292c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000325d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  00032604  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011096  00000000  00000000  00032697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024e5  00000000  00000000  0004372d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e28  00000000  00000000  00045c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae1  00000000  00000000  00046a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028db5  00000000  00000000  00047521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010dd2  00000000  00000000  000702d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff2e2  00000000  00000000  000810a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004244  00000000  00000000  0018038c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001845d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200025d4 	.word	0x200025d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f0f4 	.word	0x0800f0f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200025d8 	.word	0x200025d8
 80001cc:	0800f0f4 	.word	0x0800f0f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 bace 	b.w	8000824 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f83a 	bl	8000308 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__aeabi_f2lz>:
 80002a0:	ee07 0a90 	vmov	s15, r0
 80002a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80002a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_f2lz+0x12>
 80002ae:	f000 b80b 	b.w	80002c8 <__aeabi_f2ulz>
 80002b2:	eef1 7a67 	vneg.f32	s15, s15
 80002b6:	b508      	push	{r3, lr}
 80002b8:	ee17 0a90 	vmov	r0, s15
 80002bc:	f000 f804 	bl	80002c8 <__aeabi_f2ulz>
 80002c0:	4240      	negs	r0, r0
 80002c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c6:	bd08      	pop	{r3, pc}

080002c8 <__aeabi_f2ulz>:
 80002c8:	b5d0      	push	{r4, r6, r7, lr}
 80002ca:	f000 fc11 	bl	8000af0 <__aeabi_f2d>
 80002ce:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <__aeabi_f2ulz+0x38>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	4606      	mov	r6, r0
 80002d4:	460f      	mov	r7, r1
 80002d6:	f000 f97b 	bl	80005d0 <__aeabi_dmul>
 80002da:	f000 fc61 	bl	8000ba0 <__aeabi_d2uiz>
 80002de:	4604      	mov	r4, r0
 80002e0:	f000 fbe4 	bl	8000aac <__aeabi_ui2d>
 80002e4:	4b07      	ldr	r3, [pc, #28]	; (8000304 <__aeabi_f2ulz+0x3c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	f000 f972 	bl	80005d0 <__aeabi_dmul>
 80002ec:	4602      	mov	r2, r0
 80002ee:	460b      	mov	r3, r1
 80002f0:	4630      	mov	r0, r6
 80002f2:	4639      	mov	r1, r7
 80002f4:	f000 fa9c 	bl	8000830 <__aeabi_dsub>
 80002f8:	f000 fc52 	bl	8000ba0 <__aeabi_d2uiz>
 80002fc:	4621      	mov	r1, r4
 80002fe:	bdd0      	pop	{r4, r6, r7, pc}
 8000300:	3df00000 	.word	0x3df00000
 8000304:	41f00000 	.word	0x41f00000

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_dmul>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005de:	bf1d      	ittte	ne
 80005e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e4:	ea94 0f0c 	teqne	r4, ip
 80005e8:	ea95 0f0c 	teqne	r5, ip
 80005ec:	f000 f8de 	bleq	80007ac <__aeabi_dmul+0x1dc>
 80005f0:	442c      	add	r4, r5
 80005f2:	ea81 0603 	eor.w	r6, r1, r3
 80005f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000602:	bf18      	it	ne
 8000604:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000608:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800060c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000610:	d038      	beq.n	8000684 <__aeabi_dmul+0xb4>
 8000612:	fba0 ce02 	umull	ip, lr, r0, r2
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800061e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000622:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000626:	f04f 0600 	mov.w	r6, #0
 800062a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800062e:	f09c 0f00 	teq	ip, #0
 8000632:	bf18      	it	ne
 8000634:	f04e 0e01 	orrne.w	lr, lr, #1
 8000638:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800063c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000640:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000644:	d204      	bcs.n	8000650 <__aeabi_dmul+0x80>
 8000646:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800064a:	416d      	adcs	r5, r5
 800064c:	eb46 0606 	adc.w	r6, r6, r6
 8000650:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000654:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000658:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800065c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000660:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000664:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000668:	bf88      	it	hi
 800066a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800066e:	d81e      	bhi.n	80006ae <__aeabi_dmul+0xde>
 8000670:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000674:	bf08      	it	eq
 8000676:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800067a:	f150 0000 	adcs.w	r0, r0, #0
 800067e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000688:	ea46 0101 	orr.w	r1, r6, r1
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	ea81 0103 	eor.w	r1, r1, r3
 8000694:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000698:	bfc2      	ittt	gt
 800069a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800069e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	popgt	{r4, r5, r6, pc}
 80006a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a8:	f04f 0e00 	mov.w	lr, #0
 80006ac:	3c01      	subs	r4, #1
 80006ae:	f300 80ab 	bgt.w	8000808 <__aeabi_dmul+0x238>
 80006b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006b6:	bfde      	ittt	le
 80006b8:	2000      	movle	r0, #0
 80006ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006be:	bd70      	pople	{r4, r5, r6, pc}
 80006c0:	f1c4 0400 	rsb	r4, r4, #0
 80006c4:	3c20      	subs	r4, #32
 80006c6:	da35      	bge.n	8000734 <__aeabi_dmul+0x164>
 80006c8:	340c      	adds	r4, #12
 80006ca:	dc1b      	bgt.n	8000704 <__aeabi_dmul+0x134>
 80006cc:	f104 0414 	add.w	r4, r4, #20
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f305 	lsl.w	r3, r0, r5
 80006d8:	fa20 f004 	lsr.w	r0, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f0:	fa21 f604 	lsr.w	r6, r1, r4
 80006f4:	eb42 0106 	adc.w	r1, r2, r6
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 040c 	rsb	r4, r4, #12
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f304 	lsl.w	r3, r0, r4
 8000710:	fa20 f005 	lsr.w	r0, r0, r5
 8000714:	fa01 f204 	lsl.w	r2, r1, r4
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000720:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000724:	f141 0100 	adc.w	r1, r1, #0
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 0520 	rsb	r5, r4, #32
 8000738:	fa00 f205 	lsl.w	r2, r0, r5
 800073c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000740:	fa20 f304 	lsr.w	r3, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea43 0302 	orr.w	r3, r3, r2
 800074c:	fa21 f004 	lsr.w	r0, r1, r4
 8000750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000754:	fa21 f204 	lsr.w	r2, r1, r4
 8000758:	ea20 0002 	bic.w	r0, r0, r2
 800075c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f094 0f00 	teq	r4, #0
 8000770:	d10f      	bne.n	8000792 <__aeabi_dmul+0x1c2>
 8000772:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000776:	0040      	lsls	r0, r0, #1
 8000778:	eb41 0101 	adc.w	r1, r1, r1
 800077c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3c01      	subeq	r4, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1a6>
 8000786:	ea41 0106 	orr.w	r1, r1, r6
 800078a:	f095 0f00 	teq	r5, #0
 800078e:	bf18      	it	ne
 8000790:	4770      	bxne	lr
 8000792:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000796:	0052      	lsls	r2, r2, #1
 8000798:	eb43 0303 	adc.w	r3, r3, r3
 800079c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3d01      	subeq	r5, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1c6>
 80007a6:	ea43 0306 	orr.w	r3, r3, r6
 80007aa:	4770      	bx	lr
 80007ac:	ea94 0f0c 	teq	r4, ip
 80007b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007b4:	bf18      	it	ne
 80007b6:	ea95 0f0c 	teqne	r5, ip
 80007ba:	d00c      	beq.n	80007d6 <__aeabi_dmul+0x206>
 80007bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c0:	bf18      	it	ne
 80007c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c6:	d1d1      	bne.n	800076c <__aeabi_dmul+0x19c>
 80007c8:	ea81 0103 	eor.w	r1, r1, r3
 80007cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d0:	f04f 0000 	mov.w	r0, #0
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007da:	bf06      	itte	eq
 80007dc:	4610      	moveq	r0, r2
 80007de:	4619      	moveq	r1, r3
 80007e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e4:	d019      	beq.n	800081a <__aeabi_dmul+0x24a>
 80007e6:	ea94 0f0c 	teq	r4, ip
 80007ea:	d102      	bne.n	80007f2 <__aeabi_dmul+0x222>
 80007ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007f0:	d113      	bne.n	800081a <__aeabi_dmul+0x24a>
 80007f2:	ea95 0f0c 	teq	r5, ip
 80007f6:	d105      	bne.n	8000804 <__aeabi_dmul+0x234>
 80007f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007fc:	bf1c      	itt	ne
 80007fe:	4610      	movne	r0, r2
 8000800:	4619      	movne	r1, r3
 8000802:	d10a      	bne.n	800081a <__aeabi_dmul+0x24a>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000810:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	bd70      	pop	{r4, r5, r6, pc}
 800081a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000822:	bd70      	pop	{r4, r5, r6, pc}

08000824 <__aeabi_idiv0>:
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop

08000828 <__aeabi_drsub>:
 8000828:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800082c:	e002      	b.n	8000834 <__adddf3>
 800082e:	bf00      	nop

08000830 <__aeabi_dsub>:
 8000830:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000834 <__adddf3>:
 8000834:	b530      	push	{r4, r5, lr}
 8000836:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800083a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800083e:	ea94 0f05 	teq	r4, r5
 8000842:	bf08      	it	eq
 8000844:	ea90 0f02 	teqeq	r0, r2
 8000848:	bf1f      	itttt	ne
 800084a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800084e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000852:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000856:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800085a:	f000 80e2 	beq.w	8000a22 <__adddf3+0x1ee>
 800085e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000862:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000866:	bfb8      	it	lt
 8000868:	426d      	neglt	r5, r5
 800086a:	dd0c      	ble.n	8000886 <__adddf3+0x52>
 800086c:	442c      	add	r4, r5
 800086e:	ea80 0202 	eor.w	r2, r0, r2
 8000872:	ea81 0303 	eor.w	r3, r1, r3
 8000876:	ea82 0000 	eor.w	r0, r2, r0
 800087a:	ea83 0101 	eor.w	r1, r3, r1
 800087e:	ea80 0202 	eor.w	r2, r0, r2
 8000882:	ea81 0303 	eor.w	r3, r1, r3
 8000886:	2d36      	cmp	r5, #54	; 0x36
 8000888:	bf88      	it	hi
 800088a:	bd30      	pophi	{r4, r5, pc}
 800088c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000898:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800089c:	d002      	beq.n	80008a4 <__adddf3+0x70>
 800089e:	4240      	negs	r0, r0
 80008a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80008b0:	d002      	beq.n	80008b8 <__adddf3+0x84>
 80008b2:	4252      	negs	r2, r2
 80008b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008b8:	ea94 0f05 	teq	r4, r5
 80008bc:	f000 80a7 	beq.w	8000a0e <__adddf3+0x1da>
 80008c0:	f1a4 0401 	sub.w	r4, r4, #1
 80008c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80008c8:	db0d      	blt.n	80008e6 <__adddf3+0xb2>
 80008ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80008ce:	fa22 f205 	lsr.w	r2, r2, r5
 80008d2:	1880      	adds	r0, r0, r2
 80008d4:	f141 0100 	adc.w	r1, r1, #0
 80008d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80008dc:	1880      	adds	r0, r0, r2
 80008de:	fa43 f305 	asr.w	r3, r3, r5
 80008e2:	4159      	adcs	r1, r3
 80008e4:	e00e      	b.n	8000904 <__adddf3+0xd0>
 80008e6:	f1a5 0520 	sub.w	r5, r5, #32
 80008ea:	f10e 0e20 	add.w	lr, lr, #32
 80008ee:	2a01      	cmp	r2, #1
 80008f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80008f4:	bf28      	it	cs
 80008f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80008fa:	fa43 f305 	asr.w	r3, r3, r5
 80008fe:	18c0      	adds	r0, r0, r3
 8000900:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000904:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000908:	d507      	bpl.n	800091a <__adddf3+0xe6>
 800090a:	f04f 0e00 	mov.w	lr, #0
 800090e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000912:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000916:	eb6e 0101 	sbc.w	r1, lr, r1
 800091a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800091e:	d31b      	bcc.n	8000958 <__adddf3+0x124>
 8000920:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000924:	d30c      	bcc.n	8000940 <__adddf3+0x10c>
 8000926:	0849      	lsrs	r1, r1, #1
 8000928:	ea5f 0030 	movs.w	r0, r0, rrx
 800092c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000930:	f104 0401 	add.w	r4, r4, #1
 8000934:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000938:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800093c:	f080 809a 	bcs.w	8000a74 <__adddf3+0x240>
 8000940:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000944:	bf08      	it	eq
 8000946:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094a:	f150 0000 	adcs.w	r0, r0, #0
 800094e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000952:	ea41 0105 	orr.w	r1, r1, r5
 8000956:	bd30      	pop	{r4, r5, pc}
 8000958:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800095c:	4140      	adcs	r0, r0
 800095e:	eb41 0101 	adc.w	r1, r1, r1
 8000962:	3c01      	subs	r4, #1
 8000964:	bf28      	it	cs
 8000966:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800096a:	d2e9      	bcs.n	8000940 <__adddf3+0x10c>
 800096c:	f091 0f00 	teq	r1, #0
 8000970:	bf04      	itt	eq
 8000972:	4601      	moveq	r1, r0
 8000974:	2000      	moveq	r0, #0
 8000976:	fab1 f381 	clz	r3, r1
 800097a:	bf08      	it	eq
 800097c:	3320      	addeq	r3, #32
 800097e:	f1a3 030b 	sub.w	r3, r3, #11
 8000982:	f1b3 0220 	subs.w	r2, r3, #32
 8000986:	da0c      	bge.n	80009a2 <__adddf3+0x16e>
 8000988:	320c      	adds	r2, #12
 800098a:	dd08      	ble.n	800099e <__adddf3+0x16a>
 800098c:	f102 0c14 	add.w	ip, r2, #20
 8000990:	f1c2 020c 	rsb	r2, r2, #12
 8000994:	fa01 f00c 	lsl.w	r0, r1, ip
 8000998:	fa21 f102 	lsr.w	r1, r1, r2
 800099c:	e00c      	b.n	80009b8 <__adddf3+0x184>
 800099e:	f102 0214 	add.w	r2, r2, #20
 80009a2:	bfd8      	it	le
 80009a4:	f1c2 0c20 	rsble	ip, r2, #32
 80009a8:	fa01 f102 	lsl.w	r1, r1, r2
 80009ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80009b0:	bfdc      	itt	le
 80009b2:	ea41 010c 	orrle.w	r1, r1, ip
 80009b6:	4090      	lslle	r0, r2
 80009b8:	1ae4      	subs	r4, r4, r3
 80009ba:	bfa2      	ittt	ge
 80009bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80009c0:	4329      	orrge	r1, r5
 80009c2:	bd30      	popge	{r4, r5, pc}
 80009c4:	ea6f 0404 	mvn.w	r4, r4
 80009c8:	3c1f      	subs	r4, #31
 80009ca:	da1c      	bge.n	8000a06 <__adddf3+0x1d2>
 80009cc:	340c      	adds	r4, #12
 80009ce:	dc0e      	bgt.n	80009ee <__adddf3+0x1ba>
 80009d0:	f104 0414 	add.w	r4, r4, #20
 80009d4:	f1c4 0220 	rsb	r2, r4, #32
 80009d8:	fa20 f004 	lsr.w	r0, r0, r4
 80009dc:	fa01 f302 	lsl.w	r3, r1, r2
 80009e0:	ea40 0003 	orr.w	r0, r0, r3
 80009e4:	fa21 f304 	lsr.w	r3, r1, r4
 80009e8:	ea45 0103 	orr.w	r1, r5, r3
 80009ec:	bd30      	pop	{r4, r5, pc}
 80009ee:	f1c4 040c 	rsb	r4, r4, #12
 80009f2:	f1c4 0220 	rsb	r2, r4, #32
 80009f6:	fa20 f002 	lsr.w	r0, r0, r2
 80009fa:	fa01 f304 	lsl.w	r3, r1, r4
 80009fe:	ea40 0003 	orr.w	r0, r0, r3
 8000a02:	4629      	mov	r1, r5
 8000a04:	bd30      	pop	{r4, r5, pc}
 8000a06:	fa21 f004 	lsr.w	r0, r1, r4
 8000a0a:	4629      	mov	r1, r5
 8000a0c:	bd30      	pop	{r4, r5, pc}
 8000a0e:	f094 0f00 	teq	r4, #0
 8000a12:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000a16:	bf06      	itte	eq
 8000a18:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000a1c:	3401      	addeq	r4, #1
 8000a1e:	3d01      	subne	r5, #1
 8000a20:	e74e      	b.n	80008c0 <__adddf3+0x8c>
 8000a22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000a26:	bf18      	it	ne
 8000a28:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000a2c:	d029      	beq.n	8000a82 <__adddf3+0x24e>
 8000a2e:	ea94 0f05 	teq	r4, r5
 8000a32:	bf08      	it	eq
 8000a34:	ea90 0f02 	teqeq	r0, r2
 8000a38:	d005      	beq.n	8000a46 <__adddf3+0x212>
 8000a3a:	ea54 0c00 	orrs.w	ip, r4, r0
 8000a3e:	bf04      	itt	eq
 8000a40:	4619      	moveq	r1, r3
 8000a42:	4610      	moveq	r0, r2
 8000a44:	bd30      	pop	{r4, r5, pc}
 8000a46:	ea91 0f03 	teq	r1, r3
 8000a4a:	bf1e      	ittt	ne
 8000a4c:	2100      	movne	r1, #0
 8000a4e:	2000      	movne	r0, #0
 8000a50:	bd30      	popne	{r4, r5, pc}
 8000a52:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000a56:	d105      	bne.n	8000a64 <__adddf3+0x230>
 8000a58:	0040      	lsls	r0, r0, #1
 8000a5a:	4149      	adcs	r1, r1
 8000a5c:	bf28      	it	cs
 8000a5e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000a62:	bd30      	pop	{r4, r5, pc}
 8000a64:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000a68:	bf3c      	itt	cc
 8000a6a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000a6e:	bd30      	popcc	{r4, r5, pc}
 8000a70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000a74:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000a78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	bd30      	pop	{r4, r5, pc}
 8000a82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000a86:	bf1a      	itte	ne
 8000a88:	4619      	movne	r1, r3
 8000a8a:	4610      	movne	r0, r2
 8000a8c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000a90:	bf1c      	itt	ne
 8000a92:	460b      	movne	r3, r1
 8000a94:	4602      	movne	r2, r0
 8000a96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a9a:	bf06      	itte	eq
 8000a9c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000aa0:	ea91 0f03 	teqeq	r1, r3
 8000aa4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000aa8:	bd30      	pop	{r4, r5, pc}
 8000aaa:	bf00      	nop

08000aac <__aeabi_ui2d>:
 8000aac:	f090 0f00 	teq	r0, #0
 8000ab0:	bf04      	itt	eq
 8000ab2:	2100      	moveq	r1, #0
 8000ab4:	4770      	bxeq	lr
 8000ab6:	b530      	push	{r4, r5, lr}
 8000ab8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000abc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000ac0:	f04f 0500 	mov.w	r5, #0
 8000ac4:	f04f 0100 	mov.w	r1, #0
 8000ac8:	e750      	b.n	800096c <__adddf3+0x138>
 8000aca:	bf00      	nop

08000acc <__aeabi_i2d>:
 8000acc:	f090 0f00 	teq	r0, #0
 8000ad0:	bf04      	itt	eq
 8000ad2:	2100      	moveq	r1, #0
 8000ad4:	4770      	bxeq	lr
 8000ad6:	b530      	push	{r4, r5, lr}
 8000ad8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000adc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000ae0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000ae4:	bf48      	it	mi
 8000ae6:	4240      	negmi	r0, r0
 8000ae8:	f04f 0100 	mov.w	r1, #0
 8000aec:	e73e      	b.n	800096c <__adddf3+0x138>
 8000aee:	bf00      	nop

08000af0 <__aeabi_f2d>:
 8000af0:	0042      	lsls	r2, r0, #1
 8000af2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000af6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000afa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000afe:	bf1f      	itttt	ne
 8000b00:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000b04:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000b08:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000b0c:	4770      	bxne	lr
 8000b0e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000b12:	bf08      	it	eq
 8000b14:	4770      	bxeq	lr
 8000b16:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000b1a:	bf04      	itt	eq
 8000b1c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000b20:	4770      	bxeq	lr
 8000b22:	b530      	push	{r4, r5, lr}
 8000b24:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000b28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000b2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000b30:	e71c      	b.n	800096c <__adddf3+0x138>
 8000b32:	bf00      	nop

08000b34 <__aeabi_ul2d>:
 8000b34:	ea50 0201 	orrs.w	r2, r0, r1
 8000b38:	bf08      	it	eq
 8000b3a:	4770      	bxeq	lr
 8000b3c:	b530      	push	{r4, r5, lr}
 8000b3e:	f04f 0500 	mov.w	r5, #0
 8000b42:	e00a      	b.n	8000b5a <__aeabi_l2d+0x16>

08000b44 <__aeabi_l2d>:
 8000b44:	ea50 0201 	orrs.w	r2, r0, r1
 8000b48:	bf08      	it	eq
 8000b4a:	4770      	bxeq	lr
 8000b4c:	b530      	push	{r4, r5, lr}
 8000b4e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000b52:	d502      	bpl.n	8000b5a <__aeabi_l2d+0x16>
 8000b54:	4240      	negs	r0, r0
 8000b56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b5a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000b5e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000b62:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000b66:	f43f aed8 	beq.w	800091a <__adddf3+0xe6>
 8000b6a:	f04f 0203 	mov.w	r2, #3
 8000b6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000b72:	bf18      	it	ne
 8000b74:	3203      	addne	r2, #3
 8000b76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000b7a:	bf18      	it	ne
 8000b7c:	3203      	addne	r2, #3
 8000b7e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000b82:	f1c2 0320 	rsb	r3, r2, #32
 8000b86:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b8a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000b92:	ea40 000e 	orr.w	r0, r0, lr
 8000b96:	fa21 f102 	lsr.w	r1, r1, r2
 8000b9a:	4414      	add	r4, r2
 8000b9c:	e6bd      	b.n	800091a <__adddf3+0xe6>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2uiz>:
 8000ba0:	004a      	lsls	r2, r1, #1
 8000ba2:	d211      	bcs.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d211      	bcs.n	8000bce <__aeabi_d2uiz+0x2e>
 8000baa:	d50d      	bpl.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d40e      	bmi.n	8000bd4 <__aeabi_d2uiz+0x34>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d102      	bne.n	8000bda <__aeabi_d2uiz+0x3a>
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bd8:	4770      	bx	lr
 8000bda:	f04f 0000 	mov.w	r0, #0
 8000bde:	4770      	bx	lr

08000be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	f5ad 4d2a 	sub.w	sp, sp, #43520	; 0xaa00
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char buf[50];
	int buf_len = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000bee:	f102 02ec 	add.w	r2, r2, #236	; 0xec
 8000bf2:	6013      	str	r3, [r2, #0]
	// Buffers used to store input and output tensors
	AI_ALIGNED(4) ai_i8 in_data[AI_AUDIO_MODEL_IN_1_SIZE_BYTES];
	AI_ALIGNED(4) ai_float out_data[AI_AUDIO_MODEL_OUT_1_SIZE];

	// Pointer to our model
	ai_handle audio_model = AI_HANDLE_NULL;
 8000bf4:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8000bf8:	f6a3 13c8 	subw	r3, r3, #2504	; 0x9c8
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
	ai_buffer* ai_input;
	ai_buffer* ai_output;

	// Set working memory and get weights/biases from model
	ai_network_params ai_params = {
	  AI_AUDIO_MODEL_DATA_WEIGHTS(ai_audio_model_data_weights_get()),
 8000c00:	f003 fd88 	bl	8004714 <ai_audio_model_data_weights_get>
 8000c04:	4602      	mov	r2, r0
 8000c06:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8000c0a:	f5a3 6320 	sub.w	r3, r3, #2560	; 0xa00
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 fd4b 	bl	80046ac <ai_audio_model_data_weights_buffer_get>
	  AI_AUDIO_MODEL_DATA_ACTIVATIONS(activations)
 8000c16:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8000c1a:	f5a3 6320 	sub.w	r3, r3, #2560	; 0xa00
 8000c1e:	f103 021c 	add.w	r2, r3, #28
 8000c22:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000c26:	3b9c      	subs	r3, #156	; 0x9c
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4610      	mov	r0, r2
 8000c2c:	f003 fd0a 	bl	8004644 <ai_audio_model_data_activations_buffer_get>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c30:	f000 fc42 	bl	80014b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c34:	f000 f9d2 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c38:	f000 fa9a 	bl	8001170 <MX_GPIO_Init>
  MX_CRC_Init();
 8000c3c:	f000 fa20 	bl	8001080 <MX_CRC_Init>
  MX_TIM16_Init();
 8000c40:	f000 fa40 	bl	80010c4 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8000c44:	f000 fa64 	bl	8001110 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Start timer/counter
  HAL_TIM_Base_Start(&htim16);
 8000c48:	48be      	ldr	r0, [pc, #760]	; (8000f44 <main+0x364>)
 8000c4a:	f002 fbf7 	bl	800343c <HAL_TIM_Base_Start>

  // Greetings!
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 8000c4e:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000c52:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 8000c56:	49bc      	ldr	r1, [pc, #752]	; (8000f48 <main+0x368>)
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f00d fac1 	bl	800e1e0 <siprintf>
 8000c5e:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000c62:	f103 03ec 	add.w	r3, r3, #236	; 0xec
 8000c66:	6018      	str	r0, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)buf, buf_len, 100);
 8000c68:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000c6c:	f103 03ec 	add.w	r3, r3, #236	; 0xec
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	f507 4129 	add.w	r1, r7, #43264	; 0xa900
 8000c78:	f101 01a8 	add.w	r1, r1, #168	; 0xa8
 8000c7c:	2364      	movs	r3, #100	; 0x64
 8000c7e:	48b3      	ldr	r0, [pc, #716]	; (8000f4c <main+0x36c>)
 8000c80:	f002 fd2c 	bl	80036dc <HAL_UART_Transmit>

  // Create instance of neural network
  ai_err = ai_audio_model_create(&audio_model, AI_AUDIO_MODEL_DATA_CONFIG);
 8000c84:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000c88:	3bc8      	subs	r3, #200	; 0xc8
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f003 fc43 	bl	8004518 <ai_audio_model_create>
 8000c92:	4603      	mov	r3, r0
 8000c94:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000c98:	f102 02a4 	add.w	r2, r2, #164	; 0xa4
 8000c9c:	6013      	str	r3, [r2, #0]
  if (ai_err.type != AI_ERROR_NONE){
 8000c9e:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000ca2:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d01b      	beq.n	8000ce4 <main+0x104>
    buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8000cac:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000cb0:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 8000cb4:	49a6      	ldr	r1, [pc, #664]	; (8000f50 <main+0x370>)
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f00d fa92 	bl	800e1e0 <siprintf>
 8000cbc:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000cc0:	f103 03ec 	add.w	r3, r3, #236	; 0xec
 8000cc4:	6018      	str	r0, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)buf, buf_len, 100);
 8000cc6:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000cca:	f103 03ec 	add.w	r3, r3, #236	; 0xec
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	f507 4129 	add.w	r1, r7, #43264	; 0xa900
 8000cd6:	f101 01a8 	add.w	r1, r1, #168	; 0xa8
 8000cda:	2364      	movs	r3, #100	; 0x64
 8000cdc:	489b      	ldr	r0, [pc, #620]	; (8000f4c <main+0x36c>)
 8000cde:	f002 fcfd 	bl	80036dc <HAL_UART_Transmit>
    while(1);
 8000ce2:	e7fe      	b.n	8000ce2 <main+0x102>
  }

  ai_input = ai_audio_model_inputs_get(audio_model,NULL);
 8000ce4:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8000ce8:	f6a3 13c8 	subw	r3, r3, #2504	; 0x9c8
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f003 fc27 	bl	8004544 <ai_audio_model_inputs_get>
 8000cf6:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000cfa:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8000cfe:	6018      	str	r0, [r3, #0]
  ai_output = ai_audio_model_outputs_get(audio_model,NULL);
 8000d00:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8000d04:	f6a3 13c8 	subw	r3, r3, #2504	; 0x9c8
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f003 fc33 	bl	8004578 <ai_audio_model_outputs_get>
 8000d12:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000d16:	f103 03e4 	add.w	r3, r3, #228	; 0xe4
 8000d1a:	6018      	str	r0, [r3, #0]

  // Initialize neural network
  if (!ai_audio_model_init(audio_model, &ai_params)){
 8000d1c:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8000d20:	f6a3 13c8 	subw	r3, r3, #2504	; 0x9c8
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	463a      	mov	r2, r7
 8000d28:	4611      	mov	r1, r2
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f003 fc3e 	bl	80045ac <ai_audio_model_init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	f083 0301 	eor.w	r3, r3, #1
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d01b      	beq.n	8000d74 <main+0x194>
    buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8000d3c:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000d40:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 8000d44:	4983      	ldr	r1, [pc, #524]	; (8000f54 <main+0x374>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	f00d fa4a 	bl	800e1e0 <siprintf>
 8000d4c:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000d50:	f103 03ec 	add.w	r3, r3, #236	; 0xec
 8000d54:	6018      	str	r0, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)buf, buf_len, 100);
 8000d56:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000d5a:	f103 03ec 	add.w	r3, r3, #236	; 0xec
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	f507 4129 	add.w	r1, r7, #43264	; 0xa900
 8000d66:	f101 01a8 	add.w	r1, r1, #168	; 0xa8
 8000d6a:	2364      	movs	r3, #100	; 0x64
 8000d6c:	4877      	ldr	r0, [pc, #476]	; (8000f4c <main+0x36c>)
 8000d6e:	f002 fcb5 	bl	80036dc <HAL_UART_Transmit>
    while(1);
 8000d72:	e7fe      	b.n	8000d72 <main+0x192>
  }

  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000d74:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000d78:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000d82:	3b9c      	subs	r3, #156	; 0x9c
 8000d84:	6053      	str	r3, [r2, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000d86:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000d8a:	f103 03e4 	add.w	r3, r3, #228	; 0xe4
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000d94:	3bc4      	subs	r3, #196	; 0xc4
 8000d96:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Fill input buffer (use test value)
    // TODO: Modify this to take microphone audio
    for (uint32_t i = 0; i < AI_AUDIO_MODEL_IN_1_SIZE; i++)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000d9e:	f102 02f4 	add.w	r2, r2, #244	; 0xf4
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	e01d      	b.n	8000de2 <main+0x202>
    {
      ((ai_i8*)in_data)[i] = inp[i];
 8000da6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000daa:	3b9c      	subs	r3, #156	; 0x9c
 8000dac:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000db0:	f102 02f4 	add.w	r2, r2, #244	; 0xf4
 8000db4:	6812      	ldr	r2, [r2, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4967      	ldr	r1, [pc, #412]	; (8000f58 <main+0x378>)
 8000dba:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000dbe:	f102 02f4 	add.w	r2, r2, #244	; 0xf4
 8000dc2:	6812      	ldr	r2, [r2, #0]
 8000dc4:	440a      	add	r2, r1
 8000dc6:	f992 2000 	ldrsb.w	r2, [r2]
 8000dca:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < AI_AUDIO_MODEL_IN_1_SIZE; i++)
 8000dcc:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000dd0:	f103 03f4 	add.w	r3, r3, #244	; 0xf4
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000ddc:	f102 02f4 	add.w	r2, r2, #244	; 0xf4
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000de6:	f103 03f4 	add.w	r3, r3, #244	; 0xf4
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8000df0:	d3d9      	bcc.n	8000da6 <main+0x1c6>
    }

    // Get current timestamp
    timestamp = htim16.Instance->CNT;
 8000df2:	4b54      	ldr	r3, [pc, #336]	; (8000f44 <main+0x364>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df8:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000dfc:	f102 02e0 	add.w	r2, r2, #224	; 0xe0
 8000e00:	6013      	str	r3, [r2, #0]

    // Perform inference
    nbatch = ai_audio_model_run(audio_model, &ai_input[0], &ai_output[0]);
 8000e02:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8000e06:	f6a3 13c8 	subw	r3, r3, #2504	; 0x9c8
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000e10:	f102 02e4 	add.w	r2, r2, #228	; 0xe4
 8000e14:	6812      	ldr	r2, [r2, #0]
 8000e16:	f507 4129 	add.w	r1, r7, #43264	; 0xa900
 8000e1a:	f101 01e8 	add.w	r1, r1, #232	; 0xe8
 8000e1e:	6809      	ldr	r1, [r1, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f003 fbff 	bl	8004624 <ai_audio_model_run>
 8000e26:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000e2a:	f103 03dc 	add.w	r3, r3, #220	; 0xdc
 8000e2e:	6018      	str	r0, [r3, #0]
    if (nbatch != 1) {
 8000e30:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000e34:	f103 03dc 	add.w	r3, r3, #220	; 0xdc
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d01b      	beq.n	8000e76 <main+0x296>
      buf_len = sprintf(buf, "Error: could not run inference\r\n");
 8000e3e:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000e42:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 8000e46:	4945      	ldr	r1, [pc, #276]	; (8000f5c <main+0x37c>)
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f00d f9c9 	bl	800e1e0 <siprintf>
 8000e4e:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000e52:	f103 03ec 	add.w	r3, r3, #236	; 0xec
 8000e56:	6018      	str	r0, [r3, #0]
      HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8000e58:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000e5c:	f103 03ec 	add.w	r3, r3, #236	; 0xec
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	f507 4129 	add.w	r1, r7, #43264	; 0xa900
 8000e68:	f101 01a8 	add.w	r1, r1, #168	; 0xa8
 8000e6c:	2364      	movs	r3, #100	; 0x64
 8000e6e:	4837      	ldr	r0, [pc, #220]	; (8000f4c <main+0x36c>)
 8000e70:	f002 fc34 	bl	80036dc <HAL_UART_Transmit>
      while(1);
 8000e74:	e7fe      	b.n	8000e74 <main+0x294>
    }

    inf = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000e7c:	f102 02ff 	add.w	r2, r2, #255	; 0xff
 8000e80:	7013      	strb	r3, [r2, #0]
    maxVal = 0.0f;
 8000e82:	f04f 0300 	mov.w	r3, #0
 8000e86:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000e8a:	f102 02f8 	add.w	r2, r2, #248	; 0xf8
 8000e8e:	6013      	str	r3, [r2, #0]
    for(ai_u8 i = 0; i < AI_AUDIO_MODEL_OUT_1_SIZE; i++){
 8000e90:	2300      	movs	r3, #0
 8000e92:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000e96:	f102 02f3 	add.w	r2, r2, #243	; 0xf3
 8000e9a:	7013      	strb	r3, [r2, #0]
 8000e9c:	e03d      	b.n	8000f1a <main+0x33a>
      if(out_data[i]>maxVal){
 8000e9e:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000ea2:	f103 03f3 	add.w	r3, r3, #243	; 0xf3
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8000eac:	f6a2 12c4 	subw	r2, r2, #2500	; 0x9c4
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	edd3 7a00 	vldr	s15, [r3]
 8000eb8:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000ebc:	f103 03f8 	add.w	r3, r3, #248	; 0xf8
 8000ec0:	ed93 7a00 	vldr	s14, [r3]
 8000ec4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ecc:	d51a      	bpl.n	8000f04 <main+0x324>
        inf = i;
 8000ece:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000ed2:	f103 03f3 	add.w	r3, r3, #243	; 0xf3
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000edc:	f102 02ff 	add.w	r2, r2, #255	; 0xff
 8000ee0:	7013      	strb	r3, [r2, #0]
        maxVal = out_data[i];
 8000ee2:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000ee6:	f103 03f3 	add.w	r3, r3, #243	; 0xf3
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8000ef0:	f6a2 12c4 	subw	r2, r2, #2500	; 0x9c4
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4413      	add	r3, r2
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000efe:	f102 02f8 	add.w	r2, r2, #248	; 0xf8
 8000f02:	6013      	str	r3, [r2, #0]
    for(ai_u8 i = 0; i < AI_AUDIO_MODEL_OUT_1_SIZE; i++){
 8000f04:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000f08:	f103 03f3 	add.w	r3, r3, #243	; 0xf3
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000f14:	f102 02f3 	add.w	r2, r2, #243	; 0xf3
 8000f18:	7013      	strb	r3, [r2, #0]
 8000f1a:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000f1e:	f103 03f3 	add.w	r3, r3, #243	; 0xf3
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b09      	cmp	r3, #9
 8000f26:	d9ba      	bls.n	8000e9e <main+0x2be>
      }
    }

    if(inf == 3){
 8000f28:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000f2c:	f103 03ff 	add.w	r3, r3, #255	; 0xff
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d116      	bne.n	8000f64 <main+0x384>
    	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);
 8000f36:	2201      	movs	r2, #1
 8000f38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f3c:	4808      	ldr	r0, [pc, #32]	; (8000f60 <main+0x380>)
 8000f3e:	f000 fedd 	bl	8001cfc <HAL_GPIO_WritePin>
 8000f42:	e015      	b.n	8000f70 <main+0x390>
 8000f44:	20002614 	.word	0x20002614
 8000f48:	0800f120 	.word	0x0800f120
 8000f4c:	20002660 	.word	0x20002660
 8000f50:	0800f13c 	.word	0x0800f13c
 8000f54:	0800f164 	.word	0x0800f164
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	0800f188 	.word	0x0800f188
 8000f60:	48001800 	.word	0x48001800
    }
    else{
    	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f6a:	4818      	ldr	r0, [pc, #96]	; (8000fcc <main+0x3ec>)
 8000f6c:	f000 fec6 	bl	8001cfc <HAL_GPIO_WritePin>
    }

    // Print output of neural network along with inference time (microseconds)
    buf_len = sprintf(buf, "Output: %d | Duration: %u\r\n", inf, (unsigned int)(htim16.Instance->CNT - timestamp));
 8000f70:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000f74:	f103 03ff 	add.w	r3, r3, #255	; 0xff
 8000f78:	7819      	ldrb	r1, [r3, #0]
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <main+0x3f0>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f80:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000f84:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	f507 4029 	add.w	r0, r7, #43264	; 0xa900
 8000f90:	f100 00a8 	add.w	r0, r0, #168	; 0xa8
 8000f94:	460a      	mov	r2, r1
 8000f96:	490f      	ldr	r1, [pc, #60]	; (8000fd4 <main+0x3f4>)
 8000f98:	f00d f922 	bl	800e1e0 <siprintf>
 8000f9c:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000fa0:	f103 03ec 	add.w	r3, r3, #236	; 0xec
 8000fa4:	6018      	str	r0, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)buf, buf_len, 100);
 8000fa6:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000faa:	f103 03ec 	add.w	r3, r3, #236	; 0xec
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	f507 4129 	add.w	r1, r7, #43264	; 0xa900
 8000fb6:	f101 01a8 	add.w	r1, r1, #168	; 0xa8
 8000fba:	2364      	movs	r3, #100	; 0x64
 8000fbc:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <main+0x3f8>)
 8000fbe:	f002 fb8d 	bl	80036dc <HAL_UART_Transmit>
//    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_12);

    // Wait before doing it again
    HAL_Delay(500);
 8000fc2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fc6:	f000 faf3 	bl	80015b0 <HAL_Delay>
    for (uint32_t i = 0; i < AI_AUDIO_MODEL_IN_1_SIZE; i++)
 8000fca:	e6e5      	b.n	8000d98 <main+0x1b8>
 8000fcc:	48001800 	.word	0x48001800
 8000fd0:	20002614 	.word	0x20002614
 8000fd4:	0800f1ac 	.word	0x0800f1ac
 8000fd8:	20002660 	.word	0x20002660

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b096      	sub	sp, #88	; 0x58
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	2244      	movs	r2, #68	; 0x44
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f00d f932 	bl	800e254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ffe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001002:	f000 fea1 	bl	8001d48 <HAL_PWREx_ControlVoltageScaling>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800100c:	f000 f8f2 	bl	80011f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001010:	2302      	movs	r3, #2
 8001012:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001014:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001018:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800101a:	2310      	movs	r3, #16
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101e:	2302      	movs	r3, #2
 8001020:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001022:	2302      	movs	r3, #2
 8001024:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001026:	2301      	movs	r3, #1
 8001028:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800102a:	230a      	movs	r3, #10
 800102c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800102e:	2307      	movs	r3, #7
 8001030:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001032:	2302      	movs	r3, #2
 8001034:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001036:	2302      	movs	r3, #2
 8001038:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4618      	mov	r0, r3
 8001040:	f000 fee8 	bl	8001e14 <HAL_RCC_OscConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800104a:	f000 f8d3 	bl	80011f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104e:	230f      	movs	r3, #15
 8001050:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001052:	2303      	movs	r3, #3
 8001054:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001062:	463b      	mov	r3, r7
 8001064:	2104      	movs	r1, #4
 8001066:	4618      	mov	r0, r3
 8001068:	f001 fab0 	bl	80025cc <HAL_RCC_ClockConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001072:	f000 f8bf 	bl	80011f4 <Error_Handler>
  }
}
 8001076:	bf00      	nop
 8001078:	3758      	adds	r7, #88	; 0x58
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <MX_CRC_Init+0x3c>)
 8001086:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <MX_CRC_Init+0x40>)
 8001088:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_CRC_Init+0x3c>)
 800108c:	2200      	movs	r2, #0
 800108e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <MX_CRC_Init+0x3c>)
 8001092:	2200      	movs	r2, #0
 8001094:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_CRC_Init+0x3c>)
 8001098:	2200      	movs	r2, #0
 800109a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <MX_CRC_Init+0x3c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <MX_CRC_Init+0x3c>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010a8:	4804      	ldr	r0, [pc, #16]	; (80010bc <MX_CRC_Init+0x3c>)
 80010aa:	f000 fb8b 	bl	80017c4 <HAL_CRC_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80010b4:	f000 f89e 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200025f0 	.word	0x200025f0
 80010c0:	40023000 	.word	0x40023000

080010c4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_TIM16_Init+0x44>)
 80010ca:	4a10      	ldr	r2, [pc, #64]	; (800110c <MX_TIM16_Init+0x48>)
 80010cc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80-1;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_TIM16_Init+0x44>)
 80010d0:	224f      	movs	r2, #79	; 0x4f
 80010d2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_TIM16_Init+0x44>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <MX_TIM16_Init+0x44>)
 80010dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_TIM16_Init+0x44>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <MX_TIM16_Init+0x44>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_TIM16_Init+0x44>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <MX_TIM16_Init+0x44>)
 80010f6:	f002 f949 	bl	800338c <HAL_TIM_Base_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001100:	f000 f878 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20002614 	.word	0x20002614
 800110c:	40014400 	.word	0x40014400

08001110 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_USART2_UART_Init+0x58>)
 8001116:	4a15      	ldr	r2, [pc, #84]	; (800116c <MX_USART2_UART_Init+0x5c>)
 8001118:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800111a:	4b13      	ldr	r3, [pc, #76]	; (8001168 <MX_USART2_UART_Init+0x58>)
 800111c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001120:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_USART2_UART_Init+0x58>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_USART2_UART_Init+0x58>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_USART2_UART_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_USART2_UART_Init+0x58>)
 8001136:	220c      	movs	r2, #12
 8001138:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <MX_USART2_UART_Init+0x58>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_USART2_UART_Init+0x58>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <MX_USART2_UART_Init+0x58>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_USART2_UART_Init+0x58>)
 800114e:	2200      	movs	r2, #0
 8001150:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_USART2_UART_Init+0x58>)
 8001154:	f002 fa74 	bl	8003640 <HAL_UART_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800115e:	f000 f849 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20002660 	.word	0x20002660
 800116c:	40004400 	.word	0x40004400

08001170 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <MX_GPIO_Init+0x7c>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	4a18      	ldr	r2, [pc, #96]	; (80011ec <MX_GPIO_Init+0x7c>)
 800118c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_GPIO_Init+0x7c>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800119e:	f000 fe29 	bl	8001df4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <MX_GPIO_Init+0x7c>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	4a11      	ldr	r2, [pc, #68]	; (80011ec <MX_GPIO_Init+0x7c>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <MX_GPIO_Init+0x7c>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c0:	480b      	ldr	r0, [pc, #44]	; (80011f0 <MX_GPIO_Init+0x80>)
 80011c2:	f000 fd9b 	bl	8001cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	4619      	mov	r1, r3
 80011de:	4804      	ldr	r0, [pc, #16]	; (80011f0 <MX_GPIO_Init+0x80>)
 80011e0:	f000 fbe2 	bl	80019a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011e4:	bf00      	nop
 80011e6:	3720      	adds	r7, #32
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40021000 	.word	0x40021000
 80011f0:	48001800 	.word	0x48001800

080011f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011fc:	e7fe      	b.n	80011fc <Error_Handler+0x8>
	...

08001200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <HAL_MspInit+0x44>)
 8001208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120a:	4a0e      	ldr	r2, [pc, #56]	; (8001244 <HAL_MspInit+0x44>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6613      	str	r3, [r2, #96]	; 0x60
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <HAL_MspInit+0x44>)
 8001214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_MspInit+0x44>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001222:	4a08      	ldr	r2, [pc, #32]	; (8001244 <HAL_MspInit+0x44>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	6593      	str	r3, [r2, #88]	; 0x58
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_MspInit+0x44>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000

08001248 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <HAL_CRC_MspInit+0x38>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d10b      	bne.n	8001272 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_CRC_MspInit+0x3c>)
 800125c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800125e:	4a09      	ldr	r2, [pc, #36]	; (8001284 <HAL_CRC_MspInit+0x3c>)
 8001260:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001264:	6493      	str	r3, [r2, #72]	; 0x48
 8001266:	4b07      	ldr	r3, [pc, #28]	; (8001284 <HAL_CRC_MspInit+0x3c>)
 8001268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800126a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40023000 	.word	0x40023000
 8001284:	40021000 	.word	0x40021000

08001288 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <HAL_TIM_Base_MspInit+0x38>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d10b      	bne.n	80012b2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800129a:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <HAL_TIM_Base_MspInit+0x3c>)
 800129c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129e:	4a09      	ldr	r2, [pc, #36]	; (80012c4 <HAL_TIM_Base_MspInit+0x3c>)
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a4:	6613      	str	r3, [r2, #96]	; 0x60
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <HAL_TIM_Base_MspInit+0x3c>)
 80012a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80012b2:	bf00      	nop
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40014400 	.word	0x40014400
 80012c4:	40021000 	.word	0x40021000

080012c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b0ac      	sub	sp, #176	; 0xb0
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2288      	movs	r2, #136	; 0x88
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f00c ffb3 	bl	800e254 <memset>
  if(huart->Instance==USART2)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a21      	ldr	r2, [pc, #132]	; (8001378 <HAL_UART_MspInit+0xb0>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d13b      	bne.n	8001370 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012f8:	2302      	movs	r3, #2
 80012fa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4618      	mov	r0, r3
 8001306:	f001 fb85 	bl	8002a14 <HAL_RCCEx_PeriphCLKConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001310:	f7ff ff70 	bl	80011f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <HAL_UART_MspInit+0xb4>)
 8001316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001318:	4a18      	ldr	r2, [pc, #96]	; (800137c <HAL_UART_MspInit+0xb4>)
 800131a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800131e:	6593      	str	r3, [r2, #88]	; 0x58
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <HAL_UART_MspInit+0xb4>)
 8001322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132c:	4b13      	ldr	r3, [pc, #76]	; (800137c <HAL_UART_MspInit+0xb4>)
 800132e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001330:	4a12      	ldr	r2, [pc, #72]	; (800137c <HAL_UART_MspInit+0xb4>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001338:	4b10      	ldr	r3, [pc, #64]	; (800137c <HAL_UART_MspInit+0xb4>)
 800133a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001344:	230c      	movs	r3, #12
 8001346:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	2303      	movs	r3, #3
 8001358:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800135c:	2307      	movs	r3, #7
 800135e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001366:	4619      	mov	r1, r3
 8001368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136c:	f000 fb1c 	bl	80019a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001370:	bf00      	nop
 8001372:	37b0      	adds	r7, #176	; 0xb0
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40004400 	.word	0x40004400
 800137c:	40021000 	.word	0x40021000

08001380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <NMI_Handler+0x4>

08001386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <HardFault_Handler+0x4>

0800138c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <MemManage_Handler+0x4>

08001392 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <BusFault_Handler+0x4>

08001398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <UsageFault_Handler+0x4>

0800139e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013cc:	f000 f8d0 	bl	8001570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013dc:	4a14      	ldr	r2, [pc, #80]	; (8001430 <_sbrk+0x5c>)
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <_sbrk+0x60>)
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <_sbrk+0x64>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d102      	bne.n	80013f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <_sbrk+0x64>)
 80013f2:	4a12      	ldr	r2, [pc, #72]	; (800143c <_sbrk+0x68>)
 80013f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <_sbrk+0x64>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	429a      	cmp	r2, r3
 8001402:	d207      	bcs.n	8001414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001404:	f00c ff3e 	bl	800e284 <__errno>
 8001408:	4603      	mov	r3, r0
 800140a:	220c      	movs	r2, #12
 800140c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800140e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001412:	e009      	b.n	8001428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <_sbrk+0x64>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <_sbrk+0x64>)
 8001424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001426:	68fb      	ldr	r3, [r7, #12]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20018000 	.word	0x20018000
 8001434:	00000800 	.word	0x00000800
 8001438:	200026e8 	.word	0x200026e8
 800143c:	20002930 	.word	0x20002930

08001440 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <SystemInit+0x20>)
 8001446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800144a:	4a05      	ldr	r2, [pc, #20]	; (8001460 <SystemInit+0x20>)
 800144c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001464:	f8df d034 	ldr.w	sp, [pc, #52]	; 800149c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001468:	f7ff ffea 	bl	8001440 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800146c:	480c      	ldr	r0, [pc, #48]	; (80014a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800146e:	490d      	ldr	r1, [pc, #52]	; (80014a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001470:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <LoopForever+0xe>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001484:	4c0a      	ldr	r4, [pc, #40]	; (80014b0 <LoopForever+0x16>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001492:	f00c fefd 	bl	800e290 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001496:	f7ff fba3 	bl	8000be0 <main>

0800149a <LoopForever>:

LoopForever:
    b LoopForever
 800149a:	e7fe      	b.n	800149a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800149c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a4:	200025d4 	.word	0x200025d4
  ldr r2, =_sidata
 80014a8:	080155d4 	.word	0x080155d4
  ldr r2, =_sbss
 80014ac:	200025d4 	.word	0x200025d4
  ldr r4, =_ebss
 80014b0:	2000292c 	.word	0x2000292c

080014b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014b4:	e7fe      	b.n	80014b4 <ADC1_2_IRQHandler>
	...

080014b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <HAL_Init+0x3c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <HAL_Init+0x3c>)
 80014c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014cc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ce:	2003      	movs	r0, #3
 80014d0:	f000 f944 	bl	800175c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014d4:	200f      	movs	r0, #15
 80014d6:	f000 f80f 	bl	80014f8 <HAL_InitTick>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	71fb      	strb	r3, [r7, #7]
 80014e4:	e001      	b.n	80014ea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014e6:	f7ff fe8b 	bl	8001200 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014ea:	79fb      	ldrb	r3, [r7, #7]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40022000 	.word	0x40022000

080014f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <HAL_InitTick+0x6c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d023      	beq.n	8001554 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <HAL_InitTick+0x70>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <HAL_InitTick+0x6c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	fbb3 f3f1 	udiv	r3, r3, r1
 800151e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f000 f941 	bl	80017aa <HAL_SYSTICK_Config>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10f      	bne.n	800154e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b0f      	cmp	r3, #15
 8001532:	d809      	bhi.n	8001548 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001534:	2200      	movs	r2, #0
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800153c:	f000 f919 	bl	8001772 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001540:	4a0a      	ldr	r2, [pc, #40]	; (800156c <HAL_InitTick+0x74>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e007      	b.n	8001558 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	e004      	b.n	8001558 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	73fb      	strb	r3, [r7, #15]
 8001552:	e001      	b.n	8001558 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001558:	7bfb      	ldrb	r3, [r7, #15]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20001808 	.word	0x20001808
 8001568:	20001800 	.word	0x20001800
 800156c:	20001804 	.word	0x20001804

08001570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_IncTick+0x20>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_IncTick+0x24>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4413      	add	r3, r2
 8001580:	4a04      	ldr	r2, [pc, #16]	; (8001594 <HAL_IncTick+0x24>)
 8001582:	6013      	str	r3, [r2, #0]
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20001808 	.word	0x20001808
 8001594:	200026ec 	.word	0x200026ec

08001598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return uwTick;
 800159c:	4b03      	ldr	r3, [pc, #12]	; (80015ac <HAL_GetTick+0x14>)
 800159e:	681b      	ldr	r3, [r3, #0]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	200026ec 	.word	0x200026ec

080015b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b8:	f7ff ffee 	bl	8001598 <HAL_GetTick>
 80015bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015c8:	d005      	beq.n	80015d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015ca:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <HAL_Delay+0x44>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4413      	add	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015d6:	bf00      	nop
 80015d8:	f7ff ffde 	bl	8001598 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d8f7      	bhi.n	80015d8 <HAL_Delay+0x28>
  {
  }
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20001808 	.word	0x20001808

080015f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001614:	4013      	ands	r3, r2
 8001616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162a:	4a04      	ldr	r2, [pc, #16]	; (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	60d3      	str	r3, [r2, #12]
}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <__NVIC_GetPriorityGrouping+0x18>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	0a1b      	lsrs	r3, r3, #8
 800164a:	f003 0307 	and.w	r3, r3, #7
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	6039      	str	r1, [r7, #0]
 8001666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	2b00      	cmp	r3, #0
 800166e:	db0a      	blt.n	8001686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	b2da      	uxtb	r2, r3
 8001674:	490c      	ldr	r1, [pc, #48]	; (80016a8 <__NVIC_SetPriority+0x4c>)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	0112      	lsls	r2, r2, #4
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	440b      	add	r3, r1
 8001680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001684:	e00a      	b.n	800169c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4908      	ldr	r1, [pc, #32]	; (80016ac <__NVIC_SetPriority+0x50>)
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	3b04      	subs	r3, #4
 8001694:	0112      	lsls	r2, r2, #4
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	440b      	add	r3, r1
 800169a:	761a      	strb	r2, [r3, #24]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000e100 	.word	0xe000e100
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f1c3 0307 	rsb	r3, r3, #7
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	bf28      	it	cs
 80016ce:	2304      	movcs	r3, #4
 80016d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3304      	adds	r3, #4
 80016d6:	2b06      	cmp	r3, #6
 80016d8:	d902      	bls.n	80016e0 <NVIC_EncodePriority+0x30>
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3b03      	subs	r3, #3
 80016de:	e000      	b.n	80016e2 <NVIC_EncodePriority+0x32>
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	401a      	ands	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	43d9      	mvns	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	4313      	orrs	r3, r2
         );
}
 800170a:	4618      	mov	r0, r3
 800170c:	3724      	adds	r7, #36	; 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3b01      	subs	r3, #1
 8001724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001728:	d301      	bcc.n	800172e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172a:	2301      	movs	r3, #1
 800172c:	e00f      	b.n	800174e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172e:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <SysTick_Config+0x40>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001736:	210f      	movs	r1, #15
 8001738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800173c:	f7ff ff8e 	bl	800165c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <SysTick_Config+0x40>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001746:	4b04      	ldr	r3, [pc, #16]	; (8001758 <SysTick_Config+0x40>)
 8001748:	2207      	movs	r2, #7
 800174a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	e000e010 	.word	0xe000e010

0800175c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ff47 	bl	80015f8 <__NVIC_SetPriorityGrouping>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
 800177e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001784:	f7ff ff5c 	bl	8001640 <__NVIC_GetPriorityGrouping>
 8001788:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	68b9      	ldr	r1, [r7, #8]
 800178e:	6978      	ldr	r0, [r7, #20]
 8001790:	f7ff ff8e 	bl	80016b0 <NVIC_EncodePriority>
 8001794:	4602      	mov	r2, r0
 8001796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff5d 	bl	800165c <__NVIC_SetPriority>
}
 80017a2:	bf00      	nop
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff ffb0 	bl	8001718 <SysTick_Config>
 80017b8:	4603      	mov	r3, r0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e054      	b.n	8001880 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	7f5b      	ldrb	r3, [r3, #29]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d105      	bne.n	80017ec <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff fd2e 	bl	8001248 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2202      	movs	r2, #2
 80017f0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	791b      	ldrb	r3, [r3, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10c      	bne.n	8001814 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a22      	ldr	r2, [pc, #136]	; (8001888 <HAL_CRC_Init+0xc4>)
 8001800:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0218 	bic.w	r2, r2, #24
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	e00c      	b.n	800182e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6899      	ldr	r1, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	461a      	mov	r2, r3
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 f834 	bl	800188c <HAL_CRCEx_Polynomial_Set>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e028      	b.n	8001880 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	795b      	ldrb	r3, [r3, #5]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d105      	bne.n	8001842 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800183e:	611a      	str	r2, [r3, #16]
 8001840:	e004      	b.n	800184c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6912      	ldr	r2, [r2, #16]
 800184a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695a      	ldr	r2, [r3, #20]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	699a      	ldr	r2, [r3, #24]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	04c11db7 	.word	0x04c11db7

0800188c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800188c:	b480      	push	{r7}
 800188e:	b087      	sub	sp, #28
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800189c:	231f      	movs	r3, #31
 800189e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d102      	bne.n	80018b0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	75fb      	strb	r3, [r7, #23]
 80018ae:	e063      	b.n	8001978 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80018b0:	bf00      	nop
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1e5a      	subs	r2, r3, #1
 80018b6:	613a      	str	r2, [r7, #16]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d009      	beq.n	80018d0 <HAL_CRCEx_Polynomial_Set+0x44>
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	f003 031f 	and.w	r3, r3, #31
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	fa22 f303 	lsr.w	r3, r2, r3
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0f0      	beq.n	80018b2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b18      	cmp	r3, #24
 80018d4:	d846      	bhi.n	8001964 <HAL_CRCEx_Polynomial_Set+0xd8>
 80018d6:	a201      	add	r2, pc, #4	; (adr r2, 80018dc <HAL_CRCEx_Polynomial_Set+0x50>)
 80018d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018dc:	0800196b 	.word	0x0800196b
 80018e0:	08001965 	.word	0x08001965
 80018e4:	08001965 	.word	0x08001965
 80018e8:	08001965 	.word	0x08001965
 80018ec:	08001965 	.word	0x08001965
 80018f0:	08001965 	.word	0x08001965
 80018f4:	08001965 	.word	0x08001965
 80018f8:	08001965 	.word	0x08001965
 80018fc:	08001959 	.word	0x08001959
 8001900:	08001965 	.word	0x08001965
 8001904:	08001965 	.word	0x08001965
 8001908:	08001965 	.word	0x08001965
 800190c:	08001965 	.word	0x08001965
 8001910:	08001965 	.word	0x08001965
 8001914:	08001965 	.word	0x08001965
 8001918:	08001965 	.word	0x08001965
 800191c:	0800194d 	.word	0x0800194d
 8001920:	08001965 	.word	0x08001965
 8001924:	08001965 	.word	0x08001965
 8001928:	08001965 	.word	0x08001965
 800192c:	08001965 	.word	0x08001965
 8001930:	08001965 	.word	0x08001965
 8001934:	08001965 	.word	0x08001965
 8001938:	08001965 	.word	0x08001965
 800193c:	08001941 	.word	0x08001941
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	2b06      	cmp	r3, #6
 8001944:	d913      	bls.n	800196e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800194a:	e010      	b.n	800196e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	2b07      	cmp	r3, #7
 8001950:	d90f      	bls.n	8001972 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001956:	e00c      	b.n	8001972 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	2b0f      	cmp	r3, #15
 800195c:	d90b      	bls.n	8001976 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001962:	e008      	b.n	8001976 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	75fb      	strb	r3, [r7, #23]
        break;
 8001968:	e006      	b.n	8001978 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800196a:	bf00      	nop
 800196c:	e004      	b.n	8001978 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800196e:	bf00      	nop
 8001970:	e002      	b.n	8001978 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001972:	bf00      	nop
 8001974:	e000      	b.n	8001978 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001976:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001978:	7dfb      	ldrb	r3, [r7, #23]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10d      	bne.n	800199a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f023 0118 	bic.w	r1, r3, #24
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	430a      	orrs	r2, r1
 8001998:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800199a:	7dfb      	ldrb	r3, [r7, #23]
}
 800199c:	4618      	mov	r0, r3
 800199e:	371c      	adds	r7, #28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b6:	e17f      	b.n	8001cb8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	2101      	movs	r1, #1
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	4013      	ands	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 8171 	beq.w	8001cb2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d005      	beq.n	80019e8 <HAL_GPIO_Init+0x40>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d130      	bne.n	8001a4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	2203      	movs	r2, #3
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a1e:	2201      	movs	r2, #1
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	091b      	lsrs	r3, r3, #4
 8001a34:	f003 0201 	and.w	r2, r3, #1
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d118      	bne.n	8001a88 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	08db      	lsrs	r3, r3, #3
 8001a72:	f003 0201 	and.w	r2, r3, #1
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d017      	beq.n	8001ac4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d123      	bne.n	8001b18 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	08da      	lsrs	r2, r3, #3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3208      	adds	r2, #8
 8001ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001adc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	220f      	movs	r2, #15
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	691a      	ldr	r2, [r3, #16]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	08da      	lsrs	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3208      	adds	r2, #8
 8001b12:	6939      	ldr	r1, [r7, #16]
 8001b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	2203      	movs	r2, #3
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0203 	and.w	r2, r3, #3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 80ac 	beq.w	8001cb2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5a:	4b5f      	ldr	r3, [pc, #380]	; (8001cd8 <HAL_GPIO_Init+0x330>)
 8001b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b5e:	4a5e      	ldr	r2, [pc, #376]	; (8001cd8 <HAL_GPIO_Init+0x330>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6613      	str	r3, [r2, #96]	; 0x60
 8001b66:	4b5c      	ldr	r3, [pc, #368]	; (8001cd8 <HAL_GPIO_Init+0x330>)
 8001b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b72:	4a5a      	ldr	r2, [pc, #360]	; (8001cdc <HAL_GPIO_Init+0x334>)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	3302      	adds	r3, #2
 8001b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	220f      	movs	r2, #15
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4013      	ands	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b9c:	d025      	beq.n	8001bea <HAL_GPIO_Init+0x242>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4f      	ldr	r2, [pc, #316]	; (8001ce0 <HAL_GPIO_Init+0x338>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d01f      	beq.n	8001be6 <HAL_GPIO_Init+0x23e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4e      	ldr	r2, [pc, #312]	; (8001ce4 <HAL_GPIO_Init+0x33c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d019      	beq.n	8001be2 <HAL_GPIO_Init+0x23a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4d      	ldr	r2, [pc, #308]	; (8001ce8 <HAL_GPIO_Init+0x340>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d013      	beq.n	8001bde <HAL_GPIO_Init+0x236>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4c      	ldr	r2, [pc, #304]	; (8001cec <HAL_GPIO_Init+0x344>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00d      	beq.n	8001bda <HAL_GPIO_Init+0x232>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4b      	ldr	r2, [pc, #300]	; (8001cf0 <HAL_GPIO_Init+0x348>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d007      	beq.n	8001bd6 <HAL_GPIO_Init+0x22e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4a      	ldr	r2, [pc, #296]	; (8001cf4 <HAL_GPIO_Init+0x34c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d101      	bne.n	8001bd2 <HAL_GPIO_Init+0x22a>
 8001bce:	2306      	movs	r3, #6
 8001bd0:	e00c      	b.n	8001bec <HAL_GPIO_Init+0x244>
 8001bd2:	2307      	movs	r3, #7
 8001bd4:	e00a      	b.n	8001bec <HAL_GPIO_Init+0x244>
 8001bd6:	2305      	movs	r3, #5
 8001bd8:	e008      	b.n	8001bec <HAL_GPIO_Init+0x244>
 8001bda:	2304      	movs	r3, #4
 8001bdc:	e006      	b.n	8001bec <HAL_GPIO_Init+0x244>
 8001bde:	2303      	movs	r3, #3
 8001be0:	e004      	b.n	8001bec <HAL_GPIO_Init+0x244>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e002      	b.n	8001bec <HAL_GPIO_Init+0x244>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <HAL_GPIO_Init+0x244>
 8001bea:	2300      	movs	r3, #0
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	f002 0203 	and.w	r2, r2, #3
 8001bf2:	0092      	lsls	r2, r2, #2
 8001bf4:	4093      	lsls	r3, r2
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bfc:	4937      	ldr	r1, [pc, #220]	; (8001cdc <HAL_GPIO_Init+0x334>)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	3302      	adds	r3, #2
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c0a:	4b3b      	ldr	r3, [pc, #236]	; (8001cf8 <HAL_GPIO_Init+0x350>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c2e:	4a32      	ldr	r2, [pc, #200]	; (8001cf8 <HAL_GPIO_Init+0x350>)
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c34:	4b30      	ldr	r3, [pc, #192]	; (8001cf8 <HAL_GPIO_Init+0x350>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c58:	4a27      	ldr	r2, [pc, #156]	; (8001cf8 <HAL_GPIO_Init+0x350>)
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c5e:	4b26      	ldr	r3, [pc, #152]	; (8001cf8 <HAL_GPIO_Init+0x350>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c82:	4a1d      	ldr	r2, [pc, #116]	; (8001cf8 <HAL_GPIO_Init+0x350>)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <HAL_GPIO_Init+0x350>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cac:	4a12      	ldr	r2, [pc, #72]	; (8001cf8 <HAL_GPIO_Init+0x350>)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f47f ae78 	bne.w	80019b8 <HAL_GPIO_Init+0x10>
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	371c      	adds	r7, #28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40010000 	.word	0x40010000
 8001ce0:	48000400 	.word	0x48000400
 8001ce4:	48000800 	.word	0x48000800
 8001ce8:	48000c00 	.word	0x48000c00
 8001cec:	48001000 	.word	0x48001000
 8001cf0:	48001400 	.word	0x48001400
 8001cf4:	48001800 	.word	0x48001800
 8001cf8:	40010400 	.word	0x40010400

08001cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	807b      	strh	r3, [r7, #2]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d0c:	787b      	ldrb	r3, [r7, #1]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d12:	887a      	ldrh	r2, [r7, #2]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d18:	e002      	b.n	8001d20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d1a:	887a      	ldrh	r2, [r7, #2]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d30:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40007000 	.word	0x40007000

08001d48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d56:	d130      	bne.n	8001dba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d58:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d64:	d038      	beq.n	8001dd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d66:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d6e:	4a1e      	ldr	r2, [pc, #120]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d76:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2232      	movs	r2, #50	; 0x32
 8001d7c:	fb02 f303 	mul.w	r3, r2, r3
 8001d80:	4a1b      	ldr	r2, [pc, #108]	; (8001df0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d82:	fba2 2303 	umull	r2, r3, r2, r3
 8001d86:	0c9b      	lsrs	r3, r3, #18
 8001d88:	3301      	adds	r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d8c:	e002      	b.n	8001d94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d94:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da0:	d102      	bne.n	8001da8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f2      	bne.n	8001d8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db4:	d110      	bne.n	8001dd8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e00f      	b.n	8001dda <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dba:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc6:	d007      	beq.n	8001dd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dd0:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dd6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40007000 	.word	0x40007000
 8001dec:	20001800 	.word	0x20001800
 8001df0:	431bde83 	.word	0x431bde83

08001df4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e02:	6053      	str	r3, [r2, #4]
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40007000 	.word	0x40007000

08001e14 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e3ca      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e26:	4b97      	ldr	r3, [pc, #604]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e30:	4b94      	ldr	r3, [pc, #592]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 80e4 	beq.w	8002010 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <HAL_RCC_OscConfig+0x4a>
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	2b0c      	cmp	r3, #12
 8001e52:	f040 808b 	bne.w	8001f6c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	f040 8087 	bne.w	8001f6c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e5e:	4b89      	ldr	r3, [pc, #548]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d005      	beq.n	8001e76 <HAL_RCC_OscConfig+0x62>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e3a2      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a1a      	ldr	r2, [r3, #32]
 8001e7a:	4b82      	ldr	r3, [pc, #520]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d004      	beq.n	8001e90 <HAL_RCC_OscConfig+0x7c>
 8001e86:	4b7f      	ldr	r3, [pc, #508]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e8e:	e005      	b.n	8001e9c <HAL_RCC_OscConfig+0x88>
 8001e90:	4b7c      	ldr	r3, [pc, #496]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e96:	091b      	lsrs	r3, r3, #4
 8001e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d223      	bcs.n	8001ee8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f000 fd55 	bl	8002954 <RCC_SetFlashLatencyFromMSIRange>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e383      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eb4:	4b73      	ldr	r3, [pc, #460]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a72      	ldr	r2, [pc, #456]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001eba:	f043 0308 	orr.w	r3, r3, #8
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	4b70      	ldr	r3, [pc, #448]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	496d      	ldr	r1, [pc, #436]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ed2:	4b6c      	ldr	r3, [pc, #432]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	4968      	ldr	r1, [pc, #416]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	604b      	str	r3, [r1, #4]
 8001ee6:	e025      	b.n	8001f34 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ee8:	4b66      	ldr	r3, [pc, #408]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a65      	ldr	r2, [pc, #404]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001eee:	f043 0308 	orr.w	r3, r3, #8
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	4b63      	ldr	r3, [pc, #396]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4960      	ldr	r1, [pc, #384]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f06:	4b5f      	ldr	r3, [pc, #380]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	021b      	lsls	r3, r3, #8
 8001f14:	495b      	ldr	r1, [pc, #364]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d109      	bne.n	8001f34 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 fd15 	bl	8002954 <RCC_SetFlashLatencyFromMSIRange>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e343      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f34:	f000 fc4a 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	4b52      	ldr	r3, [pc, #328]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	f003 030f 	and.w	r3, r3, #15
 8001f44:	4950      	ldr	r1, [pc, #320]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001f46:	5ccb      	ldrb	r3, [r1, r3]
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f50:	4a4e      	ldr	r2, [pc, #312]	; (800208c <HAL_RCC_OscConfig+0x278>)
 8001f52:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f54:	4b4e      	ldr	r3, [pc, #312]	; (8002090 <HAL_RCC_OscConfig+0x27c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff facd 	bl	80014f8 <HAL_InitTick>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d052      	beq.n	800200e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	e327      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d032      	beq.n	8001fda <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f74:	4b43      	ldr	r3, [pc, #268]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a42      	ldr	r2, [pc, #264]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f80:	f7ff fb0a 	bl	8001598 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f88:	f7ff fb06 	bl	8001598 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e310      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f9a:	4b3a      	ldr	r3, [pc, #232]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0f0      	beq.n	8001f88 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fa6:	4b37      	ldr	r3, [pc, #220]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a36      	ldr	r2, [pc, #216]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001fac:	f043 0308 	orr.w	r3, r3, #8
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	4b34      	ldr	r3, [pc, #208]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	4931      	ldr	r1, [pc, #196]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fc4:	4b2f      	ldr	r3, [pc, #188]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	492c      	ldr	r1, [pc, #176]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
 8001fd8:	e01a      	b.n	8002010 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fda:	4b2a      	ldr	r3, [pc, #168]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a29      	ldr	r2, [pc, #164]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001fe0:	f023 0301 	bic.w	r3, r3, #1
 8001fe4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fe6:	f7ff fad7 	bl	8001598 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fee:	f7ff fad3 	bl	8001598 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e2dd      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002000:	4b20      	ldr	r3, [pc, #128]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_OscConfig+0x1da>
 800200c:	e000      	b.n	8002010 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800200e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d074      	beq.n	8002106 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	2b08      	cmp	r3, #8
 8002020:	d005      	beq.n	800202e <HAL_RCC_OscConfig+0x21a>
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	2b0c      	cmp	r3, #12
 8002026:	d10e      	bne.n	8002046 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	2b03      	cmp	r3, #3
 800202c:	d10b      	bne.n	8002046 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202e:	4b15      	ldr	r3, [pc, #84]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d064      	beq.n	8002104 <HAL_RCC_OscConfig+0x2f0>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d160      	bne.n	8002104 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e2ba      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204e:	d106      	bne.n	800205e <HAL_RCC_OscConfig+0x24a>
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0b      	ldr	r2, [pc, #44]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8002056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	e026      	b.n	80020ac <HAL_RCC_OscConfig+0x298>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002066:	d115      	bne.n	8002094 <HAL_RCC_OscConfig+0x280>
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a05      	ldr	r2, [pc, #20]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 800206e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	4b03      	ldr	r3, [pc, #12]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a02      	ldr	r2, [pc, #8]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 800207a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	e014      	b.n	80020ac <HAL_RCC_OscConfig+0x298>
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000
 8002088:	0800f1f8 	.word	0x0800f1f8
 800208c:	20001800 	.word	0x20001800
 8002090:	20001804 	.word	0x20001804
 8002094:	4ba0      	ldr	r3, [pc, #640]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a9f      	ldr	r2, [pc, #636]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 800209a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	4b9d      	ldr	r3, [pc, #628]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a9c      	ldr	r2, [pc, #624]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 80020a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d013      	beq.n	80020dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b4:	f7ff fa70 	bl	8001598 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020bc:	f7ff fa6c 	bl	8001598 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	; 0x64
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e276      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ce:	4b92      	ldr	r3, [pc, #584]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0f0      	beq.n	80020bc <HAL_RCC_OscConfig+0x2a8>
 80020da:	e014      	b.n	8002106 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7ff fa5c 	bl	8001598 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e4:	f7ff fa58 	bl	8001598 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b64      	cmp	r3, #100	; 0x64
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e262      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020f6:	4b88      	ldr	r3, [pc, #544]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x2d0>
 8002102:	e000      	b.n	8002106 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d060      	beq.n	80021d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	2b04      	cmp	r3, #4
 8002116:	d005      	beq.n	8002124 <HAL_RCC_OscConfig+0x310>
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	2b0c      	cmp	r3, #12
 800211c:	d119      	bne.n	8002152 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2b02      	cmp	r3, #2
 8002122:	d116      	bne.n	8002152 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002124:	4b7c      	ldr	r3, [pc, #496]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <HAL_RCC_OscConfig+0x328>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e23f      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213c:	4b76      	ldr	r3, [pc, #472]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	061b      	lsls	r3, r3, #24
 800214a:	4973      	ldr	r1, [pc, #460]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002150:	e040      	b.n	80021d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d023      	beq.n	80021a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800215a:	4b6f      	ldr	r3, [pc, #444]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a6e      	ldr	r2, [pc, #440]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 8002160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002166:	f7ff fa17 	bl	8001598 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800216e:	f7ff fa13 	bl	8001598 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e21d      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002180:	4b65      	ldr	r3, [pc, #404]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218c:	4b62      	ldr	r3, [pc, #392]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	061b      	lsls	r3, r3, #24
 800219a:	495f      	ldr	r1, [pc, #380]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 800219c:	4313      	orrs	r3, r2
 800219e:	604b      	str	r3, [r1, #4]
 80021a0:	e018      	b.n	80021d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a2:	4b5d      	ldr	r3, [pc, #372]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a5c      	ldr	r2, [pc, #368]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 80021a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ae:	f7ff f9f3 	bl	8001598 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b6:	f7ff f9ef 	bl	8001598 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e1f9      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021c8:	4b53      	ldr	r3, [pc, #332]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f0      	bne.n	80021b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d03c      	beq.n	800225a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d01c      	beq.n	8002222 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e8:	4b4b      	ldr	r3, [pc, #300]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 80021ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ee:	4a4a      	ldr	r2, [pc, #296]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f8:	f7ff f9ce 	bl	8001598 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002200:	f7ff f9ca 	bl	8001598 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e1d4      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002212:	4b41      	ldr	r3, [pc, #260]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 8002214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0ef      	beq.n	8002200 <HAL_RCC_OscConfig+0x3ec>
 8002220:	e01b      	b.n	800225a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002222:	4b3d      	ldr	r3, [pc, #244]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 8002224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002228:	4a3b      	ldr	r2, [pc, #236]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 800222a:	f023 0301 	bic.w	r3, r3, #1
 800222e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002232:	f7ff f9b1 	bl	8001598 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800223a:	f7ff f9ad 	bl	8001598 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e1b7      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800224c:	4b32      	ldr	r3, [pc, #200]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 800224e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1ef      	bne.n	800223a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 80a6 	beq.w	80023b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002268:	2300      	movs	r3, #0
 800226a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800226c:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 800226e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10d      	bne.n	8002294 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002278:	4b27      	ldr	r3, [pc, #156]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 800227a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227c:	4a26      	ldr	r2, [pc, #152]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 800227e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002282:	6593      	str	r3, [r2, #88]	; 0x58
 8002284:	4b24      	ldr	r3, [pc, #144]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 8002286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002290:	2301      	movs	r3, #1
 8002292:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002294:	4b21      	ldr	r3, [pc, #132]	; (800231c <HAL_RCC_OscConfig+0x508>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229c:	2b00      	cmp	r3, #0
 800229e:	d118      	bne.n	80022d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022a0:	4b1e      	ldr	r3, [pc, #120]	; (800231c <HAL_RCC_OscConfig+0x508>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a1d      	ldr	r2, [pc, #116]	; (800231c <HAL_RCC_OscConfig+0x508>)
 80022a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ac:	f7ff f974 	bl	8001598 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b4:	f7ff f970 	bl	8001598 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e17a      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <HAL_RCC_OscConfig+0x508>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d108      	bne.n	80022ec <HAL_RCC_OscConfig+0x4d8>
 80022da:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e0:	4a0d      	ldr	r2, [pc, #52]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022ea:	e029      	b.n	8002340 <HAL_RCC_OscConfig+0x52c>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b05      	cmp	r3, #5
 80022f2:	d115      	bne.n	8002320 <HAL_RCC_OscConfig+0x50c>
 80022f4:	4b08      	ldr	r3, [pc, #32]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 80022f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fa:	4a07      	ldr	r2, [pc, #28]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 80022fc:	f043 0304 	orr.w	r3, r3, #4
 8002300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	4a03      	ldr	r2, [pc, #12]	; (8002318 <HAL_RCC_OscConfig+0x504>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002314:	e014      	b.n	8002340 <HAL_RCC_OscConfig+0x52c>
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
 800231c:	40007000 	.word	0x40007000
 8002320:	4b9c      	ldr	r3, [pc, #624]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 8002322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002326:	4a9b      	ldr	r2, [pc, #620]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002330:	4b98      	ldr	r3, [pc, #608]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	4a97      	ldr	r2, [pc, #604]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 8002338:	f023 0304 	bic.w	r3, r3, #4
 800233c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d016      	beq.n	8002376 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002348:	f7ff f926 	bl	8001598 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800234e:	e00a      	b.n	8002366 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002350:	f7ff f922 	bl	8001598 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f241 3288 	movw	r2, #5000	; 0x1388
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e12a      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002366:	4b8b      	ldr	r3, [pc, #556]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 8002368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0ed      	beq.n	8002350 <HAL_RCC_OscConfig+0x53c>
 8002374:	e015      	b.n	80023a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002376:	f7ff f90f 	bl	8001598 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800237c:	e00a      	b.n	8002394 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237e:	f7ff f90b 	bl	8001598 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	f241 3288 	movw	r2, #5000	; 0x1388
 800238c:	4293      	cmp	r3, r2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e113      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002394:	4b7f      	ldr	r3, [pc, #508]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 8002396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1ed      	bne.n	800237e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023a2:	7ffb      	ldrb	r3, [r7, #31]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d105      	bne.n	80023b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a8:	4b7a      	ldr	r3, [pc, #488]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 80023aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ac:	4a79      	ldr	r2, [pc, #484]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 80023ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80fe 	beq.w	80025ba <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	f040 80d0 	bne.w	8002568 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023c8:	4b72      	ldr	r3, [pc, #456]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f003 0203 	and.w	r2, r3, #3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d8:	429a      	cmp	r2, r3
 80023da:	d130      	bne.n	800243e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	3b01      	subs	r3, #1
 80023e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d127      	bne.n	800243e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d11f      	bne.n	800243e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002408:	2a07      	cmp	r2, #7
 800240a:	bf14      	ite	ne
 800240c:	2201      	movne	r2, #1
 800240e:	2200      	moveq	r2, #0
 8002410:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002412:	4293      	cmp	r3, r2
 8002414:	d113      	bne.n	800243e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002420:	085b      	lsrs	r3, r3, #1
 8002422:	3b01      	subs	r3, #1
 8002424:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002426:	429a      	cmp	r2, r3
 8002428:	d109      	bne.n	800243e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	085b      	lsrs	r3, r3, #1
 8002436:	3b01      	subs	r3, #1
 8002438:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800243a:	429a      	cmp	r2, r3
 800243c:	d06e      	beq.n	800251c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	2b0c      	cmp	r3, #12
 8002442:	d069      	beq.n	8002518 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002444:	4b53      	ldr	r3, [pc, #332]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d105      	bne.n	800245c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002450:	4b50      	ldr	r3, [pc, #320]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0ad      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002460:	4b4c      	ldr	r3, [pc, #304]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a4b      	ldr	r2, [pc, #300]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 8002466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800246a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800246c:	f7ff f894 	bl	8001598 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002474:	f7ff f890 	bl	8001598 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e09a      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002486:	4b43      	ldr	r3, [pc, #268]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002492:	4b40      	ldr	r3, [pc, #256]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	4b40      	ldr	r3, [pc, #256]	; (8002598 <HAL_RCC_OscConfig+0x784>)
 8002498:	4013      	ands	r3, r2
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024a2:	3a01      	subs	r2, #1
 80024a4:	0112      	lsls	r2, r2, #4
 80024a6:	4311      	orrs	r1, r2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024ac:	0212      	lsls	r2, r2, #8
 80024ae:	4311      	orrs	r1, r2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024b4:	0852      	lsrs	r2, r2, #1
 80024b6:	3a01      	subs	r2, #1
 80024b8:	0552      	lsls	r2, r2, #21
 80024ba:	4311      	orrs	r1, r2
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024c0:	0852      	lsrs	r2, r2, #1
 80024c2:	3a01      	subs	r2, #1
 80024c4:	0652      	lsls	r2, r2, #25
 80024c6:	4311      	orrs	r1, r2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024cc:	0912      	lsrs	r2, r2, #4
 80024ce:	0452      	lsls	r2, r2, #17
 80024d0:	430a      	orrs	r2, r1
 80024d2:	4930      	ldr	r1, [pc, #192]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024d8:	4b2e      	ldr	r3, [pc, #184]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a2d      	ldr	r2, [pc, #180]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 80024de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024e4:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4a2a      	ldr	r2, [pc, #168]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 80024ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024f0:	f7ff f852 	bl	8001598 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f8:	f7ff f84e 	bl	8001598 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e058      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250a:	4b22      	ldr	r3, [pc, #136]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002516:	e050      	b.n	80025ba <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e04f      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800251c:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d148      	bne.n	80025ba <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002528:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a19      	ldr	r2, [pc, #100]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 800252e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002532:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002534:	4b17      	ldr	r3, [pc, #92]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4a16      	ldr	r2, [pc, #88]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 800253a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800253e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002540:	f7ff f82a 	bl	8001598 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002548:	f7ff f826 	bl	8001598 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e030      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800255a:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0x734>
 8002566:	e028      	b.n	80025ba <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	2b0c      	cmp	r3, #12
 800256c:	d023      	beq.n	80025b6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256e:	4b09      	ldr	r3, [pc, #36]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a08      	ldr	r2, [pc, #32]	; (8002594 <HAL_RCC_OscConfig+0x780>)
 8002574:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257a:	f7ff f80d 	bl	8001598 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002580:	e00c      	b.n	800259c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002582:	f7ff f809 	bl	8001598 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d905      	bls.n	800259c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e013      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
 8002594:	40021000 	.word	0x40021000
 8002598:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_RCC_OscConfig+0x7b0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1ec      	bne.n	8002582 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_RCC_OscConfig+0x7b0>)
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	4905      	ldr	r1, [pc, #20]	; (80025c4 <HAL_RCC_OscConfig+0x7b0>)
 80025ae:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_RCC_OscConfig+0x7b4>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	60cb      	str	r3, [r1, #12]
 80025b4:	e001      	b.n	80025ba <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3720      	adds	r7, #32
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	feeefffc 	.word	0xfeeefffc

080025cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0e7      	b.n	80027b0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e0:	4b75      	ldr	r3, [pc, #468]	; (80027b8 <HAL_RCC_ClockConfig+0x1ec>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d910      	bls.n	8002610 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ee:	4b72      	ldr	r3, [pc, #456]	; (80027b8 <HAL_RCC_ClockConfig+0x1ec>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 0207 	bic.w	r2, r3, #7
 80025f6:	4970      	ldr	r1, [pc, #448]	; (80027b8 <HAL_RCC_ClockConfig+0x1ec>)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fe:	4b6e      	ldr	r3, [pc, #440]	; (80027b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d001      	beq.n	8002610 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0cf      	b.n	80027b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d010      	beq.n	800263e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	4b66      	ldr	r3, [pc, #408]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002628:	429a      	cmp	r2, r3
 800262a:	d908      	bls.n	800263e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800262c:	4b63      	ldr	r3, [pc, #396]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	4960      	ldr	r1, [pc, #384]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 800263a:	4313      	orrs	r3, r2
 800263c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d04c      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b03      	cmp	r3, #3
 8002650:	d107      	bne.n	8002662 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002652:	4b5a      	ldr	r3, [pc, #360]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d121      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e0a6      	b.n	80027b0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d107      	bne.n	800267a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800266a:	4b54      	ldr	r3, [pc, #336]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d115      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e09a      	b.n	80027b0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d107      	bne.n	8002692 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002682:	4b4e      	ldr	r3, [pc, #312]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d109      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e08e      	b.n	80027b0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002692:	4b4a      	ldr	r3, [pc, #296]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e086      	b.n	80027b0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026a2:	4b46      	ldr	r3, [pc, #280]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f023 0203 	bic.w	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4943      	ldr	r1, [pc, #268]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b4:	f7fe ff70 	bl	8001598 <HAL_GetTick>
 80026b8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ba:	e00a      	b.n	80026d2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026bc:	f7fe ff6c 	bl	8001598 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e06e      	b.n	80027b0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d2:	4b3a      	ldr	r3, [pc, #232]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 020c 	and.w	r2, r3, #12
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d1eb      	bne.n	80026bc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d010      	beq.n	8002712 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	4b31      	ldr	r3, [pc, #196]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d208      	bcs.n	8002712 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002700:	4b2e      	ldr	r3, [pc, #184]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	492b      	ldr	r1, [pc, #172]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 800270e:	4313      	orrs	r3, r2
 8002710:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002712:	4b29      	ldr	r3, [pc, #164]	; (80027b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d210      	bcs.n	8002742 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002720:	4b25      	ldr	r3, [pc, #148]	; (80027b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f023 0207 	bic.w	r2, r3, #7
 8002728:	4923      	ldr	r1, [pc, #140]	; (80027b8 <HAL_RCC_ClockConfig+0x1ec>)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	4313      	orrs	r3, r2
 800272e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002730:	4b21      	ldr	r3, [pc, #132]	; (80027b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d001      	beq.n	8002742 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e036      	b.n	80027b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0304 	and.w	r3, r3, #4
 800274a:	2b00      	cmp	r3, #0
 800274c:	d008      	beq.n	8002760 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800274e:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	4918      	ldr	r1, [pc, #96]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 800275c:	4313      	orrs	r3, r2
 800275e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d009      	beq.n	8002780 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800276c:	4b13      	ldr	r3, [pc, #76]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4910      	ldr	r1, [pc, #64]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 800277c:	4313      	orrs	r3, r2
 800277e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002780:	f000 f824 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 8002784:	4602      	mov	r2, r0
 8002786:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	091b      	lsrs	r3, r3, #4
 800278c:	f003 030f 	and.w	r3, r3, #15
 8002790:	490b      	ldr	r1, [pc, #44]	; (80027c0 <HAL_RCC_ClockConfig+0x1f4>)
 8002792:	5ccb      	ldrb	r3, [r1, r3]
 8002794:	f003 031f 	and.w	r3, r3, #31
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
 800279c:	4a09      	ldr	r2, [pc, #36]	; (80027c4 <HAL_RCC_ClockConfig+0x1f8>)
 800279e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027a0:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <HAL_RCC_ClockConfig+0x1fc>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fe fea7 	bl	80014f8 <HAL_InitTick>
 80027aa:	4603      	mov	r3, r0
 80027ac:	72fb      	strb	r3, [r7, #11]

  return status;
 80027ae:	7afb      	ldrb	r3, [r7, #11]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40022000 	.word	0x40022000
 80027bc:	40021000 	.word	0x40021000
 80027c0:	0800f1f8 	.word	0x0800f1f8
 80027c4:	20001800 	.word	0x20001800
 80027c8:	20001804 	.word	0x20001804

080027cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b089      	sub	sp, #36	; 0x24
 80027d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	2300      	movs	r3, #0
 80027d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027da:	4b3e      	ldr	r3, [pc, #248]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027e4:	4b3b      	ldr	r3, [pc, #236]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x34>
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	2b0c      	cmp	r3, #12
 80027f8:	d121      	bne.n	800283e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d11e      	bne.n	800283e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002800:	4b34      	ldr	r3, [pc, #208]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0308 	and.w	r3, r3, #8
 8002808:	2b00      	cmp	r3, #0
 800280a:	d107      	bne.n	800281c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800280c:	4b31      	ldr	r3, [pc, #196]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800280e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002812:	0a1b      	lsrs	r3, r3, #8
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	e005      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800281c:	4b2d      	ldr	r3, [pc, #180]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002828:	4a2b      	ldr	r2, [pc, #172]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002830:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10d      	bne.n	8002854 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800283c:	e00a      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	2b04      	cmp	r3, #4
 8002842:	d102      	bne.n	800284a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002844:	4b25      	ldr	r3, [pc, #148]	; (80028dc <HAL_RCC_GetSysClockFreq+0x110>)
 8002846:	61bb      	str	r3, [r7, #24]
 8002848:	e004      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	2b08      	cmp	r3, #8
 800284e:	d101      	bne.n	8002854 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002850:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002852:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	2b0c      	cmp	r3, #12
 8002858:	d134      	bne.n	80028c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800285a:	4b1e      	ldr	r3, [pc, #120]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d003      	beq.n	8002872 <HAL_RCC_GetSysClockFreq+0xa6>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2b03      	cmp	r3, #3
 800286e:	d003      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0xac>
 8002870:	e005      	b.n	800287e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002872:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <HAL_RCC_GetSysClockFreq+0x110>)
 8002874:	617b      	str	r3, [r7, #20]
      break;
 8002876:	e005      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002878:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800287a:	617b      	str	r3, [r7, #20]
      break;
 800287c:	e002      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	617b      	str	r3, [r7, #20]
      break;
 8002882:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002884:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	3301      	adds	r3, #1
 8002890:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002892:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	0a1b      	lsrs	r3, r3, #8
 8002898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	fb03 f202 	mul.w	r2, r3, r2
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	0e5b      	lsrs	r3, r3, #25
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	3301      	adds	r3, #1
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028c4:	69bb      	ldr	r3, [r7, #24]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3724      	adds	r7, #36	; 0x24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40021000 	.word	0x40021000
 80028d8:	0800f210 	.word	0x0800f210
 80028dc:	00f42400 	.word	0x00f42400
 80028e0:	007a1200 	.word	0x007a1200

080028e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028e8:	4b03      	ldr	r3, [pc, #12]	; (80028f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028ea:	681b      	ldr	r3, [r3, #0]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	20001800 	.word	0x20001800

080028fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002900:	f7ff fff0 	bl	80028e4 <HAL_RCC_GetHCLKFreq>
 8002904:	4602      	mov	r2, r0
 8002906:	4b06      	ldr	r3, [pc, #24]	; (8002920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	0a1b      	lsrs	r3, r3, #8
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	4904      	ldr	r1, [pc, #16]	; (8002924 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800291c:	4618      	mov	r0, r3
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40021000 	.word	0x40021000
 8002924:	0800f208 	.word	0x0800f208

08002928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800292c:	f7ff ffda 	bl	80028e4 <HAL_RCC_GetHCLKFreq>
 8002930:	4602      	mov	r2, r0
 8002932:	4b06      	ldr	r3, [pc, #24]	; (800294c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	0adb      	lsrs	r3, r3, #11
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	4904      	ldr	r1, [pc, #16]	; (8002950 <HAL_RCC_GetPCLK2Freq+0x28>)
 800293e:	5ccb      	ldrb	r3, [r1, r3]
 8002940:	f003 031f 	and.w	r3, r3, #31
 8002944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002948:	4618      	mov	r0, r3
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40021000 	.word	0x40021000
 8002950:	0800f208 	.word	0x0800f208

08002954 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800295c:	2300      	movs	r3, #0
 800295e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002960:	4b2a      	ldr	r3, [pc, #168]	; (8002a0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800296c:	f7ff f9de 	bl	8001d2c <HAL_PWREx_GetVoltageRange>
 8002970:	6178      	str	r0, [r7, #20]
 8002972:	e014      	b.n	800299e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002974:	4b25      	ldr	r3, [pc, #148]	; (8002a0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002978:	4a24      	ldr	r2, [pc, #144]	; (8002a0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800297a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297e:	6593      	str	r3, [r2, #88]	; 0x58
 8002980:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800298c:	f7ff f9ce 	bl	8001d2c <HAL_PWREx_GetVoltageRange>
 8002990:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002992:	4b1e      	ldr	r3, [pc, #120]	; (8002a0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002996:	4a1d      	ldr	r2, [pc, #116]	; (8002a0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800299c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029a4:	d10b      	bne.n	80029be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b80      	cmp	r3, #128	; 0x80
 80029aa:	d919      	bls.n	80029e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2ba0      	cmp	r3, #160	; 0xa0
 80029b0:	d902      	bls.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029b2:	2302      	movs	r3, #2
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	e013      	b.n	80029e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029b8:	2301      	movs	r3, #1
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	e010      	b.n	80029e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b80      	cmp	r3, #128	; 0x80
 80029c2:	d902      	bls.n	80029ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80029c4:	2303      	movs	r3, #3
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	e00a      	b.n	80029e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b80      	cmp	r3, #128	; 0x80
 80029ce:	d102      	bne.n	80029d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029d0:	2302      	movs	r3, #2
 80029d2:	613b      	str	r3, [r7, #16]
 80029d4:	e004      	b.n	80029e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b70      	cmp	r3, #112	; 0x70
 80029da:	d101      	bne.n	80029e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029dc:	2301      	movs	r3, #1
 80029de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f023 0207 	bic.w	r2, r3, #7
 80029e8:	4909      	ldr	r1, [pc, #36]	; (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029f0:	4b07      	ldr	r3, [pc, #28]	; (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d001      	beq.n	8002a02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40022000 	.word	0x40022000

08002a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a20:	2300      	movs	r3, #0
 8002a22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d041      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a34:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a38:	d02a      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002a3a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a3e:	d824      	bhi.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a44:	d008      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a4a:	d81e      	bhi.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a54:	d010      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a56:	e018      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a58:	4b86      	ldr	r3, [pc, #536]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4a85      	ldr	r2, [pc, #532]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a62:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a64:	e015      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 fabb 	bl	8002fe8 <RCCEx_PLLSAI1_Config>
 8002a72:	4603      	mov	r3, r0
 8002a74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a76:	e00c      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3320      	adds	r3, #32
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fba6 	bl	80031d0 <RCCEx_PLLSAI2_Config>
 8002a84:	4603      	mov	r3, r0
 8002a86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a88:	e003      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	74fb      	strb	r3, [r7, #19]
      break;
 8002a8e:	e000      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a92:	7cfb      	ldrb	r3, [r7, #19]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10b      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a98:	4b76      	ldr	r3, [pc, #472]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aa6:	4973      	ldr	r1, [pc, #460]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002aae:	e001      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab0:	7cfb      	ldrb	r3, [r7, #19]
 8002ab2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d041      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ac4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ac8:	d02a      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002aca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ace:	d824      	bhi.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ad0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ad4:	d008      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ad6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ada:	d81e      	bhi.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ae4:	d010      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ae6:	e018      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ae8:	4b62      	ldr	r3, [pc, #392]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4a61      	ldr	r2, [pc, #388]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002af4:	e015      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3304      	adds	r3, #4
 8002afa:	2100      	movs	r1, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 fa73 	bl	8002fe8 <RCCEx_PLLSAI1_Config>
 8002b02:	4603      	mov	r3, r0
 8002b04:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b06:	e00c      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3320      	adds	r3, #32
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 fb5e 	bl	80031d0 <RCCEx_PLLSAI2_Config>
 8002b14:	4603      	mov	r3, r0
 8002b16:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b18:	e003      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	74fb      	strb	r3, [r7, #19]
      break;
 8002b1e:	e000      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002b20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b22:	7cfb      	ldrb	r3, [r7, #19]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10b      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b28:	4b52      	ldr	r3, [pc, #328]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b36:	494f      	ldr	r1, [pc, #316]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b3e:	e001      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b40:	7cfb      	ldrb	r3, [r7, #19]
 8002b42:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80a0 	beq.w	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b52:	2300      	movs	r3, #0
 8002b54:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b56:	4b47      	ldr	r3, [pc, #284]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002b66:	2300      	movs	r3, #0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00d      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b6c:	4b41      	ldr	r3, [pc, #260]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b70:	4a40      	ldr	r2, [pc, #256]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b76:	6593      	str	r3, [r2, #88]	; 0x58
 8002b78:	4b3e      	ldr	r3, [pc, #248]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b84:	2301      	movs	r3, #1
 8002b86:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b88:	4b3b      	ldr	r3, [pc, #236]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a3a      	ldr	r2, [pc, #232]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b94:	f7fe fd00 	bl	8001598 <HAL_GetTick>
 8002b98:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b9a:	e009      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b9c:	f7fe fcfc 	bl	8001598 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d902      	bls.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	74fb      	strb	r3, [r7, #19]
        break;
 8002bae:	e005      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bb0:	4b31      	ldr	r3, [pc, #196]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0ef      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d15c      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bc2:	4b2c      	ldr	r3, [pc, #176]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bcc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d01f      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d019      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002be0:	4b24      	ldr	r3, [pc, #144]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bec:	4b21      	ldr	r3, [pc, #132]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf2:	4a20      	ldr	r2, [pc, #128]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c02:	4a1c      	ldr	r2, [pc, #112]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c0c:	4a19      	ldr	r2, [pc, #100]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d016      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1e:	f7fe fcbb 	bl	8001598 <HAL_GetTick>
 8002c22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c24:	e00b      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c26:	f7fe fcb7 	bl	8001598 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d902      	bls.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	74fb      	strb	r3, [r7, #19]
            break;
 8002c3c:	e006      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0ec      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002c4c:	7cfb      	ldrb	r3, [r7, #19]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c52:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c62:	4904      	ldr	r1, [pc, #16]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c6a:	e009      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c6c:	7cfb      	ldrb	r3, [r7, #19]
 8002c6e:	74bb      	strb	r3, [r7, #18]
 8002c70:	e006      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c7c:	7cfb      	ldrb	r3, [r7, #19]
 8002c7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c80:	7c7b      	ldrb	r3, [r7, #17]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d105      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c86:	4b9e      	ldr	r3, [pc, #632]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8a:	4a9d      	ldr	r2, [pc, #628]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c90:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c9e:	4b98      	ldr	r3, [pc, #608]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca4:	f023 0203 	bic.w	r2, r3, #3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cac:	4994      	ldr	r1, [pc, #592]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00a      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cc0:	4b8f      	ldr	r3, [pc, #572]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc6:	f023 020c 	bic.w	r2, r3, #12
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cce:	498c      	ldr	r1, [pc, #560]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ce2:	4b87      	ldr	r3, [pc, #540]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	4983      	ldr	r1, [pc, #524]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00a      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d04:	4b7e      	ldr	r3, [pc, #504]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	497b      	ldr	r1, [pc, #492]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0310 	and.w	r3, r3, #16
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d26:	4b76      	ldr	r3, [pc, #472]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d34:	4972      	ldr	r1, [pc, #456]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00a      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d48:	4b6d      	ldr	r3, [pc, #436]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d56:	496a      	ldr	r1, [pc, #424]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00a      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d6a:	4b65      	ldr	r3, [pc, #404]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d78:	4961      	ldr	r1, [pc, #388]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00a      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d8c:	4b5c      	ldr	r3, [pc, #368]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d9a:	4959      	ldr	r1, [pc, #356]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00a      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dae:	4b54      	ldr	r3, [pc, #336]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dbc:	4950      	ldr	r1, [pc, #320]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00a      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dd0:	4b4b      	ldr	r3, [pc, #300]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dde:	4948      	ldr	r1, [pc, #288]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00a      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002df2:	4b43      	ldr	r3, [pc, #268]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e00:	493f      	ldr	r1, [pc, #252]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d028      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e14:	4b3a      	ldr	r3, [pc, #232]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e22:	4937      	ldr	r1, [pc, #220]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e32:	d106      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e34:	4b32      	ldr	r3, [pc, #200]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4a31      	ldr	r2, [pc, #196]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e3e:	60d3      	str	r3, [r2, #12]
 8002e40:	e011      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e4a:	d10c      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	2101      	movs	r1, #1
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 f8c8 	bl	8002fe8 <RCCEx_PLLSAI1_Config>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e5c:	7cfb      	ldrb	r3, [r7, #19]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002e62:	7cfb      	ldrb	r3, [r7, #19]
 8002e64:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d028      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e72:	4b23      	ldr	r3, [pc, #140]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e80:	491f      	ldr	r1, [pc, #124]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e90:	d106      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e92:	4b1b      	ldr	r3, [pc, #108]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	4a1a      	ldr	r2, [pc, #104]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e9c:	60d3      	str	r3, [r2, #12]
 8002e9e:	e011      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ea8:	d10c      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3304      	adds	r3, #4
 8002eae:	2101      	movs	r1, #1
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 f899 	bl	8002fe8 <RCCEx_PLLSAI1_Config>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eba:	7cfb      	ldrb	r3, [r7, #19]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002ec0:	7cfb      	ldrb	r3, [r7, #19]
 8002ec2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d02b      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ede:	4908      	ldr	r1, [pc, #32]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eee:	d109      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ef0:	4b03      	ldr	r3, [pc, #12]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	4a02      	ldr	r2, [pc, #8]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002efa:	60d3      	str	r3, [r2, #12]
 8002efc:	e014      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002efe:	bf00      	nop
 8002f00:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f0c:	d10c      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3304      	adds	r3, #4
 8002f12:	2101      	movs	r1, #1
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 f867 	bl	8002fe8 <RCCEx_PLLSAI1_Config>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f1e:	7cfb      	ldrb	r3, [r7, #19]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002f24:	7cfb      	ldrb	r3, [r7, #19]
 8002f26:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d02f      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f34:	4b2b      	ldr	r3, [pc, #172]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f42:	4928      	ldr	r1, [pc, #160]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f52:	d10d      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3304      	adds	r3, #4
 8002f58:	2102      	movs	r1, #2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 f844 	bl	8002fe8 <RCCEx_PLLSAI1_Config>
 8002f60:	4603      	mov	r3, r0
 8002f62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f64:	7cfb      	ldrb	r3, [r7, #19]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d014      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f6a:	7cfb      	ldrb	r3, [r7, #19]
 8002f6c:	74bb      	strb	r3, [r7, #18]
 8002f6e:	e011      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3320      	adds	r3, #32
 8002f7e:	2102      	movs	r1, #2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 f925 	bl	80031d0 <RCCEx_PLLSAI2_Config>
 8002f86:	4603      	mov	r3, r0
 8002f88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f8a:	7cfb      	ldrb	r3, [r7, #19]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f90:	7cfb      	ldrb	r3, [r7, #19]
 8002f92:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00a      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002fa0:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fae:	490d      	ldr	r1, [pc, #52]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00b      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fc2:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fd2:	4904      	ldr	r1, [pc, #16]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fda:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40021000 	.word	0x40021000

08002fe8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ff6:	4b75      	ldr	r3, [pc, #468]	; (80031cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d018      	beq.n	8003034 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003002:	4b72      	ldr	r3, [pc, #456]	; (80031cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f003 0203 	and.w	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d10d      	bne.n	800302e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
       ||
 8003016:	2b00      	cmp	r3, #0
 8003018:	d009      	beq.n	800302e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800301a:	4b6c      	ldr	r3, [pc, #432]	; (80031cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	091b      	lsrs	r3, r3, #4
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
       ||
 800302a:	429a      	cmp	r2, r3
 800302c:	d047      	beq.n	80030be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	73fb      	strb	r3, [r7, #15]
 8003032:	e044      	b.n	80030be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b03      	cmp	r3, #3
 800303a:	d018      	beq.n	800306e <RCCEx_PLLSAI1_Config+0x86>
 800303c:	2b03      	cmp	r3, #3
 800303e:	d825      	bhi.n	800308c <RCCEx_PLLSAI1_Config+0xa4>
 8003040:	2b01      	cmp	r3, #1
 8003042:	d002      	beq.n	800304a <RCCEx_PLLSAI1_Config+0x62>
 8003044:	2b02      	cmp	r3, #2
 8003046:	d009      	beq.n	800305c <RCCEx_PLLSAI1_Config+0x74>
 8003048:	e020      	b.n	800308c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800304a:	4b60      	ldr	r3, [pc, #384]	; (80031cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d11d      	bne.n	8003092 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800305a:	e01a      	b.n	8003092 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800305c:	4b5b      	ldr	r3, [pc, #364]	; (80031cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003064:	2b00      	cmp	r3, #0
 8003066:	d116      	bne.n	8003096 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800306c:	e013      	b.n	8003096 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800306e:	4b57      	ldr	r3, [pc, #348]	; (80031cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10f      	bne.n	800309a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800307a:	4b54      	ldr	r3, [pc, #336]	; (80031cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d109      	bne.n	800309a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800308a:	e006      	b.n	800309a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
      break;
 8003090:	e004      	b.n	800309c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003092:	bf00      	nop
 8003094:	e002      	b.n	800309c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003096:	bf00      	nop
 8003098:	e000      	b.n	800309c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800309a:	bf00      	nop
    }

    if(status == HAL_OK)
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10d      	bne.n	80030be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030a2:	4b4a      	ldr	r3, [pc, #296]	; (80031cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6819      	ldr	r1, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	430b      	orrs	r3, r1
 80030b8:	4944      	ldr	r1, [pc, #272]	; (80031cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d17d      	bne.n	80031c0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80030c4:	4b41      	ldr	r3, [pc, #260]	; (80031cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a40      	ldr	r2, [pc, #256]	; (80031cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030d0:	f7fe fa62 	bl	8001598 <HAL_GetTick>
 80030d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030d6:	e009      	b.n	80030ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030d8:	f7fe fa5e 	bl	8001598 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d902      	bls.n	80030ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	73fb      	strb	r3, [r7, #15]
        break;
 80030ea:	e005      	b.n	80030f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030ec:	4b37      	ldr	r3, [pc, #220]	; (80031cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1ef      	bne.n	80030d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d160      	bne.n	80031c0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d111      	bne.n	8003128 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003104:	4b31      	ldr	r3, [pc, #196]	; (80031cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800310c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6892      	ldr	r2, [r2, #8]
 8003114:	0211      	lsls	r1, r2, #8
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68d2      	ldr	r2, [r2, #12]
 800311a:	0912      	lsrs	r2, r2, #4
 800311c:	0452      	lsls	r2, r2, #17
 800311e:	430a      	orrs	r2, r1
 8003120:	492a      	ldr	r1, [pc, #168]	; (80031cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003122:	4313      	orrs	r3, r2
 8003124:	610b      	str	r3, [r1, #16]
 8003126:	e027      	b.n	8003178 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d112      	bne.n	8003154 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800312e:	4b27      	ldr	r3, [pc, #156]	; (80031cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003136:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6892      	ldr	r2, [r2, #8]
 800313e:	0211      	lsls	r1, r2, #8
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6912      	ldr	r2, [r2, #16]
 8003144:	0852      	lsrs	r2, r2, #1
 8003146:	3a01      	subs	r2, #1
 8003148:	0552      	lsls	r2, r2, #21
 800314a:	430a      	orrs	r2, r1
 800314c:	491f      	ldr	r1, [pc, #124]	; (80031cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800314e:	4313      	orrs	r3, r2
 8003150:	610b      	str	r3, [r1, #16]
 8003152:	e011      	b.n	8003178 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003154:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800315c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6892      	ldr	r2, [r2, #8]
 8003164:	0211      	lsls	r1, r2, #8
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6952      	ldr	r2, [r2, #20]
 800316a:	0852      	lsrs	r2, r2, #1
 800316c:	3a01      	subs	r2, #1
 800316e:	0652      	lsls	r2, r2, #25
 8003170:	430a      	orrs	r2, r1
 8003172:	4916      	ldr	r1, [pc, #88]	; (80031cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003174:	4313      	orrs	r3, r2
 8003176:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003178:	4b14      	ldr	r3, [pc, #80]	; (80031cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a13      	ldr	r2, [pc, #76]	; (80031cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800317e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003182:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7fe fa08 	bl	8001598 <HAL_GetTick>
 8003188:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800318a:	e009      	b.n	80031a0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800318c:	f7fe fa04 	bl	8001598 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d902      	bls.n	80031a0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	73fb      	strb	r3, [r7, #15]
          break;
 800319e:	e005      	b.n	80031ac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031a0:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0ef      	beq.n	800318c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b4:	691a      	ldr	r2, [r3, #16]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	4904      	ldr	r1, [pc, #16]	; (80031cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000

080031d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031de:	4b6a      	ldr	r3, [pc, #424]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d018      	beq.n	800321c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80031ea:	4b67      	ldr	r3, [pc, #412]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f003 0203 	and.w	r2, r3, #3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d10d      	bne.n	8003216 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
       ||
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d009      	beq.n	8003216 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003202:	4b61      	ldr	r3, [pc, #388]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	091b      	lsrs	r3, r3, #4
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
       ||
 8003212:	429a      	cmp	r2, r3
 8003214:	d047      	beq.n	80032a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	73fb      	strb	r3, [r7, #15]
 800321a:	e044      	b.n	80032a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b03      	cmp	r3, #3
 8003222:	d018      	beq.n	8003256 <RCCEx_PLLSAI2_Config+0x86>
 8003224:	2b03      	cmp	r3, #3
 8003226:	d825      	bhi.n	8003274 <RCCEx_PLLSAI2_Config+0xa4>
 8003228:	2b01      	cmp	r3, #1
 800322a:	d002      	beq.n	8003232 <RCCEx_PLLSAI2_Config+0x62>
 800322c:	2b02      	cmp	r3, #2
 800322e:	d009      	beq.n	8003244 <RCCEx_PLLSAI2_Config+0x74>
 8003230:	e020      	b.n	8003274 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003232:	4b55      	ldr	r3, [pc, #340]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d11d      	bne.n	800327a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003242:	e01a      	b.n	800327a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003244:	4b50      	ldr	r3, [pc, #320]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324c:	2b00      	cmp	r3, #0
 800324e:	d116      	bne.n	800327e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003254:	e013      	b.n	800327e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003256:	4b4c      	ldr	r3, [pc, #304]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10f      	bne.n	8003282 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003262:	4b49      	ldr	r3, [pc, #292]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003272:	e006      	b.n	8003282 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	73fb      	strb	r3, [r7, #15]
      break;
 8003278:	e004      	b.n	8003284 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800327a:	bf00      	nop
 800327c:	e002      	b.n	8003284 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800327e:	bf00      	nop
 8003280:	e000      	b.n	8003284 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003282:	bf00      	nop
    }

    if(status == HAL_OK)
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10d      	bne.n	80032a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800328a:	4b3f      	ldr	r3, [pc, #252]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6819      	ldr	r1, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	3b01      	subs	r3, #1
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	430b      	orrs	r3, r1
 80032a0:	4939      	ldr	r1, [pc, #228]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d167      	bne.n	800337c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80032ac:	4b36      	ldr	r3, [pc, #216]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a35      	ldr	r2, [pc, #212]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b8:	f7fe f96e 	bl	8001598 <HAL_GetTick>
 80032bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032be:	e009      	b.n	80032d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032c0:	f7fe f96a 	bl	8001598 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d902      	bls.n	80032d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	73fb      	strb	r3, [r7, #15]
        break;
 80032d2:	e005      	b.n	80032e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032d4:	4b2c      	ldr	r3, [pc, #176]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ef      	bne.n	80032c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d14a      	bne.n	800337c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d111      	bne.n	8003310 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032ec:	4b26      	ldr	r3, [pc, #152]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80032f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6892      	ldr	r2, [r2, #8]
 80032fc:	0211      	lsls	r1, r2, #8
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68d2      	ldr	r2, [r2, #12]
 8003302:	0912      	lsrs	r2, r2, #4
 8003304:	0452      	lsls	r2, r2, #17
 8003306:	430a      	orrs	r2, r1
 8003308:	491f      	ldr	r1, [pc, #124]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800330a:	4313      	orrs	r3, r2
 800330c:	614b      	str	r3, [r1, #20]
 800330e:	e011      	b.n	8003334 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003310:	4b1d      	ldr	r3, [pc, #116]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003318:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6892      	ldr	r2, [r2, #8]
 8003320:	0211      	lsls	r1, r2, #8
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6912      	ldr	r2, [r2, #16]
 8003326:	0852      	lsrs	r2, r2, #1
 8003328:	3a01      	subs	r2, #1
 800332a:	0652      	lsls	r2, r2, #25
 800332c:	430a      	orrs	r2, r1
 800332e:	4916      	ldr	r1, [pc, #88]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003330:	4313      	orrs	r3, r2
 8003332:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003334:	4b14      	ldr	r3, [pc, #80]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a13      	ldr	r2, [pc, #76]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800333a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003340:	f7fe f92a 	bl	8001598 <HAL_GetTick>
 8003344:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003346:	e009      	b.n	800335c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003348:	f7fe f926 	bl	8001598 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d902      	bls.n	800335c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	73fb      	strb	r3, [r7, #15]
          break;
 800335a:	e005      	b.n	8003368 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800335c:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0ef      	beq.n	8003348 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800336e:	4b06      	ldr	r3, [pc, #24]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003370:	695a      	ldr	r2, [r3, #20]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	4904      	ldr	r1, [pc, #16]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003378:	4313      	orrs	r3, r2
 800337a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800337c:	7bfb      	ldrb	r3, [r7, #15]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40021000 	.word	0x40021000

0800338c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e049      	b.n	8003432 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7fd ff68 	bl	8001288 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3304      	adds	r3, #4
 80033c8:	4619      	mov	r1, r3
 80033ca:	4610      	mov	r0, r2
 80033cc:	f000 f89e 	bl	800350c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b01      	cmp	r3, #1
 800344e:	d001      	beq.n	8003454 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e047      	b.n	80034e4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a23      	ldr	r2, [pc, #140]	; (80034f0 <HAL_TIM_Base_Start+0xb4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d01d      	beq.n	80034a2 <HAL_TIM_Base_Start+0x66>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346e:	d018      	beq.n	80034a2 <HAL_TIM_Base_Start+0x66>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a1f      	ldr	r2, [pc, #124]	; (80034f4 <HAL_TIM_Base_Start+0xb8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d013      	beq.n	80034a2 <HAL_TIM_Base_Start+0x66>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a1e      	ldr	r2, [pc, #120]	; (80034f8 <HAL_TIM_Base_Start+0xbc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d00e      	beq.n	80034a2 <HAL_TIM_Base_Start+0x66>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1c      	ldr	r2, [pc, #112]	; (80034fc <HAL_TIM_Base_Start+0xc0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d009      	beq.n	80034a2 <HAL_TIM_Base_Start+0x66>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a1b      	ldr	r2, [pc, #108]	; (8003500 <HAL_TIM_Base_Start+0xc4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d004      	beq.n	80034a2 <HAL_TIM_Base_Start+0x66>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a19      	ldr	r2, [pc, #100]	; (8003504 <HAL_TIM_Base_Start+0xc8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d115      	bne.n	80034ce <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	4b17      	ldr	r3, [pc, #92]	; (8003508 <HAL_TIM_Base_Start+0xcc>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2b06      	cmp	r3, #6
 80034b2:	d015      	beq.n	80034e0 <HAL_TIM_Base_Start+0xa4>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ba:	d011      	beq.n	80034e0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034cc:	e008      	b.n	80034e0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0201 	orr.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	e000      	b.n	80034e2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	40012c00 	.word	0x40012c00
 80034f4:	40000400 	.word	0x40000400
 80034f8:	40000800 	.word	0x40000800
 80034fc:	40000c00 	.word	0x40000c00
 8003500:	40013400 	.word	0x40013400
 8003504:	40014000 	.word	0x40014000
 8003508:	00010007 	.word	0x00010007

0800350c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a40      	ldr	r2, [pc, #256]	; (8003620 <TIM_Base_SetConfig+0x114>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d013      	beq.n	800354c <TIM_Base_SetConfig+0x40>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352a:	d00f      	beq.n	800354c <TIM_Base_SetConfig+0x40>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a3d      	ldr	r2, [pc, #244]	; (8003624 <TIM_Base_SetConfig+0x118>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00b      	beq.n	800354c <TIM_Base_SetConfig+0x40>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a3c      	ldr	r2, [pc, #240]	; (8003628 <TIM_Base_SetConfig+0x11c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d007      	beq.n	800354c <TIM_Base_SetConfig+0x40>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a3b      	ldr	r2, [pc, #236]	; (800362c <TIM_Base_SetConfig+0x120>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d003      	beq.n	800354c <TIM_Base_SetConfig+0x40>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a3a      	ldr	r2, [pc, #232]	; (8003630 <TIM_Base_SetConfig+0x124>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d108      	bne.n	800355e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a2f      	ldr	r2, [pc, #188]	; (8003620 <TIM_Base_SetConfig+0x114>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01f      	beq.n	80035a6 <TIM_Base_SetConfig+0x9a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356c:	d01b      	beq.n	80035a6 <TIM_Base_SetConfig+0x9a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a2c      	ldr	r2, [pc, #176]	; (8003624 <TIM_Base_SetConfig+0x118>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d017      	beq.n	80035a6 <TIM_Base_SetConfig+0x9a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a2b      	ldr	r2, [pc, #172]	; (8003628 <TIM_Base_SetConfig+0x11c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d013      	beq.n	80035a6 <TIM_Base_SetConfig+0x9a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a2a      	ldr	r2, [pc, #168]	; (800362c <TIM_Base_SetConfig+0x120>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00f      	beq.n	80035a6 <TIM_Base_SetConfig+0x9a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a29      	ldr	r2, [pc, #164]	; (8003630 <TIM_Base_SetConfig+0x124>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00b      	beq.n	80035a6 <TIM_Base_SetConfig+0x9a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a28      	ldr	r2, [pc, #160]	; (8003634 <TIM_Base_SetConfig+0x128>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d007      	beq.n	80035a6 <TIM_Base_SetConfig+0x9a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a27      	ldr	r2, [pc, #156]	; (8003638 <TIM_Base_SetConfig+0x12c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d003      	beq.n	80035a6 <TIM_Base_SetConfig+0x9a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a26      	ldr	r2, [pc, #152]	; (800363c <TIM_Base_SetConfig+0x130>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d108      	bne.n	80035b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a10      	ldr	r2, [pc, #64]	; (8003620 <TIM_Base_SetConfig+0x114>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00f      	beq.n	8003604 <TIM_Base_SetConfig+0xf8>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a12      	ldr	r2, [pc, #72]	; (8003630 <TIM_Base_SetConfig+0x124>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00b      	beq.n	8003604 <TIM_Base_SetConfig+0xf8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a11      	ldr	r2, [pc, #68]	; (8003634 <TIM_Base_SetConfig+0x128>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d007      	beq.n	8003604 <TIM_Base_SetConfig+0xf8>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a10      	ldr	r2, [pc, #64]	; (8003638 <TIM_Base_SetConfig+0x12c>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d003      	beq.n	8003604 <TIM_Base_SetConfig+0xf8>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a0f      	ldr	r2, [pc, #60]	; (800363c <TIM_Base_SetConfig+0x130>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d103      	bne.n	800360c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	615a      	str	r2, [r3, #20]
}
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40012c00 	.word	0x40012c00
 8003624:	40000400 	.word	0x40000400
 8003628:	40000800 	.word	0x40000800
 800362c:	40000c00 	.word	0x40000c00
 8003630:	40013400 	.word	0x40013400
 8003634:	40014000 	.word	0x40014000
 8003638:	40014400 	.word	0x40014400
 800363c:	40014800 	.word	0x40014800

08003640 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e040      	b.n	80036d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003656:	2b00      	cmp	r3, #0
 8003658:	d106      	bne.n	8003668 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7fd fe30 	bl	80012c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2224      	movs	r2, #36	; 0x24
 800366c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0201 	bic.w	r2, r2, #1
 800367c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fb6a 	bl	8003d60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f8af 	bl	80037f0 <UART_SetConfig>
 8003692:	4603      	mov	r3, r0
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e01b      	b.n	80036d4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0201 	orr.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 fbe9 	bl	8003ea4 <UART_CheckIdleState>
 80036d2:	4603      	mov	r3, r0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08a      	sub	sp, #40	; 0x28
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	4613      	mov	r3, r2
 80036ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	d178      	bne.n	80037e6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_UART_Transmit+0x24>
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e071      	b.n	80037e8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2221      	movs	r2, #33	; 0x21
 8003710:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003712:	f7fd ff41 	bl	8001598 <HAL_GetTick>
 8003716:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	88fa      	ldrh	r2, [r7, #6]
 800371c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	88fa      	ldrh	r2, [r7, #6]
 8003724:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003730:	d108      	bne.n	8003744 <HAL_UART_Transmit+0x68>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d104      	bne.n	8003744 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800373a:	2300      	movs	r3, #0
 800373c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	e003      	b.n	800374c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003748:	2300      	movs	r3, #0
 800374a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800374c:	e030      	b.n	80037b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2200      	movs	r2, #0
 8003756:	2180      	movs	r1, #128	; 0x80
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 fc4b 	bl	8003ff4 <UART_WaitOnFlagUntilTimeout>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d004      	beq.n	800376e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e03c      	b.n	80037e8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10b      	bne.n	800378c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	881a      	ldrh	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003780:	b292      	uxth	r2, r2
 8003782:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	3302      	adds	r3, #2
 8003788:	61bb      	str	r3, [r7, #24]
 800378a:	e008      	b.n	800379e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	781a      	ldrb	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	b292      	uxth	r2, r2
 8003796:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	3301      	adds	r3, #1
 800379c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1c8      	bne.n	800374e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2200      	movs	r2, #0
 80037c4:	2140      	movs	r1, #64	; 0x40
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 fc14 	bl	8003ff4 <UART_WaitOnFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d004      	beq.n	80037dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2220      	movs	r2, #32
 80037d6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e005      	b.n	80037e8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	e000      	b.n	80037e8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80037e6:	2302      	movs	r3, #2
  }
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3720      	adds	r7, #32
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037f4:	b08a      	sub	sp, #40	; 0x28
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	431a      	orrs	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	431a      	orrs	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	4313      	orrs	r3, r2
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	4ba4      	ldr	r3, [pc, #656]	; (8003ab0 <UART_SetConfig+0x2c0>)
 8003820:	4013      	ands	r3, r2
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	6812      	ldr	r2, [r2, #0]
 8003826:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003828:	430b      	orrs	r3, r1
 800382a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a99      	ldr	r2, [pc, #612]	; (8003ab4 <UART_SetConfig+0x2c4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d004      	beq.n	800385c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003858:	4313      	orrs	r3, r2
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800386c:	430a      	orrs	r2, r1
 800386e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a90      	ldr	r2, [pc, #576]	; (8003ab8 <UART_SetConfig+0x2c8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d126      	bne.n	80038c8 <UART_SetConfig+0xd8>
 800387a:	4b90      	ldr	r3, [pc, #576]	; (8003abc <UART_SetConfig+0x2cc>)
 800387c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003880:	f003 0303 	and.w	r3, r3, #3
 8003884:	2b03      	cmp	r3, #3
 8003886:	d81b      	bhi.n	80038c0 <UART_SetConfig+0xd0>
 8003888:	a201      	add	r2, pc, #4	; (adr r2, 8003890 <UART_SetConfig+0xa0>)
 800388a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388e:	bf00      	nop
 8003890:	080038a1 	.word	0x080038a1
 8003894:	080038b1 	.word	0x080038b1
 8003898:	080038a9 	.word	0x080038a9
 800389c:	080038b9 	.word	0x080038b9
 80038a0:	2301      	movs	r3, #1
 80038a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038a6:	e116      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 80038a8:	2302      	movs	r3, #2
 80038aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ae:	e112      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 80038b0:	2304      	movs	r3, #4
 80038b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038b6:	e10e      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 80038b8:	2308      	movs	r3, #8
 80038ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038be:	e10a      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 80038c0:	2310      	movs	r3, #16
 80038c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038c6:	e106      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a7c      	ldr	r2, [pc, #496]	; (8003ac0 <UART_SetConfig+0x2d0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d138      	bne.n	8003944 <UART_SetConfig+0x154>
 80038d2:	4b7a      	ldr	r3, [pc, #488]	; (8003abc <UART_SetConfig+0x2cc>)
 80038d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d8:	f003 030c 	and.w	r3, r3, #12
 80038dc:	2b0c      	cmp	r3, #12
 80038de:	d82d      	bhi.n	800393c <UART_SetConfig+0x14c>
 80038e0:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <UART_SetConfig+0xf8>)
 80038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e6:	bf00      	nop
 80038e8:	0800391d 	.word	0x0800391d
 80038ec:	0800393d 	.word	0x0800393d
 80038f0:	0800393d 	.word	0x0800393d
 80038f4:	0800393d 	.word	0x0800393d
 80038f8:	0800392d 	.word	0x0800392d
 80038fc:	0800393d 	.word	0x0800393d
 8003900:	0800393d 	.word	0x0800393d
 8003904:	0800393d 	.word	0x0800393d
 8003908:	08003925 	.word	0x08003925
 800390c:	0800393d 	.word	0x0800393d
 8003910:	0800393d 	.word	0x0800393d
 8003914:	0800393d 	.word	0x0800393d
 8003918:	08003935 	.word	0x08003935
 800391c:	2300      	movs	r3, #0
 800391e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003922:	e0d8      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 8003924:	2302      	movs	r3, #2
 8003926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800392a:	e0d4      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 800392c:	2304      	movs	r3, #4
 800392e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003932:	e0d0      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 8003934:	2308      	movs	r3, #8
 8003936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800393a:	e0cc      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 800393c:	2310      	movs	r3, #16
 800393e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003942:	e0c8      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a5e      	ldr	r2, [pc, #376]	; (8003ac4 <UART_SetConfig+0x2d4>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d125      	bne.n	800399a <UART_SetConfig+0x1aa>
 800394e:	4b5b      	ldr	r3, [pc, #364]	; (8003abc <UART_SetConfig+0x2cc>)
 8003950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003954:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003958:	2b30      	cmp	r3, #48	; 0x30
 800395a:	d016      	beq.n	800398a <UART_SetConfig+0x19a>
 800395c:	2b30      	cmp	r3, #48	; 0x30
 800395e:	d818      	bhi.n	8003992 <UART_SetConfig+0x1a2>
 8003960:	2b20      	cmp	r3, #32
 8003962:	d00a      	beq.n	800397a <UART_SetConfig+0x18a>
 8003964:	2b20      	cmp	r3, #32
 8003966:	d814      	bhi.n	8003992 <UART_SetConfig+0x1a2>
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <UART_SetConfig+0x182>
 800396c:	2b10      	cmp	r3, #16
 800396e:	d008      	beq.n	8003982 <UART_SetConfig+0x192>
 8003970:	e00f      	b.n	8003992 <UART_SetConfig+0x1a2>
 8003972:	2300      	movs	r3, #0
 8003974:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003978:	e0ad      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 800397a:	2302      	movs	r3, #2
 800397c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003980:	e0a9      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 8003982:	2304      	movs	r3, #4
 8003984:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003988:	e0a5      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 800398a:	2308      	movs	r3, #8
 800398c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003990:	e0a1      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 8003992:	2310      	movs	r3, #16
 8003994:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003998:	e09d      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a4a      	ldr	r2, [pc, #296]	; (8003ac8 <UART_SetConfig+0x2d8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d125      	bne.n	80039f0 <UART_SetConfig+0x200>
 80039a4:	4b45      	ldr	r3, [pc, #276]	; (8003abc <UART_SetConfig+0x2cc>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039ae:	2bc0      	cmp	r3, #192	; 0xc0
 80039b0:	d016      	beq.n	80039e0 <UART_SetConfig+0x1f0>
 80039b2:	2bc0      	cmp	r3, #192	; 0xc0
 80039b4:	d818      	bhi.n	80039e8 <UART_SetConfig+0x1f8>
 80039b6:	2b80      	cmp	r3, #128	; 0x80
 80039b8:	d00a      	beq.n	80039d0 <UART_SetConfig+0x1e0>
 80039ba:	2b80      	cmp	r3, #128	; 0x80
 80039bc:	d814      	bhi.n	80039e8 <UART_SetConfig+0x1f8>
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <UART_SetConfig+0x1d8>
 80039c2:	2b40      	cmp	r3, #64	; 0x40
 80039c4:	d008      	beq.n	80039d8 <UART_SetConfig+0x1e8>
 80039c6:	e00f      	b.n	80039e8 <UART_SetConfig+0x1f8>
 80039c8:	2300      	movs	r3, #0
 80039ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ce:	e082      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 80039d0:	2302      	movs	r3, #2
 80039d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d6:	e07e      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 80039d8:	2304      	movs	r3, #4
 80039da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039de:	e07a      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 80039e0:	2308      	movs	r3, #8
 80039e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039e6:	e076      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 80039e8:	2310      	movs	r3, #16
 80039ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ee:	e072      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a35      	ldr	r2, [pc, #212]	; (8003acc <UART_SetConfig+0x2dc>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d12a      	bne.n	8003a50 <UART_SetConfig+0x260>
 80039fa:	4b30      	ldr	r3, [pc, #192]	; (8003abc <UART_SetConfig+0x2cc>)
 80039fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a08:	d01a      	beq.n	8003a40 <UART_SetConfig+0x250>
 8003a0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a0e:	d81b      	bhi.n	8003a48 <UART_SetConfig+0x258>
 8003a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a14:	d00c      	beq.n	8003a30 <UART_SetConfig+0x240>
 8003a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a1a:	d815      	bhi.n	8003a48 <UART_SetConfig+0x258>
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <UART_SetConfig+0x238>
 8003a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a24:	d008      	beq.n	8003a38 <UART_SetConfig+0x248>
 8003a26:	e00f      	b.n	8003a48 <UART_SetConfig+0x258>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a2e:	e052      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 8003a30:	2302      	movs	r3, #2
 8003a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a36:	e04e      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 8003a38:	2304      	movs	r3, #4
 8003a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a3e:	e04a      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 8003a40:	2308      	movs	r3, #8
 8003a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a46:	e046      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 8003a48:	2310      	movs	r3, #16
 8003a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a4e:	e042      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a17      	ldr	r2, [pc, #92]	; (8003ab4 <UART_SetConfig+0x2c4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d13a      	bne.n	8003ad0 <UART_SetConfig+0x2e0>
 8003a5a:	4b18      	ldr	r3, [pc, #96]	; (8003abc <UART_SetConfig+0x2cc>)
 8003a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a68:	d01a      	beq.n	8003aa0 <UART_SetConfig+0x2b0>
 8003a6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a6e:	d81b      	bhi.n	8003aa8 <UART_SetConfig+0x2b8>
 8003a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a74:	d00c      	beq.n	8003a90 <UART_SetConfig+0x2a0>
 8003a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a7a:	d815      	bhi.n	8003aa8 <UART_SetConfig+0x2b8>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <UART_SetConfig+0x298>
 8003a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a84:	d008      	beq.n	8003a98 <UART_SetConfig+0x2a8>
 8003a86:	e00f      	b.n	8003aa8 <UART_SetConfig+0x2b8>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a8e:	e022      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 8003a90:	2302      	movs	r3, #2
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a96:	e01e      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 8003a98:	2304      	movs	r3, #4
 8003a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9e:	e01a      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 8003aa0:	2308      	movs	r3, #8
 8003aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa6:	e016      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 8003aa8:	2310      	movs	r3, #16
 8003aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aae:	e012      	b.n	8003ad6 <UART_SetConfig+0x2e6>
 8003ab0:	efff69f3 	.word	0xefff69f3
 8003ab4:	40008000 	.word	0x40008000
 8003ab8:	40013800 	.word	0x40013800
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	40004400 	.word	0x40004400
 8003ac4:	40004800 	.word	0x40004800
 8003ac8:	40004c00 	.word	0x40004c00
 8003acc:	40005000 	.word	0x40005000
 8003ad0:	2310      	movs	r3, #16
 8003ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a9f      	ldr	r2, [pc, #636]	; (8003d58 <UART_SetConfig+0x568>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d17a      	bne.n	8003bd6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ae0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d824      	bhi.n	8003b32 <UART_SetConfig+0x342>
 8003ae8:	a201      	add	r2, pc, #4	; (adr r2, 8003af0 <UART_SetConfig+0x300>)
 8003aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aee:	bf00      	nop
 8003af0:	08003b15 	.word	0x08003b15
 8003af4:	08003b33 	.word	0x08003b33
 8003af8:	08003b1d 	.word	0x08003b1d
 8003afc:	08003b33 	.word	0x08003b33
 8003b00:	08003b23 	.word	0x08003b23
 8003b04:	08003b33 	.word	0x08003b33
 8003b08:	08003b33 	.word	0x08003b33
 8003b0c:	08003b33 	.word	0x08003b33
 8003b10:	08003b2b 	.word	0x08003b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b14:	f7fe fef2 	bl	80028fc <HAL_RCC_GetPCLK1Freq>
 8003b18:	61f8      	str	r0, [r7, #28]
        break;
 8003b1a:	e010      	b.n	8003b3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b1c:	4b8f      	ldr	r3, [pc, #572]	; (8003d5c <UART_SetConfig+0x56c>)
 8003b1e:	61fb      	str	r3, [r7, #28]
        break;
 8003b20:	e00d      	b.n	8003b3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b22:	f7fe fe53 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 8003b26:	61f8      	str	r0, [r7, #28]
        break;
 8003b28:	e009      	b.n	8003b3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b2e:	61fb      	str	r3, [r7, #28]
        break;
 8003b30:	e005      	b.n	8003b3e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 80fb 	beq.w	8003d3c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	4413      	add	r3, r2
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d305      	bcc.n	8003b62 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b5c:	69fa      	ldr	r2, [r7, #28]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d903      	bls.n	8003b6a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b68:	e0e8      	b.n	8003d3c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	461c      	mov	r4, r3
 8003b70:	4615      	mov	r5, r2
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	022b      	lsls	r3, r5, #8
 8003b7c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003b80:	0222      	lsls	r2, r4, #8
 8003b82:	68f9      	ldr	r1, [r7, #12]
 8003b84:	6849      	ldr	r1, [r1, #4]
 8003b86:	0849      	lsrs	r1, r1, #1
 8003b88:	2000      	movs	r0, #0
 8003b8a:	4688      	mov	r8, r1
 8003b8c:	4681      	mov	r9, r0
 8003b8e:	eb12 0a08 	adds.w	sl, r2, r8
 8003b92:	eb43 0b09 	adc.w	fp, r3, r9
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	603b      	str	r3, [r7, #0]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ba4:	4650      	mov	r0, sl
 8003ba6:	4659      	mov	r1, fp
 8003ba8:	f7fc fb62 	bl	8000270 <__aeabi_uldivmod>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bba:	d308      	bcc.n	8003bce <UART_SetConfig+0x3de>
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bc2:	d204      	bcs.n	8003bce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	60da      	str	r2, [r3, #12]
 8003bcc:	e0b6      	b.n	8003d3c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003bd4:	e0b2      	b.n	8003d3c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bde:	d15e      	bne.n	8003c9e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003be0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d828      	bhi.n	8003c3a <UART_SetConfig+0x44a>
 8003be8:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <UART_SetConfig+0x400>)
 8003bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bee:	bf00      	nop
 8003bf0:	08003c15 	.word	0x08003c15
 8003bf4:	08003c1d 	.word	0x08003c1d
 8003bf8:	08003c25 	.word	0x08003c25
 8003bfc:	08003c3b 	.word	0x08003c3b
 8003c00:	08003c2b 	.word	0x08003c2b
 8003c04:	08003c3b 	.word	0x08003c3b
 8003c08:	08003c3b 	.word	0x08003c3b
 8003c0c:	08003c3b 	.word	0x08003c3b
 8003c10:	08003c33 	.word	0x08003c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c14:	f7fe fe72 	bl	80028fc <HAL_RCC_GetPCLK1Freq>
 8003c18:	61f8      	str	r0, [r7, #28]
        break;
 8003c1a:	e014      	b.n	8003c46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c1c:	f7fe fe84 	bl	8002928 <HAL_RCC_GetPCLK2Freq>
 8003c20:	61f8      	str	r0, [r7, #28]
        break;
 8003c22:	e010      	b.n	8003c46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c24:	4b4d      	ldr	r3, [pc, #308]	; (8003d5c <UART_SetConfig+0x56c>)
 8003c26:	61fb      	str	r3, [r7, #28]
        break;
 8003c28:	e00d      	b.n	8003c46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c2a:	f7fe fdcf 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 8003c2e:	61f8      	str	r0, [r7, #28]
        break;
 8003c30:	e009      	b.n	8003c46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c36:	61fb      	str	r3, [r7, #28]
        break;
 8003c38:	e005      	b.n	8003c46 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d077      	beq.n	8003d3c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	005a      	lsls	r2, r3, #1
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	085b      	lsrs	r3, r3, #1
 8003c56:	441a      	add	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c60:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	2b0f      	cmp	r3, #15
 8003c66:	d916      	bls.n	8003c96 <UART_SetConfig+0x4a6>
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c6e:	d212      	bcs.n	8003c96 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	f023 030f 	bic.w	r3, r3, #15
 8003c78:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	085b      	lsrs	r3, r3, #1
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	8afb      	ldrh	r3, [r7, #22]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	8afa      	ldrh	r2, [r7, #22]
 8003c92:	60da      	str	r2, [r3, #12]
 8003c94:	e052      	b.n	8003d3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c9c:	e04e      	b.n	8003d3c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d827      	bhi.n	8003cf6 <UART_SetConfig+0x506>
 8003ca6:	a201      	add	r2, pc, #4	; (adr r2, 8003cac <UART_SetConfig+0x4bc>)
 8003ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cac:	08003cd1 	.word	0x08003cd1
 8003cb0:	08003cd9 	.word	0x08003cd9
 8003cb4:	08003ce1 	.word	0x08003ce1
 8003cb8:	08003cf7 	.word	0x08003cf7
 8003cbc:	08003ce7 	.word	0x08003ce7
 8003cc0:	08003cf7 	.word	0x08003cf7
 8003cc4:	08003cf7 	.word	0x08003cf7
 8003cc8:	08003cf7 	.word	0x08003cf7
 8003ccc:	08003cef 	.word	0x08003cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cd0:	f7fe fe14 	bl	80028fc <HAL_RCC_GetPCLK1Freq>
 8003cd4:	61f8      	str	r0, [r7, #28]
        break;
 8003cd6:	e014      	b.n	8003d02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cd8:	f7fe fe26 	bl	8002928 <HAL_RCC_GetPCLK2Freq>
 8003cdc:	61f8      	str	r0, [r7, #28]
        break;
 8003cde:	e010      	b.n	8003d02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ce0:	4b1e      	ldr	r3, [pc, #120]	; (8003d5c <UART_SetConfig+0x56c>)
 8003ce2:	61fb      	str	r3, [r7, #28]
        break;
 8003ce4:	e00d      	b.n	8003d02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ce6:	f7fe fd71 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 8003cea:	61f8      	str	r0, [r7, #28]
        break;
 8003cec:	e009      	b.n	8003d02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cf2:	61fb      	str	r3, [r7, #28]
        break;
 8003cf4:	e005      	b.n	8003d02 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d00:	bf00      	nop
    }

    if (pclk != 0U)
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d019      	beq.n	8003d3c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	085a      	lsrs	r2, r3, #1
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	441a      	add	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	2b0f      	cmp	r3, #15
 8003d20:	d909      	bls.n	8003d36 <UART_SetConfig+0x546>
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d28:	d205      	bcs.n	8003d36 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	60da      	str	r2, [r3, #12]
 8003d34:	e002      	b.n	8003d3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003d48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3728      	adds	r7, #40	; 0x28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d56:	bf00      	nop
 8003d58:	40008000 	.word	0x40008000
 8003d5c:	00f42400 	.word	0x00f42400

08003d60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	f003 0304 	and.w	r3, r3, #4
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01a      	beq.n	8003e76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e5e:	d10a      	bne.n	8003e76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	605a      	str	r2, [r3, #4]
  }
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b098      	sub	sp, #96	; 0x60
 8003ea8:	af02      	add	r7, sp, #8
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003eb4:	f7fd fb70 	bl	8001598 <HAL_GetTick>
 8003eb8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d12e      	bne.n	8003f26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ec8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f88c 	bl	8003ff4 <UART_WaitOnFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d021      	beq.n	8003f26 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eea:	e853 3f00 	ldrex	r3, [r3]
 8003eee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ef6:	653b      	str	r3, [r7, #80]	; 0x50
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	461a      	mov	r2, r3
 8003efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f00:	647b      	str	r3, [r7, #68]	; 0x44
 8003f02:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f08:	e841 2300 	strex	r3, r2, [r1]
 8003f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1e6      	bne.n	8003ee2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2220      	movs	r2, #32
 8003f18:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e062      	b.n	8003fec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d149      	bne.n	8003fc8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f856 	bl	8003ff4 <UART_WaitOnFlagUntilTimeout>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d03c      	beq.n	8003fc8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	e853 3f00 	ldrex	r3, [r3]
 8003f5a:	623b      	str	r3, [r7, #32]
   return(result);
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f6e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f74:	e841 2300 	strex	r3, r2, [r1]
 8003f78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1e6      	bne.n	8003f4e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3308      	adds	r3, #8
 8003f86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f023 0301 	bic.w	r3, r3, #1
 8003f96:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3308      	adds	r3, #8
 8003f9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fa0:	61fa      	str	r2, [r7, #28]
 8003fa2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa4:	69b9      	ldr	r1, [r7, #24]
 8003fa6:	69fa      	ldr	r2, [r7, #28]
 8003fa8:	e841 2300 	strex	r3, r2, [r1]
 8003fac:	617b      	str	r3, [r7, #20]
   return(result);
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e5      	bne.n	8003f80 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e011      	b.n	8003fec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3758      	adds	r7, #88	; 0x58
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	4613      	mov	r3, r2
 8004002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004004:	e049      	b.n	800409a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800400c:	d045      	beq.n	800409a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400e:	f7fd fac3 	bl	8001598 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	429a      	cmp	r2, r3
 800401c:	d302      	bcc.n	8004024 <UART_WaitOnFlagUntilTimeout+0x30>
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e048      	b.n	80040ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b00      	cmp	r3, #0
 8004034:	d031      	beq.n	800409a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b08      	cmp	r3, #8
 8004042:	d110      	bne.n	8004066 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2208      	movs	r2, #8
 800404a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f838 	bl	80040c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2208      	movs	r2, #8
 8004056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e029      	b.n	80040ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004074:	d111      	bne.n	800409a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800407e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 f81e 	bl	80040c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2220      	movs	r2, #32
 800408a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e00f      	b.n	80040ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69da      	ldr	r2, [r3, #28]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	4013      	ands	r3, r2
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	bf0c      	ite	eq
 80040aa:	2301      	moveq	r3, #1
 80040ac:	2300      	movne	r3, #0
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	79fb      	ldrb	r3, [r7, #7]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d0a6      	beq.n	8004006 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b095      	sub	sp, #84	; 0x54
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	461a      	mov	r2, r3
 80040e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e8:	643b      	str	r3, [r7, #64]	; 0x40
 80040ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040f0:	e841 2300 	strex	r3, r2, [r1]
 80040f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e6      	bne.n	80040ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3308      	adds	r3, #8
 8004102:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	e853 3f00 	ldrex	r3, [r3]
 800410a:	61fb      	str	r3, [r7, #28]
   return(result);
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f023 0301 	bic.w	r3, r3, #1
 8004112:	64bb      	str	r3, [r7, #72]	; 0x48
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3308      	adds	r3, #8
 800411a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800411c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800411e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004120:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e5      	bne.n	80040fc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004134:	2b01      	cmp	r3, #1
 8004136:	d118      	bne.n	800416a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	e853 3f00 	ldrex	r3, [r3]
 8004144:	60bb      	str	r3, [r7, #8]
   return(result);
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	f023 0310 	bic.w	r3, r3, #16
 800414c:	647b      	str	r3, [r7, #68]	; 0x44
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004156:	61bb      	str	r3, [r7, #24]
 8004158:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415a:	6979      	ldr	r1, [r7, #20]
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	e841 2300 	strex	r3, r2, [r1]
 8004162:	613b      	str	r3, [r7, #16]
   return(result);
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1e6      	bne.n	8004138 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2220      	movs	r2, #32
 800416e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800417e:	bf00      	nop
 8004180:	3754      	adds	r7, #84	; 0x54
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
	...

0800418c <audio_model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool audio_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_audio_model_activations_map, 1, params)) {
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	2101      	movs	r1, #1
 800419a:	486d      	ldr	r0, [pc, #436]	; (8004350 <audio_model_configure_activations+0x1c4>)
 800419c:	f000 fb5a 	bl	8004854 <ai_platform_get_activations_map>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 80ca 	beq.w	800433c <audio_model_configure_activations+0x1b0>
    /* Updating activations (byte) offsets */
    
    serving_default_input_10_output_array.data = AI_PTR(g_audio_model_activations_map[0] + 23392);
 80041a8:	4b69      	ldr	r3, [pc, #420]	; (8004350 <audio_model_configure_activations+0x1c4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f503 43b6 	add.w	r3, r3, #23296	; 0x5b00
 80041b0:	3360      	adds	r3, #96	; 0x60
 80041b2:	4a68      	ldr	r2, [pc, #416]	; (8004354 <audio_model_configure_activations+0x1c8>)
 80041b4:	6093      	str	r3, [r2, #8]
    serving_default_input_10_output_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 23392);
 80041b6:	4b66      	ldr	r3, [pc, #408]	; (8004350 <audio_model_configure_activations+0x1c4>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f503 43b6 	add.w	r3, r3, #23296	; 0x5b00
 80041be:	3360      	adds	r3, #96	; 0x60
 80041c0:	4a64      	ldr	r2, [pc, #400]	; (8004354 <audio_model_configure_activations+0x1c8>)
 80041c2:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_scratch0_array.data = AI_PTR(g_audio_model_activations_map[0] + 29536);
 80041c4:	4b62      	ldr	r3, [pc, #392]	; (8004350 <audio_model_configure_activations+0x1c4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f503 43e6 	add.w	r3, r3, #29440	; 0x7300
 80041cc:	3360      	adds	r3, #96	; 0x60
 80041ce:	4a62      	ldr	r2, [pc, #392]	; (8004358 <audio_model_configure_activations+0x1cc>)
 80041d0:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch0_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 29536);
 80041d2:	4b5f      	ldr	r3, [pc, #380]	; (8004350 <audio_model_configure_activations+0x1c4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f503 43e6 	add.w	r3, r3, #29440	; 0x7300
 80041da:	3360      	adds	r3, #96	; 0x60
 80041dc:	4a5e      	ldr	r2, [pc, #376]	; (8004358 <audio_model_configure_activations+0x1cc>)
 80041de:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_scratch1_array.data = AI_PTR(g_audio_model_activations_map[0] + 30084);
 80041e0:	4b5b      	ldr	r3, [pc, #364]	; (8004350 <audio_model_configure_activations+0x1c4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f503 43eb 	add.w	r3, r3, #30080	; 0x7580
 80041e8:	3304      	adds	r3, #4
 80041ea:	4a5c      	ldr	r2, [pc, #368]	; (800435c <audio_model_configure_activations+0x1d0>)
 80041ec:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch1_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 30084);
 80041ee:	4b58      	ldr	r3, [pc, #352]	; (8004350 <audio_model_configure_activations+0x1c4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f503 43eb 	add.w	r3, r3, #30080	; 0x7580
 80041f6:	3304      	adds	r3, #4
 80041f8:	4a58      	ldr	r2, [pc, #352]	; (800435c <audio_model_configure_activations+0x1d0>)
 80041fa:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_output_array.data = AI_PTR(g_audio_model_activations_map[0] + 3392);
 80041fc:	4b54      	ldr	r3, [pc, #336]	; (8004350 <audio_model_configure_activations+0x1c4>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f503 6354 	add.w	r3, r3, #3392	; 0xd40
 8004204:	4a56      	ldr	r2, [pc, #344]	; (8004360 <audio_model_configure_activations+0x1d4>)
 8004206:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 3392);
 8004208:	4b51      	ldr	r3, [pc, #324]	; (8004350 <audio_model_configure_activations+0x1c4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f503 6354 	add.w	r3, r3, #3392	; 0xd40
 8004210:	4a53      	ldr	r2, [pc, #332]	; (8004360 <audio_model_configure_activations+0x1d4>)
 8004212:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_pad_before_output_array.data = AI_PTR(g_audio_model_activations_map[0] + 768);
 8004214:	4b4e      	ldr	r3, [pc, #312]	; (8004350 <audio_model_configure_activations+0x1c4>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800421c:	4a51      	ldr	r2, [pc, #324]	; (8004364 <audio_model_configure_activations+0x1d8>)
 800421e:	6093      	str	r3, [r2, #8]
    conv2d_2_pad_before_output_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 768);
 8004220:	4b4b      	ldr	r3, [pc, #300]	; (8004350 <audio_model_configure_activations+0x1c4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004228:	4a4e      	ldr	r2, [pc, #312]	; (8004364 <audio_model_configure_activations+0x1d8>)
 800422a:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_scratch0_array.data = AI_PTR(g_audio_model_activations_map[0] + 27968);
 800422c:	4b48      	ldr	r3, [pc, #288]	; (8004350 <audio_model_configure_activations+0x1c4>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f503 43da 	add.w	r3, r3, #27904	; 0x6d00
 8004234:	3340      	adds	r3, #64	; 0x40
 8004236:	4a4c      	ldr	r2, [pc, #304]	; (8004368 <audio_model_configure_activations+0x1dc>)
 8004238:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 27968);
 800423a:	4b45      	ldr	r3, [pc, #276]	; (8004350 <audio_model_configure_activations+0x1c4>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f503 43da 	add.w	r3, r3, #27904	; 0x6d00
 8004242:	3340      	adds	r3, #64	; 0x40
 8004244:	4a48      	ldr	r2, [pc, #288]	; (8004368 <audio_model_configure_activations+0x1dc>)
 8004246:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_scratch1_array.data = AI_PTR(g_audio_model_activations_map[0] + 34112);
 8004248:	4b41      	ldr	r3, [pc, #260]	; (8004350 <audio_model_configure_activations+0x1c4>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
 8004250:	3340      	adds	r3, #64	; 0x40
 8004252:	4a46      	ldr	r2, [pc, #280]	; (800436c <audio_model_configure_activations+0x1e0>)
 8004254:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch1_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 34112);
 8004256:	4b3e      	ldr	r3, [pc, #248]	; (8004350 <audio_model_configure_activations+0x1c4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
 800425e:	3340      	adds	r3, #64	; 0x40
 8004260:	4a42      	ldr	r2, [pc, #264]	; (800436c <audio_model_configure_activations+0x1e0>)
 8004262:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_output_array.data = AI_PTR(g_audio_model_activations_map[0] + 0);
 8004264:	4b3a      	ldr	r3, [pc, #232]	; (8004350 <audio_model_configure_activations+0x1c4>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a41      	ldr	r2, [pc, #260]	; (8004370 <audio_model_configure_activations+0x1e4>)
 800426a:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 0);
 800426c:	4b38      	ldr	r3, [pc, #224]	; (8004350 <audio_model_configure_activations+0x1c4>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a3f      	ldr	r2, [pc, #252]	; (8004370 <audio_model_configure_activations+0x1e4>)
 8004272:	60d3      	str	r3, [r2, #12]
    
    conv2d_4_pad_before_output_array.data = AI_PTR(g_audio_model_activations_map[0] + 12288);
 8004274:	4b36      	ldr	r3, [pc, #216]	; (8004350 <audio_model_configure_activations+0x1c4>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800427c:	4a3d      	ldr	r2, [pc, #244]	; (8004374 <audio_model_configure_activations+0x1e8>)
 800427e:	6093      	str	r3, [r2, #8]
    conv2d_4_pad_before_output_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 12288);
 8004280:	4b33      	ldr	r3, [pc, #204]	; (8004350 <audio_model_configure_activations+0x1c4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004288:	4a3a      	ldr	r2, [pc, #232]	; (8004374 <audio_model_configure_activations+0x1e8>)
 800428a:	60d3      	str	r3, [r2, #12]
    
    conv2d_4_scratch0_array.data = AI_PTR(g_audio_model_activations_map[0] + 0);
 800428c:	4b30      	ldr	r3, [pc, #192]	; (8004350 <audio_model_configure_activations+0x1c4>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a39      	ldr	r2, [pc, #228]	; (8004378 <audio_model_configure_activations+0x1ec>)
 8004292:	6093      	str	r3, [r2, #8]
    conv2d_4_scratch0_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 0);
 8004294:	4b2e      	ldr	r3, [pc, #184]	; (8004350 <audio_model_configure_activations+0x1c4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a37      	ldr	r2, [pc, #220]	; (8004378 <audio_model_configure_activations+0x1ec>)
 800429a:	60d3      	str	r3, [r2, #12]
    
    conv2d_4_scratch1_array.data = AI_PTR(g_audio_model_activations_map[0] + 7168);
 800429c:	4b2c      	ldr	r3, [pc, #176]	; (8004350 <audio_model_configure_activations+0x1c4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80042a4:	4a35      	ldr	r2, [pc, #212]	; (800437c <audio_model_configure_activations+0x1f0>)
 80042a6:	6093      	str	r3, [r2, #8]
    conv2d_4_scratch1_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 7168);
 80042a8:	4b29      	ldr	r3, [pc, #164]	; (8004350 <audio_model_configure_activations+0x1c4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80042b0:	4a32      	ldr	r2, [pc, #200]	; (800437c <audio_model_configure_activations+0x1f0>)
 80042b2:	60d3      	str	r3, [r2, #12]
    
    conv2d_4_output_array.data = AI_PTR(g_audio_model_activations_map[0] + 8704);
 80042b4:	4b26      	ldr	r3, [pc, #152]	; (8004350 <audio_model_configure_activations+0x1c4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80042bc:	4a30      	ldr	r2, [pc, #192]	; (8004380 <audio_model_configure_activations+0x1f4>)
 80042be:	6093      	str	r3, [r2, #8]
    conv2d_4_output_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 8704);
 80042c0:	4b23      	ldr	r3, [pc, #140]	; (8004350 <audio_model_configure_activations+0x1c4>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80042c8:	4a2d      	ldr	r2, [pc, #180]	; (8004380 <audio_model_configure_activations+0x1f4>)
 80042ca:	60d3      	str	r3, [r2, #12]
    
    pool_6_output_array.data = AI_PTR(g_audio_model_activations_map[0] + 0);
 80042cc:	4b20      	ldr	r3, [pc, #128]	; (8004350 <audio_model_configure_activations+0x1c4>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a2c      	ldr	r2, [pc, #176]	; (8004384 <audio_model_configure_activations+0x1f8>)
 80042d2:	6093      	str	r3, [r2, #8]
    pool_6_output_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 0);
 80042d4:	4b1e      	ldr	r3, [pc, #120]	; (8004350 <audio_model_configure_activations+0x1c4>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a2a      	ldr	r2, [pc, #168]	; (8004384 <audio_model_configure_activations+0x1f8>)
 80042da:	60d3      	str	r3, [r2, #12]
    
    gemm_7_scratch0_array.data = AI_PTR(g_audio_model_activations_map[0] + 64);
 80042dc:	4b1c      	ldr	r3, [pc, #112]	; (8004350 <audio_model_configure_activations+0x1c4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3340      	adds	r3, #64	; 0x40
 80042e2:	4a29      	ldr	r2, [pc, #164]	; (8004388 <audio_model_configure_activations+0x1fc>)
 80042e4:	6093      	str	r3, [r2, #8]
    gemm_7_scratch0_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 64);
 80042e6:	4b1a      	ldr	r3, [pc, #104]	; (8004350 <audio_model_configure_activations+0x1c4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3340      	adds	r3, #64	; 0x40
 80042ec:	4a26      	ldr	r2, [pc, #152]	; (8004388 <audio_model_configure_activations+0x1fc>)
 80042ee:	60d3      	str	r3, [r2, #12]
    
    gemm_7_output_array.data = AI_PTR(g_audio_model_activations_map[0] + 192);
 80042f0:	4b17      	ldr	r3, [pc, #92]	; (8004350 <audio_model_configure_activations+0x1c4>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	33c0      	adds	r3, #192	; 0xc0
 80042f6:	4a25      	ldr	r2, [pc, #148]	; (800438c <audio_model_configure_activations+0x200>)
 80042f8:	6093      	str	r3, [r2, #8]
    gemm_7_output_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 192);
 80042fa:	4b15      	ldr	r3, [pc, #84]	; (8004350 <audio_model_configure_activations+0x1c4>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	33c0      	adds	r3, #192	; 0xc0
 8004300:	4a22      	ldr	r2, [pc, #136]	; (800438c <audio_model_configure_activations+0x200>)
 8004302:	60d3      	str	r3, [r2, #12]
    
    nl_8_scratch0_array.data = AI_PTR(g_audio_model_activations_map[0] + 0);
 8004304:	4b12      	ldr	r3, [pc, #72]	; (8004350 <audio_model_configure_activations+0x1c4>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a21      	ldr	r2, [pc, #132]	; (8004390 <audio_model_configure_activations+0x204>)
 800430a:	6093      	str	r3, [r2, #8]
    nl_8_scratch0_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 0);
 800430c:	4b10      	ldr	r3, [pc, #64]	; (8004350 <audio_model_configure_activations+0x1c4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a1f      	ldr	r2, [pc, #124]	; (8004390 <audio_model_configure_activations+0x204>)
 8004312:	60d3      	str	r3, [r2, #12]
    
    nl_8_output_array.data = AI_PTR(g_audio_model_activations_map[0] + 40);
 8004314:	4b0e      	ldr	r3, [pc, #56]	; (8004350 <audio_model_configure_activations+0x1c4>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3328      	adds	r3, #40	; 0x28
 800431a:	4a1e      	ldr	r2, [pc, #120]	; (8004394 <audio_model_configure_activations+0x208>)
 800431c:	6093      	str	r3, [r2, #8]
    nl_8_output_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 40);
 800431e:	4b0c      	ldr	r3, [pc, #48]	; (8004350 <audio_model_configure_activations+0x1c4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3328      	adds	r3, #40	; 0x28
 8004324:	4a1b      	ldr	r2, [pc, #108]	; (8004394 <audio_model_configure_activations+0x208>)
 8004326:	60d3      	str	r3, [r2, #12]
    
    conversion_9_output_array.data = AI_PTR(g_audio_model_activations_map[0] + 0);
 8004328:	4b09      	ldr	r3, [pc, #36]	; (8004350 <audio_model_configure_activations+0x1c4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a1a      	ldr	r2, [pc, #104]	; (8004398 <audio_model_configure_activations+0x20c>)
 800432e:	6093      	str	r3, [r2, #8]
    conversion_9_output_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 0);
 8004330:	4b07      	ldr	r3, [pc, #28]	; (8004350 <audio_model_configure_activations+0x1c4>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a18      	ldr	r2, [pc, #96]	; (8004398 <audio_model_configure_activations+0x20c>)
 8004336:	60d3      	str	r3, [r2, #12]
    
    return true;
 8004338:	2301      	movs	r3, #1
 800433a:	e005      	b.n	8004348 <audio_model_configure_activations+0x1bc>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800433c:	2213      	movs	r2, #19
 800433e:	2130      	movs	r1, #48	; 0x30
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 fadb 	bl	80048fc <ai_platform_network_set_error>
  return false;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	200026f0 	.word	0x200026f0
 8004354:	2000196c 	.word	0x2000196c
 8004358:	200018ec 	.word	0x200018ec
 800435c:	200018fc 	.word	0x200018fc
 8004360:	2000197c 	.word	0x2000197c
 8004364:	2000198c 	.word	0x2000198c
 8004368:	2000190c 	.word	0x2000190c
 800436c:	2000191c 	.word	0x2000191c
 8004370:	2000199c 	.word	0x2000199c
 8004374:	2000180c 	.word	0x2000180c
 8004378:	2000192c 	.word	0x2000192c
 800437c:	2000193c 	.word	0x2000193c
 8004380:	2000181c 	.word	0x2000181c
 8004384:	2000182c 	.word	0x2000182c
 8004388:	2000194c 	.word	0x2000194c
 800438c:	2000183c 	.word	0x2000183c
 8004390:	2000195c 	.word	0x2000195c
 8004394:	2000184c 	.word	0x2000184c
 8004398:	2000185c 	.word	0x2000185c

0800439c <audio_model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool audio_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_audio_model_weights_map, 1, params)) {
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	2101      	movs	r1, #1
 80043aa:	4852      	ldr	r0, [pc, #328]	; (80044f4 <audio_model_configure_weights+0x158>)
 80043ac:	f000 f9fe 	bl	80047ac <ai_platform_get_weights_map>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 8094 	beq.w	80044e0 <audio_model_configure_weights+0x144>
    /* Updating weights (byte) offsets */
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80043b8:	4b4f      	ldr	r3, [pc, #316]	; (80044f8 <audio_model_configure_weights+0x15c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043c0:	4a4d      	ldr	r2, [pc, #308]	; (80044f8 <audio_model_configure_weights+0x15c>)
 80043c2:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_audio_model_weights_map[0] + 0);
 80043c4:	4b4b      	ldr	r3, [pc, #300]	; (80044f4 <audio_model_configure_weights+0x158>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a4b      	ldr	r2, [pc, #300]	; (80044f8 <audio_model_configure_weights+0x15c>)
 80043ca:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(g_audio_model_weights_map[0] + 0);
 80043cc:	4b49      	ldr	r3, [pc, #292]	; (80044f4 <audio_model_configure_weights+0x158>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a49      	ldr	r2, [pc, #292]	; (80044f8 <audio_model_configure_weights+0x15c>)
 80043d2:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80043d4:	4b49      	ldr	r3, [pc, #292]	; (80044fc <audio_model_configure_weights+0x160>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043dc:	4a47      	ldr	r2, [pc, #284]	; (80044fc <audio_model_configure_weights+0x160>)
 80043de:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_audio_model_weights_map[0] + 144);
 80043e0:	4b44      	ldr	r3, [pc, #272]	; (80044f4 <audio_model_configure_weights+0x158>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3390      	adds	r3, #144	; 0x90
 80043e6:	4a45      	ldr	r2, [pc, #276]	; (80044fc <audio_model_configure_weights+0x160>)
 80043e8:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(g_audio_model_weights_map[0] + 144);
 80043ea:	4b42      	ldr	r3, [pc, #264]	; (80044f4 <audio_model_configure_weights+0x158>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3390      	adds	r3, #144	; 0x90
 80043f0:	4a42      	ldr	r2, [pc, #264]	; (80044fc <audio_model_configure_weights+0x160>)
 80043f2:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80043f4:	4b42      	ldr	r3, [pc, #264]	; (8004500 <audio_model_configure_weights+0x164>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043fc:	4a40      	ldr	r2, [pc, #256]	; (8004500 <audio_model_configure_weights+0x164>)
 80043fe:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_audio_model_weights_map[0] + 208);
 8004400:	4b3c      	ldr	r3, [pc, #240]	; (80044f4 <audio_model_configure_weights+0x158>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	33d0      	adds	r3, #208	; 0xd0
 8004406:	4a3e      	ldr	r2, [pc, #248]	; (8004500 <audio_model_configure_weights+0x164>)
 8004408:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(g_audio_model_weights_map[0] + 208);
 800440a:	4b3a      	ldr	r3, [pc, #232]	; (80044f4 <audio_model_configure_weights+0x158>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	33d0      	adds	r3, #208	; 0xd0
 8004410:	4a3b      	ldr	r2, [pc, #236]	; (8004500 <audio_model_configure_weights+0x164>)
 8004412:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004414:	4b3b      	ldr	r3, [pc, #236]	; (8004504 <audio_model_configure_weights+0x168>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800441c:	4a39      	ldr	r2, [pc, #228]	; (8004504 <audio_model_configure_weights+0x168>)
 800441e:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_audio_model_weights_map[0] + 4816);
 8004420:	4b34      	ldr	r3, [pc, #208]	; (80044f4 <audio_model_configure_weights+0x158>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 8004428:	3310      	adds	r3, #16
 800442a:	4a36      	ldr	r2, [pc, #216]	; (8004504 <audio_model_configure_weights+0x168>)
 800442c:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(g_audio_model_weights_map[0] + 4816);
 800442e:	4b31      	ldr	r3, [pc, #196]	; (80044f4 <audio_model_configure_weights+0x158>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 8004436:	3310      	adds	r3, #16
 8004438:	4a32      	ldr	r2, [pc, #200]	; (8004504 <audio_model_configure_weights+0x168>)
 800443a:	60d3      	str	r3, [r2, #12]
    
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800443c:	4b32      	ldr	r3, [pc, #200]	; (8004508 <audio_model_configure_weights+0x16c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004444:	4a30      	ldr	r2, [pc, #192]	; (8004508 <audio_model_configure_weights+0x16c>)
 8004446:	6013      	str	r3, [r2, #0]
    conv2d_4_weights_array.data = AI_PTR(g_audio_model_weights_map[0] + 4944);
 8004448:	4b2a      	ldr	r3, [pc, #168]	; (80044f4 <audio_model_configure_weights+0x158>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8004450:	3310      	adds	r3, #16
 8004452:	4a2d      	ldr	r2, [pc, #180]	; (8004508 <audio_model_configure_weights+0x16c>)
 8004454:	6093      	str	r3, [r2, #8]
    conv2d_4_weights_array.data_start = AI_PTR(g_audio_model_weights_map[0] + 4944);
 8004456:	4b27      	ldr	r3, [pc, #156]	; (80044f4 <audio_model_configure_weights+0x158>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 800445e:	3310      	adds	r3, #16
 8004460:	4a29      	ldr	r2, [pc, #164]	; (8004508 <audio_model_configure_weights+0x16c>)
 8004462:	60d3      	str	r3, [r2, #12]
    
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8004464:	4b29      	ldr	r3, [pc, #164]	; (800450c <audio_model_configure_weights+0x170>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800446c:	4a27      	ldr	r2, [pc, #156]	; (800450c <audio_model_configure_weights+0x170>)
 800446e:	6013      	str	r3, [r2, #0]
    conv2d_4_bias_array.data = AI_PTR(g_audio_model_weights_map[0] + 23376);
 8004470:	4b20      	ldr	r3, [pc, #128]	; (80044f4 <audio_model_configure_weights+0x158>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f503 43b6 	add.w	r3, r3, #23296	; 0x5b00
 8004478:	3350      	adds	r3, #80	; 0x50
 800447a:	4a24      	ldr	r2, [pc, #144]	; (800450c <audio_model_configure_weights+0x170>)
 800447c:	6093      	str	r3, [r2, #8]
    conv2d_4_bias_array.data_start = AI_PTR(g_audio_model_weights_map[0] + 23376);
 800447e:	4b1d      	ldr	r3, [pc, #116]	; (80044f4 <audio_model_configure_weights+0x158>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f503 43b6 	add.w	r3, r3, #23296	; 0x5b00
 8004486:	3350      	adds	r3, #80	; 0x50
 8004488:	4a20      	ldr	r2, [pc, #128]	; (800450c <audio_model_configure_weights+0x170>)
 800448a:	60d3      	str	r3, [r2, #12]
    
    gemm_7_weights_array.format |= AI_FMT_FLAG_CONST;
 800448c:	4b20      	ldr	r3, [pc, #128]	; (8004510 <audio_model_configure_weights+0x174>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004494:	4a1e      	ldr	r2, [pc, #120]	; (8004510 <audio_model_configure_weights+0x174>)
 8004496:	6013      	str	r3, [r2, #0]
    gemm_7_weights_array.data = AI_PTR(g_audio_model_weights_map[0] + 23632);
 8004498:	4b16      	ldr	r3, [pc, #88]	; (80044f4 <audio_model_configure_weights+0x158>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80044a0:	3350      	adds	r3, #80	; 0x50
 80044a2:	4a1b      	ldr	r2, [pc, #108]	; (8004510 <audio_model_configure_weights+0x174>)
 80044a4:	6093      	str	r3, [r2, #8]
    gemm_7_weights_array.data_start = AI_PTR(g_audio_model_weights_map[0] + 23632);
 80044a6:	4b13      	ldr	r3, [pc, #76]	; (80044f4 <audio_model_configure_weights+0x158>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80044ae:	3350      	adds	r3, #80	; 0x50
 80044b0:	4a17      	ldr	r2, [pc, #92]	; (8004510 <audio_model_configure_weights+0x174>)
 80044b2:	60d3      	str	r3, [r2, #12]
    
    gemm_7_bias_array.format |= AI_FMT_FLAG_CONST;
 80044b4:	4b17      	ldr	r3, [pc, #92]	; (8004514 <audio_model_configure_weights+0x178>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044bc:	4a15      	ldr	r2, [pc, #84]	; (8004514 <audio_model_configure_weights+0x178>)
 80044be:	6013      	str	r3, [r2, #0]
    gemm_7_bias_array.data = AI_PTR(g_audio_model_weights_map[0] + 24272);
 80044c0:	4b0c      	ldr	r3, [pc, #48]	; (80044f4 <audio_model_configure_weights+0x158>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80044c8:	3350      	adds	r3, #80	; 0x50
 80044ca:	4a12      	ldr	r2, [pc, #72]	; (8004514 <audio_model_configure_weights+0x178>)
 80044cc:	6093      	str	r3, [r2, #8]
    gemm_7_bias_array.data_start = AI_PTR(g_audio_model_weights_map[0] + 24272);
 80044ce:	4b09      	ldr	r3, [pc, #36]	; (80044f4 <audio_model_configure_weights+0x158>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80044d6:	3350      	adds	r3, #80	; 0x50
 80044d8:	4a0e      	ldr	r2, [pc, #56]	; (8004514 <audio_model_configure_weights+0x178>)
 80044da:	60d3      	str	r3, [r2, #12]
    
    return true;
 80044dc:	2301      	movs	r3, #1
 80044de:	e005      	b.n	80044ec <audio_model_configure_weights+0x150>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80044e0:	2212      	movs	r2, #18
 80044e2:	2130      	movs	r1, #48	; 0x30
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 fa09 	bl	80048fc <ai_platform_network_set_error>
  return false;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	200026f4 	.word	0x200026f4
 80044f8:	2000186c 	.word	0x2000186c
 80044fc:	2000187c 	.word	0x2000187c
 8004500:	2000188c 	.word	0x2000188c
 8004504:	2000189c 	.word	0x2000189c
 8004508:	200018ac 	.word	0x200018ac
 800450c:	200018bc 	.word	0x200018bc
 8004510:	200018cc 	.word	0x200018cc
 8004514:	200018dc 	.word	0x200018dc

08004518 <ai_audio_model_create>:
}

AI_API_ENTRY
ai_error ai_audio_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af02      	add	r7, sp, #8
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8004522:	2300      	movs	r3, #0
 8004524:	9301      	str	r3, [sp, #4]
 8004526:	2305      	movs	r3, #5
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	2301      	movs	r3, #1
 800452c:	4a04      	ldr	r2, [pc, #16]	; (8004540 <ai_audio_model_create+0x28>)
 800452e:	6839      	ldr	r1, [r7, #0]
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fb8f 	bl	8004c54 <ai_platform_network_create>
 8004536:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004538:	4618      	mov	r0, r3
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	200024d4 	.word	0x200024d4

08004544 <ai_audio_model_inputs_get>:
    return err;
}

AI_API_ENTRY
ai_buffer* ai_audio_model_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d104      	bne.n	800455e <ai_audio_model_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8004554:	4b06      	ldr	r3, [pc, #24]	; (8004570 <ai_audio_model_inputs_get+0x2c>)
 8004556:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a06      	ldr	r2, [pc, #24]	; (8004574 <ai_audio_model_inputs_get+0x30>)
 800455c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800455e:	6839      	ldr	r1, [r7, #0]
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f9d1 	bl	8004908 <ai_platform_inputs_get>
 8004566:	4603      	mov	r3, r0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	200024d4 	.word	0x200024d4
 8004574:	a1c00100 	.word	0xa1c00100

08004578 <ai_audio_model_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_audio_model_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d104      	bne.n	8004592 <ai_audio_model_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8004588:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <ai_audio_model_outputs_get+0x2c>)
 800458a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a06      	ldr	r2, [pc, #24]	; (80045a8 <ai_audio_model_outputs_get+0x30>)
 8004590:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8004592:	6839      	ldr	r1, [r7, #0]
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 fa8d 	bl	8004ab4 <ai_platform_outputs_get>
 800459a:	4603      	mov	r3, r0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	200024d4 	.word	0x200024d4
 80045a8:	a1c00100 	.word	0xa1c00100

080045ac <ai_audio_model_init>:
}

AI_API_ENTRY
ai_bool ai_audio_model_init(
  ai_handle network, const ai_network_params* params)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80045b6:	6839      	ldr	r1, [r7, #0]
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 fc21 	bl	8004e00 <ai_platform_network_init>
 80045be:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <ai_audio_model_init+0x1e>
 80045c6:	2300      	movs	r3, #0
 80045c8:	e028      	b.n	800461c <ai_audio_model_init+0x70>

  ai_bool ok = true;
 80045ca:	2301      	movs	r3, #1
 80045cc:	72fb      	strb	r3, [r7, #11]
  ok &= audio_model_configure_weights(net_ctx, params);
 80045ce:	6839      	ldr	r1, [r7, #0]
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f7ff fee3 	bl	800439c <audio_model_configure_weights>
 80045d6:	4603      	mov	r3, r0
 80045d8:	461a      	mov	r2, r3
 80045da:	7afb      	ldrb	r3, [r7, #11]
 80045dc:	4013      	ands	r3, r2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	bf14      	ite	ne
 80045e2:	2301      	movne	r3, #1
 80045e4:	2300      	moveq	r3, #0
 80045e6:	72fb      	strb	r3, [r7, #11]
  ok &= audio_model_configure_activations(net_ctx, params);
 80045e8:	6839      	ldr	r1, [r7, #0]
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f7ff fdce 	bl	800418c <audio_model_configure_activations>
 80045f0:	4603      	mov	r3, r0
 80045f2:	461a      	mov	r2, r3
 80045f4:	7afb      	ldrb	r3, [r7, #11]
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	bf14      	ite	ne
 80045fc:	2301      	movne	r3, #1
 80045fe:	2300      	moveq	r3, #0
 8004600:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fcea 	bl	8004fdc <ai_platform_network_post_init>
 8004608:	4603      	mov	r3, r0
 800460a:	461a      	mov	r2, r3
 800460c:	7afb      	ldrb	r3, [r7, #11]
 800460e:	4013      	ands	r3, r2
 8004610:	2b00      	cmp	r3, #0
 8004612:	bf14      	ite	ne
 8004614:	2301      	movne	r3, #1
 8004616:	2300      	moveq	r3, #0
 8004618:	72fb      	strb	r3, [r7, #11]

  return ok;
 800461a:	7afb      	ldrb	r3, [r7, #11]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <ai_audio_model_run>:


AI_API_ENTRY
ai_i32 ai_audio_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 fd59 	bl	80050ec <ai_platform_network_process>
 800463a:	4603      	mov	r3, r0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <ai_audio_model_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_audio_model_data_activations_buffer_get(const ai_handle ptr)
{
 8004644:	b4b0      	push	{r4, r5, r7}
 8004646:	b08f      	sub	sp, #60	; 0x3c
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800464e:	4b15      	ldr	r3, [pc, #84]	; (80046a4 <ai_audio_model_data_activations_buffer_get+0x60>)
 8004650:	61fb      	str	r3, [r7, #28]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	623b      	str	r3, [r7, #32]
 8004656:	2300      	movs	r3, #0
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
 800465a:	2300      	movs	r3, #0
 800465c:	62bb      	str	r3, [r7, #40]	; 0x28
 800465e:	f249 1340 	movw	r3, #37184	; 0x9140
 8004662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004664:	2301      	movs	r3, #1
 8004666:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466c:	2204      	movs	r2, #4
 800466e:	f362 231f 	bfi	r3, r2, #8, #24
 8004672:	633b      	str	r3, [r7, #48]	; 0x30
 8004674:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <ai_audio_model_data_activations_buffer_get+0x64>)
 8004676:	f107 040c 	add.w	r4, r7, #12
 800467a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800467c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004680:	f107 030c 	add.w	r3, r7, #12
 8004684:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_AUDIO_MODEL_DATA_ACTIVATIONS_SIZE, 1, AI_AUDIO_MODEL_DATA_ACTIVATIONS_COUNT),
    AI_AUDIO_MODEL_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	461d      	mov	r5, r3
 800468a:	f107 041c 	add.w	r4, r7, #28
 800468e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004692:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004696:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	373c      	adds	r7, #60	; 0x3c
 800469e:	46bd      	mov	sp, r7
 80046a0:	bcb0      	pop	{r4, r5, r7}
 80046a2:	4770      	bx	lr
 80046a4:	00040440 	.word	0x00040440
 80046a8:	0800f1c8 	.word	0x0800f1c8

080046ac <ai_audio_model_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_audio_model_data_weights_buffer_get(const ai_handle ptr)
{
 80046ac:	b4b0      	push	{r4, r5, r7}
 80046ae:	b08f      	sub	sp, #60	; 0x3c
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 80046b6:	4b15      	ldr	r3, [pc, #84]	; (800470c <ai_audio_model_data_weights_buffer_get+0x60>)
 80046b8:	61fb      	str	r3, [r7, #28]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	623b      	str	r3, [r7, #32]
 80046be:	2300      	movs	r3, #0
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24
 80046c2:	2300      	movs	r3, #0
 80046c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80046c6:	f645 63f8 	movw	r3, #24312	; 0x5ef8
 80046ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	2204      	movs	r2, #4
 80046d6:	f362 231f 	bfi	r3, r2, #8, #24
 80046da:	633b      	str	r3, [r7, #48]	; 0x30
 80046dc:	4b0c      	ldr	r3, [pc, #48]	; (8004710 <ai_audio_model_data_weights_buffer_get+0x64>)
 80046de:	f107 040c 	add.w	r4, r7, #12
 80046e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80046e8:	f107 030c 	add.w	r3, r7, #12
 80046ec:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_AUDIO_MODEL_DATA_WEIGHTS_SIZE, 1, AI_AUDIO_MODEL_DATA_WEIGHTS_COUNT),
    AI_AUDIO_MODEL_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	461d      	mov	r5, r3
 80046f2:	f107 041c 	add.w	r4, r7, #28
 80046f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046fa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80046fe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	373c      	adds	r7, #60	; 0x3c
 8004706:	46bd      	mov	sp, r7
 8004708:	bcb0      	pop	{r4, r5, r7}
 800470a:	4770      	bx	lr
 800470c:	40040440 	.word	0x40040440
 8004710:	0800f1d8 	.word	0x0800f1d8

08004714 <ai_audio_model_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_audio_model_data_weights_get(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_audio_model_weights_table);
 8004718:	4b02      	ldr	r3, [pc, #8]	; (8004724 <ai_audio_model_data_weights_get+0x10>)

}
 800471a:	4618      	mov	r0, r3
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	20002578 	.word	0x20002578

08004728 <ai_buffer_get_size>:
 8004728:	b378      	cbz	r0, 800478a <ai_buffer_get_size+0x62>
 800472a:	b410      	push	{r4}
 800472c:	6803      	ldr	r3, [r0, #0]
 800472e:	4a17      	ldr	r2, [pc, #92]	; (800478c <ai_buffer_get_size+0x64>)
 8004730:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004734:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004738:	4293      	cmp	r3, r2
 800473a:	d01e      	beq.n	800477a <ai_buffer_get_size+0x52>
 800473c:	6984      	ldr	r4, [r0, #24]
 800473e:	6862      	ldr	r2, [r4, #4]
 8004740:	7d03      	ldrb	r3, [r0, #20]
 8004742:	6941      	ldr	r1, [r0, #20]
 8004744:	f1a3 0301 	sub.w	r3, r3, #1
 8004748:	fab3 f383 	clz	r3, r3
 800474c:	095b      	lsrs	r3, r3, #5
 800474e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8004752:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8004756:	da0b      	bge.n	8004770 <ai_buffer_get_size+0x48>
 8004758:	2b01      	cmp	r3, #1
 800475a:	d102      	bne.n	8004762 <ai_buffer_get_size+0x3a>
 800475c:	2802      	cmp	r0, #2
 800475e:	d007      	beq.n	8004770 <ai_buffer_get_size+0x48>
 8004760:	2302      	movs	r3, #2
 8004762:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8004766:	3301      	adds	r3, #1
 8004768:	4298      	cmp	r0, r3
 800476a:	fb01 f202 	mul.w	r2, r1, r2
 800476e:	d1f3      	bne.n	8004758 <ai_buffer_get_size+0x30>
 8004770:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8004774:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	2900      	cmp	r1, #0
 800477c:	d0de      	beq.n	800473c <ai_buffer_get_size+0x14>
 800477e:	6984      	ldr	r4, [r0, #24]
 8004780:	6863      	ldr	r3, [r4, #4]
 8004782:	331f      	adds	r3, #31
 8004784:	f023 021f 	bic.w	r2, r3, #31
 8004788:	e7da      	b.n	8004740 <ai_buffer_get_size+0x18>
 800478a:	4770      	bx	lr
 800478c:	000400c0 	.word	0x000400c0

08004790 <ai_buffer_array_sane>:
 8004790:	b138      	cbz	r0, 80047a2 <ai_buffer_array_sane+0x12>
 8004792:	6843      	ldr	r3, [r0, #4]
 8004794:	b123      	cbz	r3, 80047a0 <ai_buffer_array_sane+0x10>
 8004796:	8840      	ldrh	r0, [r0, #2]
 8004798:	3800      	subs	r0, #0
 800479a:	bf18      	it	ne
 800479c:	2001      	movne	r0, #1
 800479e:	4770      	bx	lr
 80047a0:	4618      	mov	r0, r3
 80047a2:	4770      	bx	lr

080047a4 <_ai_platform_acquire_crc>:
 80047a4:	2001      	movs	r0, #1
 80047a6:	4770      	bx	lr

080047a8 <_ai_platform_release_crc>:
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop

080047ac <ai_platform_get_weights_map>:
 80047ac:	2a00      	cmp	r2, #0
 80047ae:	d037      	beq.n	8004820 <ai_platform_get_weights_map+0x74>
 80047b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b2:	4604      	mov	r4, r0
 80047b4:	b1a0      	cbz	r0, 80047e0 <ai_platform_get_weights_map+0x34>
 80047b6:	460f      	mov	r7, r1
 80047b8:	b191      	cbz	r1, 80047e0 <ai_platform_get_weights_map+0x34>
 80047ba:	4b25      	ldr	r3, [pc, #148]	; (8004850 <ai_platform_get_weights_map+0xa4>)
 80047bc:	6810      	ldr	r0, [r2, #0]
 80047be:	4298      	cmp	r0, r3
 80047c0:	4615      	mov	r5, r2
 80047c2:	d00f      	beq.n	80047e4 <ai_platform_get_weights_map+0x38>
 80047c4:	6855      	ldr	r5, [r2, #4]
 80047c6:	b15d      	cbz	r5, 80047e0 <ai_platform_get_weights_map+0x34>
 80047c8:	682e      	ldr	r6, [r5, #0]
 80047ca:	429e      	cmp	r6, r3
 80047cc:	d02a      	beq.n	8004824 <ai_platform_get_weights_map+0x78>
 80047ce:	f1a1 0001 	sub.w	r0, r1, #1
 80047d2:	6025      	str	r5, [r4, #0]
 80047d4:	fab0 f080 	clz	r0, r0
 80047d8:	0940      	lsrs	r0, r0, #5
 80047da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047dc:	42a7      	cmp	r7, r4
 80047de:	d034      	beq.n	800484a <ai_platform_get_weights_map+0x9e>
 80047e0:	2000      	movs	r0, #0
 80047e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047e4:	1d10      	adds	r0, r2, #4
 80047e6:	f7ff ffd3 	bl	8004790 <ai_buffer_array_sane>
 80047ea:	2800      	cmp	r0, #0
 80047ec:	d0f8      	beq.n	80047e0 <ai_platform_get_weights_map+0x34>
 80047ee:	88eb      	ldrh	r3, [r5, #6]
 80047f0:	429f      	cmp	r7, r3
 80047f2:	d1f5      	bne.n	80047e0 <ai_platform_get_weights_map+0x34>
 80047f4:	f04f 0e00 	mov.w	lr, #0
 80047f8:	1f23      	subs	r3, r4, #4
 80047fa:	4670      	mov	r0, lr
 80047fc:	68aa      	ldr	r2, [r5, #8]
 80047fe:	eb02 0c0e 	add.w	ip, r2, lr
 8004802:	f10e 0e1c 	add.w	lr, lr, #28
 8004806:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800480a:	b124      	cbz	r4, 8004816 <ai_platform_get_weights_map+0x6a>
 800480c:	3001      	adds	r0, #1
 800480e:	4287      	cmp	r7, r0
 8004810:	f843 4f04 	str.w	r4, [r3, #4]!
 8004814:	d1f2      	bne.n	80047fc <ai_platform_get_weights_map+0x50>
 8004816:	1a38      	subs	r0, r7, r0
 8004818:	fab0 f080 	clz	r0, r0
 800481c:	0940      	lsrs	r0, r0, #5
 800481e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004820:	2000      	movs	r0, #0
 8004822:	4770      	bx	lr
 8004824:	1f23      	subs	r3, r4, #4
 8004826:	4628      	mov	r0, r5
 8004828:	2400      	movs	r4, #0
 800482a:	e000      	b.n	800482e <ai_platform_get_weights_map+0x82>
 800482c:	4614      	mov	r4, r2
 800482e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8004832:	42b2      	cmp	r2, r6
 8004834:	d0d2      	beq.n	80047dc <ai_platform_get_weights_map+0x30>
 8004836:	f843 2f04 	str.w	r2, [r3, #4]!
 800483a:	1c62      	adds	r2, r4, #1
 800483c:	4297      	cmp	r7, r2
 800483e:	d1f5      	bne.n	800482c <ai_platform_get_weights_map+0x80>
 8004840:	3402      	adds	r4, #2
 8004842:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004846:	42b3      	cmp	r3, r6
 8004848:	d1ca      	bne.n	80047e0 <ai_platform_get_weights_map+0x34>
 800484a:	2001      	movs	r0, #1
 800484c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800484e:	bf00      	nop
 8004850:	a1facade 	.word	0xa1facade

08004854 <ai_platform_get_activations_map>:
 8004854:	2a00      	cmp	r2, #0
 8004856:	d038      	beq.n	80048ca <ai_platform_get_activations_map+0x76>
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	4604      	mov	r4, r0
 800485c:	b1a0      	cbz	r0, 8004888 <ai_platform_get_activations_map+0x34>
 800485e:	460f      	mov	r7, r1
 8004860:	b191      	cbz	r1, 8004888 <ai_platform_get_activations_map+0x34>
 8004862:	4b25      	ldr	r3, [pc, #148]	; (80048f8 <ai_platform_get_activations_map+0xa4>)
 8004864:	6810      	ldr	r0, [r2, #0]
 8004866:	4298      	cmp	r0, r3
 8004868:	4615      	mov	r5, r2
 800486a:	d00f      	beq.n	800488c <ai_platform_get_activations_map+0x38>
 800486c:	6a15      	ldr	r5, [r2, #32]
 800486e:	b15d      	cbz	r5, 8004888 <ai_platform_get_activations_map+0x34>
 8004870:	682e      	ldr	r6, [r5, #0]
 8004872:	429e      	cmp	r6, r3
 8004874:	d02b      	beq.n	80048ce <ai_platform_get_activations_map+0x7a>
 8004876:	f1a1 0001 	sub.w	r0, r1, #1
 800487a:	6025      	str	r5, [r4, #0]
 800487c:	fab0 f080 	clz	r0, r0
 8004880:	0940      	lsrs	r0, r0, #5
 8004882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004884:	42a7      	cmp	r7, r4
 8004886:	d035      	beq.n	80048f4 <ai_platform_get_activations_map+0xa0>
 8004888:	2000      	movs	r0, #0
 800488a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800488c:	f102 000c 	add.w	r0, r2, #12
 8004890:	f7ff ff7e 	bl	8004790 <ai_buffer_array_sane>
 8004894:	2800      	cmp	r0, #0
 8004896:	d0f7      	beq.n	8004888 <ai_platform_get_activations_map+0x34>
 8004898:	89eb      	ldrh	r3, [r5, #14]
 800489a:	429f      	cmp	r7, r3
 800489c:	d1f4      	bne.n	8004888 <ai_platform_get_activations_map+0x34>
 800489e:	f04f 0e00 	mov.w	lr, #0
 80048a2:	1f23      	subs	r3, r4, #4
 80048a4:	4670      	mov	r0, lr
 80048a6:	692a      	ldr	r2, [r5, #16]
 80048a8:	eb02 0c0e 	add.w	ip, r2, lr
 80048ac:	f10e 0e1c 	add.w	lr, lr, #28
 80048b0:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80048b4:	b124      	cbz	r4, 80048c0 <ai_platform_get_activations_map+0x6c>
 80048b6:	3001      	adds	r0, #1
 80048b8:	4287      	cmp	r7, r0
 80048ba:	f843 4f04 	str.w	r4, [r3, #4]!
 80048be:	d1f2      	bne.n	80048a6 <ai_platform_get_activations_map+0x52>
 80048c0:	1a38      	subs	r0, r7, r0
 80048c2:	fab0 f080 	clz	r0, r0
 80048c6:	0940      	lsrs	r0, r0, #5
 80048c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048ca:	2000      	movs	r0, #0
 80048cc:	4770      	bx	lr
 80048ce:	1f23      	subs	r3, r4, #4
 80048d0:	4628      	mov	r0, r5
 80048d2:	2400      	movs	r4, #0
 80048d4:	e000      	b.n	80048d8 <ai_platform_get_activations_map+0x84>
 80048d6:	4614      	mov	r4, r2
 80048d8:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80048dc:	42b2      	cmp	r2, r6
 80048de:	d0d1      	beq.n	8004884 <ai_platform_get_activations_map+0x30>
 80048e0:	f843 2f04 	str.w	r2, [r3, #4]!
 80048e4:	1c62      	adds	r2, r4, #1
 80048e6:	4297      	cmp	r7, r2
 80048e8:	d1f5      	bne.n	80048d6 <ai_platform_get_activations_map+0x82>
 80048ea:	3402      	adds	r4, #2
 80048ec:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80048f0:	42b3      	cmp	r3, r6
 80048f2:	d1c9      	bne.n	8004888 <ai_platform_get_activations_map+0x34>
 80048f4:	2001      	movs	r0, #1
 80048f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048f8:	a1facade 	.word	0xa1facade

080048fc <ai_platform_network_set_error>:
 80048fc:	b110      	cbz	r0, 8004904 <ai_platform_network_set_error+0x8>
 80048fe:	3010      	adds	r0, #16
 8004900:	f000 be7a 	b.w	80055f8 <core_set_error>
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop

08004908 <ai_platform_inputs_get>:
 8004908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800490c:	b085      	sub	sp, #20
 800490e:	9102      	str	r1, [sp, #8]
 8004910:	b1f0      	cbz	r0, 8004950 <ai_platform_inputs_get+0x48>
 8004912:	4b62      	ldr	r3, [pc, #392]	; (8004a9c <ai_platform_inputs_get+0x194>)
 8004914:	6802      	ldr	r2, [r0, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	4607      	mov	r7, r0
 800491a:	d119      	bne.n	8004950 <ai_platform_inputs_get+0x48>
 800491c:	f7ff ff42 	bl	80047a4 <_ai_platform_acquire_crc>
 8004920:	4b5f      	ldr	r3, [pc, #380]	; (8004aa0 <ai_platform_inputs_get+0x198>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800492c:	d03d      	beq.n	80049aa <ai_platform_inputs_get+0xa2>
 800492e:	4a5d      	ldr	r2, [pc, #372]	; (8004aa4 <ai_platform_inputs_get+0x19c>)
 8004930:	2301      	movs	r3, #1
 8004932:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004936:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1fb      	bne.n	8004936 <ai_platform_inputs_get+0x2e>
 800493e:	4b5a      	ldr	r3, [pc, #360]	; (8004aa8 <ai_platform_inputs_get+0x1a0>)
 8004940:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004944:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004948:	4b58      	ldr	r3, [pc, #352]	; (8004aac <ai_platform_inputs_get+0x1a4>)
 800494a:	429a      	cmp	r2, r3
 800494c:	d039      	beq.n	80049c2 <ai_platform_inputs_get+0xba>
 800494e:	e7fe      	b.n	800494e <ai_platform_inputs_get+0x46>
 8004950:	f7ff ff28 	bl	80047a4 <_ai_platform_acquire_crc>
 8004954:	4b52      	ldr	r3, [pc, #328]	; (8004aa0 <ai_platform_inputs_get+0x198>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800495c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004960:	d010      	beq.n	8004984 <ai_platform_inputs_get+0x7c>
 8004962:	4a50      	ldr	r2, [pc, #320]	; (8004aa4 <ai_platform_inputs_get+0x19c>)
 8004964:	2301      	movs	r3, #1
 8004966:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800496a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1fb      	bne.n	800496a <ai_platform_inputs_get+0x62>
 8004972:	4b4d      	ldr	r3, [pc, #308]	; (8004aa8 <ai_platform_inputs_get+0x1a0>)
 8004974:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004978:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800497c:	4b4b      	ldr	r3, [pc, #300]	; (8004aac <ai_platform_inputs_get+0x1a4>)
 800497e:	429a      	cmp	r2, r3
 8004980:	d00d      	beq.n	800499e <ai_platform_inputs_get+0x96>
 8004982:	e7fe      	b.n	8004982 <ai_platform_inputs_get+0x7a>
 8004984:	4a4a      	ldr	r2, [pc, #296]	; (8004ab0 <ai_platform_inputs_get+0x1a8>)
 8004986:	2301      	movs	r3, #1
 8004988:	6093      	str	r3, [r2, #8]
 800498a:	6893      	ldr	r3, [r2, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1fc      	bne.n	800498a <ai_platform_inputs_get+0x82>
 8004990:	4b45      	ldr	r3, [pc, #276]	; (8004aa8 <ai_platform_inputs_get+0x1a0>)
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	6812      	ldr	r2, [r2, #0]
 8004996:	4b45      	ldr	r3, [pc, #276]	; (8004aac <ai_platform_inputs_get+0x1a4>)
 8004998:	429a      	cmp	r2, r3
 800499a:	d000      	beq.n	800499e <ai_platform_inputs_get+0x96>
 800499c:	e7fe      	b.n	800499c <ai_platform_inputs_get+0x94>
 800499e:	f7ff ff03 	bl	80047a8 <_ai_platform_release_crc>
 80049a2:	2000      	movs	r0, #0
 80049a4:	b005      	add	sp, #20
 80049a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049aa:	4a41      	ldr	r2, [pc, #260]	; (8004ab0 <ai_platform_inputs_get+0x1a8>)
 80049ac:	2301      	movs	r3, #1
 80049ae:	6093      	str	r3, [r2, #8]
 80049b0:	6893      	ldr	r3, [r2, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1fc      	bne.n	80049b0 <ai_platform_inputs_get+0xa8>
 80049b6:	4b3c      	ldr	r3, [pc, #240]	; (8004aa8 <ai_platform_inputs_get+0x1a0>)
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	6812      	ldr	r2, [r2, #0]
 80049bc:	4b3b      	ldr	r3, [pc, #236]	; (8004aac <ai_platform_inputs_get+0x1a4>)
 80049be:	429a      	cmp	r2, r3
 80049c0:	d155      	bne.n	8004a6e <ai_platform_inputs_get+0x166>
 80049c2:	f7ff fef1 	bl	80047a8 <_ai_platform_release_crc>
 80049c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d051      	beq.n	8004a70 <ai_platform_inputs_get+0x168>
 80049cc:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80049d0:	f1ba 0f00 	cmp.w	sl, #0
 80049d4:	d04c      	beq.n	8004a70 <ai_platform_inputs_get+0x168>
 80049d6:	f04f 0b00 	mov.w	fp, #0
 80049da:	465d      	mov	r5, fp
 80049dc:	9703      	str	r7, [sp, #12]
 80049de:	e016      	b.n	8004a0e <ai_platform_inputs_get+0x106>
 80049e0:	9901      	ldr	r1, [sp, #4]
 80049e2:	2301      	movs	r3, #1
 80049e4:	507b      	str	r3, [r7, r1]
 80049e6:	69b1      	ldr	r1, [r6, #24]
 80049e8:	6849      	ldr	r1, [r1, #4]
 80049ea:	6121      	str	r1, [r4, #16]
 80049ec:	f04f 0301 	mov.w	r3, #1
 80049f0:	7523      	strb	r3, [r4, #20]
 80049f2:	e9c4 c200 	strd	ip, r2, [r4]
 80049f6:	6962      	ldr	r2, [r4, #20]
 80049f8:	60a0      	str	r0, [r4, #8]
 80049fa:	2300      	movs	r3, #0
 80049fc:	f369 221f 	bfi	r2, r9, #8, #24
 8004a00:	f8c4 8018 	str.w	r8, [r4, #24]
 8004a04:	60e3      	str	r3, [r4, #12]
 8004a06:	3501      	adds	r5, #1
 8004a08:	f10b 0b1c 	add.w	fp, fp, #28
 8004a0c:	6162      	str	r2, [r4, #20]
 8004a0e:	f8ba 3000 	ldrh.w	r3, [sl]
 8004a12:	42ab      	cmp	r3, r5
 8004a14:	b2aa      	uxth	r2, r5
 8004a16:	d93a      	bls.n	8004a8e <ai_platform_inputs_get+0x186>
 8004a18:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004a1c:	00e9      	lsls	r1, r5, #3
 8004a1e:	9101      	str	r1, [sp, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d034      	beq.n	8004a8e <ai_platform_inputs_get+0x186>
 8004a24:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8004a28:	2e00      	cmp	r6, #0
 8004a2a:	d030      	beq.n	8004a8e <ai_platform_inputs_get+0x186>
 8004a2c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004a30:	69b2      	ldr	r2, [r6, #24]
 8004a32:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8004a36:	6810      	ldr	r0, [r2, #0]
 8004a38:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8004a3c:	68b3      	ldr	r3, [r6, #8]
 8004a3e:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8004a42:	f009 f9f5 	bl	800de30 <ai_array_to_buffer_fmt>
 8004a46:	69b1      	ldr	r1, [r6, #24]
 8004a48:	4684      	mov	ip, r0
 8004a4a:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8004a4e:	688a      	ldr	r2, [r1, #8]
 8004a50:	445c      	add	r4, fp
 8004a52:	2800      	cmp	r0, #0
 8004a54:	d0c8      	beq.n	80049e8 <ai_platform_inputs_get+0xe0>
 8004a56:	2100      	movs	r1, #0
 8004a58:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8004a5c:	6831      	ldr	r1, [r6, #0]
 8004a5e:	6041      	str	r1, [r0, #4]
 8004a60:	b111      	cbz	r1, 8004a68 <ai_platform_inputs_get+0x160>
 8004a62:	8849      	ldrh	r1, [r1, #2]
 8004a64:	2900      	cmp	r1, #0
 8004a66:	d1bb      	bne.n	80049e0 <ai_platform_inputs_get+0xd8>
 8004a68:	69b1      	ldr	r1, [r6, #24]
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	e7bc      	b.n	80049e8 <ai_platform_inputs_get+0xe0>
 8004a6e:	e7fe      	b.n	8004a6e <ai_platform_inputs_get+0x166>
 8004a70:	2218      	movs	r2, #24
 8004a72:	2111      	movs	r1, #17
 8004a74:	f107 0010 	add.w	r0, r7, #16
 8004a78:	f000 fdbe 	bl	80055f8 <core_set_error>
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	4610      	mov	r0, r2
 8004a80:	9b02      	ldr	r3, [sp, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d08e      	beq.n	80049a4 <ai_platform_inputs_get+0x9c>
 8004a86:	801a      	strh	r2, [r3, #0]
 8004a88:	b005      	add	sp, #20
 8004a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a8e:	9f03      	ldr	r7, [sp, #12]
 8004a90:	2a00      	cmp	r2, #0
 8004a92:	d0ed      	beq.n	8004a70 <ai_platform_inputs_get+0x168>
 8004a94:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004a98:	6858      	ldr	r0, [r3, #4]
 8004a9a:	e7f1      	b.n	8004a80 <ai_platform_inputs_get+0x178>
 8004a9c:	a1c00100 	.word	0xa1c00100
 8004aa0:	e0042000 	.word	0xe0042000
 8004aa4:	58024000 	.word	0x58024000
 8004aa8:	f407a5c2 	.word	0xf407a5c2
 8004aac:	b5e8b5cd 	.word	0xb5e8b5cd
 8004ab0:	40023000 	.word	0x40023000

08004ab4 <ai_platform_outputs_get>:
 8004ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab8:	b085      	sub	sp, #20
 8004aba:	9102      	str	r1, [sp, #8]
 8004abc:	b1f0      	cbz	r0, 8004afc <ai_platform_outputs_get+0x48>
 8004abe:	4b5f      	ldr	r3, [pc, #380]	; (8004c3c <ai_platform_outputs_get+0x188>)
 8004ac0:	6802      	ldr	r2, [r0, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	4607      	mov	r7, r0
 8004ac6:	d119      	bne.n	8004afc <ai_platform_outputs_get+0x48>
 8004ac8:	f7ff fe6c 	bl	80047a4 <_ai_platform_acquire_crc>
 8004acc:	4b5c      	ldr	r3, [pc, #368]	; (8004c40 <ai_platform_outputs_get+0x18c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad8:	d03d      	beq.n	8004b56 <ai_platform_outputs_get+0xa2>
 8004ada:	4a5a      	ldr	r2, [pc, #360]	; (8004c44 <ai_platform_outputs_get+0x190>)
 8004adc:	2301      	movs	r3, #1
 8004ade:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004ae2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1fb      	bne.n	8004ae2 <ai_platform_outputs_get+0x2e>
 8004aea:	4b57      	ldr	r3, [pc, #348]	; (8004c48 <ai_platform_outputs_get+0x194>)
 8004aec:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004af0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004af4:	4b55      	ldr	r3, [pc, #340]	; (8004c4c <ai_platform_outputs_get+0x198>)
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d039      	beq.n	8004b6e <ai_platform_outputs_get+0xba>
 8004afa:	e7fe      	b.n	8004afa <ai_platform_outputs_get+0x46>
 8004afc:	f7ff fe52 	bl	80047a4 <_ai_platform_acquire_crc>
 8004b00:	4b4f      	ldr	r3, [pc, #316]	; (8004c40 <ai_platform_outputs_get+0x18c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b0c:	d010      	beq.n	8004b30 <ai_platform_outputs_get+0x7c>
 8004b0e:	4a4d      	ldr	r2, [pc, #308]	; (8004c44 <ai_platform_outputs_get+0x190>)
 8004b10:	2301      	movs	r3, #1
 8004b12:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004b16:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1fb      	bne.n	8004b16 <ai_platform_outputs_get+0x62>
 8004b1e:	4b4a      	ldr	r3, [pc, #296]	; (8004c48 <ai_platform_outputs_get+0x194>)
 8004b20:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004b24:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004b28:	4b48      	ldr	r3, [pc, #288]	; (8004c4c <ai_platform_outputs_get+0x198>)
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d00d      	beq.n	8004b4a <ai_platform_outputs_get+0x96>
 8004b2e:	e7fe      	b.n	8004b2e <ai_platform_outputs_get+0x7a>
 8004b30:	4a47      	ldr	r2, [pc, #284]	; (8004c50 <ai_platform_outputs_get+0x19c>)
 8004b32:	2301      	movs	r3, #1
 8004b34:	6093      	str	r3, [r2, #8]
 8004b36:	6893      	ldr	r3, [r2, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1fc      	bne.n	8004b36 <ai_platform_outputs_get+0x82>
 8004b3c:	4b42      	ldr	r3, [pc, #264]	; (8004c48 <ai_platform_outputs_get+0x194>)
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	6812      	ldr	r2, [r2, #0]
 8004b42:	4b42      	ldr	r3, [pc, #264]	; (8004c4c <ai_platform_outputs_get+0x198>)
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d000      	beq.n	8004b4a <ai_platform_outputs_get+0x96>
 8004b48:	e7fe      	b.n	8004b48 <ai_platform_outputs_get+0x94>
 8004b4a:	f7ff fe2d 	bl	80047a8 <_ai_platform_release_crc>
 8004b4e:	2000      	movs	r0, #0
 8004b50:	b005      	add	sp, #20
 8004b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b56:	4a3e      	ldr	r2, [pc, #248]	; (8004c50 <ai_platform_outputs_get+0x19c>)
 8004b58:	2301      	movs	r3, #1
 8004b5a:	6093      	str	r3, [r2, #8]
 8004b5c:	6893      	ldr	r3, [r2, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1fc      	bne.n	8004b5c <ai_platform_outputs_get+0xa8>
 8004b62:	4b39      	ldr	r3, [pc, #228]	; (8004c48 <ai_platform_outputs_get+0x194>)
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	6812      	ldr	r2, [r2, #0]
 8004b68:	4b38      	ldr	r3, [pc, #224]	; (8004c4c <ai_platform_outputs_get+0x198>)
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d150      	bne.n	8004c10 <ai_platform_outputs_get+0x15c>
 8004b6e:	f7ff fe1b 	bl	80047a8 <_ai_platform_release_crc>
 8004b72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d958      	bls.n	8004c2a <ai_platform_outputs_get+0x176>
 8004b78:	f04f 0b00 	mov.w	fp, #0
 8004b7c:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8004b80:	9703      	str	r7, [sp, #12]
 8004b82:	465d      	mov	r5, fp
 8004b84:	e016      	b.n	8004bb4 <ai_platform_outputs_get+0x100>
 8004b86:	9901      	ldr	r1, [sp, #4]
 8004b88:	2301      	movs	r3, #1
 8004b8a:	507b      	str	r3, [r7, r1]
 8004b8c:	69b1      	ldr	r1, [r6, #24]
 8004b8e:	6849      	ldr	r1, [r1, #4]
 8004b90:	6121      	str	r1, [r4, #16]
 8004b92:	f04f 0301 	mov.w	r3, #1
 8004b96:	7523      	strb	r3, [r4, #20]
 8004b98:	e9c4 c200 	strd	ip, r2, [r4]
 8004b9c:	6962      	ldr	r2, [r4, #20]
 8004b9e:	60a0      	str	r0, [r4, #8]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f369 221f 	bfi	r2, r9, #8, #24
 8004ba6:	f8c4 8018 	str.w	r8, [r4, #24]
 8004baa:	60e3      	str	r3, [r4, #12]
 8004bac:	3501      	adds	r5, #1
 8004bae:	f10b 0b1c 	add.w	fp, fp, #28
 8004bb2:	6162      	str	r2, [r4, #20]
 8004bb4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004bb8:	42ab      	cmp	r3, r5
 8004bba:	b2aa      	uxth	r2, r5
 8004bbc:	d929      	bls.n	8004c12 <ai_platform_outputs_get+0x15e>
 8004bbe:	f8da 3010 	ldr.w	r3, [sl, #16]
 8004bc2:	00e9      	lsls	r1, r5, #3
 8004bc4:	9101      	str	r1, [sp, #4]
 8004bc6:	b323      	cbz	r3, 8004c12 <ai_platform_outputs_get+0x15e>
 8004bc8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8004bcc:	b30e      	cbz	r6, 8004c12 <ai_platform_outputs_get+0x15e>
 8004bce:	f8da 3014 	ldr.w	r3, [sl, #20]
 8004bd2:	69b2      	ldr	r2, [r6, #24]
 8004bd4:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8004bd8:	6810      	ldr	r0, [r2, #0]
 8004bda:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8004bde:	68b3      	ldr	r3, [r6, #8]
 8004be0:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8004be4:	f009 f924 	bl	800de30 <ai_array_to_buffer_fmt>
 8004be8:	69b1      	ldr	r1, [r6, #24]
 8004bea:	4684      	mov	ip, r0
 8004bec:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8004bf0:	688a      	ldr	r2, [r1, #8]
 8004bf2:	445c      	add	r4, fp
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	d0ca      	beq.n	8004b8e <ai_platform_outputs_get+0xda>
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8004bfe:	6831      	ldr	r1, [r6, #0]
 8004c00:	6041      	str	r1, [r0, #4]
 8004c02:	b111      	cbz	r1, 8004c0a <ai_platform_outputs_get+0x156>
 8004c04:	8849      	ldrh	r1, [r1, #2]
 8004c06:	2900      	cmp	r1, #0
 8004c08:	d1bd      	bne.n	8004b86 <ai_platform_outputs_get+0xd2>
 8004c0a:	69b1      	ldr	r1, [r6, #24]
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	e7be      	b.n	8004b8e <ai_platform_outputs_get+0xda>
 8004c10:	e7fe      	b.n	8004c10 <ai_platform_outputs_get+0x15c>
 8004c12:	9f03      	ldr	r7, [sp, #12]
 8004c14:	b14a      	cbz	r2, 8004c2a <ai_platform_outputs_get+0x176>
 8004c16:	f8da 3014 	ldr.w	r3, [sl, #20]
 8004c1a:	6858      	ldr	r0, [r3, #4]
 8004c1c:	9b02      	ldr	r3, [sp, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d096      	beq.n	8004b50 <ai_platform_outputs_get+0x9c>
 8004c22:	801a      	strh	r2, [r3, #0]
 8004c24:	b005      	add	sp, #20
 8004c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c2a:	2218      	movs	r2, #24
 8004c2c:	2111      	movs	r1, #17
 8004c2e:	f107 0010 	add.w	r0, r7, #16
 8004c32:	f000 fce1 	bl	80055f8 <core_set_error>
 8004c36:	2200      	movs	r2, #0
 8004c38:	4610      	mov	r0, r2
 8004c3a:	e7ef      	b.n	8004c1c <ai_platform_outputs_get+0x168>
 8004c3c:	a1c00100 	.word	0xa1c00100
 8004c40:	e0042000 	.word	0xe0042000
 8004c44:	58024000 	.word	0x58024000
 8004c48:	f407a5c2 	.word	0xf407a5c2
 8004c4c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004c50:	40023000 	.word	0x40023000

08004c54 <ai_platform_network_create>:
 8004c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	4606      	mov	r6, r0
 8004c5c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8004c60:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8004c64:	4615      	mov	r5, r2
 8004c66:	461f      	mov	r7, r3
 8004c68:	f7ff fd9c 	bl	80047a4 <_ai_platform_acquire_crc>
 8004c6c:	b188      	cbz	r0, 8004c92 <ai_platform_network_create+0x3e>
 8004c6e:	4a5d      	ldr	r2, [pc, #372]	; (8004de4 <ai_platform_network_create+0x190>)
 8004c70:	6812      	ldr	r2, [r2, #0]
 8004c72:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004c76:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	d00e      	beq.n	8004c9c <ai_platform_network_create+0x48>
 8004c7e:	4a5a      	ldr	r2, [pc, #360]	; (8004de8 <ai_platform_network_create+0x194>)
 8004c80:	2118      	movs	r1, #24
 8004c82:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8004c86:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8004c8a:	2918      	cmp	r1, #24
 8004c8c:	d018      	beq.n	8004cc0 <ai_platform_network_create+0x6c>
 8004c8e:	f7ff fd8b 	bl	80047a8 <_ai_platform_release_crc>
 8004c92:	f244 1033 	movw	r0, #16691	; 0x4133
 8004c96:	b003      	add	sp, #12
 8004c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c9c:	4a53      	ldr	r2, [pc, #332]	; (8004dec <ai_platform_network_create+0x198>)
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	6091      	str	r1, [r2, #8]
 8004ca2:	2114      	movs	r1, #20
 8004ca4:	e001      	b.n	8004caa <ai_platform_network_create+0x56>
 8004ca6:	3901      	subs	r1, #1
 8004ca8:	d002      	beq.n	8004cb0 <ai_platform_network_create+0x5c>
 8004caa:	6894      	ldr	r4, [r2, #8]
 8004cac:	2c00      	cmp	r4, #0
 8004cae:	d1fa      	bne.n	8004ca6 <ai_platform_network_create+0x52>
 8004cb0:	4a4e      	ldr	r2, [pc, #312]	; (8004dec <ai_platform_network_create+0x198>)
 8004cb2:	6891      	ldr	r1, [r2, #8]
 8004cb4:	b911      	cbnz	r1, 8004cbc <ai_platform_network_create+0x68>
 8004cb6:	6812      	ldr	r2, [r2, #0]
 8004cb8:	3201      	adds	r2, #1
 8004cba:	d008      	beq.n	8004cce <ai_platform_network_create+0x7a>
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	e7e6      	b.n	8004c8e <ai_platform_network_create+0x3a>
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8004cc6:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8004cca:	2900      	cmp	r1, #0
 8004ccc:	d1fb      	bne.n	8004cc6 <ai_platform_network_create+0x72>
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7ff fd6a 	bl	80047a8 <_ai_platform_release_crc>
 8004cd4:	f7ff fd66 	bl	80047a4 <_ai_platform_acquire_crc>
 8004cd8:	4b42      	ldr	r3, [pc, #264]	; (8004de4 <ai_platform_network_create+0x190>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ce4:	d010      	beq.n	8004d08 <ai_platform_network_create+0xb4>
 8004ce6:	4b40      	ldr	r3, [pc, #256]	; (8004de8 <ai_platform_network_create+0x194>)
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8004cee:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8004cf2:	2900      	cmp	r1, #0
 8004cf4:	d1fb      	bne.n	8004cee <ai_platform_network_create+0x9a>
 8004cf6:	4a3e      	ldr	r2, [pc, #248]	; (8004df0 <ai_platform_network_create+0x19c>)
 8004cf8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8004cfc:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8004d00:	4b3c      	ldr	r3, [pc, #240]	; (8004df4 <ai_platform_network_create+0x1a0>)
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d00c      	beq.n	8004d20 <ai_platform_network_create+0xcc>
 8004d06:	e7fe      	b.n	8004d06 <ai_platform_network_create+0xb2>
 8004d08:	4a38      	ldr	r2, [pc, #224]	; (8004dec <ai_platform_network_create+0x198>)
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	6093      	str	r3, [r2, #8]
 8004d0e:	6893      	ldr	r3, [r2, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1fc      	bne.n	8004d0e <ai_platform_network_create+0xba>
 8004d14:	4b36      	ldr	r3, [pc, #216]	; (8004df0 <ai_platform_network_create+0x19c>)
 8004d16:	6013      	str	r3, [r2, #0]
 8004d18:	6812      	ldr	r2, [r2, #0]
 8004d1a:	4b36      	ldr	r3, [pc, #216]	; (8004df4 <ai_platform_network_create+0x1a0>)
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d122      	bne.n	8004d66 <ai_platform_network_create+0x112>
 8004d20:	f7ff fd42 	bl	80047a8 <_ai_platform_release_crc>
 8004d24:	b38e      	cbz	r6, 8004d8a <ai_platform_network_create+0x136>
 8004d26:	4b34      	ldr	r3, [pc, #208]	; (8004df8 <ai_platform_network_create+0x1a4>)
 8004d28:	602b      	str	r3, [r5, #0]
 8004d2a:	6035      	str	r5, [r6, #0]
 8004d2c:	f000 fc62 	bl	80055f4 <core_init>
 8004d30:	b1d0      	cbz	r0, 8004d68 <ai_platform_network_create+0x114>
 8004d32:	f7ff fd37 	bl	80047a4 <_ai_platform_acquire_crc>
 8004d36:	4b2b      	ldr	r3, [pc, #172]	; (8004de4 <ai_platform_network_create+0x190>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d42:	d025      	beq.n	8004d90 <ai_platform_network_create+0x13c>
 8004d44:	4a28      	ldr	r2, [pc, #160]	; (8004de8 <ai_platform_network_create+0x194>)
 8004d46:	2301      	movs	r3, #1
 8004d48:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004d4c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1fb      	bne.n	8004d4c <ai_platform_network_create+0xf8>
 8004d54:	4b26      	ldr	r3, [pc, #152]	; (8004df0 <ai_platform_network_create+0x19c>)
 8004d56:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004d5a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004d5e:	4b25      	ldr	r3, [pc, #148]	; (8004df4 <ai_platform_network_create+0x1a0>)
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d022      	beq.n	8004daa <ai_platform_network_create+0x156>
 8004d64:	e7fe      	b.n	8004d64 <ai_platform_network_create+0x110>
 8004d66:	e7fe      	b.n	8004d66 <ai_platform_network_create+0x112>
 8004d68:	2430      	movs	r4, #48	; 0x30
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	6033      	str	r3, [r6, #0]
 8004d6e:	2610      	movs	r6, #16
 8004d70:	464a      	mov	r2, r9
 8004d72:	4641      	mov	r1, r8
 8004d74:	4638      	mov	r0, r7
 8004d76:	f009 f901 	bl	800df7c <ai_version_get>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	f364 0007 	bfi	r0, r4, #0, #8
 8004d82:	64ab      	str	r3, [r5, #72]	; 0x48
 8004d84:	f366 201f 	bfi	r0, r6, #8, #24
 8004d88:	e785      	b.n	8004c96 <ai_platform_network_create+0x42>
 8004d8a:	f241 0010 	movw	r0, #4112	; 0x1010
 8004d8e:	e782      	b.n	8004c96 <ai_platform_network_create+0x42>
 8004d90:	4a16      	ldr	r2, [pc, #88]	; (8004dec <ai_platform_network_create+0x198>)
 8004d92:	2301      	movs	r3, #1
 8004d94:	6093      	str	r3, [r2, #8]
 8004d96:	6893      	ldr	r3, [r2, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1fc      	bne.n	8004d96 <ai_platform_network_create+0x142>
 8004d9c:	4b14      	ldr	r3, [pc, #80]	; (8004df0 <ai_platform_network_create+0x19c>)
 8004d9e:	6013      	str	r3, [r2, #0]
 8004da0:	6812      	ldr	r2, [r2, #0]
 8004da2:	4b14      	ldr	r3, [pc, #80]	; (8004df4 <ai_platform_network_create+0x1a0>)
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d000      	beq.n	8004daa <ai_platform_network_create+0x156>
 8004da8:	e7fe      	b.n	8004da8 <ai_platform_network_create+0x154>
 8004daa:	f7ff fcfd 	bl	80047a8 <_ai_platform_release_crc>
 8004dae:	2200      	movs	r2, #0
 8004db0:	4641      	mov	r1, r8
 8004db2:	4638      	mov	r0, r7
 8004db4:	f009 f8e2 	bl	800df7c <ai_version_get>
 8004db8:	2200      	movs	r2, #0
 8004dba:	4604      	mov	r4, r0
 8004dbc:	2105      	movs	r1, #5
 8004dbe:	2001      	movs	r0, #1
 8004dc0:	f009 f8dc 	bl	800df7c <ai_version_get>
 8004dc4:	4284      	cmp	r4, r0
 8004dc6:	d001      	beq.n	8004dcc <ai_platform_network_create+0x178>
 8004dc8:	2401      	movs	r4, #1
 8004dca:	e7ce      	b.n	8004d6a <ai_platform_network_create+0x116>
 8004dcc:	4b0b      	ldr	r3, [pc, #44]	; (8004dfc <ai_platform_network_create+0x1a8>)
 8004dce:	9301      	str	r3, [sp, #4]
 8004dd0:	a801      	add	r0, sp, #4
 8004dd2:	f000 fd6b 	bl	80058ac <ai_check_custom_types>
 8004dd6:	b110      	cbz	r0, 8004dde <ai_platform_network_create+0x18a>
 8004dd8:	2600      	movs	r6, #0
 8004dda:	4634      	mov	r4, r6
 8004ddc:	e7c8      	b.n	8004d70 <ai_platform_network_create+0x11c>
 8004dde:	2402      	movs	r4, #2
 8004de0:	e7c3      	b.n	8004d6a <ai_platform_network_create+0x116>
 8004de2:	bf00      	nop
 8004de4:	e0042000 	.word	0xe0042000
 8004de8:	58024000 	.word	0x58024000
 8004dec:	40023000 	.word	0x40023000
 8004df0:	f407a5c2 	.word	0xf407a5c2
 8004df4:	b5e8b5cd 	.word	0xb5e8b5cd
 8004df8:	a1c00100 	.word	0xa1c00100
 8004dfc:	84048403 	.word	0x84048403

08004e00 <ai_platform_network_init>:
 8004e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e04:	b1f8      	cbz	r0, 8004e46 <ai_platform_network_init+0x46>
 8004e06:	4b6e      	ldr	r3, [pc, #440]	; (8004fc0 <ai_platform_network_init+0x1c0>)
 8004e08:	6802      	ldr	r2, [r0, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	d11a      	bne.n	8004e46 <ai_platform_network_init+0x46>
 8004e10:	460e      	mov	r6, r1
 8004e12:	f7ff fcc7 	bl	80047a4 <_ai_platform_acquire_crc>
 8004e16:	4b6b      	ldr	r3, [pc, #428]	; (8004fc4 <ai_platform_network_init+0x1c4>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e22:	d03d      	beq.n	8004ea0 <ai_platform_network_init+0xa0>
 8004e24:	4a68      	ldr	r2, [pc, #416]	; (8004fc8 <ai_platform_network_init+0x1c8>)
 8004e26:	2301      	movs	r3, #1
 8004e28:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004e2c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1fb      	bne.n	8004e2c <ai_platform_network_init+0x2c>
 8004e34:	4b65      	ldr	r3, [pc, #404]	; (8004fcc <ai_platform_network_init+0x1cc>)
 8004e36:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004e3a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004e3e:	4b64      	ldr	r3, [pc, #400]	; (8004fd0 <ai_platform_network_init+0x1d0>)
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d039      	beq.n	8004eb8 <ai_platform_network_init+0xb8>
 8004e44:	e7fe      	b.n	8004e44 <ai_platform_network_init+0x44>
 8004e46:	f7ff fcad 	bl	80047a4 <_ai_platform_acquire_crc>
 8004e4a:	4b5e      	ldr	r3, [pc, #376]	; (8004fc4 <ai_platform_network_init+0x1c4>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e56:	d010      	beq.n	8004e7a <ai_platform_network_init+0x7a>
 8004e58:	4a5b      	ldr	r2, [pc, #364]	; (8004fc8 <ai_platform_network_init+0x1c8>)
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004e60:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1fb      	bne.n	8004e60 <ai_platform_network_init+0x60>
 8004e68:	4b58      	ldr	r3, [pc, #352]	; (8004fcc <ai_platform_network_init+0x1cc>)
 8004e6a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004e6e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004e72:	4b57      	ldr	r3, [pc, #348]	; (8004fd0 <ai_platform_network_init+0x1d0>)
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d00d      	beq.n	8004e94 <ai_platform_network_init+0x94>
 8004e78:	e7fe      	b.n	8004e78 <ai_platform_network_init+0x78>
 8004e7a:	4a56      	ldr	r2, [pc, #344]	; (8004fd4 <ai_platform_network_init+0x1d4>)
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	6093      	str	r3, [r2, #8]
 8004e80:	6893      	ldr	r3, [r2, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1fc      	bne.n	8004e80 <ai_platform_network_init+0x80>
 8004e86:	4b51      	ldr	r3, [pc, #324]	; (8004fcc <ai_platform_network_init+0x1cc>)
 8004e88:	6013      	str	r3, [r2, #0]
 8004e8a:	6812      	ldr	r2, [r2, #0]
 8004e8c:	4b50      	ldr	r3, [pc, #320]	; (8004fd0 <ai_platform_network_init+0x1d0>)
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d000      	beq.n	8004e94 <ai_platform_network_init+0x94>
 8004e92:	e7fe      	b.n	8004e92 <ai_platform_network_init+0x92>
 8004e94:	f7ff fc88 	bl	80047a8 <_ai_platform_release_crc>
 8004e98:	2600      	movs	r6, #0
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ea0:	4a4c      	ldr	r2, [pc, #304]	; (8004fd4 <ai_platform_network_init+0x1d4>)
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	6093      	str	r3, [r2, #8]
 8004ea6:	6893      	ldr	r3, [r2, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1fc      	bne.n	8004ea6 <ai_platform_network_init+0xa6>
 8004eac:	4b47      	ldr	r3, [pc, #284]	; (8004fcc <ai_platform_network_init+0x1cc>)
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	6812      	ldr	r2, [r2, #0]
 8004eb2:	4b47      	ldr	r3, [pc, #284]	; (8004fd0 <ai_platform_network_init+0x1d0>)
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d11c      	bne.n	8004ef2 <ai_platform_network_init+0xf2>
 8004eb8:	f7ff fc76 	bl	80047a8 <_ai_platform_release_crc>
 8004ebc:	2e00      	cmp	r6, #0
 8004ebe:	d06f      	beq.n	8004fa0 <ai_platform_network_init+0x1a0>
 8004ec0:	4b45      	ldr	r3, [pc, #276]	; (8004fd8 <ai_platform_network_init+0x1d8>)
 8004ec2:	6832      	ldr	r2, [r6, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d115      	bne.n	8004ef4 <ai_platform_network_init+0xf4>
 8004ec8:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8004ecc:	6933      	ldr	r3, [r6, #16]
 8004ece:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8004ed2:	89f7      	ldrh	r7, [r6, #14]
 8004ed4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ed6:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8004eda:	2303      	movs	r3, #3
 8004edc:	84e7      	strh	r7, [r4, #38]	; 0x26
 8004ede:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8004ee2:	60e3      	str	r3, [r4, #12]
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	4626      	mov	r6, r4
 8004ee8:	f000 fd0a 	bl	8005900 <ai_layers_init_all>
 8004eec:	4630      	mov	r0, r6
 8004eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ef2:	e7fe      	b.n	8004ef2 <ai_platform_network_init+0xf2>
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	4635      	mov	r5, r6
 8004efa:	6876      	ldr	r6, [r6, #4]
 8004efc:	f7ff fc14 	bl	8004728 <ai_buffer_get_size>
 8004f00:	f105 081c 	add.w	r8, r5, #28
 8004f04:	4681      	mov	r9, r0
 8004f06:	2101      	movs	r1, #1
 8004f08:	4640      	mov	r0, r8
 8004f0a:	6a2f      	ldr	r7, [r5, #32]
 8004f0c:	f7ff fc0c 	bl	8004728 <ai_buffer_get_size>
 8004f10:	f1b9 0f00 	cmp.w	r9, #0
 8004f14:	d025      	beq.n	8004f62 <ai_platform_network_init+0x162>
 8004f16:	2201      	movs	r2, #1
 8004f18:	4696      	mov	lr, r2
 8004f1a:	bb30      	cbnz	r0, 8004f6a <ai_platform_network_init+0x16a>
 8004f1c:	4680      	mov	r8, r0
 8004f1e:	4607      	mov	r7, r0
 8004f20:	b376      	cbz	r6, 8004f80 <ai_platform_network_init+0x180>
 8004f22:	8be3      	ldrh	r3, [r4, #30]
 8004f24:	4573      	cmp	r3, lr
 8004f26:	d323      	bcc.n	8004f70 <ai_platform_network_init+0x170>
 8004f28:	b142      	cbz	r2, 8004f3c <ai_platform_network_init+0x13c>
 8004f2a:	46ac      	mov	ip, r5
 8004f2c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004f30:	6a25      	ldr	r5, [r4, #32]
 8004f32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f34:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8004f38:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004f3c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004f3e:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8004f42:	2600      	movs	r6, #0
 8004f44:	42bb      	cmp	r3, r7
 8004f46:	83a6      	strh	r6, [r4, #28]
 8004f48:	d323      	bcc.n	8004f92 <ai_platform_network_init+0x192>
 8004f4a:	b37f      	cbz	r7, 8004fac <ai_platform_network_init+0x1ac>
 8004f4c:	46c4      	mov	ip, r8
 8004f4e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004f52:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004f54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f56:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8004f5a:	46b6      	mov	lr, r6
 8004f5c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004f60:	e7bb      	b.n	8004eda <ai_platform_network_init+0xda>
 8004f62:	464a      	mov	r2, r9
 8004f64:	46ce      	mov	lr, r9
 8004f66:	464d      	mov	r5, r9
 8004f68:	e7d7      	b.n	8004f1a <ai_platform_network_init+0x11a>
 8004f6a:	b30f      	cbz	r7, 8004fb0 <ai_platform_network_init+0x1b0>
 8004f6c:	2701      	movs	r7, #1
 8004f6e:	e7d7      	b.n	8004f20 <ai_platform_network_init+0x120>
 8004f70:	2212      	movs	r2, #18
 8004f72:	2116      	movs	r1, #22
 8004f74:	f104 0010 	add.w	r0, r4, #16
 8004f78:	f000 fb3e 	bl	80055f8 <core_set_error>
 8004f7c:	2600      	movs	r6, #0
 8004f7e:	e78c      	b.n	8004e9a <ai_platform_network_init+0x9a>
 8004f80:	f1b9 0f00 	cmp.w	r9, #0
 8004f84:	d0cd      	beq.n	8004f22 <ai_platform_network_init+0x122>
 8004f86:	2110      	movs	r1, #16
 8004f88:	2212      	movs	r2, #18
 8004f8a:	1860      	adds	r0, r4, r1
 8004f8c:	f000 fb34 	bl	80055f8 <core_set_error>
 8004f90:	e783      	b.n	8004e9a <ai_platform_network_init+0x9a>
 8004f92:	2213      	movs	r2, #19
 8004f94:	2116      	movs	r1, #22
 8004f96:	f104 0010 	add.w	r0, r4, #16
 8004f9a:	f000 fb2d 	bl	80055f8 <core_set_error>
 8004f9e:	e77c      	b.n	8004e9a <ai_platform_network_init+0x9a>
 8004fa0:	2110      	movs	r1, #16
 8004fa2:	2211      	movs	r2, #17
 8004fa4:	1860      	adds	r0, r4, r1
 8004fa6:	f000 fb27 	bl	80055f8 <core_set_error>
 8004faa:	e776      	b.n	8004e9a <ai_platform_network_init+0x9a>
 8004fac:	46be      	mov	lr, r7
 8004fae:	e794      	b.n	8004eda <ai_platform_network_init+0xda>
 8004fb0:	2110      	movs	r1, #16
 8004fb2:	2213      	movs	r2, #19
 8004fb4:	1860      	adds	r0, r4, r1
 8004fb6:	f000 fb1f 	bl	80055f8 <core_set_error>
 8004fba:	463e      	mov	r6, r7
 8004fbc:	e76d      	b.n	8004e9a <ai_platform_network_init+0x9a>
 8004fbe:	bf00      	nop
 8004fc0:	a1c00100 	.word	0xa1c00100
 8004fc4:	e0042000 	.word	0xe0042000
 8004fc8:	58024000 	.word	0x58024000
 8004fcc:	f407a5c2 	.word	0xf407a5c2
 8004fd0:	b5e8b5cd 	.word	0xb5e8b5cd
 8004fd4:	40023000 	.word	0x40023000
 8004fd8:	a1facade 	.word	0xa1facade

08004fdc <ai_platform_network_post_init>:
 8004fdc:	b538      	push	{r3, r4, r5, lr}
 8004fde:	b1f0      	cbz	r0, 800501e <ai_platform_network_post_init+0x42>
 8004fe0:	4b3c      	ldr	r3, [pc, #240]	; (80050d4 <ai_platform_network_post_init+0xf8>)
 8004fe2:	6802      	ldr	r2, [r0, #0]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	d119      	bne.n	800501e <ai_platform_network_post_init+0x42>
 8004fea:	f7ff fbdb 	bl	80047a4 <_ai_platform_acquire_crc>
 8004fee:	4b3a      	ldr	r3, [pc, #232]	; (80050d8 <ai_platform_network_post_init+0xfc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ffa:	d03b      	beq.n	8005074 <ai_platform_network_post_init+0x98>
 8004ffc:	4a37      	ldr	r2, [pc, #220]	; (80050dc <ai_platform_network_post_init+0x100>)
 8004ffe:	2301      	movs	r3, #1
 8005000:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005004:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1fb      	bne.n	8005004 <ai_platform_network_post_init+0x28>
 800500c:	4b34      	ldr	r3, [pc, #208]	; (80050e0 <ai_platform_network_post_init+0x104>)
 800500e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005012:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005016:	4b33      	ldr	r3, [pc, #204]	; (80050e4 <ai_platform_network_post_init+0x108>)
 8005018:	429a      	cmp	r2, r3
 800501a:	d037      	beq.n	800508c <ai_platform_network_post_init+0xb0>
 800501c:	e7fe      	b.n	800501c <ai_platform_network_post_init+0x40>
 800501e:	f7ff fbc1 	bl	80047a4 <_ai_platform_acquire_crc>
 8005022:	4b2d      	ldr	r3, [pc, #180]	; (80050d8 <ai_platform_network_post_init+0xfc>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800502a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800502e:	d010      	beq.n	8005052 <ai_platform_network_post_init+0x76>
 8005030:	4a2a      	ldr	r2, [pc, #168]	; (80050dc <ai_platform_network_post_init+0x100>)
 8005032:	2301      	movs	r3, #1
 8005034:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005038:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1fb      	bne.n	8005038 <ai_platform_network_post_init+0x5c>
 8005040:	4b27      	ldr	r3, [pc, #156]	; (80050e0 <ai_platform_network_post_init+0x104>)
 8005042:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005046:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800504a:	4b26      	ldr	r3, [pc, #152]	; (80050e4 <ai_platform_network_post_init+0x108>)
 800504c:	429a      	cmp	r2, r3
 800504e:	d00d      	beq.n	800506c <ai_platform_network_post_init+0x90>
 8005050:	e7fe      	b.n	8005050 <ai_platform_network_post_init+0x74>
 8005052:	4a25      	ldr	r2, [pc, #148]	; (80050e8 <ai_platform_network_post_init+0x10c>)
 8005054:	2301      	movs	r3, #1
 8005056:	6093      	str	r3, [r2, #8]
 8005058:	6893      	ldr	r3, [r2, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1fc      	bne.n	8005058 <ai_platform_network_post_init+0x7c>
 800505e:	4b20      	ldr	r3, [pc, #128]	; (80050e0 <ai_platform_network_post_init+0x104>)
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	6812      	ldr	r2, [r2, #0]
 8005064:	4b1f      	ldr	r3, [pc, #124]	; (80050e4 <ai_platform_network_post_init+0x108>)
 8005066:	429a      	cmp	r2, r3
 8005068:	d000      	beq.n	800506c <ai_platform_network_post_init+0x90>
 800506a:	e7fe      	b.n	800506a <ai_platform_network_post_init+0x8e>
 800506c:	f7ff fb9c 	bl	80047a8 <_ai_platform_release_crc>
 8005070:	2000      	movs	r0, #0
 8005072:	bd38      	pop	{r3, r4, r5, pc}
 8005074:	4a1c      	ldr	r2, [pc, #112]	; (80050e8 <ai_platform_network_post_init+0x10c>)
 8005076:	2301      	movs	r3, #1
 8005078:	6093      	str	r3, [r2, #8]
 800507a:	6893      	ldr	r3, [r2, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1fc      	bne.n	800507a <ai_platform_network_post_init+0x9e>
 8005080:	4b17      	ldr	r3, [pc, #92]	; (80050e0 <ai_platform_network_post_init+0x104>)
 8005082:	6013      	str	r3, [r2, #0]
 8005084:	6812      	ldr	r2, [r2, #0]
 8005086:	4b17      	ldr	r3, [pc, #92]	; (80050e4 <ai_platform_network_post_init+0x108>)
 8005088:	429a      	cmp	r2, r3
 800508a:	d11a      	bne.n	80050c2 <ai_platform_network_post_init+0xe6>
 800508c:	f7ff fb8c 	bl	80047a8 <_ai_platform_release_crc>
 8005090:	68e3      	ldr	r3, [r4, #12]
 8005092:	f013 0502 	ands.w	r5, r3, #2
 8005096:	d015      	beq.n	80050c4 <ai_platform_network_post_init+0xe8>
 8005098:	4620      	mov	r0, r4
 800509a:	f000 fc3f 	bl	800591c <ai_layers_post_init_all>
 800509e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80050a0:	b16b      	cbz	r3, 80050be <ai_platform_network_post_init+0xe2>
 80050a2:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80050a4:	e007      	b.n	80050b6 <ai_platform_network_post_init+0xda>
 80050a6:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 80050aa:	4798      	blx	r3
 80050ac:	692b      	ldr	r3, [r5, #16]
 80050ae:	42ab      	cmp	r3, r5
 80050b0:	d005      	beq.n	80050be <ai_platform_network_post_init+0xe2>
 80050b2:	b123      	cbz	r3, 80050be <ai_platform_network_post_init+0xe2>
 80050b4:	461d      	mov	r5, r3
 80050b6:	4629      	mov	r1, r5
 80050b8:	2000      	movs	r0, #0
 80050ba:	2d00      	cmp	r5, #0
 80050bc:	d1f3      	bne.n	80050a6 <ai_platform_network_post_init+0xca>
 80050be:	2001      	movs	r0, #1
 80050c0:	bd38      	pop	{r3, r4, r5, pc}
 80050c2:	e7fe      	b.n	80050c2 <ai_platform_network_post_init+0xe6>
 80050c4:	2210      	movs	r2, #16
 80050c6:	2111      	movs	r1, #17
 80050c8:	18a0      	adds	r0, r4, r2
 80050ca:	f000 fa95 	bl	80055f8 <core_set_error>
 80050ce:	4628      	mov	r0, r5
 80050d0:	bd38      	pop	{r3, r4, r5, pc}
 80050d2:	bf00      	nop
 80050d4:	a1c00100 	.word	0xa1c00100
 80050d8:	e0042000 	.word	0xe0042000
 80050dc:	58024000 	.word	0x58024000
 80050e0:	f407a5c2 	.word	0xf407a5c2
 80050e4:	b5e8b5cd 	.word	0xb5e8b5cd
 80050e8:	40023000 	.word	0x40023000

080050ec <ai_platform_network_process>:
 80050ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f0:	460e      	mov	r6, r1
 80050f2:	b085      	sub	sp, #20
 80050f4:	4693      	mov	fp, r2
 80050f6:	4605      	mov	r5, r0
 80050f8:	b120      	cbz	r0, 8005104 <ai_platform_network_process+0x18>
 80050fa:	4bb8      	ldr	r3, [pc, #736]	; (80053dc <ai_platform_network_process+0x2f0>)
 80050fc:	6802      	ldr	r2, [r0, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	bf18      	it	ne
 8005102:	2500      	movne	r5, #0
 8005104:	f7ff fb4e 	bl	80047a4 <_ai_platform_acquire_crc>
 8005108:	4bb5      	ldr	r3, [pc, #724]	; (80053e0 <ai_platform_network_process+0x2f4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005114:	d010      	beq.n	8005138 <ai_platform_network_process+0x4c>
 8005116:	4ab3      	ldr	r2, [pc, #716]	; (80053e4 <ai_platform_network_process+0x2f8>)
 8005118:	2301      	movs	r3, #1
 800511a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800511e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1fb      	bne.n	800511e <ai_platform_network_process+0x32>
 8005126:	4bb0      	ldr	r3, [pc, #704]	; (80053e8 <ai_platform_network_process+0x2fc>)
 8005128:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800512c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005130:	4bae      	ldr	r3, [pc, #696]	; (80053ec <ai_platform_network_process+0x300>)
 8005132:	429a      	cmp	r2, r3
 8005134:	d00d      	beq.n	8005152 <ai_platform_network_process+0x66>
 8005136:	e7fe      	b.n	8005136 <ai_platform_network_process+0x4a>
 8005138:	4aad      	ldr	r2, [pc, #692]	; (80053f0 <ai_platform_network_process+0x304>)
 800513a:	2301      	movs	r3, #1
 800513c:	6093      	str	r3, [r2, #8]
 800513e:	6893      	ldr	r3, [r2, #8]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1fc      	bne.n	800513e <ai_platform_network_process+0x52>
 8005144:	4ba8      	ldr	r3, [pc, #672]	; (80053e8 <ai_platform_network_process+0x2fc>)
 8005146:	6013      	str	r3, [r2, #0]
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	4ba8      	ldr	r3, [pc, #672]	; (80053ec <ai_platform_network_process+0x300>)
 800514c:	429a      	cmp	r2, r3
 800514e:	f040 812c 	bne.w	80053aa <ai_platform_network_process+0x2be>
 8005152:	f7ff fb29 	bl	80047a8 <_ai_platform_release_crc>
 8005156:	2d00      	cmp	r5, #0
 8005158:	f000 8154 	beq.w	8005404 <ai_platform_network_process+0x318>
 800515c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 8124 	beq.w	80053ac <ai_platform_network_process+0x2c0>
 8005164:	68eb      	ldr	r3, [r5, #12]
 8005166:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	2700      	movs	r7, #0
 8005170:	2b03      	cmp	r3, #3
 8005172:	616f      	str	r7, [r5, #20]
 8005174:	f040 813e 	bne.w	80053f4 <ai_platform_network_process+0x308>
 8005178:	2e00      	cmp	r6, #0
 800517a:	f000 811d 	beq.w	80053b8 <ai_platform_network_process+0x2cc>
 800517e:	f1ba 0f00 	cmp.w	sl, #0
 8005182:	f000 8119 	beq.w	80053b8 <ai_platform_network_process+0x2cc>
 8005186:	f8ba 3000 	ldrh.w	r3, [sl]
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 8114 	beq.w	80053b8 <ai_platform_network_process+0x2cc>
 8005190:	69b3      	ldr	r3, [r6, #24]
 8005192:	f8cd b00c 	str.w	fp, [sp, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	e9cd 3501 	strd	r3, r5, [sp, #4]
 800519c:	f8da 3004 	ldr.w	r3, [sl, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d072      	beq.n	800528a <ai_platform_network_process+0x19e>
 80051a4:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80051a8:	2c00      	cmp	r4, #0
 80051aa:	d06e      	beq.n	800528a <ai_platform_network_process+0x19e>
 80051ac:	f8da 3008 	ldr.w	r3, [sl, #8]
 80051b0:	f8d3 9000 	ldr.w	r9, [r3]
 80051b4:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 80051b8:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80051bc:	f000 81de 	beq.w	800557c <ai_platform_network_process+0x490>
 80051c0:	69a3      	ldr	r3, [r4, #24]
 80051c2:	2101      	movs	r1, #1
 80051c4:	4630      	mov	r0, r6
 80051c6:	685d      	ldr	r5, [r3, #4]
 80051c8:	f7ff faae 	bl	8004728 <ai_buffer_get_size>
 80051cc:	4285      	cmp	r5, r0
 80051ce:	f0c0 811b 	bcc.w	8005408 <ai_platform_network_process+0x31c>
 80051d2:	68e0      	ldr	r0, [r4, #12]
 80051d4:	69b1      	ldr	r1, [r6, #24]
 80051d6:	68c2      	ldr	r2, [r0, #12]
 80051d8:	68cb      	ldr	r3, [r1, #12]
 80051da:	429a      	cmp	r2, r3
 80051dc:	f040 8114 	bne.w	8005408 <ai_platform_network_process+0x31c>
 80051e0:	6882      	ldr	r2, [r0, #8]
 80051e2:	688b      	ldr	r3, [r1, #8]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	f040 810f 	bne.w	8005408 <ai_platform_network_process+0x31c>
 80051ea:	6842      	ldr	r2, [r0, #4]
 80051ec:	684b      	ldr	r3, [r1, #4]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	f040 810a 	bne.w	8005408 <ai_platform_network_process+0x31c>
 80051f4:	69a3      	ldr	r3, [r4, #24]
 80051f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051fa:	f008 fead 	bl	800df58 <ai_array_get_data_byte_size>
 80051fe:	4605      	mov	r5, r0
 8005200:	4620      	mov	r0, r4
 8005202:	f008 fec1 	bl	800df88 <get_tensor_byte_size>
 8005206:	4285      	cmp	r5, r0
 8005208:	f0c0 80fe 	bcc.w	8005408 <ai_platform_network_process+0x31c>
 800520c:	69a3      	ldr	r3, [r4, #24]
 800520e:	6818      	ldr	r0, [r3, #0]
 8005210:	f008 fe0e 	bl	800de30 <ai_array_to_buffer_fmt>
 8005214:	6833      	ldr	r3, [r6, #0]
 8005216:	4058      	eors	r0, r3
 8005218:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800521c:	f040 81b9 	bne.w	8005592 <ai_platform_network_process+0x4a6>
 8005220:	6873      	ldr	r3, [r6, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 81ac 	beq.w	8005580 <ai_platform_network_process+0x494>
 8005228:	69b3      	ldr	r3, [r6, #24]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 819c 	beq.w	800556a <ai_platform_network_process+0x47e>
 8005232:	9a01      	ldr	r2, [sp, #4]
 8005234:	429a      	cmp	r2, r3
 8005236:	bf38      	it	cc
 8005238:	461a      	movcc	r2, r3
 800523a:	4620      	mov	r0, r4
 800523c:	9201      	str	r2, [sp, #4]
 800523e:	f008 fea3 	bl	800df88 <get_tensor_byte_size>
 8005242:	f8c8 0008 	str.w	r0, [r8, #8]
 8005246:	69b3      	ldr	r3, [r6, #24]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	fb00 f303 	mul.w	r3, r0, r3
 800524e:	f8c8 300c 	str.w	r3, [r8, #12]
 8005252:	6871      	ldr	r1, [r6, #4]
 8005254:	f8c8 1004 	str.w	r1, [r8, #4]
 8005258:	440b      	add	r3, r1
 800525a:	f849 300b 	str.w	r3, [r9, fp]
 800525e:	69a0      	ldr	r0, [r4, #24]
 8005260:	6803      	ldr	r3, [r0, #0]
 8005262:	009a      	lsls	r2, r3, #2
 8005264:	f107 0701 	add.w	r7, r7, #1
 8005268:	f106 061c 	add.w	r6, r6, #28
 800526c:	f100 80af 	bmi.w	80053ce <ai_platform_network_process+0x2e2>
 8005270:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8005274:	1a9b      	subs	r3, r3, r2
 8005276:	4419      	add	r1, r3
 8005278:	6081      	str	r1, [r0, #8]
 800527a:	69a3      	ldr	r3, [r4, #24]
 800527c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005280:	60da      	str	r2, [r3, #12]
 8005282:	f8ba 3000 	ldrh.w	r3, [sl]
 8005286:	42bb      	cmp	r3, r7
 8005288:	d888      	bhi.n	800519c <ai_platform_network_process+0xb0>
 800528a:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 800528e:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8005290:	f1bb 0f00 	cmp.w	fp, #0
 8005294:	f000 8186 	beq.w	80055a4 <ai_platform_network_process+0x4b8>
 8005298:	2a01      	cmp	r2, #1
 800529a:	f240 815e 	bls.w	800555a <ai_platform_network_process+0x46e>
 800529e:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 80052a2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 8157 	beq.w	800555a <ai_platform_network_process+0x46e>
 80052ac:	465e      	mov	r6, fp
 80052ae:	2700      	movs	r7, #0
 80052b0:	462c      	mov	r4, r5
 80052b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 80b4 	beq.w	8005424 <ai_platform_network_process+0x338>
 80052bc:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 80052c0:	2d00      	cmp	r5, #0
 80052c2:	f000 80af 	beq.w	8005424 <ai_platform_network_process+0x338>
 80052c6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80052ca:	f8d3 8000 	ldr.w	r8, [r3]
 80052ce:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 80052d2:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80052d6:	f000 8171 	beq.w	80055bc <ai_platform_network_process+0x4d0>
 80052da:	69ab      	ldr	r3, [r5, #24]
 80052dc:	2101      	movs	r1, #1
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	9302      	str	r3, [sp, #8]
 80052e2:	4630      	mov	r0, r6
 80052e4:	f7ff fa20 	bl	8004728 <ai_buffer_get_size>
 80052e8:	9b02      	ldr	r3, [sp, #8]
 80052ea:	4283      	cmp	r3, r0
 80052ec:	f0c0 8134 	bcc.w	8005558 <ai_platform_network_process+0x46c>
 80052f0:	68e8      	ldr	r0, [r5, #12]
 80052f2:	69b1      	ldr	r1, [r6, #24]
 80052f4:	68c2      	ldr	r2, [r0, #12]
 80052f6:	68cb      	ldr	r3, [r1, #12]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	f040 812d 	bne.w	8005558 <ai_platform_network_process+0x46c>
 80052fe:	6882      	ldr	r2, [r0, #8]
 8005300:	688b      	ldr	r3, [r1, #8]
 8005302:	429a      	cmp	r2, r3
 8005304:	f040 8128 	bne.w	8005558 <ai_platform_network_process+0x46c>
 8005308:	6842      	ldr	r2, [r0, #4]
 800530a:	684b      	ldr	r3, [r1, #4]
 800530c:	429a      	cmp	r2, r3
 800530e:	f040 8123 	bne.w	8005558 <ai_platform_network_process+0x46c>
 8005312:	69ab      	ldr	r3, [r5, #24]
 8005314:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005318:	f008 fe1e 	bl	800df58 <ai_array_get_data_byte_size>
 800531c:	9002      	str	r0, [sp, #8]
 800531e:	4628      	mov	r0, r5
 8005320:	f008 fe32 	bl	800df88 <get_tensor_byte_size>
 8005324:	9b02      	ldr	r3, [sp, #8]
 8005326:	4283      	cmp	r3, r0
 8005328:	f0c0 8116 	bcc.w	8005558 <ai_platform_network_process+0x46c>
 800532c:	69ab      	ldr	r3, [r5, #24]
 800532e:	6818      	ldr	r0, [r3, #0]
 8005330:	f008 fd7e 	bl	800de30 <ai_array_to_buffer_fmt>
 8005334:	6833      	ldr	r3, [r6, #0]
 8005336:	4058      	eors	r0, r3
 8005338:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800533c:	f040 8136 	bne.w	80055ac <ai_platform_network_process+0x4c0>
 8005340:	6873      	ldr	r3, [r6, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 814d 	beq.w	80055e2 <ai_platform_network_process+0x4f6>
 8005348:	69b3      	ldr	r3, [r6, #24]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 813f 	beq.w	80055d0 <ai_platform_network_process+0x4e4>
 8005352:	9a01      	ldr	r2, [sp, #4]
 8005354:	429a      	cmp	r2, r3
 8005356:	bf38      	it	cc
 8005358:	461a      	movcc	r2, r3
 800535a:	4628      	mov	r0, r5
 800535c:	9201      	str	r2, [sp, #4]
 800535e:	f008 fe13 	bl	800df88 <get_tensor_byte_size>
 8005362:	f8ca 0008 	str.w	r0, [sl, #8]
 8005366:	69b3      	ldr	r3, [r6, #24]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	fb00 f303 	mul.w	r3, r0, r3
 800536e:	f8ca 300c 	str.w	r3, [sl, #12]
 8005372:	6871      	ldr	r1, [r6, #4]
 8005374:	f8ca 1004 	str.w	r1, [sl, #4]
 8005378:	440b      	add	r3, r1
 800537a:	f848 300b 	str.w	r3, [r8, fp]
 800537e:	69a8      	ldr	r0, [r5, #24]
 8005380:	6803      	ldr	r3, [r0, #0]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	f107 0701 	add.w	r7, r7, #1
 8005388:	f106 061c 	add.w	r6, r6, #28
 800538c:	d445      	bmi.n	800541a <ai_platform_network_process+0x32e>
 800538e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8005392:	1a9b      	subs	r3, r3, r2
 8005394:	4419      	add	r1, r3
 8005396:	6081      	str	r1, [r0, #8]
 8005398:	69ab      	ldr	r3, [r5, #24]
 800539a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800539e:	60da      	str	r2, [r3, #12]
 80053a0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80053a4:	429f      	cmp	r7, r3
 80053a6:	d384      	bcc.n	80052b2 <ai_platform_network_process+0x1c6>
 80053a8:	e03c      	b.n	8005424 <ai_platform_network_process+0x338>
 80053aa:	e7fe      	b.n	80053aa <ai_platform_network_process+0x2be>
 80053ac:	68ea      	ldr	r2, [r5, #12]
 80053ae:	616b      	str	r3, [r5, #20]
 80053b0:	f002 0203 	and.w	r2, r2, #3
 80053b4:	2a03      	cmp	r2, #3
 80053b6:	d11d      	bne.n	80053f4 <ai_platform_network_process+0x308>
 80053b8:	2217      	movs	r2, #23
 80053ba:	2112      	movs	r1, #18
 80053bc:	f105 0010 	add.w	r0, r5, #16
 80053c0:	f000 f91a 	bl	80055f8 <core_set_error>
 80053c4:	2400      	movs	r4, #0
 80053c6:	4620      	mov	r0, r4
 80053c8:	b005      	add	sp, #20
 80053ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ce:	f8ba 3000 	ldrh.w	r3, [sl]
 80053d2:	429f      	cmp	r7, r3
 80053d4:	f4ff aee2 	bcc.w	800519c <ai_platform_network_process+0xb0>
 80053d8:	e757      	b.n	800528a <ai_platform_network_process+0x19e>
 80053da:	bf00      	nop
 80053dc:	a1c00100 	.word	0xa1c00100
 80053e0:	e0042000 	.word	0xe0042000
 80053e4:	58024000 	.word	0x58024000
 80053e8:	f407a5c2 	.word	0xf407a5c2
 80053ec:	b5e8b5cd 	.word	0xb5e8b5cd
 80053f0:	40023000 	.word	0x40023000
 80053f4:	2230      	movs	r2, #48	; 0x30
 80053f6:	2111      	movs	r1, #17
 80053f8:	f105 0010 	add.w	r0, r5, #16
 80053fc:	f000 f8fc 	bl	80055f8 <core_set_error>
 8005400:	2400      	movs	r4, #0
 8005402:	e7e0      	b.n	80053c6 <ai_platform_network_process+0x2da>
 8005404:	462c      	mov	r4, r5
 8005406:	e7de      	b.n	80053c6 <ai_platform_network_process+0x2da>
 8005408:	9d02      	ldr	r5, [sp, #8]
 800540a:	2218      	movs	r2, #24
 800540c:	2112      	movs	r1, #18
 800540e:	f105 0010 	add.w	r0, r5, #16
 8005412:	f000 f8f1 	bl	80055f8 <core_set_error>
 8005416:	2400      	movs	r4, #0
 8005418:	e7d5      	b.n	80053c6 <ai_platform_network_process+0x2da>
 800541a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800541e:	429f      	cmp	r7, r3
 8005420:	f4ff af47 	bcc.w	80052b2 <ai_platform_network_process+0x1c6>
 8005424:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005428:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800542a:	82a3      	strh	r3, [r4, #20]
 800542c:	4625      	mov	r5, r4
 800542e:	2a00      	cmp	r2, #0
 8005430:	f040 808c 	bne.w	800554c <ai_platform_network_process+0x460>
 8005434:	4616      	mov	r6, r2
 8005436:	4617      	mov	r7, r2
 8005438:	8aec      	ldrh	r4, [r5, #22]
 800543a:	429c      	cmp	r4, r3
 800543c:	bf38      	it	cc
 800543e:	46ab      	movcc	fp, r5
 8005440:	d2c1      	bcs.n	80053c6 <ai_platform_network_process+0x2da>
 8005442:	2e00      	cmp	r6, #0
 8005444:	d030      	beq.n	80054a8 <ai_platform_network_process+0x3bc>
 8005446:	f04f 0800 	mov.w	r8, #0
 800544a:	e014      	b.n	8005476 <ai_platform_network_process+0x38a>
 800544c:	6882      	ldr	r2, [r0, #8]
 800544e:	68c5      	ldr	r5, [r0, #12]
 8005450:	6863      	ldr	r3, [r4, #4]
 8005452:	1b52      	subs	r2, r2, r5
 8005454:	4413      	add	r3, r2
 8005456:	6083      	str	r3, [r0, #8]
 8005458:	698b      	ldr	r3, [r1, #24]
 800545a:	6862      	ldr	r2, [r4, #4]
 800545c:	60da      	str	r2, [r3, #12]
 800545e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8005462:	f859 200a 	ldr.w	r2, [r9, sl]
 8005466:	440b      	add	r3, r1
 8005468:	4293      	cmp	r3, r2
 800546a:	bf24      	itt	cs
 800546c:	68e3      	ldrcs	r3, [r4, #12]
 800546e:	1ad3      	subcs	r3, r2, r3
 8005470:	6063      	str	r3, [r4, #4]
 8005472:	f108 0801 	add.w	r8, r8, #1
 8005476:	8833      	ldrh	r3, [r6, #0]
 8005478:	4543      	cmp	r3, r8
 800547a:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800547e:	d913      	bls.n	80054a8 <ai_platform_network_process+0x3bc>
 8005480:	6873      	ldr	r3, [r6, #4]
 8005482:	b18b      	cbz	r3, 80054a8 <ai_platform_network_process+0x3bc>
 8005484:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8005488:	b171      	cbz	r1, 80054a8 <ai_platform_network_process+0x3bc>
 800548a:	6988      	ldr	r0, [r1, #24]
 800548c:	68b2      	ldr	r2, [r6, #8]
 800548e:	6803      	ldr	r3, [r0, #0]
 8005490:	f8d2 9000 	ldr.w	r9, [r2]
 8005494:	009d      	lsls	r5, r3, #2
 8005496:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800549a:	d5d7      	bpl.n	800544c <ai_platform_network_process+0x360>
 800549c:	6881      	ldr	r1, [r0, #8]
 800549e:	68a2      	ldr	r2, [r4, #8]
 80054a0:	6860      	ldr	r0, [r4, #4]
 80054a2:	f004 feff 	bl	800a2a4 <st_int8_copy>
 80054a6:	e7da      	b.n	800545e <ai_platform_network_process+0x372>
 80054a8:	4658      	mov	r0, fp
 80054aa:	f000 fa4b 	bl	8005944 <ai_layers_forward_all>
 80054ae:	2f00      	cmp	r7, #0
 80054b0:	d03d      	beq.n	800552e <ai_platform_network_process+0x442>
 80054b2:	2400      	movs	r4, #0
 80054b4:	e016      	b.n	80054e4 <ai_platform_network_process+0x3f8>
 80054b6:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80054ba:	f859 100a 	ldr.w	r1, [r9, sl]
 80054be:	4413      	add	r3, r2
 80054c0:	428b      	cmp	r3, r1
 80054c2:	bf24      	itt	cs
 80054c4:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80054c8:	1acb      	subcs	r3, r1, r3
 80054ca:	f8c8 3004 	str.w	r3, [r8, #4]
 80054ce:	6981      	ldr	r1, [r0, #24]
 80054d0:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80054d4:	1b52      	subs	r2, r2, r5
 80054d6:	4413      	add	r3, r2
 80054d8:	608b      	str	r3, [r1, #8]
 80054da:	6983      	ldr	r3, [r0, #24]
 80054dc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80054e0:	60da      	str	r2, [r3, #12]
 80054e2:	3401      	adds	r4, #1
 80054e4:	883b      	ldrh	r3, [r7, #0]
 80054e6:	42a3      	cmp	r3, r4
 80054e8:	d921      	bls.n	800552e <ai_platform_network_process+0x442>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	b1fb      	cbz	r3, 800552e <ai_platform_network_process+0x442>
 80054ee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80054f2:	b1e0      	cbz	r0, 800552e <ai_platform_network_process+0x442>
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	6983      	ldr	r3, [r0, #24]
 80054f8:	f8d2 9000 	ldr.w	r9, [r2]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	0092      	lsls	r2, r2, #2
 8005500:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8005504:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8005508:	d5d5      	bpl.n	80054b6 <ai_platform_network_process+0x3ca>
 800550a:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800550e:	6898      	ldr	r0, [r3, #8]
 8005510:	f004 fec8 	bl	800a2a4 <st_int8_copy>
 8005514:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8005518:	f859 200a 	ldr.w	r2, [r9, sl]
 800551c:	440b      	add	r3, r1
 800551e:	4293      	cmp	r3, r2
 8005520:	bf24      	itt	cs
 8005522:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8005526:	1ad3      	subcs	r3, r2, r3
 8005528:	f8c8 3004 	str.w	r3, [r8, #4]
 800552c:	e7d9      	b.n	80054e2 <ai_platform_network_process+0x3f6>
 800552e:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8005532:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8005536:	3401      	adds	r4, #1
 8005538:	b2a4      	uxth	r4, r4
 800553a:	42a3      	cmp	r3, r4
 800553c:	f8ab 4016 	strh.w	r4, [fp, #22]
 8005540:	f63f af7f 	bhi.w	8005442 <ai_platform_network_process+0x356>
 8005544:	4620      	mov	r0, r4
 8005546:	b005      	add	sp, #20
 8005548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800554c:	2a01      	cmp	r2, #1
 800554e:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8005550:	d03c      	beq.n	80055cc <ai_platform_network_process+0x4e0>
 8005552:	f106 070c 	add.w	r7, r6, #12
 8005556:	e76f      	b.n	8005438 <ai_platform_network_process+0x34c>
 8005558:	4625      	mov	r5, r4
 800555a:	2218      	movs	r2, #24
 800555c:	2113      	movs	r1, #19
 800555e:	f105 0010 	add.w	r0, r5, #16
 8005562:	f000 f849 	bl	80055f8 <core_set_error>
 8005566:	2400      	movs	r4, #0
 8005568:	e72d      	b.n	80053c6 <ai_platform_network_process+0x2da>
 800556a:	9d02      	ldr	r5, [sp, #8]
 800556c:	4604      	mov	r4, r0
 800556e:	2221      	movs	r2, #33	; 0x21
 8005570:	2112      	movs	r1, #18
 8005572:	f105 0010 	add.w	r0, r5, #16
 8005576:	f000 f83f 	bl	80055f8 <core_set_error>
 800557a:	e724      	b.n	80053c6 <ai_platform_network_process+0x2da>
 800557c:	9d02      	ldr	r5, [sp, #8]
 800557e:	e71b      	b.n	80053b8 <ai_platform_network_process+0x2cc>
 8005580:	9d02      	ldr	r5, [sp, #8]
 8005582:	4604      	mov	r4, r0
 8005584:	2217      	movs	r2, #23
 8005586:	2112      	movs	r1, #18
 8005588:	f105 0010 	add.w	r0, r5, #16
 800558c:	f000 f834 	bl	80055f8 <core_set_error>
 8005590:	e719      	b.n	80053c6 <ai_platform_network_process+0x2da>
 8005592:	9d02      	ldr	r5, [sp, #8]
 8005594:	2219      	movs	r2, #25
 8005596:	2112      	movs	r1, #18
 8005598:	f105 0010 	add.w	r0, r5, #16
 800559c:	f000 f82c 	bl	80055f8 <core_set_error>
 80055a0:	2400      	movs	r4, #0
 80055a2:	e710      	b.n	80053c6 <ai_platform_network_process+0x2da>
 80055a4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80055a8:	82ab      	strh	r3, [r5, #20]
 80055aa:	e740      	b.n	800542e <ai_platform_network_process+0x342>
 80055ac:	f104 0010 	add.w	r0, r4, #16
 80055b0:	2219      	movs	r2, #25
 80055b2:	2113      	movs	r1, #19
 80055b4:	f000 f820 	bl	80055f8 <core_set_error>
 80055b8:	2400      	movs	r4, #0
 80055ba:	e704      	b.n	80053c6 <ai_platform_network_process+0x2da>
 80055bc:	f104 0010 	add.w	r0, r4, #16
 80055c0:	2217      	movs	r2, #23
 80055c2:	2113      	movs	r1, #19
 80055c4:	f000 f818 	bl	80055f8 <core_set_error>
 80055c8:	4654      	mov	r4, sl
 80055ca:	e6fc      	b.n	80053c6 <ai_platform_network_process+0x2da>
 80055cc:	2700      	movs	r7, #0
 80055ce:	e733      	b.n	8005438 <ai_platform_network_process+0x34c>
 80055d0:	4625      	mov	r5, r4
 80055d2:	2221      	movs	r2, #33	; 0x21
 80055d4:	4604      	mov	r4, r0
 80055d6:	2113      	movs	r1, #19
 80055d8:	f105 0010 	add.w	r0, r5, #16
 80055dc:	f000 f80c 	bl	80055f8 <core_set_error>
 80055e0:	e6f1      	b.n	80053c6 <ai_platform_network_process+0x2da>
 80055e2:	4625      	mov	r5, r4
 80055e4:	2217      	movs	r2, #23
 80055e6:	4604      	mov	r4, r0
 80055e8:	2113      	movs	r1, #19
 80055ea:	f105 0010 	add.w	r0, r5, #16
 80055ee:	f000 f803 	bl	80055f8 <core_set_error>
 80055f2:	e6e8      	b.n	80053c6 <ai_platform_network_process+0x2da>

080055f4 <core_init>:
 80055f4:	2001      	movs	r0, #1
 80055f6:	4770      	bx	lr

080055f8 <core_set_error>:
 80055f8:	4603      	mov	r3, r0
 80055fa:	7800      	ldrb	r0, [r0, #0]
 80055fc:	b108      	cbz	r0, 8005602 <core_set_error+0xa>
 80055fe:	2000      	movs	r0, #0
 8005600:	4770      	bx	lr
 8005602:	7019      	strb	r1, [r3, #0]
 8005604:	6819      	ldr	r1, [r3, #0]
 8005606:	f362 211f 	bfi	r1, r2, #8, #24
 800560a:	2001      	movs	r0, #1
 800560c:	6019      	str	r1, [r3, #0]
 800560e:	4770      	bx	lr

08005610 <node_convert>:
 8005610:	6982      	ldr	r2, [r0, #24]
 8005612:	8813      	ldrh	r3, [r2, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d04a      	beq.n	80056ae <node_convert+0x9e>
 8005618:	6852      	ldr	r2, [r2, #4]
 800561a:	6850      	ldr	r0, [r2, #4]
 800561c:	b100      	cbz	r0, 8005620 <node_convert+0x10>
 800561e:	6800      	ldr	r0, [r0, #0]
 8005620:	2b01      	cmp	r3, #1
 8005622:	f000 813c 	beq.w	800589e <node_convert+0x28e>
 8005626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800562a:	6915      	ldr	r5, [r2, #16]
 800562c:	b105      	cbz	r5, 8005630 <node_convert+0x20>
 800562e:	682d      	ldr	r5, [r5, #0]
 8005630:	6883      	ldr	r3, [r0, #8]
 8005632:	0a1b      	lsrs	r3, r3, #8
 8005634:	f000 80ed 	beq.w	8005812 <node_convert+0x202>
 8005638:	68c1      	ldr	r1, [r0, #12]
 800563a:	2401      	movs	r4, #1
 800563c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005640:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005644:	4299      	cmp	r1, r3
 8005646:	fb02 f404 	mul.w	r4, r2, r4
 800564a:	d1f9      	bne.n	8005640 <node_convert+0x30>
 800564c:	6982      	ldr	r2, [r0, #24]
 800564e:	69af      	ldr	r7, [r5, #24]
 8005650:	6813      	ldr	r3, [r2, #0]
 8005652:	f3c3 4143 	ubfx	r1, r3, #17, #4
 8005656:	2901      	cmp	r1, #1
 8005658:	d02b      	beq.n	80056b2 <node_convert+0xa2>
 800565a:	6801      	ldr	r1, [r0, #0]
 800565c:	68bd      	ldr	r5, [r7, #8]
 800565e:	2900      	cmp	r1, #0
 8005660:	d069      	beq.n	8005736 <node_convert+0x126>
 8005662:	684e      	ldr	r6, [r1, #4]
 8005664:	6892      	ldr	r2, [r2, #8]
 8005666:	f3c3 50c0 	ubfx	r0, r3, #23, #1
 800566a:	2e00      	cmp	r6, #0
 800566c:	f000 80b7 	beq.w	80057de <node_convert+0x1ce>
 8005670:	884b      	ldrh	r3, [r1, #2]
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 8088 	beq.w	8005788 <node_convert+0x178>
 8005678:	6833      	ldr	r3, [r6, #0]
 800567a:	ed93 7a00 	vldr	s14, [r3]
 800567e:	6873      	ldr	r3, [r6, #4]
 8005680:	2800      	cmp	r0, #0
 8005682:	f000 80c4 	beq.w	800580e <node_convert+0x1fe>
 8005686:	f993 0000 	ldrsb.w	r0, [r3]
 800568a:	b174      	cbz	r4, 80056aa <node_convert+0x9a>
 800568c:	4629      	mov	r1, r5
 800568e:	4414      	add	r4, r2
 8005690:	f912 3b01 	ldrsb.w	r3, [r2], #1
 8005694:	1a1b      	subs	r3, r3, r0
 8005696:	ee07 3a90 	vmov	s15, r3
 800569a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800569e:	42a2      	cmp	r2, r4
 80056a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056a4:	ece1 7a01 	vstmia	r1!, {s15}
 80056a8:	d1f2      	bne.n	8005690 <node_convert+0x80>
 80056aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	deff      	udf	#255	; 0xff
 80056b2:	682e      	ldr	r6, [r5, #0]
 80056b4:	6895      	ldr	r5, [r2, #8]
 80056b6:	2e00      	cmp	r6, #0
 80056b8:	f000 80ad 	beq.w	8005816 <node_convert+0x206>
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	6871      	ldr	r1, [r6, #4]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 80056c6:	2900      	cmp	r1, #0
 80056c8:	d063      	beq.n	8005792 <node_convert+0x182>
 80056ca:	8870      	ldrh	r0, [r6, #2]
 80056cc:	2800      	cmp	r0, #0
 80056ce:	d066      	beq.n	800579e <node_convert+0x18e>
 80056d0:	6808      	ldr	r0, [r1, #0]
 80056d2:	edd0 7a00 	vldr	s15, [r0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 80d6 	beq.w	8005888 <node_convert+0x278>
 80056dc:	684b      	ldr	r3, [r1, #4]
 80056de:	f993 3000 	ldrsb.w	r3, [r3]
 80056e2:	ee06 3a90 	vmov	s13, r3
 80056e6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80056ea:	2c00      	cmp	r4, #0
 80056ec:	d0dd      	beq.n	80056aa <node_convert+0x9a>
 80056ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056f2:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80056f6:	4414      	add	r4, r2
 80056f8:	ed9f 5a6a 	vldr	s10, [pc, #424]	; 80058a4 <node_convert+0x294>
 80056fc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005700:	ecb5 7a01 	vldmia	r5!, {s14}
 8005704:	eef0 7a66 	vmov.f32	s15, s13
 8005708:	eee7 7a06 	vfma.f32	s15, s14, s12
 800570c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005714:	bfac      	ite	ge
 8005716:	ee77 7aa5 	vaddge.f32	s15, s15, s11
 800571a:	ee77 7ac5 	vsublt.f32	s15, s15, s10
 800571e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005722:	ee17 3a90 	vmov	r3, s15
 8005726:	f303 0307 	ssat	r3, #8, r3
 800572a:	f802 3b01 	strb.w	r3, [r2], #1
 800572e:	42a2      	cmp	r2, r4
 8005730:	d1e6      	bne.n	8005700 <node_convert+0xf0>
 8005732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005736:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 800573a:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 800573e:	1b8e      	subs	r6, r1, r6
 8005740:	3640      	adds	r6, #64	; 0x40
 8005742:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8005746:	2908      	cmp	r1, #8
 8005748:	6890      	ldr	r0, [r2, #8]
 800574a:	eba6 0603 	sub.w	r6, r6, r3
 800574e:	4622      	mov	r2, r4
 8005750:	4629      	mov	r1, r5
 8005752:	f000 808b 	beq.w	800586c <node_convert+0x25c>
 8005756:	f008 fa9f 	bl	800dc98 <arm_q15_to_float>
 800575a:	2e00      	cmp	r6, #0
 800575c:	d0a5      	beq.n	80056aa <node_convert+0x9a>
 800575e:	ee07 6a90 	vmov	s15, r6
 8005762:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8005766:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800576a:	f009 f901 	bl	800e970 <powf>
 800576e:	2c00      	cmp	r4, #0
 8005770:	d09b      	beq.n	80056aa <node_convert+0x9a>
 8005772:	2300      	movs	r3, #0
 8005774:	ecf5 7a01 	vldmia	r5!, {s15}
 8005778:	3301      	adds	r3, #1
 800577a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800577e:	429c      	cmp	r4, r3
 8005780:	ed45 7a01 	vstr	s15, [r5, #-4]
 8005784:	d1f6      	bne.n	8005774 <node_convert+0x164>
 8005786:	e790      	b.n	80056aa <node_convert+0x9a>
 8005788:	b358      	cbz	r0, 80057e2 <node_convert+0x1d2>
 800578a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80058a8 <node_convert+0x298>
 800578e:	4618      	mov	r0, r3
 8005790:	e77b      	b.n	800568a <node_convert+0x7a>
 8005792:	b133      	cbz	r3, 80057a2 <node_convert+0x192>
 8005794:	eddf 6a44 	vldr	s13, [pc, #272]	; 80058a8 <node_convert+0x298>
 8005798:	eef0 7a66 	vmov.f32	s15, s13
 800579c:	e7a5      	b.n	80056ea <node_convert+0xda>
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f8      	bne.n	8005794 <node_convert+0x184>
 80057a2:	eddf 7a41 	vldr	s15, [pc, #260]	; 80058a8 <node_convert+0x298>
 80057a6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80057aa:	2c00      	cmp	r4, #0
 80057ac:	f43f af7d 	beq.w	80056aa <node_convert+0x9a>
 80057b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057b4:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80057b8:	4414      	add	r4, r2
 80057ba:	ecb5 7a01 	vldmia	r5!, {s14}
 80057be:	eef0 7a66 	vmov.f32	s15, s13
 80057c2:	eee7 7a06 	vfma.f32	s15, s14, s12
 80057c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057ca:	ee17 3a90 	vmov	r3, s15
 80057ce:	f383 0308 	usat	r3, #8, r3
 80057d2:	f802 3b01 	strb.w	r3, [r2], #1
 80057d6:	42a2      	cmp	r2, r4
 80057d8:	d1ef      	bne.n	80057ba <node_convert+0x1aa>
 80057da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057de:	2800      	cmp	r0, #0
 80057e0:	d147      	bne.n	8005872 <node_convert+0x262>
 80057e2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80058a8 <node_convert+0x298>
 80057e6:	2c00      	cmp	r4, #0
 80057e8:	f43f af5f 	beq.w	80056aa <node_convert+0x9a>
 80057ec:	4629      	mov	r1, r5
 80057ee:	4414      	add	r4, r2
 80057f0:	f812 3b01 	ldrb.w	r3, [r2], #1
 80057f4:	1a1b      	subs	r3, r3, r0
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057fe:	42a2      	cmp	r2, r4
 8005800:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005804:	ece1 7a01 	vstmia	r1!, {s15}
 8005808:	d1f2      	bne.n	80057f0 <node_convert+0x1e0>
 800580a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800580e:	7818      	ldrb	r0, [r3, #0]
 8005810:	e7e9      	b.n	80057e6 <node_convert+0x1d6>
 8005812:	2401      	movs	r4, #1
 8005814:	e71a      	b.n	800564c <node_convert+0x3c>
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	f3c2 18c6 	ubfx	r8, r2, #7, #7
 800581c:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8005820:	eba8 0303 	sub.w	r3, r8, r3
 8005824:	3340      	adds	r3, #64	; 0x40
 8005826:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 800582a:	1a9b      	subs	r3, r3, r2
 800582c:	d014      	beq.n	8005858 <node_convert+0x248>
 800582e:	425b      	negs	r3, r3
 8005830:	ee00 3a90 	vmov	s1, r3
 8005834:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8005838:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800583c:	f009 f898 	bl	800e970 <powf>
 8005840:	b154      	cbz	r4, 8005858 <node_convert+0x248>
 8005842:	4633      	mov	r3, r6
 8005844:	462a      	mov	r2, r5
 8005846:	ecf2 7a01 	vldmia	r2!, {s15}
 800584a:	3301      	adds	r3, #1
 800584c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005850:	42a3      	cmp	r3, r4
 8005852:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005856:	d1f6      	bne.n	8005846 <node_convert+0x236>
 8005858:	f1b8 0f08 	cmp.w	r8, #8
 800585c:	d00d      	beq.n	800587a <node_convert+0x26a>
 800585e:	68b9      	ldr	r1, [r7, #8]
 8005860:	4622      	mov	r2, r4
 8005862:	4628      	mov	r0, r5
 8005864:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005868:	f008 b872 	b.w	800d950 <arm_float_to_q15>
 800586c:	f008 fa7a 	bl	800dd64 <arm_q7_to_float>
 8005870:	e773      	b.n	800575a <node_convert+0x14a>
 8005872:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80058a8 <node_convert+0x298>
 8005876:	4630      	mov	r0, r6
 8005878:	e707      	b.n	800568a <node_convert+0x7a>
 800587a:	68b9      	ldr	r1, [r7, #8]
 800587c:	4622      	mov	r2, r4
 800587e:	4628      	mov	r0, r5
 8005880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005884:	f008 b92a 	b.w	800dadc <arm_float_to_q7>
 8005888:	684b      	ldr	r3, [r1, #4]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	ee06 3a90 	vmov	s13, r3
 8005890:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005894:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005898:	ee76 6a87 	vadd.f32	s13, s13, s14
 800589c:	e785      	b.n	80057aa <node_convert+0x19a>
 800589e:	2300      	movs	r3, #0
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	deff      	udf	#255	; 0xff
 80058a4:	3efffffc 	.word	0x3efffffc
 80058a8:	00000000 	.word	0x00000000

080058ac <ai_check_custom_types>:
 80058ac:	b082      	sub	sp, #8
 80058ae:	4b13      	ldr	r3, [pc, #76]	; (80058fc <ai_check_custom_types+0x50>)
 80058b0:	9301      	str	r3, [sp, #4]
 80058b2:	b118      	cbz	r0, 80058bc <ai_check_custom_types+0x10>
 80058b4:	7803      	ldrb	r3, [r0, #0]
 80058b6:	2b03      	cmp	r3, #3
 80058b8:	d002      	beq.n	80058c0 <ai_check_custom_types+0x14>
 80058ba:	2000      	movs	r0, #0
 80058bc:	b002      	add	sp, #8
 80058be:	4770      	bx	lr
 80058c0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d004      	beq.n	80058d2 <ai_check_custom_types+0x26>
 80058c8:	2001      	movs	r0, #1
 80058ca:	f080 0001 	eor.w	r0, r0, #1
 80058ce:	b002      	add	sp, #8
 80058d0:	4770      	bx	lr
 80058d2:	7842      	ldrb	r2, [r0, #1]
 80058d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80058d8:	429a      	cmp	r2, r3
 80058da:	f100 0001 	add.w	r0, r0, #1
 80058de:	d1f3      	bne.n	80058c8 <ai_check_custom_types+0x1c>
 80058e0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80058e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d1ed      	bne.n	80058c8 <ai_check_custom_types+0x1c>
 80058ec:	7842      	ldrb	r2, [r0, #1]
 80058ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d1e8      	bne.n	80058c8 <ai_check_custom_types+0x1c>
 80058f6:	2000      	movs	r0, #0
 80058f8:	e7e7      	b.n	80058ca <ai_check_custom_types+0x1e>
 80058fa:	bf00      	nop
 80058fc:	84048403 	.word	0x84048403

08005900 <ai_layers_init_all>:
 8005900:	4601      	mov	r1, r0
 8005902:	2000      	movs	r0, #0
 8005904:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005906:	b143      	cbz	r3, 800591a <ai_layers_init_all+0x1a>
 8005908:	691a      	ldr	r2, [r3, #16]
 800590a:	60d9      	str	r1, [r3, #12]
 800590c:	429a      	cmp	r2, r3
 800590e:	f100 0001 	add.w	r0, r0, #1
 8005912:	d002      	beq.n	800591a <ai_layers_init_all+0x1a>
 8005914:	b10a      	cbz	r2, 800591a <ai_layers_init_all+0x1a>
 8005916:	4613      	mov	r3, r2
 8005918:	e7f5      	b.n	8005906 <ai_layers_init_all+0x6>
 800591a:	4770      	bx	lr

0800591c <ai_layers_post_init_all>:
 800591c:	b538      	push	{r3, r4, r5, lr}
 800591e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005920:	2500      	movs	r5, #0
 8005922:	b16c      	cbz	r4, 8005940 <ai_layers_post_init_all+0x24>
 8005924:	6863      	ldr	r3, [r4, #4]
 8005926:	07db      	lsls	r3, r3, #31
 8005928:	d504      	bpl.n	8005934 <ai_layers_post_init_all+0x18>
 800592a:	6a23      	ldr	r3, [r4, #32]
 800592c:	4620      	mov	r0, r4
 800592e:	b10b      	cbz	r3, 8005934 <ai_layers_post_init_all+0x18>
 8005930:	4798      	blx	r3
 8005932:	3501      	adds	r5, #1
 8005934:	6923      	ldr	r3, [r4, #16]
 8005936:	42a3      	cmp	r3, r4
 8005938:	d002      	beq.n	8005940 <ai_layers_post_init_all+0x24>
 800593a:	b10b      	cbz	r3, 8005940 <ai_layers_post_init_all+0x24>
 800593c:	461c      	mov	r4, r3
 800593e:	e7f0      	b.n	8005922 <ai_layers_post_init_all+0x6>
 8005940:	4628      	mov	r0, r5
 8005942:	bd38      	pop	{r3, r4, r5, pc}

08005944 <ai_layers_forward_all>:
 8005944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005948:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 800594c:	4604      	mov	r4, r0
 800594e:	f1b8 0f00 	cmp.w	r8, #0
 8005952:	d02b      	beq.n	80059ac <ai_layers_forward_all+0x68>
 8005954:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005956:	6381      	str	r1, [r0, #56]	; 0x38
 8005958:	b321      	cbz	r1, 80059a4 <ai_layers_forward_all+0x60>
 800595a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800595c:	2001      	movs	r0, #1
 800595e:	47c0      	blx	r8
 8005960:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005962:	b1fe      	cbz	r6, 80059a4 <ai_layers_forward_all+0x60>
 8005964:	2700      	movs	r7, #0
 8005966:	4631      	mov	r1, r6
 8005968:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800596a:	2002      	movs	r0, #2
 800596c:	47c0      	blx	r8
 800596e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8005970:	4628      	mov	r0, r5
 8005972:	696b      	ldr	r3, [r5, #20]
 8005974:	4798      	blx	r3
 8005976:	692e      	ldr	r6, [r5, #16]
 8005978:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800597a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800597c:	42b5      	cmp	r5, r6
 800597e:	f04f 0003 	mov.w	r0, #3
 8005982:	d007      	beq.n	8005994 <ai_layers_forward_all+0x50>
 8005984:	47c0      	blx	r8
 8005986:	3701      	adds	r7, #1
 8005988:	63a6      	str	r6, [r4, #56]	; 0x38
 800598a:	2e00      	cmp	r6, #0
 800598c:	d1eb      	bne.n	8005966 <ai_layers_forward_all+0x22>
 800598e:	4638      	mov	r0, r7
 8005990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005994:	2003      	movs	r0, #3
 8005996:	47c0      	blx	r8
 8005998:	2300      	movs	r3, #0
 800599a:	3701      	adds	r7, #1
 800599c:	63a3      	str	r3, [r4, #56]	; 0x38
 800599e:	4638      	mov	r0, r7
 80059a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059a4:	2700      	movs	r7, #0
 80059a6:	4638      	mov	r0, r7
 80059a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059ac:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80059ae:	6385      	str	r5, [r0, #56]	; 0x38
 80059b0:	2d00      	cmp	r5, #0
 80059b2:	d0f7      	beq.n	80059a4 <ai_layers_forward_all+0x60>
 80059b4:	4647      	mov	r7, r8
 80059b6:	696b      	ldr	r3, [r5, #20]
 80059b8:	4628      	mov	r0, r5
 80059ba:	4798      	blx	r3
 80059bc:	462b      	mov	r3, r5
 80059be:	692d      	ldr	r5, [r5, #16]
 80059c0:	429d      	cmp	r5, r3
 80059c2:	d004      	beq.n	80059ce <ai_layers_forward_all+0x8a>
 80059c4:	63a5      	str	r5, [r4, #56]	; 0x38
 80059c6:	3701      	adds	r7, #1
 80059c8:	2d00      	cmp	r5, #0
 80059ca:	d1f4      	bne.n	80059b6 <ai_layers_forward_all+0x72>
 80059cc:	e7df      	b.n	800598e <ai_layers_forward_all+0x4a>
 80059ce:	2300      	movs	r3, #0
 80059d0:	63a3      	str	r3, [r4, #56]	; 0x38
 80059d2:	3701      	adds	r7, #1
 80059d4:	e7db      	b.n	800598e <ai_layers_forward_all+0x4a>
 80059d6:	bf00      	nop

080059d8 <func_dummy>:
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop

080059dc <forward_conv2d_deep_sssa8_ch_nl_pool>:
 80059dc:	6982      	ldr	r2, [r0, #24]
 80059de:	8813      	ldrh	r3, [r2, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 823b 	beq.w	8005e5c <forward_conv2d_deep_sssa8_ch_nl_pool+0x480>
 80059e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ea:	ed2d 8b04 	vpush	{d8-d9}
 80059ee:	6852      	ldr	r2, [r2, #4]
 80059f0:	f8d2 a004 	ldr.w	sl, [r2, #4]
 80059f4:	b0cd      	sub	sp, #308	; 0x134
 80059f6:	4681      	mov	r9, r0
 80059f8:	f1ba 0f00 	cmp.w	sl, #0
 80059fc:	d001      	beq.n	8005a02 <forward_conv2d_deep_sssa8_ch_nl_pool+0x26>
 80059fe:	f8da a000 	ldr.w	sl, [sl]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	f000 8281 	beq.w	8005f0a <forward_conv2d_deep_sssa8_ch_nl_pool+0x52e>
 8005a08:	6911      	ldr	r1, [r2, #16]
 8005a0a:	9119      	str	r1, [sp, #100]	; 0x64
 8005a0c:	b109      	cbz	r1, 8005a12 <forward_conv2d_deep_sssa8_ch_nl_pool+0x36>
 8005a0e:	6809      	ldr	r1, [r1, #0]
 8005a10:	9119      	str	r1, [sp, #100]	; 0x64
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	f000 821f 	beq.w	8005e56 <forward_conv2d_deep_sssa8_ch_nl_pool+0x47a>
 8005a18:	69d1      	ldr	r1, [r2, #28]
 8005a1a:	2900      	cmp	r1, #0
 8005a1c:	f000 8270 	beq.w	8005f00 <forward_conv2d_deep_sssa8_ch_nl_pool+0x524>
 8005a20:	8b10      	ldrh	r0, [r2, #24]
 8005a22:	680c      	ldr	r4, [r1, #0]
 8005a24:	9414      	str	r4, [sp, #80]	; 0x50
 8005a26:	2801      	cmp	r0, #1
 8005a28:	f200 821a 	bhi.w	8005e60 <forward_conv2d_deep_sssa8_ch_nl_pool+0x484>
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	9016      	str	r0, [sp, #88]	; 0x58
 8005a30:	2b03      	cmp	r3, #3
 8005a32:	f000 826d 	beq.w	8005f10 <forward_conv2d_deep_sssa8_ch_nl_pool+0x534>
 8005a36:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 8264 	beq.w	8005f06 <forward_conv2d_deep_sssa8_ch_nl_pool+0x52a>
 8005a3e:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8005a42:	6818      	ldr	r0, [r3, #0]
 8005a44:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8005a48:	922d      	str	r2, [sp, #180]	; 0xb4
 8005a4a:	9025      	str	r0, [sp, #148]	; 0x94
 8005a4c:	2a00      	cmp	r2, #0
 8005a4e:	f000 8251 	beq.w	8005ef4 <forward_conv2d_deep_sssa8_ch_nl_pool+0x518>
 8005a52:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8005a56:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8005a58:	f8da 000c 	ldr.w	r0, [sl, #12]
 8005a5c:	68e4      	ldr	r4, [r4, #12]
 8005a5e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8005a60:	68e6      	ldr	r6, [r4, #12]
 8005a62:	68a4      	ldr	r4, [r4, #8]
 8005a64:	68ef      	ldr	r7, [r5, #12]
 8005a66:	9432      	str	r4, [sp, #200]	; 0xc8
 8005a68:	6845      	ldr	r5, [r0, #4]
 8005a6a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8005a6e:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8005a72:	6852      	ldr	r2, [r2, #4]
 8005a74:	f8d9 c058 	ldr.w	ip, [r9, #88]	; 0x58
 8005a78:	9215      	str	r2, [sp, #84]	; 0x54
 8005a7a:	e9d0 0402 	ldrd	r0, r4, [r0, #8]
 8005a7e:	9036      	str	r0, [sp, #216]	; 0xd8
 8005a80:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
 8005a84:	902e      	str	r0, [sp, #184]	; 0xb8
 8005a86:	68b8      	ldr	r0, [r7, #8]
 8005a88:	9023      	str	r0, [sp, #140]	; 0x8c
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	9030      	str	r0, [sp, #192]	; 0xc0
 8005a8e:	f8d9 0044 	ldr.w	r0, [r9, #68]	; 0x44
 8005a92:	9033      	str	r0, [sp, #204]	; 0xcc
 8005a94:	f8d9 004c 	ldr.w	r0, [r9, #76]	; 0x4c
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	9518      	str	r5, [sp, #96]	; 0x60
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f8d9 502c 	ldr.w	r5, [r9, #44]	; 0x2c
 8005aa2:	961f      	str	r6, [sp, #124]	; 0x7c
 8005aa4:	9034      	str	r0, [sp, #208]	; 0xd0
 8005aa6:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 8005aaa:	9017      	str	r0, [sp, #92]	; 0x5c
 8005aac:	f8dc 0000 	ldr.w	r0, [ip]
 8005ab0:	9026      	str	r0, [sp, #152]	; 0x98
 8005ab2:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8005ab6:	9035      	str	r0, [sp, #212]	; 0xd4
 8005ab8:	f8bd 0060 	ldrh.w	r0, [sp, #96]	; 0x60
 8005abc:	ee09 0a90 	vmov	s19, r0
 8005ac0:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
 8005ac4:	901c      	str	r0, [sp, #112]	; 0x70
 8005ac6:	b2a8      	uxth	r0, r5
 8005ac8:	902f      	str	r0, [sp, #188]	; 0xbc
 8005aca:	b290      	uxth	r0, r2
 8005acc:	901e      	str	r0, [sp, #120]	; 0x78
 8005ace:	2900      	cmp	r1, #0
 8005ad0:	f000 8203 	beq.w	8005eda <forward_conv2d_deep_sssa8_ch_nl_pool+0x4fe>
 8005ad4:	6889      	ldr	r1, [r1, #8]
 8005ad6:	2900      	cmp	r1, #0
 8005ad8:	f000 81ff 	beq.w	8005eda <forward_conv2d_deep_sssa8_ch_nl_pool+0x4fe>
 8005adc:	6988      	ldr	r0, [r1, #24]
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	bf08      	it	eq
 8005ae2:	4601      	moveq	r1, r0
 8005ae4:	ee08 1a90 	vmov	s17, r1
 8005ae8:	b292      	uxth	r2, r2
 8005aea:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8005aec:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8005aee:	f8db 6018 	ldr.w	r6, [fp, #24]
 8005af2:	69bf      	ldr	r7, [r7, #24]
 8005af4:	9727      	str	r7, [sp, #156]	; 0x9c
 8005af6:	fa12 f383 	uxtah	r3, r2, r3
 8005afa:	4422      	add	r2, r4
 8005afc:	4423      	add	r3, r4
 8005afe:	921b      	str	r2, [sp, #108]	; 0x6c
 8005b00:	b2aa      	uxth	r2, r5
 8005b02:	9222      	str	r2, [sp, #136]	; 0x88
 8005b04:	1a5b      	subs	r3, r3, r1
 8005b06:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b0a:	aa3d      	add	r2, sp, #244	; 0xf4
 8005b0c:	924a      	str	r2, [sp, #296]	; 0x128
 8005b0e:	f240 4501 	movw	r5, #1025	; 0x401
 8005b12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b16:	e9cd 2546 	strd	r2, r5, [sp, #280]	; 0x118
 8005b1a:	9312      	str	r3, [sp, #72]	; 0x48
 8005b1c:	f240 4502 	movw	r5, #1026	; 0x402
 8005b20:	2300      	movs	r3, #0
 8005b22:	e9cd 3339 	strd	r3, r3, [sp, #228]	; 0xe4
 8005b26:	e9cd 333d 	strd	r3, r3, [sp, #244]	; 0xf4
 8005b2a:	9345      	str	r3, [sp, #276]	; 0x114
 8005b2c:	933b      	str	r3, [sp, #236]	; 0xec
 8005b2e:	933f      	str	r3, [sp, #252]	; 0xfc
 8005b30:	9549      	str	r5, [sp, #292]	; 0x124
 8005b32:	f8d8 5018 	ldr.w	r5, [r8, #24]
 8005b36:	933c      	str	r3, [sp, #240]	; 0xf0
 8005b38:	9340      	str	r3, [sp, #256]	; 0x100
 8005b3a:	934b      	str	r3, [sp, #300]	; 0x12c
 8005b3c:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8005b40:	9321      	str	r3, [sp, #132]	; 0x84
 8005b42:	f10d 0ce4 	add.w	ip, sp, #228	; 0xe4
 8005b46:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 8005b4a:	9331      	str	r3, [sp, #196]	; 0xc4
 8005b4c:	ac41      	add	r4, sp, #260	; 0x104
 8005b4e:	4659      	mov	r1, fp
 8005b50:	a845      	add	r0, sp, #276	; 0x114
 8005b52:	f8cd c120 	str.w	ip, [sp, #288]	; 0x120
 8005b56:	f008 fa2f 	bl	800dfb8 <core_tensor_clone>
 8005b5a:	4631      	mov	r1, r6
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f008 fa5d 	bl	800e01c <core_array_clone>
 8005b62:	944b      	str	r4, [sp, #300]	; 0x12c
 8005b64:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005b68:	9914      	ldr	r1, [sp, #80]	; 0x50
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	931d      	str	r3, [sp, #116]	; 0x74
 8005b6e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005b70:	f8da 2000 	ldr.w	r2, [sl]
 8005b74:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8005b78:	6809      	ldr	r1, [r1, #0]
 8005b7a:	f8de 3008 	ldr.w	r3, [lr, #8]
 8005b7e:	9324      	str	r3, [sp, #144]	; 0x90
 8005b80:	f9bd 4098 	ldrsh.w	r4, [sp, #152]	; 0x98
 8005b84:	f8d8 3000 	ldr.w	r3, [r8]
 8005b88:	9113      	str	r1, [sp, #76]	; 0x4c
 8005b8a:	2a00      	cmp	r2, #0
 8005b8c:	f000 818d 	beq.w	8005eaa <forward_conv2d_deep_sssa8_ch_nl_pool+0x4ce>
 8005b90:	6851      	ldr	r1, [r2, #4]
 8005b92:	2900      	cmp	r1, #0
 8005b94:	f000 8189 	beq.w	8005eaa <forward_conv2d_deep_sssa8_ch_nl_pool+0x4ce>
 8005b98:	8850      	ldrh	r0, [r2, #2]
 8005b9a:	2800      	cmp	r0, #0
 8005b9c:	f000 8185 	beq.w	8005eaa <forward_conv2d_deep_sssa8_ch_nl_pool+0x4ce>
 8005ba0:	6809      	ldr	r1, [r1, #0]
 8005ba2:	ed91 0a00 	vldr	s0, [r1]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 817c 	beq.w	8005ea4 <forward_conv2d_deep_sssa8_ch_nl_pool+0x4c8>
 8005bac:	6859      	ldr	r1, [r3, #4]
 8005bae:	2900      	cmp	r1, #0
 8005bb0:	f000 8178 	beq.w	8005ea4 <forward_conv2d_deep_sssa8_ch_nl_pool+0x4c8>
 8005bb4:	8858      	ldrh	r0, [r3, #2]
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	f000 8174 	beq.w	8005ea4 <forward_conv2d_deep_sssa8_ch_nl_pool+0x4c8>
 8005bbc:	6809      	ldr	r1, [r1, #0]
 8005bbe:	edd1 0a00 	vldr	s1, [r1]
 8005bc2:	9914      	ldr	r1, [sp, #80]	; 0x50
 8005bc4:	f8da c018 	ldr.w	ip, [sl, #24]
 8005bc8:	6988      	ldr	r0, [r1, #24]
 8005bca:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005bcc:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8005bd0:	6989      	ldr	r1, [r1, #24]
 8005bd2:	6880      	ldr	r0, [r0, #8]
 8005bd4:	6889      	ldr	r1, [r1, #8]
 8005bd6:	912c      	str	r1, [sp, #176]	; 0xb0
 8005bd8:	f899 1041 	ldrb.w	r1, [r9, #65]	; 0x41
 8005bdc:	912a      	str	r1, [sp, #168]	; 0xa8
 8005bde:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005be0:	9716      	str	r7, [sp, #88]	; 0x58
 8005be2:	902b      	str	r0, [sp, #172]	; 0xac
 8005be4:	b121      	cbz	r1, 8005bf0 <forward_conv2d_deep_sssa8_ch_nl_pool+0x214>
 8005be6:	6849      	ldr	r1, [r1, #4]
 8005be8:	9113      	str	r1, [sp, #76]	; 0x4c
 8005bea:	b109      	cbz	r1, 8005bf0 <forward_conv2d_deep_sssa8_ch_nl_pool+0x214>
 8005bec:	6809      	ldr	r1, [r1, #0]
 8005bee:	9113      	str	r1, [sp, #76]	; 0x4c
 8005bf0:	2a00      	cmp	r2, #0
 8005bf2:	f000 8170 	beq.w	8005ed6 <forward_conv2d_deep_sssa8_ch_nl_pool+0x4fa>
 8005bf6:	6851      	ldr	r1, [r2, #4]
 8005bf8:	2900      	cmp	r1, #0
 8005bfa:	f000 8179 	beq.w	8005ef0 <forward_conv2d_deep_sssa8_ch_nl_pool+0x514>
 8005bfe:	8852      	ldrh	r2, [r2, #2]
 8005c00:	2a00      	cmp	r2, #0
 8005c02:	f000 8168 	beq.w	8005ed6 <forward_conv2d_deep_sssa8_ch_nl_pool+0x4fa>
 8005c06:	684a      	ldr	r2, [r1, #4]
 8005c08:	f992 2000 	ldrsb.w	r2, [r2]
 8005c0c:	9228      	str	r2, [sp, #160]	; 0xa0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f000 815f 	beq.w	8005ed2 <forward_conv2d_deep_sssa8_ch_nl_pool+0x4f6>
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	2a00      	cmp	r2, #0
 8005c18:	f000 8170 	beq.w	8005efc <forward_conv2d_deep_sssa8_ch_nl_pool+0x520>
 8005c1c:	885b      	ldrh	r3, [r3, #2]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 8157 	beq.w	8005ed2 <forward_conv2d_deep_sssa8_ch_nl_pool+0x4f6>
 8005c24:	6853      	ldr	r3, [r2, #4]
 8005c26:	f993 3000 	ldrsb.w	r3, [r3]
 8005c2a:	9329      	str	r3, [sp, #164]	; 0xa4
 8005c2c:	e9de 0100 	ldrd	r0, r1, [lr]
 8005c30:	f8bd a054 	ldrh.w	sl, [sp, #84]	; 0x54
 8005c34:	edcd 0a1a 	vstr	s1, [sp, #104]	; 0x68
 8005c38:	ed8d 0a14 	vstr	s0, [sp, #80]	; 0x50
 8005c3c:	f008 f964 	bl	800df08 <ai_array_get_byte_size>
 8005c40:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005c42:	eddd 0a1a 	vldr	s1, [sp, #104]	; 0x68
 8005c46:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
 8005c4a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005c4c:	eba0 004a 	sub.w	r0, r0, sl, lsl #1
 8005c50:	4613      	mov	r3, r2
 8005c52:	4403      	add	r3, r0
 8005c54:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8005c56:	f003 ff11 	bl	8009a7c <align_factor_ch>
 8005c5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 8115 	beq.w	8005e8c <forward_conv2d_deep_sssa8_ch_nl_pool+0x4b0>
 8005c62:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005c64:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8005c68:	9415      	str	r4, [sp, #84]	; 0x54
 8005c6a:	fb02 f10a 	mul.w	r1, r2, sl
 8005c6e:	b292      	uxth	r2, r2
 8005c70:	ee08 1a10 	vmov	s16, r1
 8005c74:	9220      	str	r2, [sp, #128]	; 0x80
 8005c76:	9936      	ldr	r1, [sp, #216]	; 0xd8
 8005c78:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005c7a:	fb01 f202 	mul.w	r2, r1, r2
 8005c7e:	fb03 f202 	mul.w	r2, r3, r2
 8005c82:	fb01 f303 	mul.w	r3, r1, r3
 8005c86:	9337      	str	r3, [sp, #220]	; 0xdc
 8005c88:	b28b      	uxth	r3, r1
 8005c8a:	ee09 3a10 	vmov	s18, r3
 8005c8e:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8005c92:	931a      	str	r3, [sp, #104]	; 0x68
 8005c94:	f04f 0a00 	mov.w	sl, #0
 8005c98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c9a:	9236      	str	r2, [sp, #216]	; 0xd8
 8005c9c:	931d      	str	r3, [sp, #116]	; 0x74
 8005c9e:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
 8005ca2:	e0b6      	b.n	8005e12 <forward_conv2d_deep_sssa8_ch_nl_pool+0x436>
 8005ca4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ca6:	68aa      	ldr	r2, [r5, #8]
 8005ca8:	9213      	str	r2, [sp, #76]	; 0x4c
 8005caa:	429c      	cmp	r4, r3
 8005cac:	bf06      	itte	eq
 8005cae:	faba f38a 	clzeq	r3, sl
 8005cb2:	095b      	lsreq	r3, r3, #5
 8005cb4:	2300      	movne	r3, #0
 8005cb6:	9314      	str	r3, [sp, #80]	; 0x50
 8005cb8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005cba:	6998      	ldr	r0, [r3, #24]
 8005cbc:	e9d0 0100 	ldrd	r0, r1, [r0]
 8005cc0:	f008 f922 	bl	800df08 <ai_array_get_byte_size>
 8005cc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005cc6:	930e      	str	r3, [sp, #56]	; 0x38
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8005cce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005cd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cd2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8005cd6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005cd8:	9308      	str	r3, [sp, #32]
 8005cda:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005cdc:	9307      	str	r3, [sp, #28]
 8005cde:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8005ce0:	9306      	str	r3, [sp, #24]
 8005ce2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8005ce4:	9305      	str	r3, [sp, #20]
 8005ce6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8005ce8:	9304      	str	r3, [sp, #16]
 8005cea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005cec:	9301      	str	r3, [sp, #4]
 8005cee:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005cf4:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8005cf6:	9310      	str	r3, [sp, #64]	; 0x40
 8005cf8:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8005cfc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005cfe:	9303      	str	r3, [sp, #12]
 8005d00:	f8bd 30c0 	ldrh.w	r3, [sp, #192]	; 0xc0
 8005d04:	920a      	str	r2, [sp, #40]	; 0x28
 8005d06:	9302      	str	r3, [sp, #8]
 8005d08:	b2ba      	uxth	r2, r7
 8005d0a:	ee19 3a90 	vmov	r3, s19
 8005d0e:	ee19 1a10 	vmov	r1, s18
 8005d12:	900f      	str	r0, [sp, #60]	; 0x3c
 8005d14:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005d16:	f001 fb43 	bl	80073a0 <forward_lite_conv2d_deep_sssa8_ch>
 8005d1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d1c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	f000 80b0 	beq.w	8005e84 <forward_conv2d_deep_sssa8_ch_nl_pool+0x4a8>
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	429f      	cmp	r7, r3
 8005d28:	463a      	mov	r2, r7
 8005d2a:	bf28      	it	cs
 8005d2c:	461a      	movcs	r2, r3
 8005d2e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005d30:	921d      	str	r2, [sp, #116]	; 0x74
 8005d32:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f040 8096 	bne.w	8005e66 <forward_conv2d_deep_sssa8_ch_nl_pool+0x48a>
 8005d3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005d3c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8005d3e:	4413      	add	r3, r2
 8005d40:	9316      	str	r3, [sp, #88]	; 0x58
 8005d42:	ee18 3a90 	vmov	r3, s17
 8005d46:	ee18 2a10 	vmov	r2, s16
 8005d4a:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 8005d4c:	4641      	mov	r1, r8
 8005d4e:	4658      	mov	r0, fp
 8005d50:	47b8      	blx	r7
 8005d52:	3401      	adds	r4, #1
 8005d54:	b224      	sxth	r4, r4
 8005d56:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005d58:	429c      	cmp	r4, r3
 8005d5a:	db32      	blt.n	8005dc2 <forward_conv2d_deep_sssa8_ch_nl_pool+0x3e6>
 8005d5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d5e:	9308      	str	r3, [sp, #32]
 8005d60:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8005d64:	9305      	str	r3, [sp, #20]
 8005d66:	1ae4      	subs	r4, r4, r3
 8005d68:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8005d6c:	9303      	str	r3, [sp, #12]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f8bd 30c8 	ldrh.w	r3, [sp, #200]	; 0xc8
 8005d74:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005d76:	9207      	str	r2, [sp, #28]
 8005d78:	9306      	str	r3, [sp, #24]
 8005d7a:	4492      	add	sl, r2
 8005d7c:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	; 0xd0
 8005d80:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 8005d84:	9304      	str	r3, [sp, #16]
 8005d86:	f8bd 30d4 	ldrh.w	r3, [sp, #212]	; 0xd4
 8005d8a:	9201      	str	r2, [sp, #4]
 8005d8c:	9302      	str	r3, [sp, #8]
 8005d8e:	1a52      	subs	r2, r2, r1
 8005d90:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
 8005d94:	9920      	ldr	r1, [sp, #128]	; 0x80
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	b292      	uxth	r2, r2
 8005d9a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005d9c:	9f31      	ldr	r7, [sp, #196]	; 0xc4
 8005d9e:	a845      	add	r0, sp, #276	; 0x114
 8005da0:	47b8      	blx	r7
 8005da2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005da4:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	688b      	ldr	r3, [r1, #8]
 8005dac:	4413      	add	r3, r2
 8005dae:	608b      	str	r3, [r1, #8]
 8005db0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005db2:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005dbc:	b21b      	sxth	r3, r3
 8005dbe:	b224      	sxth	r4, r4
 8005dc0:	9315      	str	r3, [sp, #84]	; 0x54
 8005dc2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005dc6:	68aa      	ldr	r2, [r5, #8]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	4413      	add	r3, r2
 8005dcc:	60ab      	str	r3, [r5, #8]
 8005dce:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8005dd2:	b132      	cbz	r2, 8005de2 <forward_conv2d_deep_sssa8_ch_nl_pool+0x406>
 8005dd4:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	68b3      	ldr	r3, [r6, #8]
 8005ddc:	4413      	add	r3, r2
 8005dde:	60b3      	str	r3, [r6, #8]
 8005de0:	68ab      	ldr	r3, [r5, #8]
 8005de2:	68ea      	ldr	r2, [r5, #12]
 8005de4:	9314      	str	r3, [sp, #80]	; 0x50
 8005de6:	4640      	mov	r0, r8
 8005de8:	9213      	str	r2, [sp, #76]	; 0x4c
 8005dea:	f008 f8cd 	bl	800df88 <get_tensor_byte_size>
 8005dee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005df0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005df2:	4410      	add	r0, r2
 8005df4:	4283      	cmp	r3, r0
 8005df6:	d306      	bcc.n	8005e06 <forward_conv2d_deep_sssa8_ch_nl_pool+0x42a>
 8005df8:	68eb      	ldr	r3, [r5, #12]
 8005dfa:	60ab      	str	r3, [r5, #8]
 8005dfc:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8005e00:	b10b      	cbz	r3, 8005e06 <forward_conv2d_deep_sssa8_ch_nl_pool+0x42a>
 8005e02:	68f3      	ldr	r3, [r6, #12]
 8005e04:	60b3      	str	r3, [r6, #8]
 8005e06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	9312      	str	r3, [sp, #72]	; 0x48
 8005e0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e0e:	459a      	cmp	sl, r3
 8005e10:	d23c      	bcs.n	8005e8c <forward_conv2d_deep_sssa8_ch_nl_pool+0x4b0>
 8005e12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e14:	3301      	adds	r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f73f af44 	bgt.w	8005ca4 <forward_conv2d_deep_sssa8_ch_nl_pool+0x2c8>
 8005e1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	da99      	bge.n	8005d56 <forward_conv2d_deep_sssa8_ch_nl_pool+0x37a>
 8005e22:	e9d6 1202 	ldrd	r1, r2, [r6, #8]
 8005e26:	ee18 3a10 	vmov	r3, s16
 8005e2a:	fb03 1314 	mls	r3, r3, r4, r1
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	bf84      	itt	hi
 8005e32:	6870      	ldrhi	r0, [r6, #4]
 8005e34:	181b      	addhi	r3, r3, r0
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d202      	bcs.n	8005e40 <forward_conv2d_deep_sssa8_ch_nl_pool+0x464>
 8005e3a:	981a      	ldr	r0, [sp, #104]	; 0x68
 8005e3c:	42a0      	cmp	r0, r4
 8005e3e:	d137      	bne.n	8005eb0 <forward_conv2d_deep_sssa8_ch_nl_pool+0x4d4>
 8005e40:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005e42:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e44:	b2a4      	uxth	r4, r4
 8005e46:	4413      	add	r3, r2
 8005e48:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005e4a:	1b1b      	subs	r3, r3, r4
 8005e4c:	b21b      	sxth	r3, r3
 8005e4e:	4414      	add	r4, r2
 8005e50:	9318      	str	r3, [sp, #96]	; 0x60
 8005e52:	b224      	sxth	r4, r4
 8005e54:	e77f      	b.n	8005d56 <forward_conv2d_deep_sssa8_ch_nl_pool+0x37a>
 8005e56:	2300      	movs	r3, #0
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	deff      	udf	#255	; 0xff
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	deff      	udf	#255	; 0xff
 8005e60:	6848      	ldr	r0, [r1, #4]
 8005e62:	9016      	str	r0, [sp, #88]	; 0x58
 8005e64:	e5e4      	b.n	8005a30 <forward_conv2d_deep_sssa8_ch_nl_pool+0x54>
 8005e66:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005e68:	461a      	mov	r2, r3
 8005e6a:	1a5b      	subs	r3, r3, r1
 8005e6c:	d505      	bpl.n	8005e7a <forward_conv2d_deep_sssa8_ch_nl_pool+0x49e>
 8005e6e:	1a8a      	subs	r2, r1, r2
 8005e70:	9837      	ldr	r0, [sp, #220]	; 0xdc
 8005e72:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005e74:	fb00 1202 	mla	r2, r0, r2, r1
 8005e78:	9216      	str	r2, [sp, #88]	; 0x58
 8005e7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	931e      	str	r3, [sp, #120]	; 0x78
 8005e82:	e75e      	b.n	8005d42 <forward_conv2d_deep_sssa8_ch_nl_pool+0x366>
 8005e84:	2300      	movs	r3, #0
 8005e86:	931d      	str	r3, [sp, #116]	; 0x74
 8005e88:	931b      	str	r3, [sp, #108]	; 0x6c
 8005e8a:	e752      	b.n	8005d32 <forward_conv2d_deep_sssa8_ch_nl_pool+0x356>
 8005e8c:	68eb      	ldr	r3, [r5, #12]
 8005e8e:	60ab      	str	r3, [r5, #8]
 8005e90:	68f3      	ldr	r3, [r6, #12]
 8005e92:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8005e94:	60b3      	str	r3, [r6, #8]
 8005e96:	68d3      	ldr	r3, [r2, #12]
 8005e98:	6093      	str	r3, [r2, #8]
 8005e9a:	b04d      	add	sp, #308	; 0x134
 8005e9c:	ecbd 8b04 	vpop	{d8-d9}
 8005ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ea4:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8005f18 <forward_conv2d_deep_sssa8_ch_nl_pool+0x53c>
 8005ea8:	e68b      	b.n	8005bc2 <forward_conv2d_deep_sssa8_ch_nl_pool+0x1e6>
 8005eaa:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8005f18 <forward_conv2d_deep_sssa8_ch_nl_pool+0x53c>
 8005eae:	e67a      	b.n	8005ba6 <forward_conv2d_deep_sssa8_ch_nl_pool+0x1ca>
 8005eb0:	6870      	ldr	r0, [r6, #4]
 8005eb2:	4402      	add	r2, r0
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d2c3      	bcs.n	8005e40 <forward_conv2d_deep_sssa8_ch_nl_pool+0x464>
 8005eb8:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8005eba:	3901      	subs	r1, #1
 8005ebc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ec0:	f801 2f01 	strb.w	r2, [r1, #1]!
 8005ec4:	68f2      	ldr	r2, [r6, #12]
 8005ec6:	6870      	ldr	r0, [r6, #4]
 8005ec8:	4402      	add	r2, r0
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d3f6      	bcc.n	8005ebc <forward_conv2d_deep_sssa8_ch_nl_pool+0x4e0>
 8005ece:	9712      	str	r7, [sp, #72]	; 0x48
 8005ed0:	e7b6      	b.n	8005e40 <forward_conv2d_deep_sssa8_ch_nl_pool+0x464>
 8005ed2:	9329      	str	r3, [sp, #164]	; 0xa4
 8005ed4:	e6aa      	b.n	8005c2c <forward_conv2d_deep_sssa8_ch_nl_pool+0x250>
 8005ed6:	9228      	str	r2, [sp, #160]	; 0xa0
 8005ed8:	e699      	b.n	8005c0e <forward_conv2d_deep_sssa8_ch_nl_pool+0x232>
 8005eda:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8005ede:	ee08 1a90 	vmov	s17, r1
 8005ee2:	2900      	cmp	r1, #0
 8005ee4:	f43f ae00 	beq.w	8005ae8 <forward_conv2d_deep_sssa8_ch_nl_pool+0x10c>
 8005ee8:	6889      	ldr	r1, [r1, #8]
 8005eea:	ee08 1a90 	vmov	s17, r1
 8005eee:	e5fb      	b.n	8005ae8 <forward_conv2d_deep_sssa8_ch_nl_pool+0x10c>
 8005ef0:	9128      	str	r1, [sp, #160]	; 0xa0
 8005ef2:	e68c      	b.n	8005c0e <forward_conv2d_deep_sssa8_ch_nl_pool+0x232>
 8005ef4:	4b09      	ldr	r3, [pc, #36]	; (8005f1c <forward_conv2d_deep_sssa8_ch_nl_pool+0x540>)
 8005ef6:	932d      	str	r3, [sp, #180]	; 0xb4
 8005ef8:	46c3      	mov	fp, r8
 8005efa:	e5ac      	b.n	8005a56 <forward_conv2d_deep_sssa8_ch_nl_pool+0x7a>
 8005efc:	9229      	str	r2, [sp, #164]	; 0xa4
 8005efe:	e695      	b.n	8005c2c <forward_conv2d_deep_sssa8_ch_nl_pool+0x250>
 8005f00:	9114      	str	r1, [sp, #80]	; 0x50
 8005f02:	9116      	str	r1, [sp, #88]	; 0x58
 8005f04:	e594      	b.n	8005a30 <forward_conv2d_deep_sssa8_ch_nl_pool+0x54>
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	deff      	udf	#255	; 0xff
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	deff      	udf	#255	; 0xff
 8005f10:	2300      	movs	r3, #0
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	deff      	udf	#255	; 0xff
 8005f16:	bf00      	nop
 8005f18:	00000000 	.word	0x00000000
 8005f1c:	080059d9 	.word	0x080059d9

08005f20 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool>:
 8005f20:	6982      	ldr	r2, [r0, #24]
 8005f22:	8813      	ldrh	r3, [r2, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 8213 	beq.w	8006350 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x430>
 8005f2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f2e:	ed2d 8b04 	vpush	{d8-d9}
 8005f32:	6852      	ldr	r2, [r2, #4]
 8005f34:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8005f38:	b0c1      	sub	sp, #260	; 0x104
 8005f3a:	4681      	mov	r9, r0
 8005f3c:	f1b8 0f00 	cmp.w	r8, #0
 8005f40:	d001      	beq.n	8005f46 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x26>
 8005f42:	f8d8 8000 	ldr.w	r8, [r8]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	f000 824e 	beq.w	80063e8 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x4c8>
 8005f4c:	6911      	ldr	r1, [r2, #16]
 8005f4e:	9112      	str	r1, [sp, #72]	; 0x48
 8005f50:	b109      	cbz	r1, 8005f56 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x36>
 8005f52:	6809      	ldr	r1, [r1, #0]
 8005f54:	9112      	str	r1, [sp, #72]	; 0x48
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	f000 81f7 	beq.w	800634a <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x42a>
 8005f5c:	69d0      	ldr	r0, [r2, #28]
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	f000 823d 	beq.w	80063de <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x4be>
 8005f64:	8b11      	ldrh	r1, [r2, #24]
 8005f66:	6804      	ldr	r4, [r0, #0]
 8005f68:	940d      	str	r4, [sp, #52]	; 0x34
 8005f6a:	2901      	cmp	r1, #1
 8005f6c:	f200 81f2 	bhi.w	8006354 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x434>
 8005f70:	2100      	movs	r1, #0
 8005f72:	9113      	str	r1, [sp, #76]	; 0x4c
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	f000 823a 	beq.w	80063ee <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x4ce>
 8005f7a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 8231 	beq.w	80063e4 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x4c4>
 8005f82:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8005f86:	6819      	ldr	r1, [r3, #0]
 8005f88:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8005f8c:	922a      	str	r2, [sp, #168]	; 0xa8
 8005f8e:	911e      	str	r1, [sp, #120]	; 0x78
 8005f90:	2a00      	cmp	r2, #0
 8005f92:	f000 821d 	beq.w	80063d0 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x4b0>
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	930e      	str	r3, [sp, #56]	; 0x38
 8005f9a:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8005f9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005fa0:	f8da 300c 	ldr.w	r3, [sl, #12]
 8005fa4:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 8005fa8:	68d5      	ldr	r5, [r2, #12]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	6862      	ldr	r2, [r4, #4]
 8005fae:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fb0:	9211      	str	r2, [sp, #68]	; 0x44
 8005fb2:	688b      	ldr	r3, [r1, #8]
 8005fb4:	680a      	ldr	r2, [r1, #0]
 8005fb6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005fb8:	f8d9 6058 	ldr.w	r6, [r9, #88]	; 0x58
 8005fbc:	68c9      	ldr	r1, [r1, #12]
 8005fbe:	f8d9 702c 	ldr.w	r7, [r9, #44]	; 0x2c
 8005fc2:	6889      	ldr	r1, [r1, #8]
 8005fc4:	9116      	str	r1, [sp, #88]	; 0x58
 8005fc6:	68e9      	ldr	r1, [r5, #12]
 8005fc8:	9114      	str	r1, [sp, #80]	; 0x50
 8005fca:	68a9      	ldr	r1, [r5, #8]
 8005fcc:	9121      	str	r1, [sp, #132]	; 0x84
 8005fce:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 8005fd2:	912b      	str	r1, [sp, #172]	; 0xac
 8005fd4:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 8005fd8:	9122      	str	r1, [sp, #136]	; 0x88
 8005fda:	f8d9 104c 	ldr.w	r1, [r9, #76]	; 0x4c
 8005fde:	9123      	str	r1, [sp, #140]	; 0x8c
 8005fe0:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8005fe4:	9110      	str	r1, [sp, #64]	; 0x40
 8005fe6:	e9d6 4100 	ldrd	r4, r1, [r6]
 8005fea:	9124      	str	r1, [sp, #144]	; 0x90
 8005fec:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8005ff0:	ee09 1a10 	vmov	s18, r1
 8005ff4:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8005ff8:	ee08 1a10 	vmov	s16, r1
 8005ffc:	b291      	uxth	r1, r2
 8005ffe:	911b      	str	r1, [sp, #108]	; 0x6c
 8006000:	2800      	cmp	r0, #0
 8006002:	f000 81da 	beq.w	80063ba <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x49a>
 8006006:	6880      	ldr	r0, [r0, #8]
 8006008:	2800      	cmp	r0, #0
 800600a:	f000 81d6 	beq.w	80063ba <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x49a>
 800600e:	6981      	ldr	r1, [r0, #24]
 8006010:	2900      	cmp	r1, #0
 8006012:	bf18      	it	ne
 8006014:	4601      	movne	r1, r0
 8006016:	9120      	str	r1, [sp, #128]	; 0x80
 8006018:	b292      	uxth	r2, r2
 800601a:	fa12 f383 	uxtah	r3, r2, r3
 800601e:	442a      	add	r2, r5
 8006020:	9218      	str	r2, [sp, #96]	; 0x60
 8006022:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006024:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006026:	442b      	add	r3, r5
 8006028:	1a9b      	subs	r3, r3, r2
 800602a:	aa31      	add	r2, sp, #196	; 0xc4
 800602c:	b2bf      	uxth	r7, r7
 800602e:	923e      	str	r2, [sp, #248]	; 0xf8
 8006030:	fbb3 f3f7 	udiv	r3, r3, r7
 8006034:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006038:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800603a:	930c      	str	r3, [sp, #48]	; 0x30
 800603c:	f240 4501 	movw	r5, #1025	; 0x401
 8006040:	2300      	movs	r3, #0
 8006042:	e9cd 253a 	strd	r2, r5, [sp, #232]	; 0xe8
 8006046:	f240 4502 	movw	r5, #1026	; 0x402
 800604a:	698e      	ldr	r6, [r1, #24]
 800604c:	69bf      	ldr	r7, [r7, #24]
 800604e:	9339      	str	r3, [sp, #228]	; 0xe4
 8006050:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
 8006054:	e9cd 3331 	strd	r3, r3, [sp, #196]	; 0xc4
 8006058:	932f      	str	r3, [sp, #188]	; 0xbc
 800605a:	9333      	str	r3, [sp, #204]	; 0xcc
 800605c:	953d      	str	r5, [sp, #244]	; 0xf4
 800605e:	f8da 5018 	ldr.w	r5, [sl, #24]
 8006062:	9330      	str	r3, [sp, #192]	; 0xc0
 8006064:	9334      	str	r3, [sp, #208]	; 0xd0
 8006066:	933f      	str	r3, [sp, #252]	; 0xfc
 8006068:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800606c:	9315      	str	r3, [sp, #84]	; 0x54
 800606e:	f10d 0cb4 	add.w	ip, sp, #180	; 0xb4
 8006072:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 8006076:	931f      	str	r3, [sp, #124]	; 0x7c
 8006078:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 800607c:	a839      	add	r0, sp, #228	; 0xe4
 800607e:	f8cd c0f0 	str.w	ip, [sp, #240]	; 0xf0
 8006082:	971c      	str	r7, [sp, #112]	; 0x70
 8006084:	f007 ff98 	bl	800dfb8 <core_tensor_clone>
 8006088:	4631      	mov	r1, r6
 800608a:	4658      	mov	r0, fp
 800608c:	f007 ffc6 	bl	800e01c <core_array_clone>
 8006090:	f8cd b0fc 	str.w	fp, [sp, #252]	; 0xfc
 8006094:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006098:	990d      	ldr	r1, [sp, #52]	; 0x34
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	9317      	str	r3, [sp, #92]	; 0x5c
 800609e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80060a0:	f8d8 2000 	ldr.w	r2, [r8]
 80060a4:	f8d3 e018 	ldr.w	lr, [r3, #24]
 80060a8:	f8d1 b000 	ldr.w	fp, [r1]
 80060ac:	f8de 3008 	ldr.w	r3, [lr, #8]
 80060b0:	931d      	str	r3, [sp, #116]	; 0x74
 80060b2:	b224      	sxth	r4, r4
 80060b4:	f8da 3000 	ldr.w	r3, [sl]
 80060b8:	2a00      	cmp	r2, #0
 80060ba:	f000 8165 	beq.w	8006388 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x468>
 80060be:	6851      	ldr	r1, [r2, #4]
 80060c0:	2900      	cmp	r1, #0
 80060c2:	f000 8161 	beq.w	8006388 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x468>
 80060c6:	8850      	ldrh	r0, [r2, #2]
 80060c8:	2800      	cmp	r0, #0
 80060ca:	f000 815d 	beq.w	8006388 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x468>
 80060ce:	6809      	ldr	r1, [r1, #0]
 80060d0:	ed91 0a00 	vldr	s0, [r1]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 8154 	beq.w	8006382 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x462>
 80060da:	6859      	ldr	r1, [r3, #4]
 80060dc:	2900      	cmp	r1, #0
 80060de:	f000 8150 	beq.w	8006382 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x462>
 80060e2:	8858      	ldrh	r0, [r3, #2]
 80060e4:	2800      	cmp	r0, #0
 80060e6:	f000 814c 	beq.w	8006382 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x462>
 80060ea:	6809      	ldr	r1, [r1, #0]
 80060ec:	edd1 0a00 	vldr	s1, [r1]
 80060f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80060f2:	f8d8 c018 	ldr.w	ip, [r8, #24]
 80060f6:	6988      	ldr	r0, [r1, #24]
 80060f8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80060fa:	f8dc 7008 	ldr.w	r7, [ip, #8]
 80060fe:	6989      	ldr	r1, [r1, #24]
 8006100:	6880      	ldr	r0, [r0, #8]
 8006102:	6889      	ldr	r1, [r1, #8]
 8006104:	9129      	str	r1, [sp, #164]	; 0xa4
 8006106:	f899 1041 	ldrb.w	r1, [r9, #65]	; 0x41
 800610a:	9719      	str	r7, [sp, #100]	; 0x64
 800610c:	9028      	str	r0, [sp, #160]	; 0xa0
 800610e:	9127      	str	r1, [sp, #156]	; 0x9c
 8006110:	f1bb 0f00 	cmp.w	fp, #0
 8006114:	d006      	beq.n	8006124 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x204>
 8006116:	f8db b004 	ldr.w	fp, [fp, #4]
 800611a:	f1bb 0f00 	cmp.w	fp, #0
 800611e:	d001      	beq.n	8006124 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x204>
 8006120:	f8db b000 	ldr.w	fp, [fp]
 8006124:	2a00      	cmp	r2, #0
 8006126:	f000 8146 	beq.w	80063b6 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x496>
 800612a:	6851      	ldr	r1, [r2, #4]
 800612c:	2900      	cmp	r1, #0
 800612e:	f000 814d 	beq.w	80063cc <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x4ac>
 8006132:	8852      	ldrh	r2, [r2, #2]
 8006134:	2a00      	cmp	r2, #0
 8006136:	f000 813e 	beq.w	80063b6 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x496>
 800613a:	684a      	ldr	r2, [r1, #4]
 800613c:	f992 2000 	ldrsb.w	r2, [r2]
 8006140:	9225      	str	r2, [sp, #148]	; 0x94
 8006142:	2b00      	cmp	r3, #0
 8006144:	f000 8135 	beq.w	80063b2 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x492>
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	2a00      	cmp	r2, #0
 800614c:	f000 8145 	beq.w	80063da <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x4ba>
 8006150:	885b      	ldrh	r3, [r3, #2]
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 812d 	beq.w	80063b2 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x492>
 8006158:	6853      	ldr	r3, [r2, #4]
 800615a:	f993 3000 	ldrsb.w	r3, [r3]
 800615e:	9326      	str	r3, [sp, #152]	; 0x98
 8006160:	e9de 0100 	ldrd	r0, r1, [lr]
 8006164:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
 8006168:	edcd 0a13 	vstr	s1, [sp, #76]	; 0x4c
 800616c:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 8006170:	f007 feca 	bl	800df08 <ai_array_get_byte_size>
 8006174:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006176:	eddd 0a13 	vldr	s1, [sp, #76]	; 0x4c
 800617a:	ed9d 0a0d 	vldr	s0, [sp, #52]	; 0x34
 800617e:	eba0 0048 	sub.w	r0, r0, r8, lsl #1
 8006182:	4613      	mov	r3, r2
 8006184:	4403      	add	r3, r0
 8006186:	ee18 1a10 	vmov	r1, s16
 800618a:	4658      	mov	r0, fp
 800618c:	f003 fc76 	bl	8009a7c <align_factor_ch>
 8006190:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 80e9 	beq.w	800636a <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x44a>
 8006198:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800619a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800619e:	940f      	str	r4, [sp, #60]	; 0x3c
 80061a0:	fb02 f108 	mul.w	r1, r2, r8
 80061a4:	911a      	str	r1, [sp, #104]	; 0x68
 80061a6:	992b      	ldr	r1, [sp, #172]	; 0xac
 80061a8:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80061ac:	fb01 f303 	mul.w	r3, r1, r3
 80061b0:	932b      	str	r3, [sp, #172]	; 0xac
 80061b2:	b28b      	uxth	r3, r1
 80061b4:	ee08 3a90 	vmov	s17, r3
 80061b8:	b293      	uxth	r3, r2
 80061ba:	9317      	str	r3, [sp, #92]	; 0x5c
 80061bc:	f04f 0b00 	mov.w	fp, #0
 80061c0:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
 80061c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80061c6:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80061ca:	e07a      	b.n	80062c2 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x3a2>
 80061cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	da18      	bge.n	8006204 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x2e4>
 80061d2:	e9d6 1202 	ldrd	r1, r2, [r6, #8]
 80061d6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80061d8:	fb03 1314 	mls	r3, r3, r4, r1
 80061dc:	429a      	cmp	r2, r3
 80061de:	bf84      	itt	hi
 80061e0:	6870      	ldrhi	r0, [r6, #4]
 80061e2:	181b      	addhi	r3, r3, r0
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d203      	bcs.n	80061f0 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x2d0>
 80061e8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80061ea:	42a0      	cmp	r0, r4
 80061ec:	f040 80cf 	bne.w	800638e <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x46e>
 80061f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80061f4:	b2a4      	uxth	r4, r4
 80061f6:	4413      	add	r3, r2
 80061f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80061fa:	1b1b      	subs	r3, r3, r4
 80061fc:	b21b      	sxth	r3, r3
 80061fe:	4414      	add	r4, r2
 8006200:	9311      	str	r3, [sp, #68]	; 0x44
 8006202:	b224      	sxth	r4, r4
 8006204:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006206:	42a3      	cmp	r3, r4
 8006208:	dc33      	bgt.n	8006272 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x352>
 800620a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800620c:	9308      	str	r3, [sp, #32]
 800620e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8006212:	9305      	str	r3, [sp, #20]
 8006214:	1ae4      	subs	r4, r4, r3
 8006216:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800621a:	9303      	str	r3, [sp, #12]
 800621c:	2201      	movs	r2, #1
 800621e:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 8006222:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006224:	9207      	str	r2, [sp, #28]
 8006226:	9306      	str	r3, [sp, #24]
 8006228:	4493      	add	fp, r2
 800622a:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 800622e:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8006232:	9304      	str	r3, [sp, #16]
 8006234:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8006238:	9201      	str	r2, [sp, #4]
 800623a:	9302      	str	r3, [sp, #8]
 800623c:	1a52      	subs	r2, r2, r1
 800623e:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8006242:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	b292      	uxth	r2, r2
 8006248:	ee18 3a10 	vmov	r3, s16
 800624c:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800624e:	a839      	add	r0, sp, #228	; 0xe4
 8006250:	47b8      	blx	r7
 8006252:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006254:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	68da      	ldr	r2, [r3, #12]
 800625a:	688b      	ldr	r3, [r1, #8]
 800625c:	4413      	add	r3, r2
 800625e:	608b      	str	r3, [r1, #8]
 8006260:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006262:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800626c:	b21b      	sxth	r3, r3
 800626e:	b224      	sxth	r4, r4
 8006270:	930f      	str	r3, [sp, #60]	; 0x3c
 8006272:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006276:	68aa      	ldr	r2, [r5, #8]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	4413      	add	r3, r2
 800627c:	60ab      	str	r3, [r5, #8]
 800627e:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8006282:	b132      	cbz	r2, 8006292 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x372>
 8006284:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	68b3      	ldr	r3, [r6, #8]
 800628c:	4413      	add	r3, r2
 800628e:	60b3      	str	r3, [r6, #8]
 8006290:	68ab      	ldr	r3, [r5, #8]
 8006292:	68ea      	ldr	r2, [r5, #12]
 8006294:	930e      	str	r3, [sp, #56]	; 0x38
 8006296:	4650      	mov	r0, sl
 8006298:	920d      	str	r2, [sp, #52]	; 0x34
 800629a:	f007 fe75 	bl	800df88 <get_tensor_byte_size>
 800629e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80062a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062a2:	4410      	add	r0, r2
 80062a4:	4283      	cmp	r3, r0
 80062a6:	d306      	bcc.n	80062b6 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x396>
 80062a8:	68eb      	ldr	r3, [r5, #12]
 80062aa:	60ab      	str	r3, [r5, #8]
 80062ac:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 80062b0:	b10b      	cbz	r3, 80062b6 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x396>
 80062b2:	68f3      	ldr	r3, [r6, #12]
 80062b4:	60b3      	str	r3, [r6, #8]
 80062b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062b8:	3b01      	subs	r3, #1
 80062ba:	930c      	str	r3, [sp, #48]	; 0x30
 80062bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80062be:	459b      	cmp	fp, r3
 80062c0:	d253      	bcs.n	800636a <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x44a>
 80062c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062c4:	3301      	adds	r3, #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	dd80      	ble.n	80061cc <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x2ac>
 80062ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80062cc:	68aa      	ldr	r2, [r5, #8]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	920d      	str	r2, [sp, #52]	; 0x34
 80062d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80062d6:	f007 fe17 	bl	800df08 <ai_array_get_byte_size>
 80062da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80062dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80062de:	2301      	movs	r3, #1
 80062e0:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80062e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80062e6:	9307      	str	r3, [sp, #28]
 80062e8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80062ea:	9305      	str	r3, [sp, #20]
 80062ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80062ee:	9304      	str	r3, [sp, #16]
 80062f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80062f2:	9f16      	ldr	r7, [sp, #88]	; 0x58
 80062f4:	9303      	str	r3, [sp, #12]
 80062f6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80062f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80062fa:	9302      	str	r3, [sp, #8]
 80062fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80062fe:	900a      	str	r0, [sp, #40]	; 0x28
 8006300:	9206      	str	r2, [sp, #24]
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	ee18 1a90 	vmov	r1, s17
 8006308:	ee19 3a10 	vmov	r3, s18
 800630c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800630e:	ed8d 8a01 	vstr	s16, [sp, #4]
 8006312:	b2ba      	uxth	r2, r7
 8006314:	f000 ffea 	bl	80072ec <forward_lite_conv2d_deep_3x3_sssa8_ch>
 8006318:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800631a:	2b01      	cmp	r3, #1
 800631c:	d021      	beq.n	8006362 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x442>
 800631e:	3b01      	subs	r3, #1
 8006320:	429f      	cmp	r7, r3
 8006322:	463a      	mov	r2, r7
 8006324:	bf28      	it	cs
 8006326:	461a      	movcs	r2, r3
 8006328:	9318      	str	r3, [sp, #96]	; 0x60
 800632a:	9216      	str	r2, [sp, #88]	; 0x58
 800632c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800632e:	b9a3      	cbnz	r3, 800635a <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x43a>
 8006330:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006332:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8006334:	4413      	add	r3, r2
 8006336:	9319      	str	r3, [sp, #100]	; 0x64
 8006338:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800633a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800633c:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 800633e:	4651      	mov	r1, sl
 8006340:	4640      	mov	r0, r8
 8006342:	3401      	adds	r4, #1
 8006344:	47b8      	blx	r7
 8006346:	b224      	sxth	r4, r4
 8006348:	e75c      	b.n	8006204 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x2e4>
 800634a:	2300      	movs	r3, #0
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	deff      	udf	#255	; 0xff
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	deff      	udf	#255	; 0xff
 8006354:	6841      	ldr	r1, [r0, #4]
 8006356:	9113      	str	r1, [sp, #76]	; 0x4c
 8006358:	e60c      	b.n	8005f74 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x54>
 800635a:	3b01      	subs	r3, #1
 800635c:	b29b      	uxth	r3, r3
 800635e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006360:	e7ea      	b.n	8006338 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x418>
 8006362:	2300      	movs	r3, #0
 8006364:	9316      	str	r3, [sp, #88]	; 0x58
 8006366:	9318      	str	r3, [sp, #96]	; 0x60
 8006368:	e7e0      	b.n	800632c <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x40c>
 800636a:	68eb      	ldr	r3, [r5, #12]
 800636c:	60ab      	str	r3, [r5, #8]
 800636e:	68f3      	ldr	r3, [r6, #12]
 8006370:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006372:	60b3      	str	r3, [r6, #8]
 8006374:	68d3      	ldr	r3, [r2, #12]
 8006376:	6093      	str	r3, [r2, #8]
 8006378:	b041      	add	sp, #260	; 0x104
 800637a:	ecbd 8b04 	vpop	{d8-d9}
 800637e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006382:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80063f4 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x4d4>
 8006386:	e6b3      	b.n	80060f0 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x1d0>
 8006388:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80063f4 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x4d4>
 800638c:	e6a2      	b.n	80060d4 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x1b4>
 800638e:	6870      	ldr	r0, [r6, #4]
 8006390:	4402      	add	r2, r0
 8006392:	4293      	cmp	r3, r2
 8006394:	f4bf af2c 	bcs.w	80061f0 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x2d0>
 8006398:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800639a:	3901      	subs	r1, #1
 800639c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063a0:	f801 2f01 	strb.w	r2, [r1, #1]!
 80063a4:	68f2      	ldr	r2, [r6, #12]
 80063a6:	6870      	ldr	r0, [r6, #4]
 80063a8:	4402      	add	r2, r0
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d3f6      	bcc.n	800639c <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x47c>
 80063ae:	970c      	str	r7, [sp, #48]	; 0x30
 80063b0:	e71e      	b.n	80061f0 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x2d0>
 80063b2:	9326      	str	r3, [sp, #152]	; 0x98
 80063b4:	e6d4      	b.n	8006160 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x240>
 80063b6:	9225      	str	r2, [sp, #148]	; 0x94
 80063b8:	e6c3      	b.n	8006142 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x222>
 80063ba:	f8d9 1020 	ldr.w	r1, [r9, #32]
 80063be:	9120      	str	r1, [sp, #128]	; 0x80
 80063c0:	2900      	cmp	r1, #0
 80063c2:	f43f ae29 	beq.w	8006018 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0xf8>
 80063c6:	6889      	ldr	r1, [r1, #8]
 80063c8:	9120      	str	r1, [sp, #128]	; 0x80
 80063ca:	e625      	b.n	8006018 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0xf8>
 80063cc:	9125      	str	r1, [sp, #148]	; 0x94
 80063ce:	e6b8      	b.n	8006142 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x222>
 80063d0:	4b09      	ldr	r3, [pc, #36]	; (80063f8 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x4d8>)
 80063d2:	932a      	str	r3, [sp, #168]	; 0xa8
 80063d4:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80063d8:	e5df      	b.n	8005f9a <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x7a>
 80063da:	9226      	str	r2, [sp, #152]	; 0x98
 80063dc:	e6c0      	b.n	8006160 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x240>
 80063de:	900d      	str	r0, [sp, #52]	; 0x34
 80063e0:	9013      	str	r0, [sp, #76]	; 0x4c
 80063e2:	e5c7      	b.n	8005f74 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x54>
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	deff      	udf	#255	; 0xff
 80063e8:	2300      	movs	r3, #0
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	deff      	udf	#255	; 0xff
 80063ee:	2300      	movs	r3, #0
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	deff      	udf	#255	; 0xff
 80063f4:	00000000 	.word	0x00000000
 80063f8:	080059d9 	.word	0x080059d9

080063fc <forward_conv2d_sssa8_ch_nl_pool>:
 80063fc:	6982      	ldr	r2, [r0, #24]
 80063fe:	8813      	ldrh	r3, [r2, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 8240 	beq.w	8006886 <forward_conv2d_sssa8_ch_nl_pool+0x48a>
 8006406:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800640a:	ed2d 8b04 	vpush	{d8-d9}
 800640e:	6852      	ldr	r2, [r2, #4]
 8006410:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8006414:	b0cf      	sub	sp, #316	; 0x13c
 8006416:	4681      	mov	r9, r0
 8006418:	f1ba 0f00 	cmp.w	sl, #0
 800641c:	d001      	beq.n	8006422 <forward_conv2d_sssa8_ch_nl_pool+0x26>
 800641e:	f8da a000 	ldr.w	sl, [sl]
 8006422:	2b01      	cmp	r3, #1
 8006424:	f000 8286 	beq.w	8006934 <forward_conv2d_sssa8_ch_nl_pool+0x538>
 8006428:	6911      	ldr	r1, [r2, #16]
 800642a:	911b      	str	r1, [sp, #108]	; 0x6c
 800642c:	b109      	cbz	r1, 8006432 <forward_conv2d_sssa8_ch_nl_pool+0x36>
 800642e:	6809      	ldr	r1, [r1, #0]
 8006430:	911b      	str	r1, [sp, #108]	; 0x6c
 8006432:	2b02      	cmp	r3, #2
 8006434:	f000 8224 	beq.w	8006880 <forward_conv2d_sssa8_ch_nl_pool+0x484>
 8006438:	69d1      	ldr	r1, [r2, #28]
 800643a:	2900      	cmp	r1, #0
 800643c:	f000 8275 	beq.w	800692a <forward_conv2d_sssa8_ch_nl_pool+0x52e>
 8006440:	8b10      	ldrh	r0, [r2, #24]
 8006442:	680c      	ldr	r4, [r1, #0]
 8006444:	9415      	str	r4, [sp, #84]	; 0x54
 8006446:	2801      	cmp	r0, #1
 8006448:	f200 821f 	bhi.w	800688a <forward_conv2d_sssa8_ch_nl_pool+0x48e>
 800644c:	2000      	movs	r0, #0
 800644e:	9018      	str	r0, [sp, #96]	; 0x60
 8006450:	2b03      	cmp	r3, #3
 8006452:	f000 8272 	beq.w	800693a <forward_conv2d_sssa8_ch_nl_pool+0x53e>
 8006456:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 8269 	beq.w	8006930 <forward_conv2d_sssa8_ch_nl_pool+0x534>
 800645e:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8006462:	6818      	ldr	r0, [r3, #0]
 8006464:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8006468:	922e      	str	r2, [sp, #184]	; 0xb8
 800646a:	9026      	str	r0, [sp, #152]	; 0x98
 800646c:	2a00      	cmp	r2, #0
 800646e:	f000 8256 	beq.w	800691e <forward_conv2d_sssa8_ch_nl_pool+0x522>
 8006472:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8006476:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006478:	f8da 500c 	ldr.w	r5, [sl, #12]
 800647c:	68c4      	ldr	r4, [r0, #12]
 800647e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006480:	68e6      	ldr	r6, [r4, #12]
 8006482:	68a4      	ldr	r4, [r4, #8]
 8006484:	68c7      	ldr	r7, [r0, #12]
 8006486:	9434      	str	r4, [sp, #208]	; 0xd0
 8006488:	6868      	ldr	r0, [r5, #4]
 800648a:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 800648e:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8006492:	f8d9 c058 	ldr.w	ip, [r9, #88]	; 0x58
 8006496:	6852      	ldr	r2, [r2, #4]
 8006498:	9217      	str	r2, [sp, #92]	; 0x5c
 800649a:	e9d5 5402 	ldrd	r5, r4, [r5, #8]
 800649e:	9538      	str	r5, [sp, #224]	; 0xe0
 80064a0:	f8b9 5028 	ldrh.w	r5, [r9, #40]	; 0x28
 80064a4:	952f      	str	r5, [sp, #188]	; 0xbc
 80064a6:	889d      	ldrh	r5, [r3, #4]
 80064a8:	9531      	str	r5, [sp, #196]	; 0xc4
 80064aa:	68bd      	ldr	r5, [r7, #8]
 80064ac:	9524      	str	r5, [sp, #144]	; 0x90
 80064ae:	687d      	ldr	r5, [r7, #4]
 80064b0:	9532      	str	r5, [sp, #200]	; 0xc8
 80064b2:	f8d9 5044 	ldr.w	r5, [r9, #68]	; 0x44
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	901a      	str	r0, [sp, #104]	; 0x68
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 80064c0:	9620      	str	r6, [sp, #128]	; 0x80
 80064c2:	9535      	str	r5, [sp, #212]	; 0xd4
 80064c4:	f8d9 504c 	ldr.w	r5, [r9, #76]	; 0x4c
 80064c8:	9536      	str	r5, [sp, #216]	; 0xd8
 80064ca:	f8d9 5050 	ldr.w	r5, [r9, #80]	; 0x50
 80064ce:	9519      	str	r5, [sp, #100]	; 0x64
 80064d0:	f8dc 5000 	ldr.w	r5, [ip]
 80064d4:	9527      	str	r5, [sp, #156]	; 0x9c
 80064d6:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80064da:	9537      	str	r5, [sp, #220]	; 0xdc
 80064dc:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 80064e0:	ee09 5a90 	vmov	s19, r5
 80064e4:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 80064e8:	951e      	str	r5, [sp, #120]	; 0x78
 80064ea:	b285      	uxth	r5, r0
 80064ec:	9530      	str	r5, [sp, #192]	; 0xc0
 80064ee:	b295      	uxth	r5, r2
 80064f0:	9516      	str	r5, [sp, #88]	; 0x58
 80064f2:	2900      	cmp	r1, #0
 80064f4:	f000 8206 	beq.w	8006904 <forward_conv2d_sssa8_ch_nl_pool+0x508>
 80064f8:	6889      	ldr	r1, [r1, #8]
 80064fa:	2900      	cmp	r1, #0
 80064fc:	f000 8202 	beq.w	8006904 <forward_conv2d_sssa8_ch_nl_pool+0x508>
 8006500:	698d      	ldr	r5, [r1, #24]
 8006502:	2d00      	cmp	r5, #0
 8006504:	bf08      	it	eq
 8006506:	4629      	moveq	r1, r5
 8006508:	ee08 1a90 	vmov	s17, r1
 800650c:	b292      	uxth	r2, r2
 800650e:	9924      	ldr	r1, [sp, #144]	; 0x90
 8006510:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006512:	f8db 6018 	ldr.w	r6, [fp, #24]
 8006516:	69bf      	ldr	r7, [r7, #24]
 8006518:	9728      	str	r7, [sp, #160]	; 0xa0
 800651a:	fa12 f383 	uxtah	r3, r2, r3
 800651e:	4422      	add	r2, r4
 8006520:	4423      	add	r3, r4
 8006522:	921d      	str	r2, [sp, #116]	; 0x74
 8006524:	b282      	uxth	r2, r0
 8006526:	9223      	str	r2, [sp, #140]	; 0x8c
 8006528:	1a5b      	subs	r3, r3, r1
 800652a:	fbb3 f3f2 	udiv	r3, r3, r2
 800652e:	aa3f      	add	r2, sp, #252	; 0xfc
 8006530:	924c      	str	r2, [sp, #304]	; 0x130
 8006532:	f240 4501 	movw	r5, #1025	; 0x401
 8006536:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800653a:	e9cd 2548 	strd	r2, r5, [sp, #288]	; 0x120
 800653e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006540:	f240 4502 	movw	r5, #1026	; 0x402
 8006544:	2300      	movs	r3, #0
 8006546:	e9cd 333b 	strd	r3, r3, [sp, #236]	; 0xec
 800654a:	e9cd 333f 	strd	r3, r3, [sp, #252]	; 0xfc
 800654e:	9347      	str	r3, [sp, #284]	; 0x11c
 8006550:	933d      	str	r3, [sp, #244]	; 0xf4
 8006552:	9341      	str	r3, [sp, #260]	; 0x104
 8006554:	954b      	str	r5, [sp, #300]	; 0x12c
 8006556:	f8d8 5018 	ldr.w	r5, [r8, #24]
 800655a:	933e      	str	r3, [sp, #248]	; 0xf8
 800655c:	9342      	str	r3, [sp, #264]	; 0x108
 800655e:	934d      	str	r3, [sp, #308]	; 0x134
 8006560:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8006564:	9322      	str	r3, [sp, #136]	; 0x88
 8006566:	f10d 0cec 	add.w	ip, sp, #236	; 0xec
 800656a:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 800656e:	9333      	str	r3, [sp, #204]	; 0xcc
 8006570:	ac43      	add	r4, sp, #268	; 0x10c
 8006572:	4659      	mov	r1, fp
 8006574:	a847      	add	r0, sp, #284	; 0x11c
 8006576:	f8cd c128 	str.w	ip, [sp, #296]	; 0x128
 800657a:	f007 fd1d 	bl	800dfb8 <core_tensor_clone>
 800657e:	4631      	mov	r1, r6
 8006580:	4620      	mov	r0, r4
 8006582:	f007 fd4b 	bl	800e01c <core_array_clone>
 8006586:	944d      	str	r4, [sp, #308]	; 0x134
 8006588:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800658c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	931f      	str	r3, [sp, #124]	; 0x7c
 8006592:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006594:	f8da 2000 	ldr.w	r2, [sl]
 8006598:	f8d3 e018 	ldr.w	lr, [r3, #24]
 800659c:	6809      	ldr	r1, [r1, #0]
 800659e:	f8de 3008 	ldr.w	r3, [lr, #8]
 80065a2:	9325      	str	r3, [sp, #148]	; 0x94
 80065a4:	f9bd 409c 	ldrsh.w	r4, [sp, #156]	; 0x9c
 80065a8:	f8d8 3000 	ldr.w	r3, [r8]
 80065ac:	9114      	str	r1, [sp, #80]	; 0x50
 80065ae:	2a00      	cmp	r2, #0
 80065b0:	f000 8190 	beq.w	80068d4 <forward_conv2d_sssa8_ch_nl_pool+0x4d8>
 80065b4:	6851      	ldr	r1, [r2, #4]
 80065b6:	2900      	cmp	r1, #0
 80065b8:	f000 818c 	beq.w	80068d4 <forward_conv2d_sssa8_ch_nl_pool+0x4d8>
 80065bc:	8850      	ldrh	r0, [r2, #2]
 80065be:	2800      	cmp	r0, #0
 80065c0:	f000 8188 	beq.w	80068d4 <forward_conv2d_sssa8_ch_nl_pool+0x4d8>
 80065c4:	6809      	ldr	r1, [r1, #0]
 80065c6:	ed91 0a00 	vldr	s0, [r1]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 817f 	beq.w	80068ce <forward_conv2d_sssa8_ch_nl_pool+0x4d2>
 80065d0:	6859      	ldr	r1, [r3, #4]
 80065d2:	2900      	cmp	r1, #0
 80065d4:	f000 817b 	beq.w	80068ce <forward_conv2d_sssa8_ch_nl_pool+0x4d2>
 80065d8:	8858      	ldrh	r0, [r3, #2]
 80065da:	2800      	cmp	r0, #0
 80065dc:	f000 8177 	beq.w	80068ce <forward_conv2d_sssa8_ch_nl_pool+0x4d2>
 80065e0:	6809      	ldr	r1, [r1, #0]
 80065e2:	edd1 0a00 	vldr	s1, [r1]
 80065e6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80065e8:	f8da c018 	ldr.w	ip, [sl, #24]
 80065ec:	6988      	ldr	r0, [r1, #24]
 80065ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80065f0:	f8dc 7008 	ldr.w	r7, [ip, #8]
 80065f4:	6989      	ldr	r1, [r1, #24]
 80065f6:	6880      	ldr	r0, [r0, #8]
 80065f8:	6889      	ldr	r1, [r1, #8]
 80065fa:	912d      	str	r1, [sp, #180]	; 0xb4
 80065fc:	f899 1041 	ldrb.w	r1, [r9, #65]	; 0x41
 8006600:	912b      	str	r1, [sp, #172]	; 0xac
 8006602:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006604:	9718      	str	r7, [sp, #96]	; 0x60
 8006606:	902c      	str	r0, [sp, #176]	; 0xb0
 8006608:	b121      	cbz	r1, 8006614 <forward_conv2d_sssa8_ch_nl_pool+0x218>
 800660a:	6849      	ldr	r1, [r1, #4]
 800660c:	9114      	str	r1, [sp, #80]	; 0x50
 800660e:	b109      	cbz	r1, 8006614 <forward_conv2d_sssa8_ch_nl_pool+0x218>
 8006610:	6809      	ldr	r1, [r1, #0]
 8006612:	9114      	str	r1, [sp, #80]	; 0x50
 8006614:	2a00      	cmp	r2, #0
 8006616:	f000 8173 	beq.w	8006900 <forward_conv2d_sssa8_ch_nl_pool+0x504>
 800661a:	6851      	ldr	r1, [r2, #4]
 800661c:	2900      	cmp	r1, #0
 800661e:	f000 817c 	beq.w	800691a <forward_conv2d_sssa8_ch_nl_pool+0x51e>
 8006622:	8852      	ldrh	r2, [r2, #2]
 8006624:	2a00      	cmp	r2, #0
 8006626:	f000 816b 	beq.w	8006900 <forward_conv2d_sssa8_ch_nl_pool+0x504>
 800662a:	684a      	ldr	r2, [r1, #4]
 800662c:	f992 2000 	ldrsb.w	r2, [r2]
 8006630:	9229      	str	r2, [sp, #164]	; 0xa4
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 8162 	beq.w	80068fc <forward_conv2d_sssa8_ch_nl_pool+0x500>
 8006638:	685a      	ldr	r2, [r3, #4]
 800663a:	2a00      	cmp	r2, #0
 800663c:	f000 8173 	beq.w	8006926 <forward_conv2d_sssa8_ch_nl_pool+0x52a>
 8006640:	885b      	ldrh	r3, [r3, #2]
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 815a 	beq.w	80068fc <forward_conv2d_sssa8_ch_nl_pool+0x500>
 8006648:	6853      	ldr	r3, [r2, #4]
 800664a:	f993 3000 	ldrsb.w	r3, [r3]
 800664e:	932a      	str	r3, [sp, #168]	; 0xa8
 8006650:	e9de 0100 	ldrd	r0, r1, [lr]
 8006654:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8006658:	edcd 0a1c 	vstr	s1, [sp, #112]	; 0x70
 800665c:	ed8d 0a15 	vstr	s0, [sp, #84]	; 0x54
 8006660:	f007 fc52 	bl	800df08 <ai_array_get_byte_size>
 8006664:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8006666:	eddd 0a1c 	vldr	s1, [sp, #112]	; 0x70
 800666a:	ed9d 0a15 	vldr	s0, [sp, #84]	; 0x54
 800666e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006670:	eba0 004a 	sub.w	r0, r0, sl, lsl #1
 8006674:	4613      	mov	r3, r2
 8006676:	4403      	add	r3, r0
 8006678:	9814      	ldr	r0, [sp, #80]	; 0x50
 800667a:	f003 f9ff 	bl	8009a7c <align_factor_ch>
 800667e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 8118 	beq.w	80068b6 <forward_conv2d_sssa8_ch_nl_pool+0x4ba>
 8006686:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006688:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 800668c:	9417      	str	r4, [sp, #92]	; 0x5c
 800668e:	fb02 f10a 	mul.w	r1, r2, sl
 8006692:	b292      	uxth	r2, r2
 8006694:	ee08 1a10 	vmov	s16, r1
 8006698:	9221      	str	r2, [sp, #132]	; 0x84
 800669a:	9938      	ldr	r1, [sp, #224]	; 0xe0
 800669c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800669e:	fb01 f202 	mul.w	r2, r1, r2
 80066a2:	fb03 f202 	mul.w	r2, r3, r2
 80066a6:	fb01 f303 	mul.w	r3, r1, r3
 80066aa:	9339      	str	r3, [sp, #228]	; 0xe4
 80066ac:	b28b      	uxth	r3, r1
 80066ae:	ee09 3a10 	vmov	s18, r3
 80066b2:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
 80066b6:	931c      	str	r3, [sp, #112]	; 0x70
 80066b8:	f04f 0a00 	mov.w	sl, #0
 80066bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80066be:	9238      	str	r2, [sp, #224]	; 0xe0
 80066c0:	931f      	str	r3, [sp, #124]	; 0x7c
 80066c2:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
 80066c6:	e0b9      	b.n	800683c <forward_conv2d_sssa8_ch_nl_pool+0x440>
 80066c8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80066ca:	68aa      	ldr	r2, [r5, #8]
 80066cc:	9214      	str	r2, [sp, #80]	; 0x50
 80066ce:	429c      	cmp	r4, r3
 80066d0:	bf06      	itte	eq
 80066d2:	faba f38a 	clzeq	r3, sl
 80066d6:	095b      	lsreq	r3, r3, #5
 80066d8:	2300      	movne	r3, #0
 80066da:	9315      	str	r3, [sp, #84]	; 0x54
 80066dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80066de:	6998      	ldr	r0, [r3, #24]
 80066e0:	e9d0 0100 	ldrd	r0, r1, [r0]
 80066e4:	f007 fc10 	bl	800df08 <ai_array_get_byte_size>
 80066e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80066ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066ee:	930d      	str	r3, [sp, #52]	; 0x34
 80066f0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80066f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80066f4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80066f6:	930a      	str	r3, [sp, #40]	; 0x28
 80066f8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80066fa:	9309      	str	r3, [sp, #36]	; 0x24
 80066fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80066fe:	9308      	str	r3, [sp, #32]
 8006700:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006702:	9307      	str	r3, [sp, #28]
 8006704:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8006706:	9306      	str	r3, [sp, #24]
 8006708:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800670a:	9305      	str	r3, [sp, #20]
 800670c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800670e:	9304      	str	r3, [sp, #16]
 8006710:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006712:	9301      	str	r3, [sp, #4]
 8006714:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800671a:	9311      	str	r3, [sp, #68]	; 0x44
 800671c:	2301      	movs	r3, #1
 800671e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006720:	930e      	str	r3, [sp, #56]	; 0x38
 8006722:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8006726:	920c      	str	r2, [sp, #48]	; 0x30
 8006728:	9010      	str	r0, [sp, #64]	; 0x40
 800672a:	9303      	str	r3, [sp, #12]
 800672c:	f8bd 30c8 	ldrh.w	r3, [sp, #200]	; 0xc8
 8006730:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8006732:	9302      	str	r3, [sp, #8]
 8006734:	b2ba      	uxth	r2, r7
 8006736:	ee19 3a90 	vmov	r3, s19
 800673a:	ee19 1a10 	vmov	r1, s18
 800673e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8006740:	f000 fed4 	bl	80074ec <forward_lite_conv2d_sssa8_ch>
 8006744:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006746:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006748:	4293      	cmp	r3, r2
 800674a:	f000 80b0 	beq.w	80068ae <forward_conv2d_sssa8_ch_nl_pool+0x4b2>
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	429f      	cmp	r7, r3
 8006752:	463a      	mov	r2, r7
 8006754:	bf28      	it	cs
 8006756:	461a      	movcs	r2, r3
 8006758:	931d      	str	r3, [sp, #116]	; 0x74
 800675a:	921f      	str	r2, [sp, #124]	; 0x7c
 800675c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800675e:	2b00      	cmp	r3, #0
 8006760:	f040 8096 	bne.w	8006890 <forward_conv2d_sssa8_ch_nl_pool+0x494>
 8006764:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006766:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8006768:	4413      	add	r3, r2
 800676a:	9318      	str	r3, [sp, #96]	; 0x60
 800676c:	ee18 3a90 	vmov	r3, s17
 8006770:	ee18 2a10 	vmov	r2, s16
 8006774:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8006776:	4641      	mov	r1, r8
 8006778:	4658      	mov	r0, fp
 800677a:	47b8      	blx	r7
 800677c:	3401      	adds	r4, #1
 800677e:	b224      	sxth	r4, r4
 8006780:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006782:	429c      	cmp	r4, r3
 8006784:	db32      	blt.n	80067ec <forward_conv2d_sssa8_ch_nl_pool+0x3f0>
 8006786:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006788:	9308      	str	r3, [sp, #32]
 800678a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800678e:	9305      	str	r3, [sp, #20]
 8006790:	1ae4      	subs	r4, r4, r3
 8006792:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8006796:	9303      	str	r3, [sp, #12]
 8006798:	2201      	movs	r2, #1
 800679a:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	; 0xd0
 800679e:	991a      	ldr	r1, [sp, #104]	; 0x68
 80067a0:	9207      	str	r2, [sp, #28]
 80067a2:	9306      	str	r3, [sp, #24]
 80067a4:	4492      	add	sl, r2
 80067a6:	f8bd 30d8 	ldrh.w	r3, [sp, #216]	; 0xd8
 80067aa:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
 80067ae:	9304      	str	r3, [sp, #16]
 80067b0:	f8bd 30dc 	ldrh.w	r3, [sp, #220]	; 0xdc
 80067b4:	9201      	str	r2, [sp, #4]
 80067b6:	9302      	str	r3, [sp, #8]
 80067b8:	1a52      	subs	r2, r2, r1
 80067ba:	f8bd 30d4 	ldrh.w	r3, [sp, #212]	; 0xd4
 80067be:	9921      	ldr	r1, [sp, #132]	; 0x84
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	b292      	uxth	r2, r2
 80067c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80067c6:	9f33      	ldr	r7, [sp, #204]	; 0xcc
 80067c8:	a847      	add	r0, sp, #284	; 0x11c
 80067ca:	47b8      	blx	r7
 80067cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067ce:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	688b      	ldr	r3, [r1, #8]
 80067d6:	4413      	add	r3, r2
 80067d8:	608b      	str	r3, [r1, #8]
 80067da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80067dc:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80067e6:	b21b      	sxth	r3, r3
 80067e8:	b224      	sxth	r4, r4
 80067ea:	9317      	str	r3, [sp, #92]	; 0x5c
 80067ec:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80067f0:	68aa      	ldr	r2, [r5, #8]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	4413      	add	r3, r2
 80067f6:	60ab      	str	r3, [r5, #8]
 80067f8:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 80067fc:	b132      	cbz	r2, 800680c <forward_conv2d_sssa8_ch_nl_pool+0x410>
 80067fe:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006802:	68da      	ldr	r2, [r3, #12]
 8006804:	68b3      	ldr	r3, [r6, #8]
 8006806:	4413      	add	r3, r2
 8006808:	60b3      	str	r3, [r6, #8]
 800680a:	68ab      	ldr	r3, [r5, #8]
 800680c:	68ea      	ldr	r2, [r5, #12]
 800680e:	9315      	str	r3, [sp, #84]	; 0x54
 8006810:	4640      	mov	r0, r8
 8006812:	9214      	str	r2, [sp, #80]	; 0x50
 8006814:	f007 fbb8 	bl	800df88 <get_tensor_byte_size>
 8006818:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800681a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800681c:	4410      	add	r0, r2
 800681e:	4283      	cmp	r3, r0
 8006820:	d306      	bcc.n	8006830 <forward_conv2d_sssa8_ch_nl_pool+0x434>
 8006822:	68eb      	ldr	r3, [r5, #12]
 8006824:	60ab      	str	r3, [r5, #8]
 8006826:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 800682a:	b10b      	cbz	r3, 8006830 <forward_conv2d_sssa8_ch_nl_pool+0x434>
 800682c:	68f3      	ldr	r3, [r6, #12]
 800682e:	60b3      	str	r3, [r6, #8]
 8006830:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006832:	3b01      	subs	r3, #1
 8006834:	9313      	str	r3, [sp, #76]	; 0x4c
 8006836:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006838:	459a      	cmp	sl, r3
 800683a:	d23c      	bcs.n	80068b6 <forward_conv2d_sssa8_ch_nl_pool+0x4ba>
 800683c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800683e:	3301      	adds	r3, #1
 8006840:	2b00      	cmp	r3, #0
 8006842:	f73f af41 	bgt.w	80066c8 <forward_conv2d_sssa8_ch_nl_pool+0x2cc>
 8006846:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006848:	2b00      	cmp	r3, #0
 800684a:	da99      	bge.n	8006780 <forward_conv2d_sssa8_ch_nl_pool+0x384>
 800684c:	e9d6 1202 	ldrd	r1, r2, [r6, #8]
 8006850:	ee18 3a10 	vmov	r3, s16
 8006854:	fb03 1314 	mls	r3, r3, r4, r1
 8006858:	429a      	cmp	r2, r3
 800685a:	bf84      	itt	hi
 800685c:	6870      	ldrhi	r0, [r6, #4]
 800685e:	181b      	addhi	r3, r3, r0
 8006860:	429a      	cmp	r2, r3
 8006862:	d202      	bcs.n	800686a <forward_conv2d_sssa8_ch_nl_pool+0x46e>
 8006864:	981c      	ldr	r0, [sp, #112]	; 0x70
 8006866:	42a0      	cmp	r0, r4
 8006868:	d137      	bne.n	80068da <forward_conv2d_sssa8_ch_nl_pool+0x4de>
 800686a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800686c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800686e:	b2a4      	uxth	r4, r4
 8006870:	4413      	add	r3, r2
 8006872:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006874:	1b1b      	subs	r3, r3, r4
 8006876:	b21b      	sxth	r3, r3
 8006878:	4414      	add	r4, r2
 800687a:	931a      	str	r3, [sp, #104]	; 0x68
 800687c:	b224      	sxth	r4, r4
 800687e:	e77f      	b.n	8006780 <forward_conv2d_sssa8_ch_nl_pool+0x384>
 8006880:	2300      	movs	r3, #0
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	deff      	udf	#255	; 0xff
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	deff      	udf	#255	; 0xff
 800688a:	6848      	ldr	r0, [r1, #4]
 800688c:	9018      	str	r0, [sp, #96]	; 0x60
 800688e:	e5df      	b.n	8006450 <forward_conv2d_sssa8_ch_nl_pool+0x54>
 8006890:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8006892:	461a      	mov	r2, r3
 8006894:	1a5b      	subs	r3, r3, r1
 8006896:	d505      	bpl.n	80068a4 <forward_conv2d_sssa8_ch_nl_pool+0x4a8>
 8006898:	1a8a      	subs	r2, r1, r2
 800689a:	9839      	ldr	r0, [sp, #228]	; 0xe4
 800689c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800689e:	fb00 1202 	mla	r2, r0, r2, r1
 80068a2:	9218      	str	r2, [sp, #96]	; 0x60
 80068a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	9316      	str	r3, [sp, #88]	; 0x58
 80068ac:	e75e      	b.n	800676c <forward_conv2d_sssa8_ch_nl_pool+0x370>
 80068ae:	2300      	movs	r3, #0
 80068b0:	931f      	str	r3, [sp, #124]	; 0x7c
 80068b2:	931d      	str	r3, [sp, #116]	; 0x74
 80068b4:	e752      	b.n	800675c <forward_conv2d_sssa8_ch_nl_pool+0x360>
 80068b6:	68eb      	ldr	r3, [r5, #12]
 80068b8:	60ab      	str	r3, [r5, #8]
 80068ba:	68f3      	ldr	r3, [r6, #12]
 80068bc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80068be:	60b3      	str	r3, [r6, #8]
 80068c0:	68d3      	ldr	r3, [r2, #12]
 80068c2:	6093      	str	r3, [r2, #8]
 80068c4:	b04f      	add	sp, #316	; 0x13c
 80068c6:	ecbd 8b04 	vpop	{d8-d9}
 80068ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ce:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8006940 <forward_conv2d_sssa8_ch_nl_pool+0x544>
 80068d2:	e688      	b.n	80065e6 <forward_conv2d_sssa8_ch_nl_pool+0x1ea>
 80068d4:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8006940 <forward_conv2d_sssa8_ch_nl_pool+0x544>
 80068d8:	e677      	b.n	80065ca <forward_conv2d_sssa8_ch_nl_pool+0x1ce>
 80068da:	6870      	ldr	r0, [r6, #4]
 80068dc:	4402      	add	r2, r0
 80068de:	4293      	cmp	r3, r2
 80068e0:	d2c3      	bcs.n	800686a <forward_conv2d_sssa8_ch_nl_pool+0x46e>
 80068e2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80068e4:	3901      	subs	r1, #1
 80068e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068ea:	f801 2f01 	strb.w	r2, [r1, #1]!
 80068ee:	68f2      	ldr	r2, [r6, #12]
 80068f0:	6870      	ldr	r0, [r6, #4]
 80068f2:	4402      	add	r2, r0
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d3f6      	bcc.n	80068e6 <forward_conv2d_sssa8_ch_nl_pool+0x4ea>
 80068f8:	9713      	str	r7, [sp, #76]	; 0x4c
 80068fa:	e7b6      	b.n	800686a <forward_conv2d_sssa8_ch_nl_pool+0x46e>
 80068fc:	932a      	str	r3, [sp, #168]	; 0xa8
 80068fe:	e6a7      	b.n	8006650 <forward_conv2d_sssa8_ch_nl_pool+0x254>
 8006900:	9229      	str	r2, [sp, #164]	; 0xa4
 8006902:	e696      	b.n	8006632 <forward_conv2d_sssa8_ch_nl_pool+0x236>
 8006904:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8006908:	ee08 1a90 	vmov	s17, r1
 800690c:	2900      	cmp	r1, #0
 800690e:	f43f adfd 	beq.w	800650c <forward_conv2d_sssa8_ch_nl_pool+0x110>
 8006912:	6889      	ldr	r1, [r1, #8]
 8006914:	ee08 1a90 	vmov	s17, r1
 8006918:	e5f8      	b.n	800650c <forward_conv2d_sssa8_ch_nl_pool+0x110>
 800691a:	9129      	str	r1, [sp, #164]	; 0xa4
 800691c:	e689      	b.n	8006632 <forward_conv2d_sssa8_ch_nl_pool+0x236>
 800691e:	4b09      	ldr	r3, [pc, #36]	; (8006944 <forward_conv2d_sssa8_ch_nl_pool+0x548>)
 8006920:	932e      	str	r3, [sp, #184]	; 0xb8
 8006922:	46c3      	mov	fp, r8
 8006924:	e5a7      	b.n	8006476 <forward_conv2d_sssa8_ch_nl_pool+0x7a>
 8006926:	922a      	str	r2, [sp, #168]	; 0xa8
 8006928:	e692      	b.n	8006650 <forward_conv2d_sssa8_ch_nl_pool+0x254>
 800692a:	9115      	str	r1, [sp, #84]	; 0x54
 800692c:	9118      	str	r1, [sp, #96]	; 0x60
 800692e:	e58f      	b.n	8006450 <forward_conv2d_sssa8_ch_nl_pool+0x54>
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	deff      	udf	#255	; 0xff
 8006934:	2300      	movs	r3, #0
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	deff      	udf	#255	; 0xff
 800693a:	2300      	movs	r3, #0
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	deff      	udf	#255	; 0xff
 8006940:	00000000 	.word	0x00000000
 8006944:	080059d9 	.word	0x080059d9

08006948 <forward_dense_integer_SSSA>:
 8006948:	6982      	ldr	r2, [r0, #24]
 800694a:	8813      	ldrh	r3, [r2, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 80c8 	beq.w	8006ae2 <forward_dense_integer_SSSA+0x19a>
 8006952:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006956:	6852      	ldr	r2, [r2, #4]
 8006958:	6854      	ldr	r4, [r2, #4]
 800695a:	b093      	sub	sp, #76	; 0x4c
 800695c:	b104      	cbz	r4, 8006960 <forward_dense_integer_SSSA+0x18>
 800695e:	6824      	ldr	r4, [r4, #0]
 8006960:	2b01      	cmp	r3, #1
 8006962:	f000 815f 	beq.w	8006c24 <forward_dense_integer_SSSA+0x2dc>
 8006966:	6911      	ldr	r1, [r2, #16]
 8006968:	b101      	cbz	r1, 800696c <forward_dense_integer_SSSA+0x24>
 800696a:	6809      	ldr	r1, [r1, #0]
 800696c:	2b02      	cmp	r3, #2
 800696e:	f000 815c 	beq.w	8006c2a <forward_dense_integer_SSSA+0x2e2>
 8006972:	69d5      	ldr	r5, [r2, #28]
 8006974:	2d00      	cmp	r5, #0
 8006976:	f000 8108 	beq.w	8006b8a <forward_dense_integer_SSSA+0x242>
 800697a:	8b16      	ldrh	r6, [r2, #24]
 800697c:	6828      	ldr	r0, [r5, #0]
 800697e:	2e01      	cmp	r6, #1
 8006980:	f240 812d 	bls.w	8006bde <forward_dense_integer_SSSA+0x296>
 8006984:	686d      	ldr	r5, [r5, #4]
 8006986:	2b03      	cmp	r3, #3
 8006988:	f000 8152 	beq.w	8006c30 <forward_dense_integer_SSSA+0x2e8>
 800698c:	f8d2 9028 	ldr.w	r9, [r2, #40]	; 0x28
 8006990:	69ab      	ldr	r3, [r5, #24]
 8006992:	f1b9 0f00 	cmp.w	r9, #0
 8006996:	f000 810f 	beq.w	8006bb8 <forward_dense_integer_SSSA+0x270>
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	68e2      	ldr	r2, [r4, #12]
 800699e:	930b      	str	r3, [sp, #44]	; 0x2c
 80069a0:	68cb      	ldr	r3, [r1, #12]
 80069a2:	6856      	ldr	r6, [r2, #4]
 80069a4:	f8d9 9000 	ldr.w	r9, [r9]
 80069a8:	f8d4 e018 	ldr.w	lr, [r4, #24]
 80069ac:	698d      	ldr	r5, [r1, #24]
 80069ae:	960f      	str	r6, [sp, #60]	; 0x3c
 80069b0:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	fb03 f302 	mul.w	r3, r3, r2
 80069ba:	930c      	str	r3, [sp, #48]	; 0x30
 80069bc:	b2b2      	uxth	r2, r6
 80069be:	fa1f f38a 	uxth.w	r3, sl
 80069c2:	f1b9 0f00 	cmp.w	r9, #0
 80069c6:	d003      	beq.n	80069d0 <forward_dense_integer_SSSA+0x88>
 80069c8:	f8d9 6018 	ldr.w	r6, [r9, #24]
 80069cc:	f8d6 9008 	ldr.w	r9, [r6, #8]
 80069d0:	6827      	ldr	r7, [r4, #0]
 80069d2:	f8d0 b000 	ldr.w	fp, [r0]
 80069d6:	680c      	ldr	r4, [r1, #0]
 80069d8:	6981      	ldr	r1, [r0, #24]
 80069da:	2f00      	cmp	r7, #0
 80069dc:	f000 8083 	beq.w	8006ae6 <forward_dense_integer_SSSA+0x19e>
 80069e0:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80069e4:	f1bc 0f00 	cmp.w	ip, #0
 80069e8:	f000 80b1 	beq.w	8006b4e <forward_dense_integer_SSSA+0x206>
 80069ec:	8878      	ldrh	r0, [r7, #2]
 80069ee:	2800      	cmp	r0, #0
 80069f0:	f000 809c 	beq.w	8006b2c <forward_dense_integer_SSSA+0x1e4>
 80069f4:	f8dc 6000 	ldr.w	r6, [ip]
 80069f8:	edd6 7a00 	vldr	s15, [r6]
 80069fc:	2c00      	cmp	r4, #0
 80069fe:	f000 809a 	beq.w	8006b36 <forward_dense_integer_SSSA+0x1ee>
 8006a02:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8006a06:	f1b8 0f00 	cmp.w	r8, #0
 8006a0a:	f000 80a9 	beq.w	8006b60 <forward_dense_integer_SSSA+0x218>
 8006a0e:	8860      	ldrh	r0, [r4, #2]
 8006a10:	2800      	cmp	r0, #0
 8006a12:	d074      	beq.n	8006afe <forward_dense_integer_SSSA+0x1b6>
 8006a14:	68ae      	ldr	r6, [r5, #8]
 8006a16:	f8de 5008 	ldr.w	r5, [lr, #8]
 8006a1a:	950d      	str	r5, [sp, #52]	; 0x34
 8006a1c:	f8d8 5000 	ldr.w	r5, [r8]
 8006a20:	6889      	ldr	r1, [r1, #8]
 8006a22:	ed95 0a00 	vldr	s0, [r5]
 8006a26:	f1bc 0f00 	cmp.w	ip, #0
 8006a2a:	d076      	beq.n	8006b1a <forward_dense_integer_SSSA+0x1d2>
 8006a2c:	8878      	ldrh	r0, [r7, #2]
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	f000 80a3 	beq.w	8006b7a <forward_dense_integer_SSSA+0x232>
 8006a34:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8006a38:	f990 7000 	ldrsb.w	r7, [r0]
 8006a3c:	2c00      	cmp	r4, #0
 8006a3e:	f000 80d6 	beq.w	8006bee <forward_dense_integer_SSSA+0x2a6>
 8006a42:	f1b8 0f00 	cmp.w	r8, #0
 8006a46:	f000 809d 	beq.w	8006b84 <forward_dense_integer_SSSA+0x23c>
 8006a4a:	8860      	ldrh	r0, [r4, #2]
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d167      	bne.n	8006b20 <forward_dense_integer_SSSA+0x1d8>
 8006a50:	900a      	str	r0, [sp, #40]	; 0x28
 8006a52:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006a56:	910e      	str	r1, [sp, #56]	; 0x38
 8006a58:	f1bb 0f00 	cmp.w	fp, #0
 8006a5c:	f000 80dc 	beq.w	8006c18 <forward_dense_integer_SSSA+0x2d0>
 8006a60:	f8db 0004 	ldr.w	r0, [fp, #4]
 8006a64:	2800      	cmp	r0, #0
 8006a66:	f000 80d7 	beq.w	8006c18 <forward_dense_integer_SSSA+0x2d0>
 8006a6a:	6800      	ldr	r0, [r0, #0]
 8006a6c:	2400      	movs	r4, #0
 8006a6e:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 8006a72:	9411      	str	r4, [sp, #68]	; 0x44
 8006a74:	ed90 7a00 	vldr	s14, [r0]
 8006a78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006a7c:	f10d 0842 	add.w	r8, sp, #66	; 0x42
 8006a80:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8006a84:	4640      	mov	r0, r8
 8006a86:	f002 ffa5 	bl	80099d4 <align_factor>
 8006a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a8c:	9011      	str	r0, [sp, #68]	; 0x44
 8006a8e:	b32b      	cbz	r3, 8006adc <forward_dense_integer_SSSA+0x194>
 8006a90:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006a94:	4699      	mov	r9, r3
 8006a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a98:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 8006a9c:	9a08      	ldr	r2, [sp, #32]
 8006a9e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006aa0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006aa2:	970d      	str	r7, [sp, #52]	; 0x34
 8006aa4:	fa1f fa8a 	uxth.w	sl, sl
 8006aa8:	461f      	mov	r7, r3
 8006aaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006aac:	9306      	str	r3, [sp, #24]
 8006aae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ab0:	9304      	str	r3, [sp, #16]
 8006ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ab4:	9303      	str	r3, [sp, #12]
 8006ab6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ab8:	9605      	str	r6, [sp, #20]
 8006aba:	e9cd 8301 	strd	r8, r3, [sp, #4]
 8006abe:	ab11      	add	r3, sp, #68	; 0x44
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	4628      	mov	r0, r5
 8006ac4:	3401      	adds	r4, #1
 8006ac6:	463b      	mov	r3, r7
 8006ac8:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8006acc:	f003 f894 	bl	8009bf8 <st_sssa8_fully_connected>
 8006ad0:	454c      	cmp	r4, r9
 8006ad2:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8006ad6:	4456      	add	r6, sl
 8006ad8:	445d      	add	r5, fp
 8006ada:	d1e6      	bne.n	8006aaa <forward_dense_integer_SSSA+0x162>
 8006adc:	b013      	add	sp, #76	; 0x4c
 8006ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	deff      	udf	#255	; 0xff
 8006ae6:	2c00      	cmp	r4, #0
 8006ae8:	d056      	beq.n	8006b98 <forward_dense_integer_SSSA+0x250>
 8006aea:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8006aee:	f1b8 0f00 	cmp.w	r8, #0
 8006af2:	d05d      	beq.n	8006bb0 <forward_dense_integer_SSSA+0x268>
 8006af4:	8860      	ldrh	r0, [r4, #2]
 8006af6:	2800      	cmp	r0, #0
 8006af8:	d17b      	bne.n	8006bf2 <forward_dense_integer_SSSA+0x2aa>
 8006afa:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8006c38 <forward_dense_integer_SSSA+0x2f0>
 8006afe:	68ae      	ldr	r6, [r5, #8]
 8006b00:	f8de 5008 	ldr.w	r5, [lr, #8]
 8006b04:	6889      	ldr	r1, [r1, #8]
 8006b06:	950d      	str	r5, [sp, #52]	; 0x34
 8006b08:	2f00      	cmp	r7, #0
 8006b0a:	d041      	beq.n	8006b90 <forward_dense_integer_SSSA+0x248>
 8006b0c:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8006b10:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8006c38 <forward_dense_integer_SSSA+0x2f0>
 8006b14:	f1bc 0f00 	cmp.w	ip, #0
 8006b18:	d188      	bne.n	8006a2c <forward_dense_integer_SSSA+0xe4>
 8006b1a:	4667      	mov	r7, ip
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d097      	beq.n	8006a50 <forward_dense_integer_SSSA+0x108>
 8006b20:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006b24:	f990 0000 	ldrsb.w	r0, [r0]
 8006b28:	900a      	str	r0, [sp, #40]	; 0x28
 8006b2a:	e792      	b.n	8006a52 <forward_dense_integer_SSSA+0x10a>
 8006b2c:	eddf 7a42 	vldr	s15, [pc, #264]	; 8006c38 <forward_dense_integer_SSSA+0x2f0>
 8006b30:	2c00      	cmp	r4, #0
 8006b32:	f47f af66 	bne.w	8006a02 <forward_dense_integer_SSSA+0xba>
 8006b36:	68ae      	ldr	r6, [r5, #8]
 8006b38:	f8de 5008 	ldr.w	r5, [lr, #8]
 8006b3c:	6889      	ldr	r1, [r1, #8]
 8006b3e:	950d      	str	r5, [sp, #52]	; 0x34
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d14e      	bne.n	8006be2 <forward_dense_integer_SSSA+0x29a>
 8006b44:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8006c38 <forward_dense_integer_SSSA+0x2f0>
 8006b48:	900a      	str	r0, [sp, #40]	; 0x28
 8006b4a:	4607      	mov	r7, r0
 8006b4c:	e781      	b.n	8006a52 <forward_dense_integer_SSSA+0x10a>
 8006b4e:	b31c      	cbz	r4, 8006b98 <forward_dense_integer_SSSA+0x250>
 8006b50:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8006b54:	eddf 7a38 	vldr	s15, [pc, #224]	; 8006c38 <forward_dense_integer_SSSA+0x2f0>
 8006b58:	f1b8 0f00 	cmp.w	r8, #0
 8006b5c:	f47f af57 	bne.w	8006a0e <forward_dense_integer_SSSA+0xc6>
 8006b60:	f8de 0008 	ldr.w	r0, [lr, #8]
 8006b64:	68ae      	ldr	r6, [r5, #8]
 8006b66:	6889      	ldr	r1, [r1, #8]
 8006b68:	900d      	str	r0, [sp, #52]	; 0x34
 8006b6a:	f1bc 0f00 	cmp.w	ip, #0
 8006b6e:	d00e      	beq.n	8006b8e <forward_dense_integer_SSSA+0x246>
 8006b70:	8878      	ldrh	r0, [r7, #2]
 8006b72:	2800      	cmp	r0, #0
 8006b74:	d149      	bne.n	8006c0a <forward_dense_integer_SSSA+0x2c2>
 8006b76:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8006c38 <forward_dense_integer_SSSA+0x2f0>
 8006b7a:	2700      	movs	r7, #0
 8006b7c:	f1b8 0f00 	cmp.w	r8, #0
 8006b80:	f47f af63 	bne.w	8006a4a <forward_dense_integer_SSSA+0x102>
 8006b84:	2000      	movs	r0, #0
 8006b86:	900a      	str	r0, [sp, #40]	; 0x28
 8006b88:	e763      	b.n	8006a52 <forward_dense_integer_SSSA+0x10a>
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	e6fb      	b.n	8006986 <forward_dense_integer_SSSA+0x3e>
 8006b8e:	4667      	mov	r7, ip
 8006b90:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8006c38 <forward_dense_integer_SSSA+0x2f0>
 8006b94:	970a      	str	r7, [sp, #40]	; 0x28
 8006b96:	e75c      	b.n	8006a52 <forward_dense_integer_SSSA+0x10a>
 8006b98:	eddf 7a27 	vldr	s15, [pc, #156]	; 8006c38 <forward_dense_integer_SSSA+0x2f0>
 8006b9c:	4627      	mov	r7, r4
 8006b9e:	f8de 0008 	ldr.w	r0, [lr, #8]
 8006ba2:	68ae      	ldr	r6, [r5, #8]
 8006ba4:	6889      	ldr	r1, [r1, #8]
 8006ba6:	900d      	str	r0, [sp, #52]	; 0x34
 8006ba8:	eeb0 0a67 	vmov.f32	s0, s15
 8006bac:	970a      	str	r7, [sp, #40]	; 0x28
 8006bae:	e750      	b.n	8006a52 <forward_dense_integer_SSSA+0x10a>
 8006bb0:	eddf 7a21 	vldr	s15, [pc, #132]	; 8006c38 <forward_dense_integer_SSSA+0x2f0>
 8006bb4:	4647      	mov	r7, r8
 8006bb6:	e7f2      	b.n	8006b9e <forward_dense_integer_SSSA+0x256>
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	68e2      	ldr	r2, [r4, #12]
 8006bbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bbe:	68cb      	ldr	r3, [r1, #12]
 8006bc0:	6856      	ldr	r6, [r2, #4]
 8006bc2:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8006bc6:	698d      	ldr	r5, [r1, #24]
 8006bc8:	960f      	str	r6, [sp, #60]	; 0x3c
 8006bca:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	fb03 f302 	mul.w	r3, r3, r2
 8006bd4:	930c      	str	r3, [sp, #48]	; 0x30
 8006bd6:	b2b2      	uxth	r2, r6
 8006bd8:	fa1f f38a 	uxth.w	r3, sl
 8006bdc:	e6f8      	b.n	80069d0 <forward_dense_integer_SSSA+0x88>
 8006bde:	2500      	movs	r5, #0
 8006be0:	e6d1      	b.n	8006986 <forward_dense_integer_SSSA+0x3e>
 8006be2:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8006be6:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8006c38 <forward_dense_integer_SSSA+0x2f0>
 8006bea:	f990 7000 	ldrsb.w	r7, [r0]
 8006bee:	940a      	str	r4, [sp, #40]	; 0x28
 8006bf0:	e72f      	b.n	8006a52 <forward_dense_integer_SSSA+0x10a>
 8006bf2:	f8de 0008 	ldr.w	r0, [lr, #8]
 8006bf6:	900d      	str	r0, [sp, #52]	; 0x34
 8006bf8:	f8d8 0000 	ldr.w	r0, [r8]
 8006bfc:	68ae      	ldr	r6, [r5, #8]
 8006bfe:	6889      	ldr	r1, [r1, #8]
 8006c00:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8006c38 <forward_dense_integer_SSSA+0x2f0>
 8006c04:	ed90 0a00 	vldr	s0, [r0]
 8006c08:	e78a      	b.n	8006b20 <forward_dense_integer_SSSA+0x1d8>
 8006c0a:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8006c0e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8006c38 <forward_dense_integer_SSSA+0x2f0>
 8006c12:	f990 7000 	ldrsb.w	r7, [r0]
 8006c16:	e7b5      	b.n	8006b84 <forward_dense_integer_SSSA+0x23c>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8006c1e:	9311      	str	r3, [sp, #68]	; 0x44
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	deff      	udf	#255	; 0xff
 8006c24:	2300      	movs	r3, #0
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	deff      	udf	#255	; 0xff
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	deff      	udf	#255	; 0xff
 8006c30:	2300      	movs	r3, #0
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	deff      	udf	#255	; 0xff
 8006c36:	bf00      	nop
 8006c38:	00000000 	.word	0x00000000

08006c3c <forward_pad>:
 8006c3c:	7f03      	ldrb	r3, [r0, #28]
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	d80b      	bhi.n	8006c5a <forward_pad+0x1e>
 8006c42:	e8df f003 	tbb	[pc, r3]
 8006c46:	0608      	.short	0x0608
 8006c48:	0204      	.short	0x0204
 8006c4a:	f000 b863 	b.w	8006d14 <forward_pad_8bit_ch1st_3x3_constant>
 8006c4e:	f000 b8dd 	b.w	8006e0c <forward_pad_edge>
 8006c52:	f000 b91d 	b.w	8006e90 <forward_pad_reflect>
 8006c56:	f000 b88f 	b.w	8006d78 <forward_pad_constant>
 8006c5a:	4770      	bx	lr

08006c5c <forward_sm_integer>:
 8006c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c60:	6983      	ldr	r3, [r0, #24]
 8006c62:	881f      	ldrh	r7, [r3, #0]
 8006c64:	b086      	sub	sp, #24
 8006c66:	2f00      	cmp	r7, #0
 8006c68:	d042      	beq.n	8006cf0 <forward_sm_integer+0x94>
 8006c6a:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8006c6e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8006c72:	b106      	cbz	r6, 8006c76 <forward_sm_integer+0x1a>
 8006c74:	6836      	ldr	r6, [r6, #0]
 8006c76:	2f01      	cmp	r7, #1
 8006c78:	d043      	beq.n	8006d02 <forward_sm_integer+0xa6>
 8006c7a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d044      	beq.n	8006d0c <forward_sm_integer+0xb0>
 8006c82:	f8d3 e000 	ldr.w	lr, [r3]
 8006c86:	68b1      	ldr	r1, [r6, #8]
 8006c88:	f8de 300c 	ldr.w	r3, [lr, #12]
 8006c8c:	68f5      	ldr	r5, [r6, #12]
 8006c8e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8006c92:	686b      	ldr	r3, [r5, #4]
 8006c94:	0a09      	lsrs	r1, r1, #8
 8006c96:	d032      	beq.n	8006cfe <forward_sm_integer+0xa2>
 8006c98:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006ca2:	428d      	cmp	r5, r1
 8006ca4:	fb04 f202 	mul.w	r2, r4, r2
 8006ca8:	d1f9      	bne.n	8006c9e <forward_sm_integer+0x42>
 8006caa:	69c1      	ldr	r1, [r0, #28]
 8006cac:	2f03      	cmp	r7, #3
 8006cae:	688c      	ldr	r4, [r1, #8]
 8006cb0:	d927      	bls.n	8006d02 <forward_sm_integer+0xa6>
 8006cb2:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8006cb6:	b339      	cbz	r1, 8006d08 <forward_sm_integer+0xac>
 8006cb8:	6809      	ldr	r1, [r1, #0]
 8006cba:	69b0      	ldr	r0, [r6, #24]
 8006cbc:	6989      	ldr	r1, [r1, #24]
 8006cbe:	4e14      	ldr	r6, [pc, #80]	; (8006d10 <forward_sm_integer+0xb4>)
 8006cc0:	688d      	ldr	r5, [r1, #8]
 8006cc2:	6801      	ldr	r1, [r0, #0]
 8006cc4:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8006cc8:	42b1      	cmp	r1, r6
 8006cca:	f8de 6018 	ldr.w	r6, [lr, #24]
 8006cce:	6881      	ldr	r1, [r0, #8]
 8006cd0:	68b0      	ldr	r0, [r6, #8]
 8006cd2:	9505      	str	r5, [sp, #20]
 8006cd4:	68a5      	ldr	r5, [r4, #8]
 8006cd6:	9504      	str	r5, [sp, #16]
 8006cd8:	6865      	ldr	r5, [r4, #4]
 8006cda:	9503      	str	r5, [sp, #12]
 8006cdc:	6824      	ldr	r4, [r4, #0]
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	e9cd c401 	strd	ip, r4, [sp, #4]
 8006ce4:	d006      	beq.n	8006cf4 <forward_sm_integer+0x98>
 8006ce6:	f001 ffc7 	bl	8008c78 <forward_lite_nl_softmax_iu8ou8>
 8006cea:	b006      	add	sp, #24
 8006cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	deff      	udf	#255	; 0xff
 8006cf4:	f001 fb86 	bl	8008404 <forward_lite_nl_softmax_is8os8>
 8006cf8:	b006      	add	sp, #24
 8006cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cfe:	2201      	movs	r2, #1
 8006d00:	e7d3      	b.n	8006caa <forward_sm_integer+0x4e>
 8006d02:	2300      	movs	r3, #0
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	deff      	udf	#255	; 0xff
 8006d08:	698b      	ldr	r3, [r1, #24]
 8006d0a:	deff      	udf	#255	; 0xff
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	deff      	udf	#255	; 0xff
 8006d10:	00840440 	.word	0x00840440

08006d14 <forward_pad_8bit_ch1st_3x3_constant>:
 8006d14:	6982      	ldr	r2, [r0, #24]
 8006d16:	8811      	ldrh	r1, [r2, #0]
 8006d18:	b331      	cbz	r1, 8006d68 <forward_pad_8bit_ch1st_3x3_constant+0x54>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	6850      	ldr	r0, [r2, #4]
 8006d1e:	6842      	ldr	r2, [r0, #4]
 8006d20:	b102      	cbz	r2, 8006d24 <forward_pad_8bit_ch1st_3x3_constant+0x10>
 8006d22:	6812      	ldr	r2, [r2, #0]
 8006d24:	2901      	cmp	r1, #1
 8006d26:	d021      	beq.n	8006d6c <forward_pad_8bit_ch1st_3x3_constant+0x58>
 8006d28:	6901      	ldr	r1, [r0, #16]
 8006d2a:	b311      	cbz	r1, 8006d72 <forward_pad_8bit_ch1st_3x3_constant+0x5e>
 8006d2c:	b570      	push	{r4, r5, r6, lr}
 8006d2e:	68d5      	ldr	r5, [r2, #12]
 8006d30:	6809      	ldr	r1, [r1, #0]
 8006d32:	e9d2 6205 	ldrd	r6, r2, [r2, #20]
 8006d36:	e9d3 4309 	ldrd	r4, r3, [r3, #36]	; 0x24
 8006d3a:	6890      	ldr	r0, [r2, #8]
 8006d3c:	f9b4 4000 	ldrsh.w	r4, [r4]
 8006d40:	e9d1 2105 	ldrd	r2, r1, [r1, #20]
 8006d44:	68d2      	ldr	r2, [r2, #12]
 8006d46:	6889      	ldr	r1, [r1, #8]
 8006d48:	b084      	sub	sp, #16
 8006d4a:	fb02 f404 	mul.w	r4, r2, r4
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	68eb      	ldr	r3, [r5, #12]
 8006d52:	9403      	str	r4, [sp, #12]
 8006d54:	68f4      	ldr	r4, [r6, #12]
 8006d56:	9402      	str	r4, [sp, #8]
 8006d58:	6874      	ldr	r4, [r6, #4]
 8006d5a:	9401      	str	r4, [sp, #4]
 8006d5c:	686c      	ldr	r4, [r5, #4]
 8006d5e:	9400      	str	r4, [sp, #0]
 8006d60:	f002 fbbe 	bl	80094e0 <forward_lite_pad_8bit_ch1st_3x3_constant>
 8006d64:	b004      	add	sp, #16
 8006d66:	bd70      	pop	{r4, r5, r6, pc}
 8006d68:	684b      	ldr	r3, [r1, #4]
 8006d6a:	deff      	udf	#255	; 0xff
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	deff      	udf	#255	; 0xff
 8006d72:	698b      	ldr	r3, [r1, #24]
 8006d74:	deff      	udf	#255	; 0xff
 8006d76:	bf00      	nop

08006d78 <forward_pad_constant>:
 8006d78:	6982      	ldr	r2, [r0, #24]
 8006d7a:	8813      	ldrh	r3, [r2, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d03d      	beq.n	8006dfc <forward_pad_constant+0x84>
 8006d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d84:	6852      	ldr	r2, [r2, #4]
 8006d86:	6854      	ldr	r4, [r2, #4]
 8006d88:	b088      	sub	sp, #32
 8006d8a:	b104      	cbz	r4, 8006d8e <forward_pad_constant+0x16>
 8006d8c:	6824      	ldr	r4, [r4, #0]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d036      	beq.n	8006e00 <forward_pad_constant+0x88>
 8006d92:	6913      	ldr	r3, [r2, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d036      	beq.n	8006e06 <forward_pad_constant+0x8e>
 8006d98:	6819      	ldr	r1, [r3, #0]
 8006d9a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006d9c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 8006da4:	69a6      	ldr	r6, [r4, #24]
 8006da6:	f8d4 c014 	ldr.w	ip, [r4, #20]
 8006daa:	68b0      	ldr	r0, [r6, #8]
 8006dac:	e9d1 3105 	ldrd	r3, r1, [r1, #20]
 8006db0:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
 8006db4:	fb08 f707 	mul.w	r7, r8, r7
 8006db8:	6833      	ldr	r3, [r6, #0]
 8006dba:	6889      	ldr	r1, [r1, #8]
 8006dbc:	9706      	str	r7, [sp, #24]
 8006dbe:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 8006dc2:	fb08 f606 	mul.w	r6, r8, r6
 8006dc6:	9605      	str	r6, [sp, #20]
 8006dc8:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 8006dcc:	fb0e f606 	mul.w	r6, lr, r6
 8006dd0:	9604      	str	r6, [sp, #16]
 8006dd2:	f9b5 5000 	ldrsh.w	r5, [r5]
 8006dd6:	fb0e f505 	mul.w	r5, lr, r5
 8006dda:	9503      	str	r5, [sp, #12]
 8006ddc:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8006de0:	9502      	str	r5, [sp, #8]
 8006de2:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8006de6:	9501      	str	r5, [sp, #4]
 8006de8:	68e4      	ldr	r4, [r4, #12]
 8006dea:	68e4      	ldr	r4, [r4, #12]
 8006dec:	9400      	str	r4, [sp, #0]
 8006dee:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8006df2:	f002 fc33 	bl	800965c <forward_lite_pad_constant>
 8006df6:	b008      	add	sp, #32
 8006df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	deff      	udf	#255	; 0xff
 8006e00:	2300      	movs	r3, #0
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	deff      	udf	#255	; 0xff
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	deff      	udf	#255	; 0xff
 8006e0a:	bf00      	nop

08006e0c <forward_pad_edge>:
 8006e0c:	6982      	ldr	r2, [r0, #24]
 8006e0e:	8813      	ldrh	r3, [r2, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d035      	beq.n	8006e80 <forward_pad_edge+0x74>
 8006e14:	6851      	ldr	r1, [r2, #4]
 8006e16:	684a      	ldr	r2, [r1, #4]
 8006e18:	b102      	cbz	r2, 8006e1c <forward_pad_edge+0x10>
 8006e1a:	6812      	ldr	r2, [r2, #0]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d031      	beq.n	8006e84 <forward_pad_edge+0x78>
 8006e20:	690b      	ldr	r3, [r1, #16]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d031      	beq.n	8006e8a <forward_pad_edge+0x7e>
 8006e26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006e2c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8006e30:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 8006e34:	6990      	ldr	r0, [r2, #24]
 8006e36:	6957      	ldr	r7, [r2, #20]
 8006e38:	6880      	ldr	r0, [r0, #8]
 8006e3a:	f8de 200c 	ldr.w	r2, [lr, #12]
 8006e3e:	e9d3 c105 	ldrd	ip, r1, [r3, #20]
 8006e42:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8006e46:	f9b5 3000 	ldrsh.w	r3, [r5]
 8006e4a:	6889      	ldr	r1, [r1, #8]
 8006e4c:	b089      	sub	sp, #36	; 0x24
 8006e4e:	fb04 f606 	mul.w	r6, r4, r6
 8006e52:	9606      	str	r6, [sp, #24]
 8006e54:	f8dc c008 	ldr.w	ip, [ip, #8]
 8006e58:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 8006e5c:	9403      	str	r4, [sp, #12]
 8006e5e:	fb0c f606 	mul.w	r6, ip, r6
 8006e62:	fb03 f404 	mul.w	r4, r3, r4
 8006e66:	9605      	str	r6, [sp, #20]
 8006e68:	9404      	str	r4, [sp, #16]
 8006e6a:	68bc      	ldr	r4, [r7, #8]
 8006e6c:	9402      	str	r4, [sp, #8]
 8006e6e:	68fc      	ldr	r4, [r7, #12]
 8006e70:	9401      	str	r4, [sp, #4]
 8006e72:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
 8006e76:	9400      	str	r4, [sp, #0]
 8006e78:	f002 fc92 	bl	80097a0 <forward_lite_pad_edge>
 8006e7c:	b009      	add	sp, #36	; 0x24
 8006e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	deff      	udf	#255	; 0xff
 8006e84:	2300      	movs	r3, #0
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	deff      	udf	#255	; 0xff
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	deff      	udf	#255	; 0xff
 8006e8e:	bf00      	nop

08006e90 <forward_pad_reflect>:
 8006e90:	6982      	ldr	r2, [r0, #24]
 8006e92:	8813      	ldrh	r3, [r2, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d045      	beq.n	8006f24 <forward_pad_reflect+0x94>
 8006e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9c:	6852      	ldr	r2, [r2, #4]
 8006e9e:	6857      	ldr	r7, [r2, #4]
 8006ea0:	b08f      	sub	sp, #60	; 0x3c
 8006ea2:	b107      	cbz	r7, 8006ea6 <forward_pad_reflect+0x16>
 8006ea4:	683f      	ldr	r7, [r7, #0]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d03e      	beq.n	8006f28 <forward_pad_reflect+0x98>
 8006eaa:	6913      	ldr	r3, [r2, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d03e      	beq.n	8006f2e <forward_pad_reflect+0x9e>
 8006eb0:	6819      	ldr	r1, [r3, #0]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	e9d2 8302 	ldrd	r8, r3, [r2, #8]
 8006eb8:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 8006ebc:	f5b4 6fa0 	cmp.w	r4, #1280	; 0x500
 8006ec0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006ec2:	e9d1 0105 	ldrd	r0, r1, [r1, #20]
 8006ec6:	e9d0 5c02 	ldrd	r5, ip, [r0, #8]
 8006eca:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8006ece:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 8006ed2:	f9b4 b000 	ldrsh.w	fp, [r4]
 8006ed6:	6889      	ldr	r1, [r1, #8]
 8006ed8:	e9d7 7005 	ldrd	r7, r0, [r7, #20]
 8006edc:	fb05 f606 	mul.w	r6, r5, r6
 8006ee0:	e9d2 a902 	ldrd	sl, r9, [r2, #8]
 8006ee4:	6880      	ldr	r0, [r0, #8]
 8006ee6:	bf28      	it	cs
 8006ee8:	6912      	ldrcs	r2, [r2, #16]
 8006eea:	960c      	str	r6, [sp, #48]	; 0x30
 8006eec:	fb05 f60e 	mul.w	r6, r5, lr
 8006ef0:	960b      	str	r6, [sp, #44]	; 0x2c
 8006ef2:	fb0c f60b 	mul.w	r6, ip, fp
 8006ef6:	960a      	str	r6, [sp, #40]	; 0x28
 8006ef8:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
 8006efc:	f8cd c014 	str.w	ip, [sp, #20]
 8006f00:	e9cd 5e06 	strd	r5, lr, [sp, #24]
 8006f04:	e9cd b408 	strd	fp, r4, [sp, #32]
 8006f08:	68bc      	ldr	r4, [r7, #8]
 8006f0a:	9404      	str	r4, [sp, #16]
 8006f0c:	68fc      	ldr	r4, [r7, #12]
 8006f0e:	bf38      	it	cc
 8006f10:	2201      	movcc	r2, #1
 8006f12:	e9cd a402 	strd	sl, r4, [sp, #8]
 8006f16:	e9cd 8900 	strd	r8, r9, [sp]
 8006f1a:	f002 fcb5 	bl	8009888 <forward_lite_pad_reflect>
 8006f1e:	b00f      	add	sp, #60	; 0x3c
 8006f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	deff      	udf	#255	; 0xff
 8006f28:	2300      	movs	r3, #0
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	deff      	udf	#255	; 0xff
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	deff      	udf	#255	; 0xff
 8006f32:	bf00      	nop

08006f34 <pool_func_mp_array_integer_INT8>:
 8006f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f38:	b093      	sub	sp, #76	; 0x4c
 8006f3a:	468c      	mov	ip, r1
 8006f3c:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8006f40:	f8bd 1074 	ldrh.w	r1, [sp, #116]	; 0x74
 8006f44:	940d      	str	r4, [sp, #52]	; 0x34
 8006f46:	469a      	mov	sl, r3
 8006f48:	6804      	ldr	r4, [r0, #0]
 8006f4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006f4c:	910e      	str	r1, [sp, #56]	; 0x38
 8006f4e:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 8006f52:	910f      	str	r1, [sp, #60]	; 0x3c
 8006f54:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 8006f58:	9110      	str	r1, [sp, #64]	; 0x40
 8006f5a:	6980      	ldr	r0, [r0, #24]
 8006f5c:	f8bd b080 	ldrh.w	fp, [sp, #128]	; 0x80
 8006f60:	f8bd 7084 	ldrh.w	r7, [sp, #132]	; 0x84
 8006f64:	f8bd e088 	ldrh.w	lr, [sp, #136]	; 0x88
 8006f68:	f8bd 808c 	ldrh.w	r8, [sp, #140]	; 0x8c
 8006f6c:	6999      	ldr	r1, [r3, #24]
 8006f6e:	681d      	ldr	r5, [r3, #0]
 8006f70:	2c00      	cmp	r4, #0
 8006f72:	d067      	beq.n	8007044 <pool_func_mp_array_integer_INT8+0x110>
 8006f74:	6866      	ldr	r6, [r4, #4]
 8006f76:	2e00      	cmp	r6, #0
 8006f78:	d04b      	beq.n	8007012 <pool_func_mp_array_integer_INT8+0xde>
 8006f7a:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8006f7e:	f1b9 0f00 	cmp.w	r9, #0
 8006f82:	d079      	beq.n	8007078 <pool_func_mp_array_integer_INT8+0x144>
 8006f84:	6833      	ldr	r3, [r6, #0]
 8006f86:	edd3 7a00 	vldr	s15, [r3]
 8006f8a:	2d00      	cmp	r5, #0
 8006f8c:	d078      	beq.n	8007080 <pool_func_mp_array_integer_INT8+0x14c>
 8006f8e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8006f92:	f1b9 0f00 	cmp.w	r9, #0
 8006f96:	d045      	beq.n	8007024 <pool_func_mp_array_integer_INT8+0xf0>
 8006f98:	886b      	ldrh	r3, [r5, #2]
 8006f9a:	9311      	str	r3, [sp, #68]	; 0x44
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d05e      	beq.n	800705e <pool_func_mp_array_integer_INT8+0x12a>
 8006fa0:	f8d9 3000 	ldr.w	r3, [r9]
 8006fa4:	6880      	ldr	r0, [r0, #8]
 8006fa6:	ed93 7a00 	vldr	s14, [r3]
 8006faa:	6889      	ldr	r1, [r1, #8]
 8006fac:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8006fb0:	2e00      	cmp	r6, #0
 8006fb2:	d05f      	beq.n	8007074 <pool_func_mp_array_integer_INT8+0x140>
 8006fb4:	8863      	ldrh	r3, [r4, #2]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 808a 	beq.w	80070d0 <pool_func_mp_array_integer_INT8+0x19c>
 8006fbc:	6873      	ldr	r3, [r6, #4]
 8006fbe:	f993 4000 	ldrsb.w	r4, [r3]
 8006fc2:	2d00      	cmp	r5, #0
 8006fc4:	d03c      	beq.n	8007040 <pool_func_mp_array_integer_INT8+0x10c>
 8006fc6:	f1b9 0f00 	cmp.w	r9, #0
 8006fca:	d039      	beq.n	8007040 <pool_func_mp_array_integer_INT8+0x10c>
 8006fcc:	886b      	ldrh	r3, [r5, #2]
 8006fce:	9311      	str	r3, [sp, #68]	; 0x44
 8006fd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fd2:	b11b      	cbz	r3, 8006fdc <pool_func_mp_array_integer_INT8+0xa8>
 8006fd4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006fd8:	f993 3000 	ldrsb.w	r3, [r3]
 8006fdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe4:	da5e      	bge.n	80070a4 <pool_func_mp_array_integer_INT8+0x170>
 8006fe6:	e9cd 4309 	strd	r4, r3, [sp, #36]	; 0x24
 8006fea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fec:	9304      	str	r3, [sp, #16]
 8006fee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ff0:	9303      	str	r3, [sp, #12]
 8006ff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ff4:	9302      	str	r3, [sp, #8]
 8006ff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ff8:	e9cd e807 	strd	lr, r8, [sp, #28]
 8006ffc:	e9cd a300 	strd	sl, r3, [sp]
 8007000:	e9cd b705 	strd	fp, r7, [sp, #20]
 8007004:	4613      	mov	r3, r2
 8007006:	4662      	mov	r2, ip
 8007008:	f001 f91c 	bl	8008244 <forward_lite_maxpool_is8os8_scaleneg>
 800700c:	b013      	add	sp, #76	; 0x4c
 800700e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007012:	2d00      	cmp	r5, #0
 8007014:	d040      	beq.n	8007098 <pool_func_mp_array_integer_INT8+0x164>
 8007016:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800701a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8007100 <pool_func_mp_array_integer_INT8+0x1cc>
 800701e:	f1b9 0f00 	cmp.w	r9, #0
 8007022:	d1b9      	bne.n	8006f98 <pool_func_mp_array_integer_INT8+0x64>
 8007024:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007100 <pool_func_mp_array_integer_INT8+0x1cc>
 8007028:	6880      	ldr	r0, [r0, #8]
 800702a:	6889      	ldr	r1, [r1, #8]
 800702c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8007030:	2e00      	cmp	r6, #0
 8007032:	d062      	beq.n	80070fa <pool_func_mp_array_integer_INT8+0x1c6>
 8007034:	8863      	ldrh	r3, [r4, #2]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d04a      	beq.n	80070d0 <pool_func_mp_array_integer_INT8+0x19c>
 800703a:	6873      	ldr	r3, [r6, #4]
 800703c:	f993 4000 	ldrsb.w	r4, [r3]
 8007040:	2300      	movs	r3, #0
 8007042:	e7cb      	b.n	8006fdc <pool_func_mp_array_integer_INT8+0xa8>
 8007044:	2d00      	cmp	r5, #0
 8007046:	d045      	beq.n	80070d4 <pool_func_mp_array_integer_INT8+0x1a0>
 8007048:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800704c:	f1b9 0f00 	cmp.w	r9, #0
 8007050:	d022      	beq.n	8007098 <pool_func_mp_array_integer_INT8+0x164>
 8007052:	886b      	ldrh	r3, [r5, #2]
 8007054:	9311      	str	r3, [sp, #68]	; 0x44
 8007056:	2b00      	cmp	r3, #0
 8007058:	d143      	bne.n	80070e2 <pool_func_mp_array_integer_INT8+0x1ae>
 800705a:	eddf 7a29 	vldr	s15, [pc, #164]	; 8007100 <pool_func_mp_array_integer_INT8+0x1cc>
 800705e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8007100 <pool_func_mp_array_integer_INT8+0x1cc>
 8007062:	6880      	ldr	r0, [r0, #8]
 8007064:	6889      	ldr	r1, [r1, #8]
 8007066:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800706a:	2c00      	cmp	r4, #0
 800706c:	d0e8      	beq.n	8007040 <pool_func_mp_array_integer_INT8+0x10c>
 800706e:	6866      	ldr	r6, [r4, #4]
 8007070:	2e00      	cmp	r6, #0
 8007072:	d19f      	bne.n	8006fb4 <pool_func_mp_array_integer_INT8+0x80>
 8007074:	4634      	mov	r4, r6
 8007076:	e7ab      	b.n	8006fd0 <pool_func_mp_array_integer_INT8+0x9c>
 8007078:	eddf 7a21 	vldr	s15, [pc, #132]	; 8007100 <pool_func_mp_array_integer_INT8+0x1cc>
 800707c:	2d00      	cmp	r5, #0
 800707e:	d186      	bne.n	8006f8e <pool_func_mp_array_integer_INT8+0x5a>
 8007080:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8007100 <pool_func_mp_array_integer_INT8+0x1cc>
 8007084:	6880      	ldr	r0, [r0, #8]
 8007086:	6889      	ldr	r1, [r1, #8]
 8007088:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800708c:	f1b9 0f00 	cmp.w	r9, #0
 8007090:	d12e      	bne.n	80070f0 <pool_func_mp_array_integer_INT8+0x1bc>
 8007092:	464c      	mov	r4, r9
 8007094:	464b      	mov	r3, r9
 8007096:	e7a1      	b.n	8006fdc <pool_func_mp_array_integer_INT8+0xa8>
 8007098:	2400      	movs	r4, #0
 800709a:	6880      	ldr	r0, [r0, #8]
 800709c:	6889      	ldr	r1, [r1, #8]
 800709e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8007104 <pool_func_mp_array_integer_INT8+0x1d0>
 80070a2:	4623      	mov	r3, r4
 80070a4:	e9cd 4309 	strd	r4, r3, [sp, #36]	; 0x24
 80070a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80070aa:	9304      	str	r3, [sp, #16]
 80070ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070ae:	9303      	str	r3, [sp, #12]
 80070b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070b2:	9302      	str	r3, [sp, #8]
 80070b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070b6:	e9cd e807 	strd	lr, r8, [sp, #28]
 80070ba:	e9cd a300 	strd	sl, r3, [sp]
 80070be:	e9cd b705 	strd	fp, r7, [sp, #20]
 80070c2:	4613      	mov	r3, r2
 80070c4:	4662      	mov	r2, ip
 80070c6:	f000 ffdb 	bl	8008080 <forward_lite_maxpool_is8os8_scalepos>
 80070ca:	b013      	add	sp, #76	; 0x4c
 80070cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d0:	2400      	movs	r4, #0
 80070d2:	e778      	b.n	8006fc6 <pool_func_mp_array_integer_INT8+0x92>
 80070d4:	6880      	ldr	r0, [r0, #8]
 80070d6:	6889      	ldr	r1, [r1, #8]
 80070d8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8007104 <pool_func_mp_array_integer_INT8+0x1d0>
 80070dc:	462c      	mov	r4, r5
 80070de:	462b      	mov	r3, r5
 80070e0:	e7e0      	b.n	80070a4 <pool_func_mp_array_integer_INT8+0x170>
 80070e2:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8007100 <pool_func_mp_array_integer_INT8+0x1cc>
 80070e6:	6880      	ldr	r0, [r0, #8]
 80070e8:	6889      	ldr	r1, [r1, #8]
 80070ea:	eef0 7a40 	vmov.f32	s15, s0
 80070ee:	e771      	b.n	8006fd4 <pool_func_mp_array_integer_INT8+0xa0>
 80070f0:	6874      	ldr	r4, [r6, #4]
 80070f2:	462b      	mov	r3, r5
 80070f4:	f994 4000 	ldrsb.w	r4, [r4]
 80070f8:	e770      	b.n	8006fdc <pool_func_mp_array_integer_INT8+0xa8>
 80070fa:	4634      	mov	r4, r6
 80070fc:	4633      	mov	r3, r6
 80070fe:	e76d      	b.n	8006fdc <pool_func_mp_array_integer_INT8+0xa8>
 8007100:	00000000 	.word	0x00000000
 8007104:	7fc00000 	.word	0x7fc00000

08007108 <forward_ap_integer_INT8>:
 8007108:	6983      	ldr	r3, [r0, #24]
 800710a:	881a      	ldrh	r2, [r3, #0]
 800710c:	2a00      	cmp	r2, #0
 800710e:	d074      	beq.n	80071fa <forward_ap_integer_INT8+0xf2>
 8007110:	6859      	ldr	r1, [r3, #4]
 8007112:	684b      	ldr	r3, [r1, #4]
 8007114:	b103      	cbz	r3, 8007118 <forward_ap_integer_INT8+0x10>
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2a01      	cmp	r2, #1
 800711a:	f000 80e0 	beq.w	80072de <forward_ap_integer_INT8+0x1d6>
 800711e:	690a      	ldr	r2, [r1, #16]
 8007120:	2a00      	cmp	r2, #0
 8007122:	f000 80df 	beq.w	80072e4 <forward_ap_integer_INT8+0x1dc>
 8007126:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712a:	68de      	ldr	r6, [r3, #12]
 800712c:	6811      	ldr	r1, [r2, #0]
 800712e:	6b07      	ldr	r7, [r0, #48]	; 0x30
 8007130:	681c      	ldr	r4, [r3, #0]
 8007132:	f8d3 b018 	ldr.w	fp, [r3, #24]
 8007136:	f8b6 8004 	ldrh.w	r8, [r6, #4]
 800713a:	8932      	ldrh	r2, [r6, #8]
 800713c:	89b3      	ldrh	r3, [r6, #12]
 800713e:	8b86      	ldrh	r6, [r0, #28]
 8007140:	68cd      	ldr	r5, [r1, #12]
 8007142:	f8d1 a018 	ldr.w	sl, [r1, #24]
 8007146:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 800714a:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
 800714e:	b095      	sub	sp, #84	; 0x54
 8007150:	960d      	str	r6, [sp, #52]	; 0x34
 8007152:	8c06      	ldrh	r6, [r0, #32]
 8007154:	960e      	str	r6, [sp, #56]	; 0x38
 8007156:	88be      	ldrh	r6, [r7, #4]
 8007158:	960f      	str	r6, [sp, #60]	; 0x3c
 800715a:	883e      	ldrh	r6, [r7, #0]
 800715c:	9610      	str	r6, [sp, #64]	; 0x40
 800715e:	8c86      	ldrh	r6, [r0, #36]	; 0x24
 8007160:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 8007162:	9611      	str	r6, [sp, #68]	; 0x44
 8007164:	9012      	str	r0, [sp, #72]	; 0x48
 8007166:	680e      	ldr	r6, [r1, #0]
 8007168:	2c00      	cmp	r4, #0
 800716a:	d060      	beq.n	800722e <forward_ap_integer_INT8+0x126>
 800716c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8007170:	f1b9 0f00 	cmp.w	r9, #0
 8007174:	d043      	beq.n	80071fe <forward_ap_integer_INT8+0xf6>
 8007176:	8865      	ldrh	r5, [r4, #2]
 8007178:	2d00      	cmp	r5, #0
 800717a:	d06e      	beq.n	800725a <forward_ap_integer_INT8+0x152>
 800717c:	f8d9 1000 	ldr.w	r1, [r9]
 8007180:	ed91 0a00 	vldr	s0, [r1]
 8007184:	2e00      	cmp	r6, #0
 8007186:	d06c      	beq.n	8007262 <forward_ap_integer_INT8+0x15a>
 8007188:	6877      	ldr	r7, [r6, #4]
 800718a:	2f00      	cmp	r7, #0
 800718c:	d03e      	beq.n	800720c <forward_ap_integer_INT8+0x104>
 800718e:	8871      	ldrh	r1, [r6, #2]
 8007190:	9113      	str	r1, [sp, #76]	; 0x4c
 8007192:	2900      	cmp	r1, #0
 8007194:	d053      	beq.n	800723e <forward_ap_integer_INT8+0x136>
 8007196:	683d      	ldr	r5, [r7, #0]
 8007198:	f8db 0008 	ldr.w	r0, [fp, #8]
 800719c:	f8da 1008 	ldr.w	r1, [sl, #8]
 80071a0:	edd5 0a00 	vldr	s1, [r5]
 80071a4:	f1b9 0f00 	cmp.w	r9, #0
 80071a8:	d055      	beq.n	8007256 <forward_ap_integer_INT8+0x14e>
 80071aa:	8864      	ldrh	r4, [r4, #2]
 80071ac:	2c00      	cmp	r4, #0
 80071ae:	d039      	beq.n	8007224 <forward_ap_integer_INT8+0x11c>
 80071b0:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80071b4:	f994 4000 	ldrsb.w	r4, [r4]
 80071b8:	2e00      	cmp	r6, #0
 80071ba:	d036      	beq.n	800722a <forward_ap_integer_INT8+0x122>
 80071bc:	2f00      	cmp	r7, #0
 80071be:	d034      	beq.n	800722a <forward_ap_integer_INT8+0x122>
 80071c0:	8875      	ldrh	r5, [r6, #2]
 80071c2:	9513      	str	r5, [sp, #76]	; 0x4c
 80071c4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80071c6:	b115      	cbz	r5, 80071ce <forward_ap_integer_INT8+0xc6>
 80071c8:	687d      	ldr	r5, [r7, #4]
 80071ca:	f995 5000 	ldrsb.w	r5, [r5]
 80071ce:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 80071d2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80071d4:	9406      	str	r4, [sp, #24]
 80071d6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80071d8:	9405      	str	r4, [sp, #20]
 80071da:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80071dc:	9404      	str	r4, [sp, #16]
 80071de:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80071e0:	9403      	str	r4, [sp, #12]
 80071e2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80071e4:	9402      	str	r4, [sp, #8]
 80071e6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80071e8:	e9cd ce07 	strd	ip, lr, [sp, #28]
 80071ec:	e9cd 8400 	strd	r8, r4, [sp]
 80071f0:	f006 f982 	bl	800d4f8 <st_int8_avepool>
 80071f4:	b015      	add	sp, #84	; 0x54
 80071f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071fa:	6853      	ldr	r3, [r2, #4]
 80071fc:	deff      	udf	#255	; 0xff
 80071fe:	2e00      	cmp	r6, #0
 8007200:	d039      	beq.n	8007276 <forward_ap_integer_INT8+0x16e>
 8007202:	6877      	ldr	r7, [r6, #4]
 8007204:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80072e8 <forward_ap_integer_INT8+0x1e0>
 8007208:	2f00      	cmp	r7, #0
 800720a:	d1c0      	bne.n	800718e <forward_ap_integer_INT8+0x86>
 800720c:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007210:	f8da 1008 	ldr.w	r1, [sl, #8]
 8007214:	f1b9 0f00 	cmp.w	r9, #0
 8007218:	d05c      	beq.n	80072d4 <forward_ap_integer_INT8+0x1cc>
 800721a:	8864      	ldrh	r4, [r4, #2]
 800721c:	2c00      	cmp	r4, #0
 800721e:	d152      	bne.n	80072c6 <forward_ap_integer_INT8+0x1be>
 8007220:	eddf 0a31 	vldr	s1, [pc, #196]	; 80072e8 <forward_ap_integer_INT8+0x1e0>
 8007224:	2400      	movs	r4, #0
 8007226:	2f00      	cmp	r7, #0
 8007228:	d1ca      	bne.n	80071c0 <forward_ap_integer_INT8+0xb8>
 800722a:	2500      	movs	r5, #0
 800722c:	e7cf      	b.n	80071ce <forward_ap_integer_INT8+0xc6>
 800722e:	b316      	cbz	r6, 8007276 <forward_ap_integer_INT8+0x16e>
 8007230:	6877      	ldr	r7, [r6, #4]
 8007232:	b35f      	cbz	r7, 800728c <forward_ap_integer_INT8+0x184>
 8007234:	8871      	ldrh	r1, [r6, #2]
 8007236:	9113      	str	r1, [sp, #76]	; 0x4c
 8007238:	bb99      	cbnz	r1, 80072a2 <forward_ap_integer_INT8+0x19a>
 800723a:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 80072e8 <forward_ap_integer_INT8+0x1e0>
 800723e:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007242:	f8da 1008 	ldr.w	r1, [sl, #8]
 8007246:	b194      	cbz	r4, 800726e <forward_ap_integer_INT8+0x166>
 8007248:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800724c:	eddf 0a26 	vldr	s1, [pc, #152]	; 80072e8 <forward_ap_integer_INT8+0x1e0>
 8007250:	f1b9 0f00 	cmp.w	r9, #0
 8007254:	d1a9      	bne.n	80071aa <forward_ap_integer_INT8+0xa2>
 8007256:	464c      	mov	r4, r9
 8007258:	e7b4      	b.n	80071c4 <forward_ap_integer_INT8+0xbc>
 800725a:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80072e8 <forward_ap_integer_INT8+0x1e0>
 800725e:	2e00      	cmp	r6, #0
 8007260:	d192      	bne.n	8007188 <forward_ap_integer_INT8+0x80>
 8007262:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007266:	f8da 1008 	ldr.w	r1, [sl, #8]
 800726a:	bb25      	cbnz	r5, 80072b6 <forward_ap_integer_INT8+0x1ae>
 800726c:	462c      	mov	r4, r5
 800726e:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80072e8 <forward_ap_integer_INT8+0x1e0>
 8007272:	4625      	mov	r5, r4
 8007274:	e7ab      	b.n	80071ce <forward_ap_integer_INT8+0xc6>
 8007276:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80072e8 <forward_ap_integer_INT8+0x1e0>
 800727a:	f8db 0008 	ldr.w	r0, [fp, #8]
 800727e:	f8da 1008 	ldr.w	r1, [sl, #8]
 8007282:	4634      	mov	r4, r6
 8007284:	eef0 0a40 	vmov.f32	s1, s0
 8007288:	4635      	mov	r5, r6
 800728a:	e7a0      	b.n	80071ce <forward_ap_integer_INT8+0xc6>
 800728c:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80072e8 <forward_ap_integer_INT8+0x1e0>
 8007290:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007294:	f8da 1008 	ldr.w	r1, [sl, #8]
 8007298:	463c      	mov	r4, r7
 800729a:	eef0 0a40 	vmov.f32	s1, s0
 800729e:	463d      	mov	r5, r7
 80072a0:	e795      	b.n	80071ce <forward_ap_integer_INT8+0xc6>
 80072a2:	683d      	ldr	r5, [r7, #0]
 80072a4:	f8db 0008 	ldr.w	r0, [fp, #8]
 80072a8:	f8da 1008 	ldr.w	r1, [sl, #8]
 80072ac:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80072e8 <forward_ap_integer_INT8+0x1e0>
 80072b0:	edd5 0a00 	vldr	s1, [r5]
 80072b4:	e788      	b.n	80071c8 <forward_ap_integer_INT8+0xc0>
 80072b6:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80072ba:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80072e8 <forward_ap_integer_INT8+0x1e0>
 80072be:	f994 4000 	ldrsb.w	r4, [r4]
 80072c2:	4635      	mov	r5, r6
 80072c4:	e783      	b.n	80071ce <forward_ap_integer_INT8+0xc6>
 80072c6:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80072ca:	eddf 0a07 	vldr	s1, [pc, #28]	; 80072e8 <forward_ap_integer_INT8+0x1e0>
 80072ce:	f994 4000 	ldrsb.w	r4, [r4]
 80072d2:	e7aa      	b.n	800722a <forward_ap_integer_INT8+0x122>
 80072d4:	eddf 0a04 	vldr	s1, [pc, #16]	; 80072e8 <forward_ap_integer_INT8+0x1e0>
 80072d8:	464c      	mov	r4, r9
 80072da:	464d      	mov	r5, r9
 80072dc:	e777      	b.n	80071ce <forward_ap_integer_INT8+0xc6>
 80072de:	2300      	movs	r3, #0
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	deff      	udf	#255	; 0xff
 80072e4:	68d3      	ldr	r3, [r2, #12]
 80072e6:	deff      	udf	#255	; 0xff
 80072e8:	00000000 	.word	0x00000000

080072ec <forward_lite_conv2d_deep_3x3_sssa8_ch>:
 80072ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f0:	b097      	sub	sp, #92	; 0x5c
 80072f2:	461d      	mov	r5, r3
 80072f4:	9311      	str	r3, [sp, #68]	; 0x44
 80072f6:	f99d 3090 	ldrsb.w	r3, [sp, #144]	; 0x90
 80072fa:	f8bd 8084 	ldrh.w	r8, [sp, #132]	; 0x84
 80072fe:	f8dd 90ac 	ldr.w	r9, [sp, #172]	; 0xac
 8007302:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007304:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8007306:	4604      	mov	r4, r0
 8007308:	005b      	lsls	r3, r3, #1
 800730a:	f8bd 00a0 	ldrh.w	r0, [sp, #160]	; 0xa0
 800730e:	9015      	str	r0, [sp, #84]	; 0x54
 8007310:	3301      	adds	r3, #1
 8007312:	eb09 00c8 	add.w	r0, r9, r8, lsl #3
 8007316:	f849 3028 	str.w	r3, [r9, r8, lsl #2]
 800731a:	900f      	str	r0, [sp, #60]	; 0x3c
 800731c:	f99d 308c 	ldrsb.w	r3, [sp, #140]	; 0x8c
 8007320:	9312      	str	r3, [sp, #72]	; 0x48
 8007322:	eb09 0088 	add.w	r0, r9, r8, lsl #2
 8007326:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800732a:	9010      	str	r0, [sp, #64]	; 0x40
 800732c:	eba2 0248 	sub.w	r2, r2, r8, lsl #1
 8007330:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8007332:	9313      	str	r3, [sp, #76]	; 0x4c
 8007334:	468a      	mov	sl, r1
 8007336:	444a      	add	r2, r9
 8007338:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 800733c:	920e      	str	r2, [sp, #56]	; 0x38
 800733e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007340:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007342:	9314      	str	r3, [sp, #80]	; 0x50
 8007344:	fb15 f70a 	smulbb	r7, r5, sl
 8007348:	b338      	cbz	r0, 800739a <forward_lite_conv2d_deep_3x3_sssa8_ch+0xae>
 800734a:	b2bf      	uxth	r7, r7
 800734c:	2500      	movs	r5, #0
 800734e:	fb08 fb03 	mul.w	fp, r8, r3
 8007352:	2300      	movs	r3, #0
 8007354:	930c      	str	r3, [sp, #48]	; 0x30
 8007356:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007358:	930b      	str	r3, [sp, #44]	; 0x2c
 800735a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800735c:	9222      	str	r2, [sp, #136]	; 0x88
 800735e:	e9cd a309 	strd	sl, r3, [sp, #36]	; 0x24
 8007362:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007364:	9308      	str	r3, [sp, #32]
 8007366:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007368:	9120      	str	r1, [sp, #128]	; 0x80
 800736a:	e9cd 7306 	strd	r7, r3, [sp, #24]
 800736e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007370:	9305      	str	r3, [sp, #20]
 8007372:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007374:	9304      	str	r3, [sp, #16]
 8007376:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007378:	e9cd 8302 	strd	r8, r3, [sp, #8]
 800737c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800737e:	4620      	mov	r0, r4
 8007380:	e9cd 9300 	strd	r9, r3, [sp]
 8007384:	4633      	mov	r3, r6
 8007386:	f005 f9b5 	bl	800c6f4 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t>
 800738a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800738c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800738e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007390:	3501      	adds	r5, #1
 8007392:	42ab      	cmp	r3, r5
 8007394:	445e      	add	r6, fp
 8007396:	443c      	add	r4, r7
 8007398:	d1db      	bne.n	8007352 <forward_lite_conv2d_deep_3x3_sssa8_ch+0x66>
 800739a:	b017      	add	sp, #92	; 0x5c
 800739c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080073a0 <forward_lite_conv2d_deep_sssa8_ch>:
 80073a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a4:	b0a3      	sub	sp, #140	; 0x8c
 80073a6:	e9dd 2a3b 	ldrd	r2, sl, [sp, #236]	; 0xec
 80073aa:	f8bd 70b4 	ldrh.w	r7, [sp, #180]	; 0xb4
 80073ae:	911c      	str	r1, [sp, #112]	; 0x70
 80073b0:	461d      	mov	r5, r3
 80073b2:	460e      	mov	r6, r1
 80073b4:	eba2 0147 	sub.w	r1, r2, r7, lsl #1
 80073b8:	4604      	mov	r4, r0
 80073ba:	eb0a 0001 	add.w	r0, sl, r1
 80073be:	fb15 f106 	smulbb	r1, r5, r6
 80073c2:	b289      	uxth	r1, r1
 80073c4:	9113      	str	r1, [sp, #76]	; 0x4c
 80073c6:	f8bd 10b8 	ldrh.w	r1, [sp, #184]	; 0xb8
 80073ca:	9117      	str	r1, [sp, #92]	; 0x5c
 80073cc:	f8bd 10bc 	ldrh.w	r1, [sp, #188]	; 0xbc
 80073d0:	9118      	str	r1, [sp, #96]	; 0x60
 80073d2:	f8bd 10c0 	ldrh.w	r1, [sp, #192]	; 0xc0
 80073d6:	9316      	str	r3, [sp, #88]	; 0x58
 80073d8:	911d      	str	r1, [sp, #116]	; 0x74
 80073da:	f99d 30d0 	ldrsb.w	r3, [sp, #208]	; 0xd0
 80073de:	f8bd 10c4 	ldrh.w	r1, [sp, #196]	; 0xc4
 80073e2:	9114      	str	r1, [sp, #80]	; 0x50
 80073e4:	f99d 10cc 	ldrsb.w	r1, [sp, #204]	; 0xcc
 80073e8:	911e      	str	r1, [sp, #120]	; 0x78
 80073ea:	005b      	lsls	r3, r3, #1
 80073ec:	f89d 10d4 	ldrb.w	r1, [sp, #212]	; 0xd4
 80073f0:	911f      	str	r1, [sp, #124]	; 0x7c
 80073f2:	3301      	adds	r3, #1
 80073f4:	f8bd 10dc 	ldrh.w	r1, [sp, #220]	; 0xdc
 80073f8:	f84a 3027 	str.w	r3, [sl, r7, lsl #2]
 80073fc:	9115      	str	r1, [sp, #84]	; 0x54
 80073fe:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
 8007402:	f8bd 10e0 	ldrh.w	r1, [sp, #224]	; 0xe0
 8007406:	9120      	str	r1, [sp, #128]	; 0x80
 8007408:	eb0a 01c7 	add.w	r1, sl, r7, lsl #3
 800740c:	9119      	str	r1, [sp, #100]	; 0x64
 800740e:	2b01      	cmp	r3, #1
 8007410:	eb0a 0187 	add.w	r1, sl, r7, lsl #2
 8007414:	901a      	str	r0, [sp, #104]	; 0x68
 8007416:	f8dd 80b0 	ldr.w	r8, [sp, #176]	; 0xb0
 800741a:	f8dd 90c8 	ldr.w	r9, [sp, #200]	; 0xc8
 800741e:	911b      	str	r1, [sp, #108]	; 0x6c
 8007420:	4628      	mov	r0, r5
 8007422:	9d36      	ldr	r5, [sp, #216]	; 0xd8
 8007424:	d043      	beq.n	80074ae <forward_lite_conv2d_deep_sssa8_ch+0x10e>
 8007426:	2300      	movs	r3, #0
 8007428:	9321      	str	r3, [sp, #132]	; 0x84
 800742a:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800742c:	2b00      	cmp	r3, #0
 800742e:	d03b      	beq.n	80074a8 <forward_lite_conv2d_deep_sssa8_ch+0x108>
 8007430:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007432:	fb07 fb03 	mul.w	fp, r7, r3
 8007436:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 800743a:	4641      	mov	r1, r8
 800743c:	fb02 f303 	mul.w	r3, r2, r3
 8007440:	f8dd 80e4 	ldr.w	r8, [sp, #228]	; 0xe4
 8007444:	464a      	mov	r2, r9
 8007446:	2600      	movs	r6, #0
 8007448:	46d1      	mov	r9, sl
 800744a:	46ba      	mov	sl, r7
 800744c:	461f      	mov	r7, r3
 800744e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007450:	930e      	str	r3, [sp, #56]	; 0x38
 8007452:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007454:	930d      	str	r3, [sp, #52]	; 0x34
 8007456:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007458:	930c      	str	r3, [sp, #48]	; 0x30
 800745a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800745c:	930b      	str	r3, [sp, #44]	; 0x2c
 800745e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007460:	930a      	str	r3, [sp, #40]	; 0x28
 8007462:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007464:	9309      	str	r3, [sp, #36]	; 0x24
 8007466:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007468:	9308      	str	r3, [sp, #32]
 800746a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800746c:	9307      	str	r3, [sp, #28]
 800746e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007470:	9306      	str	r3, [sp, #24]
 8007472:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007474:	9305      	str	r3, [sp, #20]
 8007476:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007478:	9304      	str	r3, [sp, #16]
 800747a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800747c:	e9cd a302 	strd	sl, r3, [sp, #8]
 8007480:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007482:	e9cd 9300 	strd	r9, r3, [sp]
 8007486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007488:	9310      	str	r3, [sp, #64]	; 0x40
 800748a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800748c:	930f      	str	r3, [sp, #60]	; 0x3c
 800748e:	4620      	mov	r0, r4
 8007490:	462b      	mov	r3, r5
 8007492:	3601      	adds	r6, #1
 8007494:	9232      	str	r2, [sp, #200]	; 0xc8
 8007496:	912c      	str	r1, [sp, #176]	; 0xb0
 8007498:	f004 fbc0 	bl	800bc1c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t>
 800749c:	45b0      	cmp	r8, r6
 800749e:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80074a0:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80074a2:	445d      	add	r5, fp
 80074a4:	443c      	add	r4, r7
 80074a6:	d1d2      	bne.n	800744e <forward_lite_conv2d_deep_sssa8_ch+0xae>
 80074a8:	b023      	add	sp, #140	; 0x8c
 80074aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ae:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80074b0:	fb00 f307 	mul.w	r3, r0, r7
 80074b4:	fb01 f303 	mul.w	r3, r1, r3
 80074b8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80074ba:	fb01 f303 	mul.w	r3, r1, r3
 80074be:	f06f 0109 	mvn.w	r1, #9
 80074c2:	fb01 2207 	mla	r2, r1, r7, r2
 80074c6:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 80074ca:	dbac      	blt.n	8007426 <forward_lite_conv2d_deep_sssa8_ch+0x86>
 80074cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80074d0:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80074d2:	9601      	str	r6, [sp, #4]
 80074d4:	fb00 f303 	mul.w	r3, r0, r3
 80074d8:	fb03 f201 	mul.w	r2, r3, r1
 80074dc:	9200      	str	r2, [sp, #0]
 80074de:	4640      	mov	r0, r8
 80074e0:	460a      	mov	r2, r1
 80074e2:	4639      	mov	r1, r7
 80074e4:	f004 fb5a 	bl	800bb9c <st_sssa8_ch_fullW_prefetch>
 80074e8:	9621      	str	r6, [sp, #132]	; 0x84
 80074ea:	e79e      	b.n	800742a <forward_lite_conv2d_deep_sssa8_ch+0x8a>

080074ec <forward_lite_conv2d_sssa8_ch>:
 80074ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f0:	ed2d 8b08 	vpush	{d8-d11}
 80074f4:	b0d5      	sub	sp, #340	; 0x154
 80074f6:	4699      	mov	r9, r3
 80074f8:	f8dd a1d8 	ldr.w	sl, [sp, #472]	; 0x1d8
 80074fc:	f8bd 319c 	ldrh.w	r3, [sp, #412]	; 0x19c
 8007500:	9215      	str	r2, [sp, #84]	; 0x54
 8007502:	9a77      	ldr	r2, [sp, #476]	; 0x1dc
 8007504:	f8bd 61d0 	ldrh.w	r6, [sp, #464]	; 0x1d0
 8007508:	9013      	str	r0, [sp, #76]	; 0x4c
 800750a:	ebaa 0543 	sub.w	r5, sl, r3, lsl #1
 800750e:	4415      	add	r5, r2
 8007510:	f8bd 21a0 	ldrh.w	r2, [sp, #416]	; 0x1a0
 8007514:	9226      	str	r2, [sp, #152]	; 0x98
 8007516:	f8bd 21a4 	ldrh.w	r2, [sp, #420]	; 0x1a4
 800751a:	9229      	str	r2, [sp, #164]	; 0xa4
 800751c:	f8bd 21a8 	ldrh.w	r2, [sp, #424]	; 0x1a8
 8007520:	9211      	str	r2, [sp, #68]	; 0x44
 8007522:	4688      	mov	r8, r1
 8007524:	f8bd 21ac 	ldrh.w	r2, [sp, #428]	; 0x1ac
 8007528:	f89d 11c4 	ldrb.w	r1, [sp, #452]	; 0x1c4
 800752c:	9225      	str	r2, [sp, #148]	; 0x94
 800752e:	f8bd 21b0 	ldrh.w	r2, [sp, #432]	; 0x1b0
 8007532:	f8bd 01cc 	ldrh.w	r0, [sp, #460]	; 0x1cc
 8007536:	9220      	str	r2, [sp, #128]	; 0x80
 8007538:	ee09 3a90 	vmov	s19, r3
 800753c:	f8bd 21b4 	ldrh.w	r2, [sp, #436]	; 0x1b4
 8007540:	9628      	str	r6, [sp, #160]	; 0xa0
 8007542:	005e      	lsls	r6, r3, #1
 8007544:	07cb      	lsls	r3, r1, #31
 8007546:	922a      	str	r2, [sp, #168]	; 0xa8
 8007548:	f99d b1bc 	ldrsb.w	fp, [sp, #444]	; 0x1bc
 800754c:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
 800754e:	f99d 41c0 	ldrsb.w	r4, [sp, #448]	; 0x1c0
 8007552:	f8bd 71d4 	ldrh.w	r7, [sp, #468]	; 0x1d4
 8007556:	9124      	str	r1, [sp, #144]	; 0x90
 8007558:	9010      	str	r0, [sp, #64]	; 0x40
 800755a:	f140 8463 	bpl.w	8007e24 <forward_lite_conv2d_sssa8_ch+0x938>
 800755e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8007560:	1c83      	adds	r3, r0, #2
 8007562:	3102      	adds	r1, #2
 8007564:	fb01 f303 	mul.w	r3, r1, r3
 8007568:	931c      	str	r3, [sp, #112]	; 0x70
 800756a:	9b77      	ldr	r3, [sp, #476]	; 0x1dc
 800756c:	9966      	ldr	r1, [sp, #408]	; 0x198
 800756e:	9201      	str	r2, [sp, #4]
 8007570:	e9cd b302 	strd	fp, r3, [sp, #8]
 8007574:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	ee19 2a90 	vmov	r2, s19
 800757c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800757e:	4648      	mov	r0, r9
 8007580:	f002 faac 	bl	8009adc <st_sssa8_ch_convolve_rank1upd>
 8007584:	ee19 2a90 	vmov	r2, s19
 8007588:	9977      	ldr	r1, [sp, #476]	; 0x1dc
 800758a:	9826      	ldr	r0, [sp, #152]	; 0x98
 800758c:	18b3      	adds	r3, r6, r2
 800758e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8007592:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007594:	9119      	str	r1, [sp, #100]	; 0x64
 8007596:	fb10 f303 	smulbb	r3, r0, r3
 800759a:	fb13 f309 	smulbb	r3, r3, r9
 800759e:	b29b      	uxth	r3, r3
 80075a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80075a2:	ebc2 7342 	rsb	r3, r2, r2, lsl #29
 80075a6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80075aa:	ee0a 3a90 	vmov	s21, r3
 80075ae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80075b2:	9323      	str	r3, [sp, #140]	; 0x8c
 80075b4:	b1d2      	cbz	r2, 80075ec <forward_lite_conv2d_sssa8_ch+0x100>
 80075b6:	1d19      	adds	r1, r3, #4
 80075b8:	eb05 0c06 	add.w	ip, r5, r6
 80075bc:	f04f 0e01 	mov.w	lr, #1
 80075c0:	f935 3b02 	ldrsh.w	r3, [r5], #2
 80075c4:	1e5a      	subs	r2, r3, #1
 80075c6:	b292      	uxth	r2, r2
 80075c8:	fa0e f003 	lsl.w	r0, lr, r3
 80075cc:	2a14      	cmp	r2, #20
 80075ce:	fa04 f303 	lsl.w	r3, r4, r3
 80075d2:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 80075d6:	f200 818f 	bhi.w	80078f8 <forward_lite_conv2d_sssa8_ch+0x40c>
 80075da:	4565      	cmp	r5, ip
 80075dc:	f841 3c04 	str.w	r3, [r1, #-4]
 80075e0:	f101 0104 	add.w	r1, r1, #4
 80075e4:	d1ec      	bne.n	80075c0 <forward_lite_conv2d_sssa8_ch+0xd4>
 80075e6:	9b77      	ldr	r3, [sp, #476]	; 0x1dc
 80075e8:	eb03 050a 	add.w	r5, r3, sl
 80075ec:	1bab      	subs	r3, r5, r6
 80075ee:	9322      	str	r3, [sp, #136]	; 0x88
 80075f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075f2:	9335      	str	r3, [sp, #212]	; 0xd4
 80075f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075f6:	933a      	str	r3, [sp, #232]	; 0xe8
 80075f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80075fa:	9339      	str	r3, [sp, #228]	; 0xe4
 80075fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075fe:	934c      	str	r3, [sp, #304]	; 0x130
 8007600:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007602:	934d      	str	r3, [sp, #308]	; 0x134
 8007604:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007606:	934e      	str	r3, [sp, #312]	; 0x138
 8007608:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800760a:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800760c:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 800760e:	934f      	str	r3, [sp, #316]	; 0x13c
 8007610:	ab3c      	add	r3, sp, #240	; 0xf0
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	aa34      	add	r2, sp, #208	; 0xd0
 8007616:	ab38      	add	r3, sp, #224	; 0xe0
 8007618:	a94a      	add	r1, sp, #296	; 0x128
 800761a:	a840      	add	r0, sp, #256	; 0x100
 800761c:	943e      	str	r4, [sp, #248]	; 0xf8
 800761e:	953d      	str	r5, [sp, #244]	; 0xf4
 8007620:	f8cd 80d8 	str.w	r8, [sp, #216]	; 0xd8
 8007624:	f003 f93e 	bl	800a8a4 <ai_padding_opt_init>
 8007628:	ee19 2a90 	vmov	r2, s19
 800762c:	462b      	mov	r3, r5
 800762e:	fb05 f504 	mul.w	r5, r5, r4
 8007632:	fb09 fa04 	mul.w	sl, r9, r4
 8007636:	fb09 f405 	mul.w	r4, r9, r5
 800763a:	fb02 f404 	mul.w	r4, r2, r4
 800763e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007640:	fb0a f303 	mul.w	r3, sl, r3
 8007644:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007648:	ee0a 3a10 	vmov	s20, r3
 800764c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800764e:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8007652:	f003 0202 	and.w	r2, r3, #2
 8007656:	bfa8      	it	ge
 8007658:	f44f 6420 	movge.w	r4, #2560	; 0xa00
 800765c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007660:	2f01      	cmp	r7, #1
 8007662:	922f      	str	r2, [sp, #188]	; 0xbc
 8007664:	931e      	str	r3, [sp, #120]	; 0x78
 8007666:	f000 83c8 	beq.w	8007dfa <forward_lite_conv2d_sssa8_ch+0x90e>
 800766a:	2300      	movs	r3, #0
 800766c:	932e      	str	r3, [sp, #184]	; 0xb8
 800766e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007670:	2b01      	cmp	r3, #1
 8007672:	f240 8273 	bls.w	8007b5c <forward_lite_conv2d_sssa8_ch+0x670>
 8007676:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007678:	fbb4 f3f3 	udiv	r3, r4, r3
 800767c:	b29b      	uxth	r3, r3
 800767e:	4619      	mov	r1, r3
 8007680:	ee19 3a90 	vmov	r3, s19
 8007684:	4299      	cmp	r1, r3
 8007686:	bf28      	it	cs
 8007688:	4619      	movcs	r1, r3
 800768a:	fbb3 f2f1 	udiv	r2, r3, r1
 800768e:	fb01 3312 	mls	r3, r1, r2, r3
 8007692:	b29b      	uxth	r3, r3
 8007694:	b292      	uxth	r2, r2
 8007696:	911f      	str	r1, [sp, #124]	; 0x7c
 8007698:	922c      	str	r2, [sp, #176]	; 0xb0
 800769a:	2b00      	cmp	r3, #0
 800769c:	f040 8141 	bne.w	8007922 <forward_lite_conv2d_sssa8_ch+0x436>
 80076a0:	4613      	mov	r3, r2
 80076a2:	3a01      	subs	r2, #1
 80076a4:	b292      	uxth	r2, r2
 80076a6:	922c      	str	r2, [sp, #176]	; 0xb0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 823e 	beq.w	8007b2a <forward_lite_conv2d_sssa8_ch+0x63e>
 80076ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80076b0:	edcd 9a2d 	vstr	s19, [sp, #180]	; 0xb4
 80076b4:	fb09 f505 	mul.w	r5, r9, r5
 80076b8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80076bc:	fa0f f68b 	sxth.w	r6, fp
 80076c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80076c2:	f009 0303 	and.w	r3, r9, #3
 80076c6:	9312      	str	r3, [sp, #72]	; 0x48
 80076c8:	ea4f 0b49 	mov.w	fp, r9, lsl #1
 80076cc:	ea4f 034a 	mov.w	r3, sl, lsl #1
 80076d0:	ee09 9a10 	vmov	s18, r9
 80076d4:	ee0b 6a10 	vmov	s22, r6
 80076d8:	9318      	str	r3, [sp, #96]	; 0x60
 80076da:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 80076de:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80076e2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80076e4:	b953      	cbnz	r3, 80076fc <forward_lite_conv2d_sssa8_ch+0x210>
 80076e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f040 822f 	bne.w	8007b4c <forward_lite_conv2d_sssa8_ch+0x660>
 80076ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80076f0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80076f2:	9866      	ldr	r0, [sp, #408]	; 0x198
 80076f4:	ee1a 1a10 	vmov	r1, s20
 80076f8:	f003 f81c 	bl	800a734 <st_int8_to16_dual_interleaved>
 80076fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80076fe:	2b03      	cmp	r3, #3
 8007700:	f000 8218 	beq.w	8007b34 <forward_lite_conv2d_sssa8_ch+0x648>
 8007704:	9b72      	ldr	r3, [sp, #456]	; 0x1c8
 8007706:	931a      	str	r3, [sp, #104]	; 0x68
 8007708:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800770a:	2b00      	cmp	r3, #0
 800770c:	f000 80bf 	beq.w	800788e <forward_lite_conv2d_sssa8_ch+0x3a2>
 8007710:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007712:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007714:	425b      	negs	r3, r3
 8007716:	b29b      	uxth	r3, r3
 8007718:	2400      	movs	r4, #0
 800771a:	ee08 aa90 	vmov	s17, sl
 800771e:	9321      	str	r3, [sp, #132]	; 0x84
 8007720:	4626      	mov	r6, r4
 8007722:	a840      	add	r0, sp, #256	; 0x100
 8007724:	f003 f916 	bl	800a954 <ai_padding_opt_phase1>
 8007728:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800772a:	2b00      	cmp	r3, #0
 800772c:	f000 81f3 	beq.w	8007b16 <forward_lite_conv2d_sssa8_ch+0x62a>
 8007730:	b2a3      	uxth	r3, r4
 8007732:	9327      	str	r3, [sp, #156]	; 0x9c
 8007734:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8007738:	1a9b      	subs	r3, r3, r2
 800773a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800773c:	fb06 3302 	mla	r3, r6, r2, r3
 8007740:	930d      	str	r3, [sp, #52]	; 0x34
 8007742:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007744:	f9bd 2084 	ldrsh.w	r2, [sp, #132]	; 0x84
 8007748:	9216      	str	r2, [sp, #88]	; 0x58
 800774a:	425b      	negs	r3, r3
 800774c:	b29b      	uxth	r3, r3
 800774e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007750:	2300      	movs	r3, #0
 8007752:	930e      	str	r3, [sp, #56]	; 0x38
 8007754:	9314      	str	r3, [sp, #80]	; 0x50
 8007756:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 80e6 	beq.w	800792a <forward_lite_conv2d_sssa8_ch+0x43e>
 800775e:	3b01      	subs	r3, #1
 8007760:	9340      	str	r3, [sp, #256]	; 0x100
 8007762:	2301      	movs	r3, #1
 8007764:	f8ad 3126 	strh.w	r3, [sp, #294]	; 0x126
 8007768:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800776a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800776c:	4293      	cmp	r3, r2
 800776e:	f280 80ea 	bge.w	8007946 <forward_lite_conv2d_sssa8_ch+0x45a>
 8007772:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007774:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007776:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007778:	f8dd 90ac 	ldr.w	r9, [sp, #172]	; 0xac
 800777c:	fb01 3402 	mla	r4, r1, r2, r3
 8007780:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007782:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8007786:	1ae4      	subs	r4, r4, r3
 8007788:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800778c:	930f      	str	r3, [sp, #60]	; 0x3c
 800778e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007790:	ee19 7a10 	vmov	r7, s18
 8007794:	ee1b 8a10 	vmov	r8, s22
 8007798:	461e      	mov	r6, r3
 800779a:	4693      	mov	fp, r2
 800779c:	455c      	cmp	r4, fp
 800779e:	dd35      	ble.n	800780c <forward_lite_conv2d_sssa8_ch+0x320>
 80077a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077a2:	2e00      	cmp	r6, #0
 80077a4:	fb02 f203 	mul.w	r2, r2, r3
 80077a8:	920a      	str	r2, [sp, #40]	; 0x28
 80077aa:	f2c0 817c 	blt.w	8007aa6 <forward_lite_conv2d_sssa8_ch+0x5ba>
 80077ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077b0:	2a00      	cmp	r2, #0
 80077b2:	f000 8125 	beq.w	8007a00 <forward_lite_conv2d_sssa8_ch+0x514>
 80077b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80077b8:	429a      	cmp	r2, r3
 80077ba:	46da      	mov	sl, fp
 80077bc:	f340 80a4 	ble.w	8007908 <forward_lite_conv2d_sssa8_ch+0x41c>
 80077c0:	46dc      	mov	ip, fp
 80077c2:	961d      	str	r6, [sp, #116]	; 0x74
 80077c4:	e011      	b.n	80077ea <forward_lite_conv2d_sssa8_ch+0x2fe>
 80077c6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80077c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ca:	4566      	cmp	r6, ip
 80077cc:	4463      	add	r3, ip
 80077ce:	dd12      	ble.n	80077f6 <forward_lite_conv2d_sssa8_ch+0x30a>
 80077d0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80077d2:	f10a 0a01 	add.w	sl, sl, #1
 80077d6:	fa0f fa8a 	sxth.w	sl, sl
 80077da:	fb07 0003 	mla	r0, r7, r3, r0
 80077de:	f002 fe1d 	bl	800a41c <st_int8_to16_no_shift>
 80077e2:	45a2      	cmp	sl, r4
 80077e4:	444d      	add	r5, r9
 80077e6:	46d4      	mov	ip, sl
 80077e8:	da0f      	bge.n	800780a <forward_lite_conv2d_sssa8_ch+0x31e>
 80077ea:	f1ba 0f00 	cmp.w	sl, #0
 80077ee:	463a      	mov	r2, r7
 80077f0:	4629      	mov	r1, r5
 80077f2:	4640      	mov	r0, r8
 80077f4:	dae7      	bge.n	80077c6 <forward_lite_conv2d_sssa8_ch+0x2da>
 80077f6:	f10a 0a01 	add.w	sl, sl, #1
 80077fa:	fa0f fa8a 	sxth.w	sl, sl
 80077fe:	f006 f879 	bl	800d8f4 <arm_fill_q15>
 8007802:	45a2      	cmp	sl, r4
 8007804:	444d      	add	r5, r9
 8007806:	46d4      	mov	ip, sl
 8007808:	dbef      	blt.n	80077ea <forward_lite_conv2d_sssa8_ch+0x2fe>
 800780a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800780c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800780e:	3601      	adds	r6, #1
 8007810:	b236      	sxth	r6, r6
 8007812:	4296      	cmp	r6, r2
 8007814:	4633      	mov	r3, r6
 8007816:	dbc1      	blt.n	800779c <forward_lite_conv2d_sssa8_ch+0x2b0>
 8007818:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800781a:	42ab      	cmp	r3, r5
 800781c:	f000 809a 	beq.w	8007954 <forward_lite_conv2d_sssa8_ch+0x468>
 8007820:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007822:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007824:	3301      	adds	r3, #1
 8007826:	b21a      	sxth	r2, r3
 8007828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800782a:	920e      	str	r2, [sp, #56]	; 0x38
 800782c:	440b      	add	r3, r1
 800782e:	b29b      	uxth	r3, r3
 8007830:	930b      	str	r3, [sp, #44]	; 0x2c
 8007832:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007834:	9214      	str	r2, [sp, #80]	; 0x50
 8007836:	4293      	cmp	r3, r2
 8007838:	dc8d      	bgt.n	8007756 <forward_lite_conv2d_sssa8_ch+0x26a>
 800783a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800783c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800783e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8007840:	4413      	add	r3, r2
 8007842:	b29b      	uxth	r3, r3
 8007844:	3401      	adds	r4, #1
 8007846:	9321      	str	r3, [sp, #132]	; 0x84
 8007848:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800784a:	b224      	sxth	r4, r4
 800784c:	42a3      	cmp	r3, r4
 800784e:	4626      	mov	r6, r4
 8007850:	f73f af67 	bgt.w	8007722 <forward_lite_conv2d_sssa8_ch+0x236>
 8007854:	9919      	ldr	r1, [sp, #100]	; 0x64
 8007856:	42a9      	cmp	r1, r5
 8007858:	ee18 aa90 	vmov	sl, s17
 800785c:	d017      	beq.n	800788e <forward_lite_conv2d_sssa8_ch+0x3a2>
 800785e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007860:	9307      	str	r3, [sp, #28]
 8007862:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007864:	9306      	str	r3, [sp, #24]
 8007866:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007868:	9305      	str	r3, [sp, #20]
 800786a:	9b77      	ldr	r3, [sp, #476]	; 0x1dc
 800786c:	9304      	str	r3, [sp, #16]
 800786e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007870:	9303      	str	r3, [sp, #12]
 8007872:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007874:	9302      	str	r3, [sp, #8]
 8007876:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007878:	9301      	str	r3, [sp, #4]
 800787a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	ee1a 2a90 	vmov	r2, s21
 8007882:	ee19 3a90 	vmov	r3, s19
 8007886:	ee1a 0a10 	vmov	r0, s20
 800788a:	f003 fc79 	bl	800b180 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 800788e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007890:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8007892:	1a9b      	subs	r3, r3, r2
 8007894:	b299      	uxth	r1, r3
 8007896:	428a      	cmp	r2, r1
 8007898:	4613      	mov	r3, r2
 800789a:	bf28      	it	cs
 800789c:	460b      	movcs	r3, r1
 800789e:	912d      	str	r1, [sp, #180]	; 0xb4
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f000 813b 	beq.w	8007b1c <forward_lite_conv2d_sssa8_ch+0x630>
 80078a6:	9966      	ldr	r1, [sp, #408]	; 0x198
 80078a8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80078aa:	fb02 1100 	mla	r1, r2, r0, r1
 80078ae:	9166      	str	r1, [sp, #408]	; 0x198
 80078b0:	ee1a 1a90 	vmov	r1, s21
 80078b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80078b8:	ee0a 1a90 	vmov	s21, r1
 80078bc:	9922      	ldr	r1, [sp, #136]	; 0x88
 80078be:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 80078c2:	9122      	str	r1, [sp, #136]	; 0x88
 80078c4:	9977      	ldr	r1, [sp, #476]	; 0x1dc
 80078c6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80078ca:	9177      	str	r1, [sp, #476]	; 0x1dc
 80078cc:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80078ce:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80078d2:	9123      	str	r1, [sp, #140]	; 0x8c
 80078d4:	992f      	ldr	r1, [sp, #188]	; 0xbc
 80078d6:	2900      	cmp	r1, #0
 80078d8:	f000 8132 	beq.w	8007b40 <forward_lite_conv2d_sssa8_ch+0x654>
 80078dc:	9972      	ldr	r1, [sp, #456]	; 0x1c8
 80078de:	981c      	ldr	r0, [sp, #112]	; 0x70
 80078e0:	931f      	str	r3, [sp, #124]	; 0x7c
 80078e2:	fb00 1202 	mla	r2, r0, r2, r1
 80078e6:	9272      	str	r2, [sp, #456]	; 0x1c8
 80078e8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80078ea:	1e53      	subs	r3, r2, #1
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	2a00      	cmp	r2, #0
 80078f0:	f000 811b 	beq.w	8007b2a <forward_lite_conv2d_sssa8_ch+0x63e>
 80078f4:	932c      	str	r3, [sp, #176]	; 0xb0
 80078f6:	e6f4      	b.n	80076e2 <forward_lite_conv2d_sssa8_ch+0x1f6>
 80078f8:	4565      	cmp	r5, ip
 80078fa:	f841 4c04 	str.w	r4, [r1, #-4]
 80078fe:	f101 0104 	add.w	r1, r1, #4
 8007902:	f47f ae5d 	bne.w	80075c0 <forward_lite_conv2d_sssa8_ch+0xd4>
 8007906:	e66e      	b.n	80075e6 <forward_lite_conv2d_sssa8_ch+0xfa>
 8007908:	f10a 0a01 	add.w	sl, sl, #1
 800790c:	4629      	mov	r1, r5
 800790e:	463a      	mov	r2, r7
 8007910:	4640      	mov	r0, r8
 8007912:	fa0f fa8a 	sxth.w	sl, sl
 8007916:	f005 ffed 	bl	800d8f4 <arm_fill_q15>
 800791a:	45a2      	cmp	sl, r4
 800791c:	444d      	add	r5, r9
 800791e:	dbf3      	blt.n	8007908 <forward_lite_conv2d_sssa8_ch+0x41c>
 8007920:	e774      	b.n	800780c <forward_lite_conv2d_sssa8_ch+0x320>
 8007922:	4613      	mov	r3, r2
 8007924:	3301      	adds	r3, #1
 8007926:	b29b      	uxth	r3, r3
 8007928:	e6be      	b.n	80076a8 <forward_lite_conv2d_sssa8_ch+0x1bc>
 800792a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800792c:	2b00      	cmp	r3, #0
 800792e:	d133      	bne.n	8007998 <forward_lite_conv2d_sssa8_ch+0x4ac>
 8007930:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8007932:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007934:	3b01      	subs	r3, #1
 8007936:	9342      	str	r3, [sp, #264]	; 0x108
 8007938:	2301      	movs	r3, #1
 800793a:	f8ad 3126 	strh.w	r3, [sp, #294]	; 0x126
 800793e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007940:	4293      	cmp	r3, r2
 8007942:	f6ff af16 	blt.w	8007772 <forward_lite_conv2d_sssa8_ch+0x286>
 8007946:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800794a:	930f      	str	r3, [sp, #60]	; 0x3c
 800794c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800794e:	42ab      	cmp	r3, r5
 8007950:	f47f af66 	bne.w	8007820 <forward_lite_conv2d_sssa8_ch+0x334>
 8007954:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007956:	2b03      	cmp	r3, #3
 8007958:	f000 80b3 	beq.w	8007ac2 <forward_lite_conv2d_sssa8_ch+0x5d6>
 800795c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800795e:	9308      	str	r3, [sp, #32]
 8007960:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007962:	9307      	str	r3, [sp, #28]
 8007964:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007966:	9306      	str	r3, [sp, #24]
 8007968:	9b77      	ldr	r3, [sp, #476]	; 0x1dc
 800796a:	9305      	str	r3, [sp, #20]
 800796c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800796e:	9304      	str	r3, [sp, #16]
 8007970:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007972:	9303      	str	r3, [sp, #12]
 8007974:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007976:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007978:	9302      	str	r3, [sp, #8]
 800797a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	2300      	movs	r3, #0
 8007980:	9301      	str	r3, [sp, #4]
 8007982:	ee1a 2a90 	vmov	r2, s21
 8007986:	ee19 3a90 	vmov	r3, s19
 800798a:	ee1a 0a10 	vmov	r0, s20
 800798e:	4629      	mov	r1, r5
 8007990:	f002 fffa 	bl	800a988 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8007994:	901a      	str	r0, [sp, #104]	; 0x68
 8007996:	e743      	b.n	8007820 <forward_lite_conv2d_sssa8_ch+0x334>
 8007998:	3b01      	subs	r3, #1
 800799a:	9341      	str	r3, [sp, #260]	; 0x104
 800799c:	f8bd 3124 	ldrh.w	r3, [sp, #292]	; 0x124
 80079a0:	f8ad 3126 	strh.w	r3, [sp, #294]	; 0x126
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	f43f aedf 	beq.w	8007768 <forward_lite_conv2d_sssa8_ch+0x27c>
 80079aa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80079ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80079b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079b2:	f9bd 402c 	ldrsh.w	r4, [sp, #44]	; 0x2c
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d152      	bne.n	8007a60 <forward_lite_conv2d_sssa8_ch+0x574>
 80079ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80079bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80079be:	428b      	cmp	r3, r1
 80079c0:	f6bf af2a 	bge.w	8007818 <forward_lite_conv2d_sssa8_ch+0x32c>
 80079c4:	ee18 2a90 	vmov	r2, s17
 80079c8:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 80079cc:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 80079d0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80079d2:	ee19 8a10 	vmov	r8, s18
 80079d6:	46aa      	mov	sl, r5
 80079d8:	461e      	mov	r6, r3
 80079da:	4618      	mov	r0, r3
 80079dc:	460d      	mov	r5, r1
 80079de:	fb00 4007 	mla	r0, r0, r7, r4
 80079e2:	3601      	adds	r6, #1
 80079e4:	fb08 9000 	mla	r0, r8, r0, r9
 80079e8:	4651      	mov	r1, sl
 80079ea:	b236      	sxth	r6, r6
 80079ec:	920a      	str	r2, [sp, #40]	; 0x28
 80079ee:	f002 fd75 	bl	800a4dc <st_int8_to16_no_shift_interleaved>
 80079f2:	42ae      	cmp	r6, r5
 80079f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079f6:	44da      	add	sl, fp
 80079f8:	4630      	mov	r0, r6
 80079fa:	dbf0      	blt.n	80079de <forward_lite_conv2d_sssa8_ch+0x4f2>
 80079fc:	4655      	mov	r5, sl
 80079fe:	e70b      	b.n	8007818 <forward_lite_conv2d_sssa8_ch+0x32c>
 8007a00:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007a02:	429a      	cmp	r2, r3
 8007a04:	46da      	mov	sl, fp
 8007a06:	dd1e      	ble.n	8007a46 <forward_lite_conv2d_sssa8_ch+0x55a>
 8007a08:	46dc      	mov	ip, fp
 8007a0a:	961d      	str	r6, [sp, #116]	; 0x74
 8007a0c:	e012      	b.n	8007a34 <forward_lite_conv2d_sssa8_ch+0x548>
 8007a0e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a12:	4566      	cmp	r6, ip
 8007a14:	4463      	add	r3, ip
 8007a16:	dd13      	ble.n	8007a40 <forward_lite_conv2d_sssa8_ch+0x554>
 8007a18:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007a1a:	fb07 0003 	mla	r0, r7, r3, r0
 8007a1e:	f002 fd5d 	bl	800a4dc <st_int8_to16_no_shift_interleaved>
 8007a22:	f10a 0a01 	add.w	sl, sl, #1
 8007a26:	fa0f fa8a 	sxth.w	sl, sl
 8007a2a:	4554      	cmp	r4, sl
 8007a2c:	444d      	add	r5, r9
 8007a2e:	46d4      	mov	ip, sl
 8007a30:	f77f aeeb 	ble.w	800780a <forward_lite_conv2d_sssa8_ch+0x31e>
 8007a34:	f1ba 0f00 	cmp.w	sl, #0
 8007a38:	4629      	mov	r1, r5
 8007a3a:	463a      	mov	r2, r7
 8007a3c:	4640      	mov	r0, r8
 8007a3e:	dae6      	bge.n	8007a0e <forward_lite_conv2d_sssa8_ch+0x522>
 8007a40:	f005 ff58 	bl	800d8f4 <arm_fill_q15>
 8007a44:	e7ed      	b.n	8007a22 <forward_lite_conv2d_sssa8_ch+0x536>
 8007a46:	f10a 0a01 	add.w	sl, sl, #1
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	463a      	mov	r2, r7
 8007a4e:	4640      	mov	r0, r8
 8007a50:	fa0f fa8a 	sxth.w	sl, sl
 8007a54:	f005 ff4e 	bl	800d8f4 <arm_fill_q15>
 8007a58:	45a2      	cmp	sl, r4
 8007a5a:	444d      	add	r5, r9
 8007a5c:	dbf3      	blt.n	8007a46 <forward_lite_conv2d_sssa8_ch+0x55a>
 8007a5e:	e6d5      	b.n	800780c <forward_lite_conv2d_sssa8_ch+0x320>
 8007a60:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007a62:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007a64:	428b      	cmp	r3, r1
 8007a66:	f6bf aed7 	bge.w	8007818 <forward_lite_conv2d_sssa8_ch+0x32c>
 8007a6a:	ee18 2a90 	vmov	r2, s17
 8007a6e:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8007a72:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8007a76:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8007a78:	ee19 8a10 	vmov	r8, s18
 8007a7c:	46aa      	mov	sl, r5
 8007a7e:	461e      	mov	r6, r3
 8007a80:	4618      	mov	r0, r3
 8007a82:	460d      	mov	r5, r1
 8007a84:	fb00 4007 	mla	r0, r0, r7, r4
 8007a88:	3601      	adds	r6, #1
 8007a8a:	fb08 9000 	mla	r0, r8, r0, r9
 8007a8e:	4651      	mov	r1, sl
 8007a90:	b236      	sxth	r6, r6
 8007a92:	920a      	str	r2, [sp, #40]	; 0x28
 8007a94:	f002 fcc2 	bl	800a41c <st_int8_to16_no_shift>
 8007a98:	42ae      	cmp	r6, r5
 8007a9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a9c:	44da      	add	sl, fp
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	dbf0      	blt.n	8007a84 <forward_lite_conv2d_sssa8_ch+0x598>
 8007aa2:	4655      	mov	r5, sl
 8007aa4:	e6b8      	b.n	8007818 <forward_lite_conv2d_sssa8_ch+0x32c>
 8007aa6:	46da      	mov	sl, fp
 8007aa8:	f10a 0a01 	add.w	sl, sl, #1
 8007aac:	4629      	mov	r1, r5
 8007aae:	463a      	mov	r2, r7
 8007ab0:	4640      	mov	r0, r8
 8007ab2:	fa0f fa8a 	sxth.w	sl, sl
 8007ab6:	f005 ff1d 	bl	800d8f4 <arm_fill_q15>
 8007aba:	45a2      	cmp	sl, r4
 8007abc:	444d      	add	r5, r9
 8007abe:	dbf3      	blt.n	8007aa8 <forward_lite_conv2d_sssa8_ch+0x5bc>
 8007ac0:	e6a4      	b.n	800780c <forward_lite_conv2d_sssa8_ch+0x320>
 8007ac2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ac4:	9919      	ldr	r1, [sp, #100]	; 0x64
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007aca:	9308      	str	r3, [sp, #32]
 8007acc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007ace:	9307      	str	r3, [sp, #28]
 8007ad0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ad2:	9306      	str	r3, [sp, #24]
 8007ad4:	9b77      	ldr	r3, [sp, #476]	; 0x1dc
 8007ad6:	9305      	str	r3, [sp, #20]
 8007ad8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ada:	9304      	str	r3, [sp, #16]
 8007adc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ade:	9303      	str	r3, [sp, #12]
 8007ae0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ae2:	9302      	str	r3, [sp, #8]
 8007ae4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	bf0c      	ite	eq
 8007aea:	2302      	moveq	r3, #2
 8007aec:	2300      	movne	r3, #0
 8007aee:	ee1a 2a90 	vmov	r2, s21
 8007af2:	9301      	str	r3, [sp, #4]
 8007af4:	ee1a 0a10 	vmov	r0, s20
 8007af8:	ee19 3a90 	vmov	r3, s19
 8007afc:	f002 ff44 	bl	800a988 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8007b00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b04:	901a      	str	r0, [sp, #104]	; 0x68
 8007b06:	3b01      	subs	r3, #1
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d102      	bne.n	8007b12 <forward_lite_conv2d_sssa8_ch+0x626>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	3302      	adds	r3, #2
 8007b10:	931a      	str	r3, [sp, #104]	; 0x68
 8007b12:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007b14:	e684      	b.n	8007820 <forward_lite_conv2d_sssa8_ch+0x334>
 8007b16:	b2a3      	uxth	r3, r4
 8007b18:	9327      	str	r3, [sp, #156]	; 0x9c
 8007b1a:	e68e      	b.n	800783a <forward_lite_conv2d_sssa8_ch+0x34e>
 8007b1c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8007b1e:	931f      	str	r3, [sp, #124]	; 0x7c
 8007b20:	1e53      	subs	r3, r2, #1
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	2a00      	cmp	r2, #0
 8007b26:	f47f aee5 	bne.w	80078f4 <forward_lite_conv2d_sssa8_ch+0x408>
 8007b2a:	b055      	add	sp, #340	; 0x154
 8007b2c:	ecbd 8b08 	vpop	{d8-d11}
 8007b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b36:	9a72      	ldr	r2, [sp, #456]	; 0x1c8
 8007b38:	3303      	adds	r3, #3
 8007b3a:	18d3      	adds	r3, r2, r3
 8007b3c:	931a      	str	r3, [sp, #104]	; 0x68
 8007b3e:	e5e3      	b.n	8007708 <forward_lite_conv2d_sssa8_ch+0x21c>
 8007b40:	4611      	mov	r1, r2
 8007b42:	9a72      	ldr	r2, [sp, #456]	; 0x1c8
 8007b44:	931f      	str	r3, [sp, #124]	; 0x7c
 8007b46:	440a      	add	r2, r1
 8007b48:	9272      	str	r2, [sp, #456]	; 0x1c8
 8007b4a:	e6cd      	b.n	80078e8 <forward_lite_conv2d_sssa8_ch+0x3fc>
 8007b4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007b4e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007b50:	9866      	ldr	r0, [sp, #408]	; 0x198
 8007b52:	ee1a 1a10 	vmov	r1, s20
 8007b56:	f002 fd03 	bl	800a560 <st_int8_to16_dual>
 8007b5a:	e5cf      	b.n	80076fc <forward_lite_conv2d_sssa8_ch+0x210>
 8007b5c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8007b5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b60:	ee19 1a90 	vmov	r1, s19
 8007b64:	fb02 f303 	mul.w	r3, r2, r3
 8007b68:	9a72      	ldr	r2, [sp, #456]	; 0x1c8
 8007b6a:	fb01 2303 	mla	r3, r1, r3, r2
 8007b6e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b70:	429a      	cmp	r2, r3
 8007b72:	f4bf ad80 	bcs.w	8007676 <forward_lite_conv2d_sssa8_ch+0x18a>
 8007b76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b78:	fb03 f308 	mul.w	r3, r3, r8
 8007b7c:	fb09 2303 	mla	r3, r9, r3, r2
 8007b80:	9a72      	ldr	r2, [sp, #456]	; 0x1c8
 8007b82:	429a      	cmp	r2, r3
 8007b84:	f4bf ad77 	bcs.w	8007676 <forward_lite_conv2d_sssa8_ch+0x18a>
 8007b88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b8a:	fbb4 f3f3 	udiv	r3, r4, r3
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	4619      	mov	r1, r3
 8007b92:	ee19 3a90 	vmov	r3, s19
 8007b96:	4299      	cmp	r1, r3
 8007b98:	bf28      	it	cs
 8007b9a:	4619      	movcs	r1, r3
 8007b9c:	fbb3 f2f1 	udiv	r2, r3, r1
 8007ba0:	fb01 3312 	mls	r3, r1, r2, r3
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	b292      	uxth	r2, r2
 8007ba8:	9131      	str	r1, [sp, #196]	; 0xc4
 8007baa:	922f      	str	r2, [sp, #188]	; 0xbc
 8007bac:	b11b      	cbz	r3, 8007bb6 <forward_lite_conv2d_sssa8_ch+0x6ca>
 8007bae:	4613      	mov	r3, r2
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	932f      	str	r3, [sp, #188]	; 0xbc
 8007bb6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d0b6      	beq.n	8007b2a <forward_lite_conv2d_sssa8_ch+0x63e>
 8007bbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bbe:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007bc2:	fb09 f505 	mul.w	r5, r9, r5
 8007bc6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8007bca:	9314      	str	r3, [sp, #80]	; 0x50
 8007bcc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	9333      	str	r3, [sp, #204]	; 0xcc
 8007bd4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007bd6:	425b      	negs	r3, r3
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	9330      	str	r3, [sp, #192]	; 0xc0
 8007bdc:	f009 0303 	and.w	r3, r9, #3
 8007be0:	fa0f f68b 	sxth.w	r6, fp
 8007be4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007be6:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8007bea:	2400      	movs	r4, #0
 8007bec:	9316      	str	r3, [sp, #88]	; 0x58
 8007bee:	ee08 aa90 	vmov	s17, sl
 8007bf2:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8007bf6:	ee09 9a10 	vmov	s18, r9
 8007bfa:	ee0b 6a90 	vmov	s23, r6
 8007bfe:	932c      	str	r3, [sp, #176]	; 0xb0
 8007c00:	4625      	mov	r5, r4
 8007c02:	a840      	add	r0, sp, #256	; 0x100
 8007c04:	f002 fea6 	bl	800a954 <ai_padding_opt_phase1>
 8007c08:	ee19 3a90 	vmov	r3, s19
 8007c0c:	9a72      	ldr	r2, [sp, #456]	; 0x1c8
 8007c0e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007c10:	fb03 f305 	mul.w	r3, r3, r5
 8007c14:	fb01 2303 	mla	r3, r1, r3, r2
 8007c18:	931d      	str	r3, [sp, #116]	; 0x74
 8007c1a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8007c1c:	b953      	cbnz	r3, 8007c34 <forward_lite_conv2d_sssa8_ch+0x748>
 8007c1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f040 8216 	bne.w	8008052 <forward_lite_conv2d_sssa8_ch+0xb66>
 8007c26:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8007c28:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007c2a:	9866      	ldr	r0, [sp, #408]	; 0x198
 8007c2c:	ee1a 1a10 	vmov	r1, s20
 8007c30:	f002 fd80 	bl	800a734 <st_int8_to16_dual_interleaved>
 8007c34:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 8216 	beq.w	8008068 <forward_lite_conv2d_sssa8_ch+0xb7c>
 8007c3c:	b2a3      	uxth	r3, r4
 8007c3e:	9332      	str	r3, [sp, #200]	; 0xc8
 8007c40:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8007c44:	1a9b      	subs	r3, r3, r2
 8007c46:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8007c48:	edcd 9a2b 	vstr	s19, [sp, #172]	; 0xac
 8007c4c:	fb05 3302 	mla	r3, r5, r2, r3
 8007c50:	930d      	str	r3, [sp, #52]	; 0x34
 8007c52:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8007c56:	9312      	str	r3, [sp, #72]	; 0x48
 8007c58:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8007c5a:	9327      	str	r3, [sp, #156]	; 0x9c
 8007c5c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8007c5e:	9318      	str	r3, [sp, #96]	; 0x60
 8007c60:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8007c62:	932d      	str	r3, [sp, #180]	; 0xb4
 8007c64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c66:	931f      	str	r3, [sp, #124]	; 0x7c
 8007c68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c6a:	9324      	str	r3, [sp, #144]	; 0x90
 8007c6c:	9b77      	ldr	r3, [sp, #476]	; 0x1dc
 8007c6e:	9321      	str	r3, [sp, #132]	; 0x84
 8007c70:	eeb0 ba6a 	vmov.f32	s22, s21
 8007c74:	9a44      	ldr	r2, [sp, #272]	; 0x110
 8007c76:	9241      	str	r2, [sp, #260]	; 0x104
 8007c78:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007c7a:	9242      	str	r2, [sp, #264]	; 0x108
 8007c7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c7e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007c80:	9340      	str	r3, [sp, #256]	; 0x100
 8007c82:	2a00      	cmp	r2, #0
 8007c84:	f000 8193 	beq.w	8007fae <forward_lite_conv2d_sssa8_ch+0xac2>
 8007c88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007c8a:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8007c8c:	4252      	negs	r2, r2
 8007c8e:	b292      	uxth	r2, r2
 8007c90:	920b      	str	r2, [sp, #44]	; 0x2c
 8007c92:	2100      	movs	r1, #0
 8007c94:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007c96:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c98:	460a      	mov	r2, r1
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d070      	beq.n	8007d80 <forward_lite_conv2d_sssa8_ch+0x894>
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	9340      	str	r3, [sp, #256]	; 0x100
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	f8ad 3126 	strh.w	r3, [sp, #294]	; 0x126
 8007ca8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007caa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007cac:	4283      	cmp	r3, r0
 8007cae:	da74      	bge.n	8007d9a <forward_lite_conv2d_sssa8_ch+0x8ae>
 8007cb0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007cb2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007cb4:	f8dd 90b0 	ldr.w	r9, [sp, #176]	; 0xb0
 8007cb8:	fb02 3200 	mla	r2, r2, r0, r3
 8007cbc:	b28b      	uxth	r3, r1
 8007cbe:	930e      	str	r3, [sp, #56]	; 0x38
 8007cc0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007cc2:	1ad5      	subs	r5, r2, r3
 8007cc4:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8007cc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007cca:	ee19 7a10 	vmov	r7, s18
 8007cce:	ee1b 8a90 	vmov	r8, s23
 8007cd2:	461e      	mov	r6, r3
 8007cd4:	4693      	mov	fp, r2
 8007cd6:	455d      	cmp	r5, fp
 8007cd8:	dd39      	ble.n	8007d4e <forward_lite_conv2d_sssa8_ch+0x862>
 8007cda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cdc:	2e00      	cmp	r6, #0
 8007cde:	fb03 f202 	mul.w	r2, r3, r2
 8007ce2:	920a      	str	r2, [sp, #40]	; 0x28
 8007ce4:	f2c0 813a 	blt.w	8007f5c <forward_lite_conv2d_sssa8_ch+0xa70>
 8007ce8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007cea:	2a00      	cmp	r2, #0
 8007cec:	f000 80e1 	beq.w	8007eb2 <forward_lite_conv2d_sssa8_ch+0x9c6>
 8007cf0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	46da      	mov	sl, fp
 8007cf6:	f340 809c 	ble.w	8007e32 <forward_lite_conv2d_sssa8_ch+0x946>
 8007cfa:	46dc      	mov	ip, fp
 8007cfc:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
 8007d00:	46b3      	mov	fp, r6
 8007d02:	e011      	b.n	8007d28 <forward_lite_conv2d_sssa8_ch+0x83c>
 8007d04:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d08:	4566      	cmp	r6, ip
 8007d0a:	4463      	add	r3, ip
 8007d0c:	dd12      	ble.n	8007d34 <forward_lite_conv2d_sssa8_ch+0x848>
 8007d0e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007d10:	f10a 0a01 	add.w	sl, sl, #1
 8007d14:	fa0f fa8a 	sxth.w	sl, sl
 8007d18:	fb07 0003 	mla	r0, r7, r3, r0
 8007d1c:	f002 fb7e 	bl	800a41c <st_int8_to16_no_shift>
 8007d20:	4555      	cmp	r5, sl
 8007d22:	444c      	add	r4, r9
 8007d24:	46d4      	mov	ip, sl
 8007d26:	dd0f      	ble.n	8007d48 <forward_lite_conv2d_sssa8_ch+0x85c>
 8007d28:	f1ba 0f00 	cmp.w	sl, #0
 8007d2c:	463a      	mov	r2, r7
 8007d2e:	4621      	mov	r1, r4
 8007d30:	4640      	mov	r0, r8
 8007d32:	dae7      	bge.n	8007d04 <forward_lite_conv2d_sssa8_ch+0x818>
 8007d34:	f10a 0a01 	add.w	sl, sl, #1
 8007d38:	fa0f fa8a 	sxth.w	sl, sl
 8007d3c:	f005 fdda 	bl	800d8f4 <arm_fill_q15>
 8007d40:	4555      	cmp	r5, sl
 8007d42:	444c      	add	r4, r9
 8007d44:	46d4      	mov	ip, sl
 8007d46:	dcef      	bgt.n	8007d28 <forward_lite_conv2d_sssa8_ch+0x83c>
 8007d48:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007d4a:	465e      	mov	r6, fp
 8007d4c:	469b      	mov	fp, r3
 8007d4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d50:	3601      	adds	r6, #1
 8007d52:	b236      	sxth	r6, r6
 8007d54:	4296      	cmp	r6, r2
 8007d56:	4633      	mov	r3, r6
 8007d58:	dbbd      	blt.n	8007cd6 <forward_lite_conv2d_sssa8_ch+0x7ea>
 8007d5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d5c:	42a3      	cmp	r3, r4
 8007d5e:	d021      	beq.n	8007da4 <forward_lite_conv2d_sssa8_ch+0x8b8>
 8007d60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007d64:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007d66:	4413      	add	r3, r2
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	3101      	adds	r1, #1
 8007d6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d70:	b209      	sxth	r1, r1
 8007d72:	4299      	cmp	r1, r3
 8007d74:	460a      	mov	r2, r1
 8007d76:	f280 80ff 	bge.w	8007f78 <forward_lite_conv2d_sssa8_ch+0xa8c>
 8007d7a:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d18e      	bne.n	8007c9e <forward_lite_conv2d_sssa8_ch+0x7b2>
 8007d80:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d162      	bne.n	8007e4c <forward_lite_conv2d_sssa8_ch+0x960>
 8007d86:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8007d88:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	9342      	str	r3, [sp, #264]	; 0x108
 8007d8e:	2301      	movs	r3, #1
 8007d90:	f8ad 3126 	strh.w	r3, [sp, #294]	; 0x126
 8007d94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d96:	4283      	cmp	r3, r0
 8007d98:	db8a      	blt.n	8007cb0 <forward_lite_conv2d_sssa8_ch+0x7c4>
 8007d9a:	b28b      	uxth	r3, r1
 8007d9c:	930e      	str	r3, [sp, #56]	; 0x38
 8007d9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007da0:	42a3      	cmp	r3, r4
 8007da2:	d1dd      	bne.n	8007d60 <forward_lite_conv2d_sssa8_ch+0x874>
 8007da4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007da6:	9308      	str	r3, [sp, #32]
 8007da8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007daa:	9307      	str	r3, [sp, #28]
 8007dac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007dae:	9306      	str	r3, [sp, #24]
 8007db0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007db2:	9305      	str	r3, [sp, #20]
 8007db4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007db6:	9304      	str	r3, [sp, #16]
 8007db8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007dba:	9303      	str	r3, [sp, #12]
 8007dbc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007dbe:	9302      	str	r3, [sp, #8]
 8007dc0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	ee1b 2a10 	vmov	r2, s22
 8007dca:	9919      	ldr	r1, [sp, #100]	; 0x64
 8007dcc:	9301      	str	r3, [sp, #4]
 8007dce:	ee1a 0a10 	vmov	r0, s20
 8007dd2:	ee19 3a90 	vmov	r3, s19
 8007dd6:	f002 fdd7 	bl	800a988 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8007dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ddc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007dde:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007de0:	9017      	str	r0, [sp, #92]	; 0x5c
 8007de2:	4413      	add	r3, r2
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	3101      	adds	r1, #1
 8007de8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dec:	b209      	sxth	r1, r1
 8007dee:	4299      	cmp	r1, r3
 8007df0:	460a      	mov	r2, r1
 8007df2:	f280 80dc 	bge.w	8007fae <forward_lite_conv2d_sssa8_ch+0xac2>
 8007df6:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8007df8:	e7bf      	b.n	8007d7a <forward_lite_conv2d_sssa8_ch+0x88e>
 8007dfa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007dfc:	ee19 1a90 	vmov	r1, s19
 8007e00:	fb01 f302 	mul.w	r3, r1, r2
 8007e04:	42a3      	cmp	r3, r4
 8007e06:	f73f ac30 	bgt.w	800766a <forward_lite_conv2d_sssa8_ch+0x17e>
 8007e0a:	f019 0f03 	tst.w	r9, #3
 8007e0e:	972e      	str	r7, [sp, #184]	; 0xb8
 8007e10:	f040 812d 	bne.w	800806e <forward_lite_conv2d_sssa8_ch+0xb82>
 8007e14:	ee19 3a90 	vmov	r3, s19
 8007e18:	ee1a 1a10 	vmov	r1, s20
 8007e1c:	9866      	ldr	r0, [sp, #408]	; 0x198
 8007e1e:	f002 fc89 	bl	800a734 <st_int8_to16_dual_interleaved>
 8007e22:	e424      	b.n	800766e <forward_lite_conv2d_sssa8_ch+0x182>
 8007e24:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8007e26:	4603      	mov	r3, r0
 8007e28:	fb01 f303 	mul.w	r3, r1, r3
 8007e2c:	931c      	str	r3, [sp, #112]	; 0x70
 8007e2e:	f7ff bb9c 	b.w	800756a <forward_lite_conv2d_sssa8_ch+0x7e>
 8007e32:	f10a 0a01 	add.w	sl, sl, #1
 8007e36:	4621      	mov	r1, r4
 8007e38:	463a      	mov	r2, r7
 8007e3a:	4640      	mov	r0, r8
 8007e3c:	fa0f fa8a 	sxth.w	sl, sl
 8007e40:	f005 fd58 	bl	800d8f4 <arm_fill_q15>
 8007e44:	4555      	cmp	r5, sl
 8007e46:	444c      	add	r4, r9
 8007e48:	dcf3      	bgt.n	8007e32 <forward_lite_conv2d_sssa8_ch+0x946>
 8007e4a:	e780      	b.n	8007d4e <forward_lite_conv2d_sssa8_ch+0x862>
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	9341      	str	r3, [sp, #260]	; 0x104
 8007e50:	f8bd 3124 	ldrh.w	r3, [sp, #292]	; 0x124
 8007e54:	f8ad 3126 	strh.w	r3, [sp, #294]	; 0x126
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	f43f af25 	beq.w	8007ca8 <forward_lite_conv2d_sssa8_ch+0x7bc>
 8007e5e:	b28b      	uxth	r3, r1
 8007e60:	930e      	str	r3, [sp, #56]	; 0x38
 8007e62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e64:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d154      	bne.n	8007f16 <forward_lite_conv2d_sssa8_ch+0xa2a>
 8007e6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007e70:	428b      	cmp	r3, r1
 8007e72:	f6bf af72 	bge.w	8007d5a <forward_lite_conv2d_sssa8_ch+0x86e>
 8007e76:	ee18 2a90 	vmov	r2, s17
 8007e7a:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 8007e7e:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8007e82:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8007e84:	ee19 8a10 	vmov	r8, s18
 8007e88:	46a2      	mov	sl, r4
 8007e8a:	461e      	mov	r6, r3
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	460c      	mov	r4, r1
 8007e90:	fb00 5007 	mla	r0, r0, r7, r5
 8007e94:	3601      	adds	r6, #1
 8007e96:	fb08 9000 	mla	r0, r8, r0, r9
 8007e9a:	4651      	mov	r1, sl
 8007e9c:	b236      	sxth	r6, r6
 8007e9e:	920a      	str	r2, [sp, #40]	; 0x28
 8007ea0:	f002 fb1c 	bl	800a4dc <st_int8_to16_no_shift_interleaved>
 8007ea4:	42a6      	cmp	r6, r4
 8007ea6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ea8:	44da      	add	sl, fp
 8007eaa:	4630      	mov	r0, r6
 8007eac:	dbf0      	blt.n	8007e90 <forward_lite_conv2d_sssa8_ch+0x9a4>
 8007eae:	4654      	mov	r4, sl
 8007eb0:	e753      	b.n	8007d5a <forward_lite_conv2d_sssa8_ch+0x86e>
 8007eb2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	46da      	mov	sl, fp
 8007eb8:	dd20      	ble.n	8007efc <forward_lite_conv2d_sssa8_ch+0xa10>
 8007eba:	46dc      	mov	ip, fp
 8007ebc:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
 8007ec0:	46b3      	mov	fp, r6
 8007ec2:	e012      	b.n	8007eea <forward_lite_conv2d_sssa8_ch+0x9fe>
 8007ec4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ec8:	4566      	cmp	r6, ip
 8007eca:	4463      	add	r3, ip
 8007ecc:	dd13      	ble.n	8007ef6 <forward_lite_conv2d_sssa8_ch+0xa0a>
 8007ece:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007ed0:	fb07 0003 	mla	r0, r7, r3, r0
 8007ed4:	f002 fb02 	bl	800a4dc <st_int8_to16_no_shift_interleaved>
 8007ed8:	f10a 0a01 	add.w	sl, sl, #1
 8007edc:	fa0f fa8a 	sxth.w	sl, sl
 8007ee0:	4555      	cmp	r5, sl
 8007ee2:	444c      	add	r4, r9
 8007ee4:	46d4      	mov	ip, sl
 8007ee6:	f77f af2f 	ble.w	8007d48 <forward_lite_conv2d_sssa8_ch+0x85c>
 8007eea:	f1ba 0f00 	cmp.w	sl, #0
 8007eee:	4621      	mov	r1, r4
 8007ef0:	463a      	mov	r2, r7
 8007ef2:	4640      	mov	r0, r8
 8007ef4:	dae6      	bge.n	8007ec4 <forward_lite_conv2d_sssa8_ch+0x9d8>
 8007ef6:	f005 fcfd 	bl	800d8f4 <arm_fill_q15>
 8007efa:	e7ed      	b.n	8007ed8 <forward_lite_conv2d_sssa8_ch+0x9ec>
 8007efc:	f10a 0a01 	add.w	sl, sl, #1
 8007f00:	4621      	mov	r1, r4
 8007f02:	463a      	mov	r2, r7
 8007f04:	4640      	mov	r0, r8
 8007f06:	fa0f fa8a 	sxth.w	sl, sl
 8007f0a:	f005 fcf3 	bl	800d8f4 <arm_fill_q15>
 8007f0e:	4555      	cmp	r5, sl
 8007f10:	444c      	add	r4, r9
 8007f12:	dcf3      	bgt.n	8007efc <forward_lite_conv2d_sssa8_ch+0xa10>
 8007f14:	e71b      	b.n	8007d4e <forward_lite_conv2d_sssa8_ch+0x862>
 8007f16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f18:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007f1a:	428b      	cmp	r3, r1
 8007f1c:	f6bf af1d 	bge.w	8007d5a <forward_lite_conv2d_sssa8_ch+0x86e>
 8007f20:	ee18 2a90 	vmov	r2, s17
 8007f24:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 8007f28:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8007f2c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8007f2e:	ee19 8a10 	vmov	r8, s18
 8007f32:	46a2      	mov	sl, r4
 8007f34:	461e      	mov	r6, r3
 8007f36:	4618      	mov	r0, r3
 8007f38:	460c      	mov	r4, r1
 8007f3a:	fb00 5007 	mla	r0, r0, r7, r5
 8007f3e:	3601      	adds	r6, #1
 8007f40:	fb08 9000 	mla	r0, r8, r0, r9
 8007f44:	4651      	mov	r1, sl
 8007f46:	b236      	sxth	r6, r6
 8007f48:	920a      	str	r2, [sp, #40]	; 0x28
 8007f4a:	f002 fa67 	bl	800a41c <st_int8_to16_no_shift>
 8007f4e:	42a6      	cmp	r6, r4
 8007f50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f52:	44da      	add	sl, fp
 8007f54:	4630      	mov	r0, r6
 8007f56:	dbf0      	blt.n	8007f3a <forward_lite_conv2d_sssa8_ch+0xa4e>
 8007f58:	4654      	mov	r4, sl
 8007f5a:	e6fe      	b.n	8007d5a <forward_lite_conv2d_sssa8_ch+0x86e>
 8007f5c:	46da      	mov	sl, fp
 8007f5e:	f10a 0a01 	add.w	sl, sl, #1
 8007f62:	4621      	mov	r1, r4
 8007f64:	463a      	mov	r2, r7
 8007f66:	4640      	mov	r0, r8
 8007f68:	fa0f fa8a 	sxth.w	sl, sl
 8007f6c:	f005 fcc2 	bl	800d8f4 <arm_fill_q15>
 8007f70:	45aa      	cmp	sl, r5
 8007f72:	444c      	add	r4, r9
 8007f74:	dbf3      	blt.n	8007f5e <forward_lite_conv2d_sssa8_ch+0xa72>
 8007f76:	e6ea      	b.n	8007d4e <forward_lite_conv2d_sssa8_ch+0x862>
 8007f78:	9919      	ldr	r1, [sp, #100]	; 0x64
 8007f7a:	428c      	cmp	r4, r1
 8007f7c:	d017      	beq.n	8007fae <forward_lite_conv2d_sssa8_ch+0xac2>
 8007f7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f80:	9307      	str	r3, [sp, #28]
 8007f82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007f84:	9306      	str	r3, [sp, #24]
 8007f86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f88:	9305      	str	r3, [sp, #20]
 8007f8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f8c:	9304      	str	r3, [sp, #16]
 8007f8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007f90:	9303      	str	r3, [sp, #12]
 8007f92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f94:	9302      	str	r3, [sp, #8]
 8007f96:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007f98:	9301      	str	r3, [sp, #4]
 8007f9a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	ee1b 2a10 	vmov	r2, s22
 8007fa2:	ee19 3a90 	vmov	r3, s19
 8007fa6:	ee1a 0a10 	vmov	r0, s20
 8007faa:	f003 f8e9 	bl	800b180 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8007fae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007fb0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8007fb2:	991d      	ldr	r1, [sp, #116]	; 0x74
 8007fb4:	1a9b      	subs	r3, r3, r2
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	932b      	str	r3, [sp, #172]	; 0xac
 8007fbc:	bf28      	it	cs
 8007fbe:	4613      	movcs	r3, r2
 8007fc0:	4411      	add	r1, r2
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	911d      	str	r1, [sp, #116]	; 0x74
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d03a      	beq.n	8008040 <forward_lite_conv2d_sssa8_ch+0xb54>
 8007fca:	ee1b 4a10 	vmov	r4, s22
 8007fce:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8007fd2:	ee0b 4a10 	vmov	s22, r4
 8007fd6:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8007fd8:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8007fda:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8007fdc:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 8007fe0:	9424      	str	r4, [sp, #144]	; 0x90
 8007fe2:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8007fe4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8007fe8:	9421      	str	r4, [sp, #132]	; 0x84
 8007fea:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8007fec:	fb01 0002 	mla	r0, r1, r2, r0
 8007ff0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007ff4:	921f      	str	r2, [sp, #124]	; 0x7c
 8007ff6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ff8:	902d      	str	r0, [sp, #180]	; 0xb4
 8007ffa:	bb1a      	cbnz	r2, 8008044 <forward_lite_conv2d_sssa8_ch+0xb58>
 8007ffc:	460a      	mov	r2, r1
 8007ffe:	ee1a 1a10 	vmov	r1, s20
 8008002:	9318      	str	r3, [sp, #96]	; 0x60
 8008004:	f002 fb96 	bl	800a734 <st_int8_to16_dual_interleaved>
 8008008:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800800a:	3b01      	subs	r3, #1
 800800c:	b29b      	uxth	r3, r3
 800800e:	461a      	mov	r2, r3
 8008010:	9327      	str	r3, [sp, #156]	; 0x9c
 8008012:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008016:	429a      	cmp	r2, r3
 8008018:	f47f ae2c 	bne.w	8007c74 <forward_lite_conv2d_sssa8_ch+0x788>
 800801c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800801e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8008020:	9c32      	ldr	r4, [sp, #200]	; 0xc8
 8008022:	4413      	add	r3, r2
 8008024:	b29b      	uxth	r3, r3
 8008026:	3401      	adds	r4, #1
 8008028:	9330      	str	r3, [sp, #192]	; 0xc0
 800802a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800802c:	b224      	sxth	r4, r4
 800802e:	429c      	cmp	r4, r3
 8008030:	4625      	mov	r5, r4
 8008032:	f6ff ade6 	blt.w	8007c02 <forward_lite_conv2d_sssa8_ch+0x716>
 8008036:	b055      	add	sp, #340	; 0x154
 8008038:	ecbd 8b08 	vpop	{d8-d11}
 800803c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008040:	9318      	str	r3, [sp, #96]	; 0x60
 8008042:	e7e1      	b.n	8008008 <forward_lite_conv2d_sssa8_ch+0xb1c>
 8008044:	460a      	mov	r2, r1
 8008046:	ee1a 1a10 	vmov	r1, s20
 800804a:	9318      	str	r3, [sp, #96]	; 0x60
 800804c:	f002 fa88 	bl	800a560 <st_int8_to16_dual>
 8008050:	e7da      	b.n	8008008 <forward_lite_conv2d_sssa8_ch+0xb1c>
 8008052:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8008054:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008056:	9866      	ldr	r0, [sp, #408]	; 0x198
 8008058:	ee1a 1a10 	vmov	r1, s20
 800805c:	f002 fa80 	bl	800a560 <st_int8_to16_dual>
 8008060:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8008062:	2b00      	cmp	r3, #0
 8008064:	f47f adea 	bne.w	8007c3c <forward_lite_conv2d_sssa8_ch+0x750>
 8008068:	b2a3      	uxth	r3, r4
 800806a:	9332      	str	r3, [sp, #200]	; 0xc8
 800806c:	e7d6      	b.n	800801c <forward_lite_conv2d_sssa8_ch+0xb30>
 800806e:	ee19 3a90 	vmov	r3, s19
 8008072:	ee1a 1a10 	vmov	r1, s20
 8008076:	9866      	ldr	r0, [sp, #408]	; 0x198
 8008078:	f002 fa72 	bl	800a560 <st_int8_to16_dual>
 800807c:	f7ff baf7 	b.w	800766e <forward_lite_conv2d_sssa8_ch+0x182>

08008080 <forward_lite_maxpool_is8os8_scalepos>:
 8008080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008084:	b095      	sub	sp, #84	; 0x54
 8008086:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800808a:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 800808e:	910d      	str	r1, [sp, #52]	; 0x34
 8008090:	f8bd 1080 	ldrh.w	r1, [sp, #128]	; 0x80
 8008094:	910e      	str	r1, [sp, #56]	; 0x38
 8008096:	f8bd 1084 	ldrh.w	r1, [sp, #132]	; 0x84
 800809a:	910f      	str	r1, [sp, #60]	; 0x3c
 800809c:	f8bd 1088 	ldrh.w	r1, [sp, #136]	; 0x88
 80080a0:	9110      	str	r1, [sp, #64]	; 0x40
 80080a2:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 80080a6:	f99d 009c 	ldrsb.w	r0, [sp, #156]	; 0x9c
 80080aa:	930c      	str	r3, [sp, #48]	; 0x30
 80080ac:	9111      	str	r1, [sp, #68]	; 0x44
 80080ae:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 80080b2:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 80080b6:	9112      	str	r1, [sp, #72]	; 0x48
 80080b8:	9001      	str	r0, [sp, #4]
 80080ba:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 80080be:	f99d 00a0 	ldrsb.w	r0, [sp, #160]	; 0xa0
 80080c2:	f8bd a078 	ldrh.w	sl, [sp, #120]	; 0x78
 80080c6:	9206      	str	r2, [sp, #24]
 80080c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80080ca:	9107      	str	r1, [sp, #28]
 80080cc:	9003      	str	r0, [sp, #12]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f000 80ad 	beq.w	800822e <forward_lite_maxpool_is8os8_scalepos+0x1ae>
 80080d4:	2900      	cmp	r1, #0
 80080d6:	f000 80aa 	beq.w	800822e <forward_lite_maxpool_is8os8_scalepos+0x1ae>
 80080da:	f1ba 0f00 	cmp.w	sl, #0
 80080de:	f000 80a6 	beq.w	800822e <forward_lite_maxpool_is8os8_scalepos+0x1ae>
 80080e2:	2300      	movs	r3, #0
 80080e4:	ed9f 6a56 	vldr	s12, [pc, #344]	; 8008240 <forward_lite_maxpool_is8os8_scalepos+0x1c0>
 80080e8:	9304      	str	r3, [sp, #16]
 80080ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ee:	fb02 fb0a 	mul.w	fp, r2, sl
 80080f2:	9904      	ldr	r1, [sp, #16]
 80080f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080f6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80080f8:	eddd 7a03 	vldr	s15, [sp, #12]
 80080fc:	fb01 f303 	mul.w	r3, r1, r3
 8008100:	1a1a      	subs	r2, r3, r0
 8008102:	1ac3      	subs	r3, r0, r3
 8008104:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008106:	2a00      	cmp	r2, #0
 8008108:	bfd8      	it	le
 800810a:	4699      	movle	r9, r3
 800810c:	4403      	add	r3, r0
 800810e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008110:	bfc8      	it	gt
 8008112:	f04f 0900 	movgt.w	r9, #0
 8008116:	4298      	cmp	r0, r3
 8008118:	bfa8      	it	ge
 800811a:	4618      	movge	r0, r3
 800811c:	9b06      	ldr	r3, [sp, #24]
 800811e:	444a      	add	r2, r9
 8008120:	fb03 f302 	mul.w	r3, r3, r2
 8008124:	9309      	str	r3, [sp, #36]	; 0x24
 8008126:	9b07      	ldr	r3, [sp, #28]
 8008128:	fb01 f303 	mul.w	r3, r1, r3
 800812c:	9308      	str	r3, [sp, #32]
 800812e:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8008132:	2300      	movs	r3, #0
 8008134:	4684      	mov	ip, r0
 8008136:	9305      	str	r3, [sp, #20]
 8008138:	9905      	ldr	r1, [sp, #20]
 800813a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800813c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800813e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008140:	fb03 f201 	mul.w	r2, r3, r1
 8008144:	1a13      	subs	r3, r2, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	eba0 0202 	sub.w	r2, r0, r2
 800814c:	bfd8      	it	le
 800814e:	4617      	movle	r7, r2
 8008150:	9806      	ldr	r0, [sp, #24]
 8008152:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008154:	441a      	add	r2, r3
 8008156:	eba0 0303 	sub.w	r3, r0, r3
 800815a:	bfc8      	it	gt
 800815c:	2700      	movgt	r7, #0
 800815e:	429c      	cmp	r4, r3
 8008160:	bfa8      	it	ge
 8008162:	461c      	movge	r4, r3
 8008164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008166:	443a      	add	r2, r7
 8008168:	fb0a 3302 	mla	r3, sl, r2, r3
 800816c:	9302      	str	r3, [sp, #8]
 800816e:	9b08      	ldr	r3, [sp, #32]
 8008170:	eb01 0803 	add.w	r8, r1, r3
 8008174:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008176:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800817a:	fb0a 3808 	mla	r8, sl, r8, r3
 800817e:	f04f 0e00 	mov.w	lr, #0
 8008182:	45e1      	cmp	r9, ip
 8008184:	da59      	bge.n	800823a <forward_lite_maxpool_is8os8_scalepos+0x1ba>
 8008186:	9b02      	ldr	r3, [sp, #8]
 8008188:	464d      	mov	r5, r9
 800818a:	eb03 060e 	add.w	r6, r3, lr
 800818e:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8008192:	42a7      	cmp	r7, r4
 8008194:	da0a      	bge.n	80081ac <forward_lite_maxpool_is8os8_scalepos+0x12c>
 8008196:	4632      	mov	r2, r6
 8008198:	463b      	mov	r3, r7
 800819a:	f992 0000 	ldrsb.w	r0, [r2]
 800819e:	3301      	adds	r3, #1
 80081a0:	4281      	cmp	r1, r0
 80081a2:	bfb8      	it	lt
 80081a4:	4601      	movlt	r1, r0
 80081a6:	429c      	cmp	r4, r3
 80081a8:	4452      	add	r2, sl
 80081aa:	d1f6      	bne.n	800819a <forward_lite_maxpool_is8os8_scalepos+0x11a>
 80081ac:	3501      	adds	r5, #1
 80081ae:	45ac      	cmp	ip, r5
 80081b0:	445e      	add	r6, fp
 80081b2:	d1ee      	bne.n	8008192 <forward_lite_maxpool_is8os8_scalepos+0x112>
 80081b4:	eeb4 0a66 	vcmp.f32	s0, s13
 80081b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081bc:	d103      	bne.n	80081c6 <forward_lite_maxpool_is8os8_scalepos+0x146>
 80081be:	9b01      	ldr	r3, [sp, #4]
 80081c0:	9a03      	ldr	r2, [sp, #12]
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d036      	beq.n	8008234 <forward_lite_maxpool_is8os8_scalepos+0x1b4>
 80081c6:	9b01      	ldr	r3, [sp, #4]
 80081c8:	1ac9      	subs	r1, r1, r3
 80081ca:	ee07 1a90 	vmov	s15, r1
 80081ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081d2:	eeb0 7a65 	vmov.f32	s14, s11
 80081d6:	eea7 7a80 	vfma.f32	s14, s15, s0
 80081da:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80081de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081e2:	bfb4      	ite	lt
 80081e4:	eef0 7a46 	vmovlt.f32	s15, s12
 80081e8:	eef0 7a45 	vmovge.f32	s15, s10
 80081ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80081f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081f4:	ee17 3a90 	vmov	r3, s15
 80081f8:	f303 0307 	ssat	r3, #8, r3
 80081fc:	f888 3000 	strb.w	r3, [r8]
 8008200:	f10e 0e01 	add.w	lr, lr, #1
 8008204:	fa1f f38e 	uxth.w	r3, lr
 8008208:	459a      	cmp	sl, r3
 800820a:	f108 0801 	add.w	r8, r8, #1
 800820e:	d8b8      	bhi.n	8008182 <forward_lite_maxpool_is8os8_scalepos+0x102>
 8008210:	9b05      	ldr	r3, [sp, #20]
 8008212:	9a07      	ldr	r2, [sp, #28]
 8008214:	3301      	adds	r3, #1
 8008216:	b29b      	uxth	r3, r3
 8008218:	429a      	cmp	r2, r3
 800821a:	9305      	str	r3, [sp, #20]
 800821c:	d88c      	bhi.n	8008138 <forward_lite_maxpool_is8os8_scalepos+0xb8>
 800821e:	9b04      	ldr	r3, [sp, #16]
 8008220:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008222:	3301      	adds	r3, #1
 8008224:	b29b      	uxth	r3, r3
 8008226:	429a      	cmp	r2, r3
 8008228:	9304      	str	r3, [sp, #16]
 800822a:	f63f af62 	bhi.w	80080f2 <forward_lite_maxpool_is8os8_scalepos+0x72>
 800822e:	b015      	add	sp, #84	; 0x54
 8008230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008234:	f888 1000 	strb.w	r1, [r8]
 8008238:	e7e2      	b.n	8008200 <forward_lite_maxpool_is8os8_scalepos+0x180>
 800823a:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 800823e:	e7b9      	b.n	80081b4 <forward_lite_maxpool_is8os8_scalepos+0x134>
 8008240:	befffffc 	.word	0xbefffffc

08008244 <forward_lite_maxpool_is8os8_scaleneg>:
 8008244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008248:	b095      	sub	sp, #84	; 0x54
 800824a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800824e:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 8008252:	910d      	str	r1, [sp, #52]	; 0x34
 8008254:	f8bd 1080 	ldrh.w	r1, [sp, #128]	; 0x80
 8008258:	910e      	str	r1, [sp, #56]	; 0x38
 800825a:	f8bd 1084 	ldrh.w	r1, [sp, #132]	; 0x84
 800825e:	910f      	str	r1, [sp, #60]	; 0x3c
 8008260:	f8bd 1088 	ldrh.w	r1, [sp, #136]	; 0x88
 8008264:	9110      	str	r1, [sp, #64]	; 0x40
 8008266:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 800826a:	f99d 009c 	ldrsb.w	r0, [sp, #156]	; 0x9c
 800826e:	930c      	str	r3, [sp, #48]	; 0x30
 8008270:	9111      	str	r1, [sp, #68]	; 0x44
 8008272:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 8008276:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 800827a:	9112      	str	r1, [sp, #72]	; 0x48
 800827c:	9001      	str	r0, [sp, #4]
 800827e:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 8008282:	f99d 00a0 	ldrsb.w	r0, [sp, #160]	; 0xa0
 8008286:	f8bd a078 	ldrh.w	sl, [sp, #120]	; 0x78
 800828a:	9206      	str	r2, [sp, #24]
 800828c:	9313      	str	r3, [sp, #76]	; 0x4c
 800828e:	9107      	str	r1, [sp, #28]
 8008290:	9003      	str	r0, [sp, #12]
 8008292:	2b00      	cmp	r3, #0
 8008294:	f000 80ac 	beq.w	80083f0 <forward_lite_maxpool_is8os8_scaleneg+0x1ac>
 8008298:	2900      	cmp	r1, #0
 800829a:	f000 80a9 	beq.w	80083f0 <forward_lite_maxpool_is8os8_scaleneg+0x1ac>
 800829e:	f1ba 0f00 	cmp.w	sl, #0
 80082a2:	f000 80a5 	beq.w	80083f0 <forward_lite_maxpool_is8os8_scaleneg+0x1ac>
 80082a6:	2300      	movs	r3, #0
 80082a8:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8008400 <forward_lite_maxpool_is8os8_scaleneg+0x1bc>
 80082ac:	9304      	str	r3, [sp, #16]
 80082ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082b2:	fb02 fb0a 	mul.w	fp, r2, sl
 80082b6:	9904      	ldr	r1, [sp, #16]
 80082b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082ba:	9810      	ldr	r0, [sp, #64]	; 0x40
 80082bc:	eddd 7a03 	vldr	s15, [sp, #12]
 80082c0:	fb01 f303 	mul.w	r3, r1, r3
 80082c4:	1a1a      	subs	r2, r3, r0
 80082c6:	1ac3      	subs	r3, r0, r3
 80082c8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80082ca:	2a00      	cmp	r2, #0
 80082cc:	bfd8      	it	le
 80082ce:	4699      	movle	r9, r3
 80082d0:	4403      	add	r3, r0
 80082d2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80082d4:	bfc8      	it	gt
 80082d6:	f04f 0900 	movgt.w	r9, #0
 80082da:	4298      	cmp	r0, r3
 80082dc:	bfa8      	it	ge
 80082de:	4618      	movge	r0, r3
 80082e0:	9b06      	ldr	r3, [sp, #24]
 80082e2:	444a      	add	r2, r9
 80082e4:	fb03 f302 	mul.w	r3, r3, r2
 80082e8:	9309      	str	r3, [sp, #36]	; 0x24
 80082ea:	9b07      	ldr	r3, [sp, #28]
 80082ec:	fb01 f303 	mul.w	r3, r1, r3
 80082f0:	9308      	str	r3, [sp, #32]
 80082f2:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80082f6:	2300      	movs	r3, #0
 80082f8:	4684      	mov	ip, r0
 80082fa:	9305      	str	r3, [sp, #20]
 80082fc:	9905      	ldr	r1, [sp, #20]
 80082fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008300:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008302:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008304:	fb03 f201 	mul.w	r2, r3, r1
 8008308:	1a13      	subs	r3, r2, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	eba0 0202 	sub.w	r2, r0, r2
 8008310:	bfd8      	it	le
 8008312:	4617      	movle	r7, r2
 8008314:	9806      	ldr	r0, [sp, #24]
 8008316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008318:	441a      	add	r2, r3
 800831a:	eba0 0303 	sub.w	r3, r0, r3
 800831e:	bfc8      	it	gt
 8008320:	2700      	movgt	r7, #0
 8008322:	429c      	cmp	r4, r3
 8008324:	bfa8      	it	ge
 8008326:	461c      	movge	r4, r3
 8008328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800832a:	443a      	add	r2, r7
 800832c:	fb0a 3302 	mla	r3, sl, r2, r3
 8008330:	9302      	str	r3, [sp, #8]
 8008332:	9b08      	ldr	r3, [sp, #32]
 8008334:	eb01 0803 	add.w	r8, r1, r3
 8008338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800833a:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800833e:	fb0a 3808 	mla	r8, sl, r8, r3
 8008342:	f04f 0e00 	mov.w	lr, #0
 8008346:	45e1      	cmp	r9, ip
 8008348:	da58      	bge.n	80083fc <forward_lite_maxpool_is8os8_scaleneg+0x1b8>
 800834a:	9b02      	ldr	r3, [sp, #8]
 800834c:	464d      	mov	r5, r9
 800834e:	eb03 060e 	add.w	r6, r3, lr
 8008352:	217f      	movs	r1, #127	; 0x7f
 8008354:	42a7      	cmp	r7, r4
 8008356:	da0a      	bge.n	800836e <forward_lite_maxpool_is8os8_scaleneg+0x12a>
 8008358:	4632      	mov	r2, r6
 800835a:	463b      	mov	r3, r7
 800835c:	f992 0000 	ldrsb.w	r0, [r2]
 8008360:	3301      	adds	r3, #1
 8008362:	4281      	cmp	r1, r0
 8008364:	bfa8      	it	ge
 8008366:	4601      	movge	r1, r0
 8008368:	429c      	cmp	r4, r3
 800836a:	4452      	add	r2, sl
 800836c:	d1f6      	bne.n	800835c <forward_lite_maxpool_is8os8_scaleneg+0x118>
 800836e:	3501      	adds	r5, #1
 8008370:	45ac      	cmp	ip, r5
 8008372:	445e      	add	r6, fp
 8008374:	d1ee      	bne.n	8008354 <forward_lite_maxpool_is8os8_scaleneg+0x110>
 8008376:	eeb4 0a66 	vcmp.f32	s0, s13
 800837a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800837e:	d103      	bne.n	8008388 <forward_lite_maxpool_is8os8_scaleneg+0x144>
 8008380:	9b01      	ldr	r3, [sp, #4]
 8008382:	9a03      	ldr	r2, [sp, #12]
 8008384:	4293      	cmp	r3, r2
 8008386:	d036      	beq.n	80083f6 <forward_lite_maxpool_is8os8_scaleneg+0x1b2>
 8008388:	9b01      	ldr	r3, [sp, #4]
 800838a:	1ac9      	subs	r1, r1, r3
 800838c:	ee07 1a90 	vmov	s15, r1
 8008390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008394:	eeb0 7a65 	vmov.f32	s14, s11
 8008398:	eea7 7a80 	vfma.f32	s14, s15, s0
 800839c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80083a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083a4:	bfb4      	ite	lt
 80083a6:	eef0 7a46 	vmovlt.f32	s15, s12
 80083aa:	eef0 7a45 	vmovge.f32	s15, s10
 80083ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80083b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083b6:	ee17 3a90 	vmov	r3, s15
 80083ba:	f303 0307 	ssat	r3, #8, r3
 80083be:	f888 3000 	strb.w	r3, [r8]
 80083c2:	f10e 0e01 	add.w	lr, lr, #1
 80083c6:	fa1f f38e 	uxth.w	r3, lr
 80083ca:	459a      	cmp	sl, r3
 80083cc:	f108 0801 	add.w	r8, r8, #1
 80083d0:	d8b9      	bhi.n	8008346 <forward_lite_maxpool_is8os8_scaleneg+0x102>
 80083d2:	9b05      	ldr	r3, [sp, #20]
 80083d4:	9a07      	ldr	r2, [sp, #28]
 80083d6:	3301      	adds	r3, #1
 80083d8:	b29b      	uxth	r3, r3
 80083da:	429a      	cmp	r2, r3
 80083dc:	9305      	str	r3, [sp, #20]
 80083de:	d88d      	bhi.n	80082fc <forward_lite_maxpool_is8os8_scaleneg+0xb8>
 80083e0:	9b04      	ldr	r3, [sp, #16]
 80083e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80083e4:	3301      	adds	r3, #1
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	429a      	cmp	r2, r3
 80083ea:	9304      	str	r3, [sp, #16]
 80083ec:	f63f af63 	bhi.w	80082b6 <forward_lite_maxpool_is8os8_scaleneg+0x72>
 80083f0:	b015      	add	sp, #84	; 0x54
 80083f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f6:	f888 1000 	strb.w	r1, [r8]
 80083fa:	e7e2      	b.n	80083c2 <forward_lite_maxpool_is8os8_scaleneg+0x17e>
 80083fc:	217f      	movs	r1, #127	; 0x7f
 80083fe:	e7ba      	b.n	8008376 <forward_lite_maxpool_is8os8_scaleneg+0x132>
 8008400:	befffffc 	.word	0xbefffffc

08008404 <forward_lite_nl_softmax_is8os8>:
 8008404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008408:	188a      	adds	r2, r1, r2
 800840a:	b09b      	sub	sp, #108	; 0x6c
 800840c:	4291      	cmp	r1, r2
 800840e:	9102      	str	r1, [sp, #8]
 8008410:	9218      	str	r2, [sp, #96]	; 0x60
 8008412:	9015      	str	r0, [sp, #84]	; 0x54
 8008414:	9303      	str	r3, [sp, #12]
 8008416:	f080 82fe 	bcs.w	8008a16 <forward_lite_nl_softmax_is8os8+0x612>
 800841a:	461a      	mov	r2, r3
 800841c:	3b01      	subs	r3, #1
 800841e:	18cb      	adds	r3, r1, r3
 8008420:	9316      	str	r3, [sp, #88]	; 0x58
 8008422:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008424:	3b04      	subs	r3, #4
 8008426:	9317      	str	r3, [sp, #92]	; 0x5c
 8008428:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800842c:	9319      	str	r3, [sp, #100]	; 0x64
 800842e:	9a03      	ldr	r2, [sp, #12]
 8008430:	9b02      	ldr	r3, [sp, #8]
 8008432:	2a01      	cmp	r2, #1
 8008434:	f993 b000 	ldrsb.w	fp, [r3]
 8008438:	f240 8336 	bls.w	8008aa8 <forward_lite_nl_softmax_is8os8+0x6a4>
 800843c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800843e:	f913 2f01 	ldrsb.w	r2, [r3, #1]!
 8008442:	4593      	cmp	fp, r2
 8008444:	bfb8      	it	lt
 8008446:	4693      	movlt	fp, r2
 8008448:	428b      	cmp	r3, r1
 800844a:	d1f8      	bne.n	800843e <forward_lite_nl_softmax_is8os8+0x3a>
 800844c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800844e:	445b      	add	r3, fp
 8008450:	9305      	str	r3, [sp, #20]
 8008452:	9b02      	ldr	r3, [sp, #8]
 8008454:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 8008458:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800845a:	9301      	str	r3, [sp, #4]
 800845c:	2300      	movs	r3, #0
 800845e:	9304      	str	r3, [sp, #16]
 8008460:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008462:	0fdb      	lsrs	r3, r3, #31
 8008464:	e9cd 3b13 	strd	r3, fp, [sp, #76]	; 0x4c
 8008468:	e168      	b.n	800873c <forward_lite_nl_softmax_is8os8+0x338>
 800846a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800846c:	48b9      	ldr	r0, [pc, #740]	; (8008754 <forward_lite_nl_softmax_is8os8+0x350>)
 800846e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8008470:	1a9b      	subs	r3, r3, r2
 8008472:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8008474:	4093      	lsls	r3, r2
 8008476:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008478:	ebb2 7fd3 	cmp.w	r2, r3, lsr #31
 800847c:	bf06      	itte	eq
 800847e:	f04f 4080 	moveq.w	r0, #1073741824	; 0x40000000
 8008482:	2200      	moveq	r2, #0
 8008484:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8008488:	fbc1 0203 	smlal	r0, r2, r1, r3
 800848c:	2a00      	cmp	r2, #0
 800848e:	da04      	bge.n	800849a <forward_lite_nl_softmax_is8os8+0x96>
 8008490:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008494:	1840      	adds	r0, r0, r1
 8008496:	f142 0200 	adc.w	r2, r2, #0
 800849a:	0fc0      	lsrs	r0, r0, #31
 800849c:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
 80084a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80084a2:	429a      	cmp	r2, r3
 80084a4:	f000 8168 	beq.w	8008778 <forward_lite_nl_softmax_is8os8+0x374>
 80084a8:	f040 457f 	orr.w	r5, r0, #4278190080	; 0xff000000
 80084ac:	0169      	lsls	r1, r5, #5
 80084ae:	1a2d      	subs	r5, r5, r0
 80084b0:	fab0 f080 	clz	r0, r0
 80084b4:	f101 5280 	add.w	r2, r1, #268435456	; 0x10000000
 80084b8:	0940      	lsrs	r0, r0, #5
 80084ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80084be:	f04f 0a00 	mov.w	sl, #0
 80084c2:	fbc2 3a02 	smlal	r3, sl, r2, r2
 80084c6:	1e41      	subs	r1, r0, #1
 80084c8:	9200      	str	r2, [sp, #0]
 80084ca:	f3c5 7280 	ubfx	r2, r5, #30, #1
 80084ce:	9111      	str	r1, [sp, #68]	; 0x44
 80084d0:	f1ba 0f00 	cmp.w	sl, #0
 80084d4:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 80084d8:	f1c2 0200 	rsb	r2, r2, #0
 80084dc:	9110      	str	r1, [sp, #64]	; 0x40
 80084de:	920f      	str	r2, [sp, #60]	; 0x3c
 80084e0:	da05      	bge.n	80084ee <forward_lite_nl_softmax_is8os8+0xea>
 80084e2:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 80084e6:	eb13 030e 	adds.w	r3, r3, lr
 80084ea:	f14a 0a00 	adc.w	sl, sl, #0
 80084ee:	0fdb      	lsrs	r3, r3, #31
 80084f0:	ea43 034a 	orr.w	r3, r3, sl, lsl #1
 80084f4:	fba3 2403 	umull	r2, r4, r3, r3
 80084f8:	ea4f 7aea 	mov.w	sl, sl, asr #31
 80084fc:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
 8008500:	fb03 f60a 	mul.w	r6, r3, sl
 8008504:	eb44 0446 	adc.w	r4, r4, r6, lsl #1
 8008508:	2c00      	cmp	r4, #0
 800850a:	930e      	str	r3, [sp, #56]	; 0x38
 800850c:	da04      	bge.n	8008518 <forward_lite_nl_softmax_is8os8+0x114>
 800850e:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 8008512:	1992      	adds	r2, r2, r6
 8008514:	f144 0400 	adc.w	r4, r4, #0
 8008518:	4240      	negs	r0, r0
 800851a:	0fd2      	lsrs	r2, r2, #31
 800851c:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8008520:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 8008524:	9c00      	ldr	r4, [sp, #0]
 8008526:	910c      	str	r1, [sp, #48]	; 0x30
 8008528:	f002 0103 	and.w	r1, r2, #3
 800852c:	910d      	str	r1, [sp, #52]	; 0x34
 800852e:	9900      	ldr	r1, [sp, #0]
 8008530:	17e0      	asrs	r0, r4, #31
 8008532:	fb04 fa0a 	mul.w	sl, r4, sl
 8008536:	fb03 aa00 	mla	sl, r3, r0, sl
 800853a:	ea4f 78d3 	mov.w	r8, r3, lsr #31
 800853e:	fba1 1303 	umull	r1, r3, r1, r3
 8008542:	9112      	str	r1, [sp, #72]	; 0x48
 8008544:	9900      	ldr	r1, [sp, #0]
 8008546:	f3c5 6c80 	ubfx	ip, r5, #26, #1
 800854a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800854e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8008552:	f3c5 7740 	ubfx	r7, r5, #29, #1
 8008556:	910b      	str	r1, [sp, #44]	; 0x2c
 8008558:	f1cc 0100 	rsb	r1, ip, #0
 800855c:	f3c5 66c0 	ubfx	r6, r5, #27, #1
 8008560:	9109      	str	r1, [sp, #36]	; 0x24
 8008562:	1e79      	subs	r1, r7, #1
 8008564:	910a      	str	r1, [sp, #40]	; 0x28
 8008566:	1e71      	subs	r1, r6, #1
 8008568:	f3c5 6400 	ubfx	r4, r5, #24, #1
 800856c:	f3c5 6040 	ubfx	r0, r5, #25, #1
 8008570:	1092      	asrs	r2, r2, #2
 8008572:	f3c5 7500 	ubfx	r5, r5, #28, #1
 8008576:	9108      	str	r1, [sp, #32]
 8008578:	4271      	negs	r1, r6
 800857a:	9107      	str	r1, [sp, #28]
 800857c:	2a00      	cmp	r2, #0
 800857e:	f1c5 0100 	rsb	r1, r5, #0
 8008582:	4453      	add	r3, sl
 8008584:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8008588:	f1c7 0a00 	rsb	sl, r7, #0
 800858c:	f1c4 0400 	rsb	r4, r4, #0
 8008590:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
 8008594:	f105 36ff 	add.w	r6, r5, #4294967295	; 0xffffffff
 8008598:	f1c0 0000 	rsb	r0, r0, #0
 800859c:	9106      	str	r1, [sp, #24]
 800859e:	f2c0 80d6 	blt.w	800874e <forward_lite_nl_softmax_is8os8+0x34a>
 80085a2:	2501      	movs	r5, #1
 80085a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80085a6:	428d      	cmp	r5, r1
 80085a8:	bfb8      	it	lt
 80085aa:	3201      	addlt	r2, #1
 80085ac:	4d69      	ldr	r5, [pc, #420]	; (8008754 <forward_lite_nl_softmax_is8os8+0x350>)
 80085ae:	9912      	ldr	r1, [sp, #72]	; 0x48
 80085b0:	45c6      	cmp	lr, r8
 80085b2:	bf06      	itte	eq
 80085b4:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 80085b8:	f04f 0800 	moveq.w	r8, #0
 80085bc:	f04f 38ff 	movne.w	r8, #4294967295	; 0xffffffff
 80085c0:	186d      	adds	r5, r5, r1
 80085c2:	eb43 0308 	adc.w	r3, r3, r8
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	da05      	bge.n	80085d6 <forward_lite_nl_softmax_is8os8+0x1d2>
 80085ca:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 80085ce:	eb15 050e 	adds.w	r5, r5, lr
 80085d2:	f143 0300 	adc.w	r3, r3, #0
 80085d6:	0fed      	lsrs	r5, r5, #31
 80085d8:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
 80085dc:	442a      	add	r2, r5
 80085de:	2a00      	cmp	r2, #0
 80085e0:	4b5c      	ldr	r3, [pc, #368]	; (8008754 <forward_lite_nl_softmax_is8os8+0x350>)
 80085e2:	495d      	ldr	r1, [pc, #372]	; (8008758 <forward_lite_nl_softmax_is8os8+0x354>)
 80085e4:	bfa6      	itte	ge
 80085e6:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 80085ea:	2500      	movge	r5, #0
 80085ec:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 80085f0:	fbc2 3501 	smlal	r3, r5, r2, r1
 80085f4:	2d00      	cmp	r5, #0
 80085f6:	da04      	bge.n	8008602 <forward_lite_nl_softmax_is8os8+0x1fe>
 80085f8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80085fc:	189b      	adds	r3, r3, r2
 80085fe:	f145 0500 	adc.w	r5, r5, #0
 8008602:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008604:	0fdb      	lsrs	r3, r3, #31
 8008606:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 800860a:	441a      	add	r2, r3
 800860c:	4613      	mov	r3, r2
 800860e:	1052      	asrs	r2, r2, #1
 8008610:	d402      	bmi.n	8008618 <forward_lite_nl_softmax_is8os8+0x214>
 8008612:	07dd      	lsls	r5, r3, #31
 8008614:	bf48      	it	mi
 8008616:	3201      	addmi	r2, #1
 8008618:	9900      	ldr	r1, [sp, #0]
 800861a:	4d50      	ldr	r5, [pc, #320]	; (800875c <forward_lite_nl_softmax_is8os8+0x358>)
 800861c:	4411      	add	r1, r2
 800861e:	2900      	cmp	r1, #0
 8008620:	4a4c      	ldr	r2, [pc, #304]	; (8008754 <forward_lite_nl_softmax_is8os8+0x350>)
 8008622:	bfa6      	itte	ge
 8008624:	2300      	movge	r3, #0
 8008626:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
 800862a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800862e:	fbc1 2305 	smlal	r2, r3, r1, r5
 8008632:	2b00      	cmp	r3, #0
 8008634:	da04      	bge.n	8008640 <forward_lite_nl_softmax_is8os8+0x23c>
 8008636:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800863a:	1852      	adds	r2, r2, r1
 800863c:	f143 0300 	adc.w	r3, r3, #0
 8008640:	0fd2      	lsrs	r2, r2, #31
 8008642:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 8008646:	f102 42e2 	add.w	r2, r2, #1895825408	; 0x71000000
 800864a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800864e:	2100      	movs	r1, #0
 8008650:	4d43      	ldr	r5, [pc, #268]	; (8008760 <forward_lite_nl_softmax_is8os8+0x35c>)
 8008652:	f5a2 2225 	sub.w	r2, r2, #675840	; 0xa5000
 8008656:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
 800865a:	4698      	mov	r8, r3
 800865c:	468e      	mov	lr, r1
 800865e:	fbc2 8e05 	smlal	r8, lr, r2, r5
 8008662:	4645      	mov	r5, r8
 8008664:	0fed      	lsrs	r5, r5, #31
 8008666:	ea45 054e 	orr.w	r5, r5, lr, lsl #1
 800866a:	4025      	ands	r5, r4
 800866c:	ea02 0c0c 	and.w	ip, r2, ip
 8008670:	ea8c 0c05 	eor.w	ip, ip, r5
 8008674:	4d3b      	ldr	r5, [pc, #236]	; (8008764 <forward_lite_nl_softmax_is8os8+0x360>)
 8008676:	461a      	mov	r2, r3
 8008678:	460c      	mov	r4, r1
 800867a:	fbcc 2405 	smlal	r2, r4, ip, r5
 800867e:	0fd2      	lsrs	r2, r2, #31
 8008680:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8008684:	4002      	ands	r2, r0
 8008686:	4c38      	ldr	r4, [pc, #224]	; (8008768 <forward_lite_nl_softmax_is8os8+0x364>)
 8008688:	ea0c 0707 	and.w	r7, ip, r7
 800868c:	4057      	eors	r7, r2
 800868e:	469c      	mov	ip, r3
 8008690:	4608      	mov	r0, r1
 8008692:	fbc7 c004 	smlal	ip, r0, r7, r4
 8008696:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 800869a:	ea4c 0c40 	orr.w	ip, ip, r0, lsl #1
 800869e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086a2:	9c08      	ldr	r4, [sp, #32]
 80086a4:	403a      	ands	r2, r7
 80086a6:	ea00 0c0c 	and.w	ip, r0, ip
 80086aa:	4f30      	ldr	r7, [pc, #192]	; (800876c <forward_lite_nl_softmax_is8os8+0x368>)
 80086ac:	ea82 020c 	eor.w	r2, r2, ip
 80086b0:	4618      	mov	r0, r3
 80086b2:	460d      	mov	r5, r1
 80086b4:	fbc2 0507 	smlal	r0, r5, r2, r7
 80086b8:	4014      	ands	r4, r2
 80086ba:	0fc0      	lsrs	r0, r0, #31
 80086bc:	9a07      	ldr	r2, [sp, #28]
 80086be:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 80086c2:	4002      	ands	r2, r0
 80086c4:	482a      	ldr	r0, [pc, #168]	; (8008770 <forward_lite_nl_softmax_is8os8+0x36c>)
 80086c6:	4054      	eors	r4, r2
 80086c8:	461d      	mov	r5, r3
 80086ca:	460a      	mov	r2, r1
 80086cc:	fbc4 5200 	smlal	r5, r2, r4, r0
 80086d0:	0fed      	lsrs	r5, r5, #31
 80086d2:	ea45 0542 	orr.w	r5, r5, r2, lsl #1
 80086d6:	9a06      	ldr	r2, [sp, #24]
 80086d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80086da:	402a      	ands	r2, r5
 80086dc:	4026      	ands	r6, r4
 80086de:	4c25      	ldr	r4, [pc, #148]	; (8008774 <forward_lite_nl_softmax_is8os8+0x370>)
 80086e0:	4056      	eors	r6, r2
 80086e2:	460d      	mov	r5, r1
 80086e4:	461a      	mov	r2, r3
 80086e6:	fbc6 2504 	smlal	r2, r5, r6, r4
 80086ea:	0fd2      	lsrs	r2, r2, #31
 80086ec:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 80086f0:	ea0a 0202 	and.w	r2, sl, r2
 80086f4:	4030      	ands	r0, r6
 80086f6:	4050      	eors	r0, r2
 80086f8:	22f2      	movs	r2, #242	; 0xf2
 80086fa:	fbc0 3102 	smlal	r3, r1, r0, r2
 80086fe:	0fdb      	lsrs	r3, r3, #31
 8008700:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008702:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008704:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8008708:	401a      	ands	r2, r3
 800870a:	4613      	mov	r3, r2
 800870c:	4004      	ands	r4, r0
 800870e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008710:	4063      	eors	r3, r4
 8008712:	4013      	ands	r3, r2
 8008714:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008716:	4053      	eors	r3, r2
 8008718:	131a      	asrs	r2, r3, #12
 800871a:	0519      	lsls	r1, r3, #20
 800871c:	9904      	ldr	r1, [sp, #16]
 800871e:	bf48      	it	mi
 8008720:	3201      	addmi	r2, #1
 8008722:	4411      	add	r1, r2
 8008724:	9104      	str	r1, [sp, #16]
 8008726:	9a01      	ldr	r2, [sp, #4]
 8008728:	f842 3f04 	str.w	r3, [r2, #4]!
 800872c:	9201      	str	r2, [sp, #4]
 800872e:	9a02      	ldr	r2, [sp, #8]
 8008730:	f10b 0302 	add.w	r3, fp, #2
 8008734:	1a9b      	subs	r3, r3, r2
 8008736:	9a03      	ldr	r2, [sp, #12]
 8008738:	429a      	cmp	r2, r3
 800873a:	d945      	bls.n	80087c8 <forward_lite_nl_softmax_is8os8+0x3c4>
 800873c:	9a05      	ldr	r2, [sp, #20]
 800873e:	46cb      	mov	fp, r9
 8008740:	f919 3f01 	ldrsb.w	r3, [r9, #1]!
 8008744:	429a      	cmp	r2, r3
 8008746:	f77f ae90 	ble.w	800846a <forward_lite_nl_softmax_is8os8+0x66>
 800874a:	2300      	movs	r3, #0
 800874c:	e7eb      	b.n	8008726 <forward_lite_nl_softmax_is8os8+0x322>
 800874e:	2502      	movs	r5, #2
 8008750:	e728      	b.n	80085a4 <forward_lite_nl_softmax_is8os8+0x1a0>
 8008752:	bf00      	nop
 8008754:	c0000001 	.word	0xc0000001
 8008758:	2aaaaaab 	.word	0x2aaaaaab
 800875c:	70f5a894 	.word	0x70f5a894
 8008760:	63afbe7b 	.word	0x63afbe7b
 8008764:	4da2cbf2 	.word	0x4da2cbf2
 8008768:	2f16ac6c 	.word	0x2f16ac6c
 800876c:	1152aaa4 	.word	0x1152aaa4
 8008770:	02582ab7 	.word	0x02582ab7
 8008774:	000afe11 	.word	0x000afe11
 8008778:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800877c:	f000 8225 	beq.w	8008bca <forward_lite_nl_softmax_is8os8+0x7c6>
 8008780:	f040 457f 	orr.w	r5, r0, #4278190080	; 0xff000000
 8008784:	0169      	lsls	r1, r5, #5
 8008786:	1a2d      	subs	r5, r5, r0
 8008788:	fab0 f080 	clz	r0, r0
 800878c:	f101 5280 	add.w	r2, r1, #268435456	; 0x10000000
 8008790:	0940      	lsrs	r0, r0, #5
 8008792:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008796:	f04f 0a00 	mov.w	sl, #0
 800879a:	fbc2 3a02 	smlal	r3, sl, r2, r2
 800879e:	1e41      	subs	r1, r0, #1
 80087a0:	9200      	str	r2, [sp, #0]
 80087a2:	f3c5 7280 	ubfx	r2, r5, #30, #1
 80087a6:	9111      	str	r1, [sp, #68]	; 0x44
 80087a8:	f1ba 0f00 	cmp.w	sl, #0
 80087ac:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 80087b0:	f1c2 0200 	rsb	r2, r2, #0
 80087b4:	9110      	str	r1, [sp, #64]	; 0x40
 80087b6:	920f      	str	r2, [sp, #60]	; 0x3c
 80087b8:	f6bf ae99 	bge.w	80084ee <forward_lite_nl_softmax_is8os8+0xea>
 80087bc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80087c0:	189b      	adds	r3, r3, r2
 80087c2:	f14a 0a00 	adc.w	sl, sl, #0
 80087c6:	e692      	b.n	80084ee <forward_lite_nl_softmax_is8os8+0xea>
 80087c8:	9b04      	ldr	r3, [sp, #16]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f000 816f 	beq.w	8008aae <forward_lite_nl_softmax_is8os8+0x6aa>
 80087d0:	fab3 f483 	clz	r4, r3
 80087d4:	fa03 f104 	lsl.w	r1, r3, r4
 80087d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087dc:	17da      	asrs	r2, r3, #31
 80087de:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80087e2:	bf08      	it	eq
 80087e4:	2900      	cmpeq	r1, #0
 80087e6:	f1c4 0423 	rsb	r4, r4, #35	; 0x23
 80087ea:	f000 8161 	beq.w	8008ab0 <forward_lite_nl_softmax_is8os8+0x6ac>
 80087ee:	f113 4300 	adds.w	r3, r3, #2147483648	; 0x80000000
 80087f2:	f142 0200 	adc.w	r2, r2, #0
 80087f6:	085b      	lsrs	r3, r3, #1
 80087f8:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80087fc:	49a8      	ldr	r1, [pc, #672]	; (8008aa0 <forward_lite_nl_softmax_is8os8+0x69c>)
 80087fe:	4fa9      	ldr	r7, [pc, #676]	; (8008aa4 <forward_lite_nl_softmax_is8os8+0x6a0>)
 8008800:	1052      	asrs	r2, r2, #1
 8008802:	425d      	negs	r5, r3
 8008804:	fb01 5502 	mla	r5, r1, r2, r5
 8008808:	fba3 1601 	umull	r1, r6, r3, r1
 800880c:	19c9      	adds	r1, r1, r7
 800880e:	4435      	add	r5, r6
 8008810:	f165 0500 	sbc.w	r5, r5, #0
 8008814:	2d00      	cmp	r5, #0
 8008816:	da04      	bge.n	8008822 <forward_lite_nl_softmax_is8os8+0x41e>
 8008818:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800881c:	1809      	adds	r1, r1, r0
 800881e:	f145 0500 	adc.w	r5, r5, #0
 8008822:	0fc9      	lsrs	r1, r1, #31
 8008824:	ea41 0045 	orr.w	r0, r1, r5, lsl #1
 8008828:	f100 315a 	add.w	r1, r0, #1515870810	; 0x5a5a5a5a
 800882c:	17ce      	asrs	r6, r1, #31
 800882e:	fb01 f502 	mul.w	r5, r1, r2
 8008832:	fb03 5506 	mla	r5, r3, r6, r5
 8008836:	fba1 ce03 	umull	ip, lr, r1, r3
 800883a:	f11c 4780 	adds.w	r7, ip, #1073741824	; 0x40000000
 800883e:	44ae      	add	lr, r5
 8008840:	f14e 0500 	adc.w	r5, lr, #0
 8008844:	0fff      	lsrs	r7, r7, #31
 8008846:	ea47 0745 	orr.w	r7, r7, r5, lsl #1
 800884a:	f1d7 5700 	rsbs	r7, r7, #536870912	; 0x20000000
 800884e:	f140 81dd 	bpl.w	8008c0c <forward_lite_nl_softmax_is8os8+0x808>
 8008852:	4e94      	ldr	r6, [pc, #592]	; (8008aa4 <forward_lite_nl_softmax_is8os8+0x6a0>)
 8008854:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008858:	fbc1 6807 	smlal	r6, r8, r1, r7
 800885c:	f1b8 0f00 	cmp.w	r8, #0
 8008860:	da04      	bge.n	800886c <forward_lite_nl_softmax_is8os8+0x468>
 8008862:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8008866:	1976      	adds	r6, r6, r5
 8008868:	f148 0800 	adc.w	r8, r8, #0
 800886c:	0ff6      	lsrs	r6, r6, #31
 800886e:	ea46 0648 	orr.w	r6, r6, r8, lsl #1
 8008872:	f1b6 4f60 	cmp.w	r6, #3758096384	; 0xe0000000
 8008876:	f300 8193 	bgt.w	8008ba0 <forward_lite_nl_softmax_is8os8+0x79c>
 800887a:	4f8a      	ldr	r7, [pc, #552]	; (8008aa4 <forward_lite_nl_softmax_is8os8+0x6a0>)
 800887c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8008880:	07d6      	lsls	r6, r2, #31
 8008882:	07d9      	lsls	r1, r3, #31
 8008884:	ebbc 0101 	subs.w	r1, ip, r1
 8008888:	ea46 0653 	orr.w	r6, r6, r3, lsr #1
 800888c:	eb6e 0606 	sbc.w	r6, lr, r6
 8008890:	19c9      	adds	r1, r1, r7
 8008892:	f166 0600 	sbc.w	r6, r6, #0
 8008896:	2e00      	cmp	r6, #0
 8008898:	da04      	bge.n	80088a4 <forward_lite_nl_softmax_is8os8+0x4a0>
 800889a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800889e:	19c9      	adds	r1, r1, r7
 80088a0:	f146 0600 	adc.w	r6, r6, #0
 80088a4:	0fc9      	lsrs	r1, r1, #31
 80088a6:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 80088aa:	4e7e      	ldr	r6, [pc, #504]	; (8008aa4 <forward_lite_nl_softmax_is8os8+0x6a0>)
 80088ac:	f1c1 5100 	rsb	r1, r1, #536870912	; 0x20000000
 80088b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80088b4:	fbc5 6701 	smlal	r6, r7, r5, r1
 80088b8:	2f00      	cmp	r7, #0
 80088ba:	da04      	bge.n	80088c6 <forward_lite_nl_softmax_is8os8+0x4c2>
 80088bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088c0:	1876      	adds	r6, r6, r1
 80088c2:	f147 0700 	adc.w	r7, r7, #0
 80088c6:	0ff1      	lsrs	r1, r6, #31
 80088c8:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
 80088cc:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80088d0:	f2c0 80a9 	blt.w	8008a26 <forward_lite_nl_softmax_is8os8+0x622>
 80088d4:	f1a0 35a5 	sub.w	r5, r0, #2779096485	; 0xa5a5a5a5
 80088d8:	3d02      	subs	r5, #2
 80088da:	2600      	movs	r6, #0
 80088dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80088e0:	2700      	movs	r7, #0
 80088e2:	fb05 f202 	mul.w	r2, r5, r2
 80088e6:	17e9      	asrs	r1, r5, #31
 80088e8:	fb03 2201 	mla	r2, r3, r1, r2
 80088ec:	fba5 3c03 	umull	r3, ip, r5, r3
 80088f0:	181b      	adds	r3, r3, r0
 80088f2:	4462      	add	r2, ip
 80088f4:	eb42 0707 	adc.w	r7, r2, r7
 80088f8:	2f00      	cmp	r7, #0
 80088fa:	da04      	bge.n	8008906 <forward_lite_nl_softmax_is8os8+0x502>
 80088fc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008900:	189b      	adds	r3, r3, r2
 8008902:	f147 0700 	adc.w	r7, r7, #0
 8008906:	0fdb      	lsrs	r3, r3, #31
 8008908:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
 800890c:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 8008910:	0fd8      	lsrs	r0, r3, #31
 8008912:	42b0      	cmp	r0, r6
 8008914:	4a63      	ldr	r2, [pc, #396]	; (8008aa4 <forward_lite_nl_softmax_is8os8+0x6a0>)
 8008916:	bf06      	itte	eq
 8008918:	2000      	moveq	r0, #0
 800891a:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 800891e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008922:	fb03 f101 	mul.w	r1, r3, r1
 8008926:	17de      	asrs	r6, r3, #31
 8008928:	fb05 1106 	mla	r1, r5, r6, r1
 800892c:	fba3 3605 	umull	r3, r6, r3, r5
 8008930:	189b      	adds	r3, r3, r2
 8008932:	4431      	add	r1, r6
 8008934:	eb41 0000 	adc.w	r0, r1, r0
 8008938:	2800      	cmp	r0, #0
 800893a:	da04      	bge.n	8008946 <forward_lite_nl_softmax_is8os8+0x542>
 800893c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008940:	189b      	adds	r3, r3, r2
 8008942:	f140 0000 	adc.w	r0, r0, #0
 8008946:	0fdb      	lsrs	r3, r3, #31
 8008948:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 800894c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008950:	f2c0 8099 	blt.w	8008a86 <forward_lite_nl_softmax_is8os8+0x682>
 8008954:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008958:	440d      	add	r5, r1
 800895a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800895e:	bfb8      	it	lt
 8008960:	0069      	lsllt	r1, r5, #1
 8008962:	9b03      	ldr	r3, [sp, #12]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d046      	beq.n	80089f6 <forward_lite_nl_softmax_is8os8+0x5f2>
 8008968:	2601      	movs	r6, #1
 800896a:	40a6      	lsls	r6, r4
 800896c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800896e:	f8df c134 	ldr.w	ip, [pc, #308]	; 8008aa4 <forward_lite_nl_softmax_is8os8+0x6a0>
 8008972:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008974:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 8008978:	3e01      	subs	r6, #1
 800897a:	ea4f 0866 	mov.w	r8, r6, asr #1
 800897e:	f108 0901 	add.w	r9, r8, #1
 8008982:	0fcf      	lsrs	r7, r1, #31
 8008984:	1e5d      	subs	r5, r3, #1
 8008986:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 800898a:	468a      	mov	sl, r1
 800898c:	e00a      	b.n	80089a4 <forward_lite_nl_softmax_is8os8+0x5a0>
 800898e:	4590      	cmp	r8, r2
 8008990:	da00      	bge.n	8008994 <forward_lite_nl_softmax_is8os8+0x590>
 8008992:	3301      	adds	r3, #1
 8008994:	3b80      	subs	r3, #128	; 0x80
 8008996:	2b7e      	cmp	r3, #126	; 0x7e
 8008998:	dd40      	ble.n	8008a1c <forward_lite_nl_softmax_is8os8+0x618>
 800899a:	237f      	movs	r3, #127	; 0x7f
 800899c:	4583      	cmp	fp, r0
 800899e:	f805 3f01 	strb.w	r3, [r5, #1]!
 80089a2:	d028      	beq.n	80089f6 <forward_lite_nl_softmax_is8os8+0x5f2>
 80089a4:	f850 1f04 	ldr.w	r1, [r0, #4]!
 80089a8:	0fcb      	lsrs	r3, r1, #31
 80089aa:	42bb      	cmp	r3, r7
 80089ac:	bf0b      	itete	eq
 80089ae:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 80089b2:	4662      	movne	r2, ip
 80089b4:	2300      	moveq	r3, #0
 80089b6:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 80089ba:	fbc1 230a 	smlal	r2, r3, r1, sl
 80089be:	2b00      	cmp	r3, #0
 80089c0:	da03      	bge.n	80089ca <forward_lite_nl_softmax_is8os8+0x5c6>
 80089c2:	eb12 020e 	adds.w	r2, r2, lr
 80089c6:	f143 0300 	adc.w	r3, r3, #0
 80089ca:	0fd2      	lsrs	r2, r2, #31
 80089cc:	4551      	cmp	r1, sl
 80089ce:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 80089d2:	d104      	bne.n	80089de <forward_lite_nl_softmax_is8os8+0x5da>
 80089d4:	f1ba 4f00 	cmp.w	sl, #2147483648	; 0x80000000
 80089d8:	bf08      	it	eq
 80089da:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
 80089de:	ea06 0203 	and.w	r2, r6, r3
 80089e2:	4123      	asrs	r3, r4
 80089e4:	d5d3      	bpl.n	800898e <forward_lite_nl_softmax_is8os8+0x58a>
 80089e6:	4591      	cmp	r9, r2
 80089e8:	dbd3      	blt.n	8008992 <forward_lite_nl_softmax_is8os8+0x58e>
 80089ea:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80089ee:	4583      	cmp	fp, r0
 80089f0:	f805 3f01 	strb.w	r3, [r5, #1]!
 80089f4:	d1d6      	bne.n	80089a4 <forward_lite_nl_softmax_is8os8+0x5a0>
 80089f6:	9b02      	ldr	r3, [sp, #8]
 80089f8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80089fa:	9925      	ldr	r1, [sp, #148]	; 0x94
 80089fc:	4413      	add	r3, r2
 80089fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008a00:	9302      	str	r3, [sp, #8]
 8008a02:	440a      	add	r2, r1
 8008a04:	9215      	str	r2, [sp, #84]	; 0x54
 8008a06:	9924      	ldr	r1, [sp, #144]	; 0x90
 8008a08:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008a0a:	440a      	add	r2, r1
 8008a0c:	9216      	str	r2, [sp, #88]	; 0x58
 8008a0e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008a10:	429a      	cmp	r2, r3
 8008a12:	f63f ad0c 	bhi.w	800842e <forward_lite_nl_softmax_is8os8+0x2a>
 8008a16:	b01b      	add	sp, #108	; 0x6c
 8008a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a1c:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8008a20:	dbe3      	blt.n	80089ea <forward_lite_nl_softmax_is8os8+0x5e6>
 8008a22:	b25b      	sxtb	r3, r3
 8008a24:	e7ba      	b.n	800899c <forward_lite_nl_softmax_is8os8+0x598>
 8008a26:	f1b1 4f60 	cmp.w	r1, #3758096384	; 0xe0000000
 8008a2a:	bfc8      	it	gt
 8008a2c:	f04f 0800 	movgt.w	r8, #0
 8008a30:	f300 8106 	bgt.w	8008c40 <forward_lite_nl_softmax_is8os8+0x83c>
 8008a34:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8008a38:	17e8      	asrs	r0, r5, #31
 8008a3a:	491a      	ldr	r1, [pc, #104]	; (8008aa4 <forward_lite_nl_softmax_is8os8+0x6a0>)
 8008a3c:	fb05 f202 	mul.w	r2, r5, r2
 8008a40:	fb03 2200 	mla	r2, r3, r0, r2
 8008a44:	fba5 3003 	umull	r3, r0, r5, r3
 8008a48:	185b      	adds	r3, r3, r1
 8008a4a:	4410      	add	r0, r2
 8008a4c:	f160 0000 	sbc.w	r0, r0, #0
 8008a50:	2800      	cmp	r0, #0
 8008a52:	da04      	bge.n	8008a5e <forward_lite_nl_softmax_is8os8+0x65a>
 8008a54:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008a58:	189b      	adds	r3, r3, r2
 8008a5a:	f140 0000 	adc.w	r0, r0, #0
 8008a5e:	0fdb      	lsrs	r3, r3, #31
 8008a60:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8008a64:	f1c3 5200 	rsb	r2, r3, #536870912	; 0x20000000
 8008a68:	4b0e      	ldr	r3, [pc, #56]	; (8008aa4 <forward_lite_nl_softmax_is8os8+0x6a0>)
 8008a6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008a6e:	fbc5 3102 	smlal	r3, r1, r5, r2
 8008a72:	2900      	cmp	r1, #0
 8008a74:	da04      	bge.n	8008a80 <forward_lite_nl_softmax_is8os8+0x67c>
 8008a76:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008a7a:	189b      	adds	r3, r3, r2
 8008a7c:	f141 0100 	adc.w	r1, r1, #0
 8008a80:	0fdb      	lsrs	r3, r3, #31
 8008a82:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8008a86:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8008a8a:	f300 80db 	bgt.w	8008c44 <forward_lite_nl_softmax_is8os8+0x840>
 8008a8e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008a92:	0069      	lsls	r1, r5, #1
 8008a94:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008a98:	bfd8      	it	le
 8008a9a:	f04f 4100 	movle.w	r1, #2147483648	; 0x80000000
 8008a9e:	e760      	b.n	8008962 <forward_lite_nl_softmax_is8os8+0x55e>
 8008aa0:	c3c3c3c4 	.word	0xc3c3c3c4
 8008aa4:	c0000001 	.word	0xc0000001
 8008aa8:	2a00      	cmp	r2, #0
 8008aaa:	f47f accf 	bne.w	800844c <forward_lite_nl_softmax_is8os8+0x48>
 8008aae:	2403      	movs	r4, #3
 8008ab0:	486a      	ldr	r0, [pc, #424]	; (8008c5c <forward_lite_nl_softmax_is8os8+0x858>)
 8008ab2:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 8008c74 <forward_lite_nl_softmax_is8os8+0x870>
 8008ab6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008aba:	f04f 0c00 	mov.w	ip, #0
 8008abe:	f04f 0801 	mov.w	r8, #1
 8008ac2:	4605      	mov	r5, r0
 8008ac4:	463b      	mov	r3, r7
 8008ac6:	463a      	mov	r2, r7
 8008ac8:	46c1      	mov	r9, r8
 8008aca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008ace:	2600      	movs	r6, #0
 8008ad0:	eb11 010e 	adds.w	r1, r1, lr
 8008ad4:	eb46 060c 	adc.w	r6, r6, ip
 8008ad8:	2e00      	cmp	r6, #0
 8008ada:	da05      	bge.n	8008ae8 <forward_lite_nl_softmax_is8os8+0x6e4>
 8008adc:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 8008ae0:	eb11 010c 	adds.w	r1, r1, ip
 8008ae4:	f146 0600 	adc.w	r6, r6, #0
 8008ae8:	0fc9      	lsrs	r1, r1, #31
 8008aea:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 8008aee:	f1c1 5100 	rsb	r1, r1, #536870912	; 0x20000000
 8008af2:	ea4f 7cd1 	mov.w	ip, r1, lsr #31
 8008af6:	45cc      	cmp	ip, r9
 8008af8:	4e59      	ldr	r6, [pc, #356]	; (8008c60 <forward_lite_nl_softmax_is8os8+0x85c>)
 8008afa:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 8008afe:	fb01 f707 	mul.w	r7, r1, r7
 8008b02:	fb00 770c 	mla	r7, r0, ip, r7
 8008b06:	bf08      	it	eq
 8008b08:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
 8008b0c:	fba1 0100 	umull	r0, r1, r1, r0
 8008b10:	bf0c      	ite	eq
 8008b12:	f04f 0c00 	moveq.w	ip, #0
 8008b16:	f04f 3cff 	movne.w	ip, #4294967295	; 0xffffffff
 8008b1a:	440f      	add	r7, r1
 8008b1c:	1986      	adds	r6, r0, r6
 8008b1e:	eb47 070c 	adc.w	r7, r7, ip
 8008b22:	2f00      	cmp	r7, #0
 8008b24:	da04      	bge.n	8008b30 <forward_lite_nl_softmax_is8os8+0x72c>
 8008b26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b2a:	1876      	adds	r6, r6, r1
 8008b2c:	f147 0700 	adc.w	r7, r7, #0
 8008b30:	0ff6      	lsrs	r6, r6, #31
 8008b32:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
 8008b36:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 8008b3a:	4631      	mov	r1, r6
 8008b3c:	da23      	bge.n	8008b86 <forward_lite_nl_softmax_is8os8+0x782>
 8008b3e:	f1b6 4f60 	cmp.w	r6, #3758096384	; 0xe0000000
 8008b42:	dc7d      	bgt.n	8008c40 <forward_lite_nl_softmax_is8os8+0x83c>
 8008b44:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8008b48:	f1b8 0f00 	cmp.w	r8, #0
 8008b4c:	f43f af74 	beq.w	8008a38 <forward_lite_nl_softmax_is8os8+0x634>
 8008b50:	fb05 f202 	mul.w	r2, r5, r2
 8008b54:	17e9      	asrs	r1, r5, #31
 8008b56:	fb03 2201 	mla	r2, r3, r1, r2
 8008b5a:	fba5 3003 	umull	r3, r0, r5, r3
 8008b5e:	f113 4380 	adds.w	r3, r3, #1073741824	; 0x40000000
 8008b62:	eb42 0200 	adc.w	r2, r2, r0
 8008b66:	2a00      	cmp	r2, #0
 8008b68:	da04      	bge.n	8008b74 <forward_lite_nl_softmax_is8os8+0x770>
 8008b6a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8008b6e:	181b      	adds	r3, r3, r0
 8008b70:	f142 0200 	adc.w	r2, r2, #0
 8008b74:	0fdb      	lsrs	r3, r3, #31
 8008b76:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8008b7a:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 8008b7e:	4a38      	ldr	r2, [pc, #224]	; (8008c60 <forward_lite_nl_softmax_is8os8+0x85c>)
 8008b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b84:	e6cd      	b.n	8008922 <forward_lite_nl_softmax_is8os8+0x51e>
 8008b86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b8a:	440d      	add	r5, r1
 8008b8c:	ebb8 7fd5 	cmp.w	r8, r5, lsr #31
 8008b90:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8008b94:	f43f aea2 	beq.w	80088dc <forward_lite_nl_softmax_is8os8+0x4d8>
 8008b98:	4831      	ldr	r0, [pc, #196]	; (8008c60 <forward_lite_nl_softmax_is8os8+0x85c>)
 8008b9a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008b9e:	e6a0      	b.n	80088e2 <forward_lite_nl_softmax_is8os8+0x4de>
 8008ba0:	eb01 0586 	add.w	r5, r1, r6, lsl #2
 8008ba4:	17ef      	asrs	r7, r5, #31
 8008ba6:	fb03 f107 	mul.w	r1, r3, r7
 8008baa:	fb05 1102 	mla	r1, r5, r2, r1
 8008bae:	fba3 ec05 	umull	lr, ip, r3, r5
 8008bb2:	2d00      	cmp	r5, #0
 8008bb4:	4628      	mov	r0, r5
 8008bb6:	448c      	add	ip, r1
 8008bb8:	da3f      	bge.n	8008c3a <forward_lite_nl_softmax_is8os8+0x836>
 8008bba:	4929      	ldr	r1, [pc, #164]	; (8008c60 <forward_lite_nl_softmax_is8os8+0x85c>)
 8008bbc:	f04f 0901 	mov.w	r9, #1
 8008bc0:	f04f 0800 	mov.w	r8, #0
 8008bc4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008bc8:	e782      	b.n	8008ad0 <forward_lite_nl_softmax_is8os8+0x6cc>
 8008bca:	4a26      	ldr	r2, [pc, #152]	; (8008c64 <forward_lite_nl_softmax_is8os8+0x860>)
 8008bcc:	4b26      	ldr	r3, [pc, #152]	; (8008c68 <forward_lite_nl_softmax_is8os8+0x864>)
 8008bce:	920e      	str	r2, [sp, #56]	; 0x38
 8008bd0:	f04f 0a00 	mov.w	sl, #0
 8008bd4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008bd8:	4a24      	ldr	r2, [pc, #144]	; (8008c6c <forward_lite_nl_softmax_is8os8+0x868>)
 8008bda:	9312      	str	r3, [sp, #72]	; 0x48
 8008bdc:	9200      	str	r2, [sp, #0]
 8008bde:	e9cd aa06 	strd	sl, sl, [sp, #24]
 8008be2:	e9cd 6a08 	strd	r6, sl, [sp, #32]
 8008be6:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
 8008bea:	e9cd a60f 	strd	sl, r6, [sp, #60]	; 0x3c
 8008bee:	4b20      	ldr	r3, [pc, #128]	; (8008c70 <forward_lite_nl_softmax_is8os8+0x86c>)
 8008bf0:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8008bf4:	4650      	mov	r0, sl
 8008bf6:	4654      	mov	r4, sl
 8008bf8:	46b4      	mov	ip, r6
 8008bfa:	4637      	mov	r7, r6
 8008bfc:	46d6      	mov	lr, sl
 8008bfe:	46d0      	mov	r8, sl
 8008c00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008c04:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008c08:	9611      	str	r6, [sp, #68]	; 0x44
 8008c0a:	e4ca      	b.n	80085a2 <forward_lite_nl_softmax_is8os8+0x19e>
 8008c0c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008c10:	f04f 0800 	mov.w	r8, #0
 8008c14:	4605      	mov	r5, r0
 8008c16:	4640      	mov	r0, r8
 8008c18:	fbc1 5007 	smlal	r5, r0, r1, r7
 8008c1c:	0fed      	lsrs	r5, r5, #31
 8008c1e:	ea45 0540 	orr.w	r5, r5, r0, lsl #1
 8008c22:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8008c26:	17ef      	asrs	r7, r5, #31
 8008c28:	fb03 f107 	mul.w	r1, r3, r7
 8008c2c:	fb05 1102 	mla	r1, r5, r2, r1
 8008c30:	fba3 ec05 	umull	lr, ip, r3, r5
 8008c34:	4628      	mov	r0, r5
 8008c36:	448c      	add	ip, r1
 8008c38:	e746      	b.n	8008ac8 <forward_lite_nl_softmax_is8os8+0x6c4>
 8008c3a:	f04f 0800 	mov.w	r8, #0
 8008c3e:	e743      	b.n	8008ac8 <forward_lite_nl_softmax_is8os8+0x6c4>
 8008c40:	0089      	lsls	r1, r1, #2
 8008c42:	e7a2      	b.n	8008b8a <forward_lite_nl_softmax_is8os8+0x786>
 8008c44:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c4c:	ea4f 0143 	mov.w	r1, r3, lsl #1
 8008c50:	f6ff af20 	blt.w	8008a94 <forward_lite_nl_softmax_is8os8+0x690>
 8008c54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c58:	e683      	b.n	8008962 <forward_lite_nl_softmax_is8os8+0x55e>
 8008c5a:	bf00      	nop
 8008c5c:	b4b4b4b6 	.word	0xb4b4b4b6
 8008c60:	c0000001 	.word	0xc0000001
 8008c64:	01fffff8 	.word	0x01fffff8
 8008c68:	40000100 	.word	0x40000100
 8008c6c:	0fffffe0 	.word	0x0fffffe0
 8008c70:	001fffff 	.word	0x001fffff
 8008c74:	4b4b4b4a 	.word	0x4b4b4b4a

08008c78 <forward_lite_nl_softmax_iu8ou8>:
 8008c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7c:	188a      	adds	r2, r1, r2
 8008c7e:	b09b      	sub	sp, #108	; 0x6c
 8008c80:	4291      	cmp	r1, r2
 8008c82:	9101      	str	r1, [sp, #4]
 8008c84:	9218      	str	r2, [sp, #96]	; 0x60
 8008c86:	9015      	str	r0, [sp, #84]	; 0x54
 8008c88:	9302      	str	r3, [sp, #8]
 8008c8a:	f080 82fa 	bcs.w	8009282 <forward_lite_nl_softmax_iu8ou8+0x60a>
 8008c8e:	461a      	mov	r2, r3
 8008c90:	3b01      	subs	r3, #1
 8008c92:	18cb      	adds	r3, r1, r3
 8008c94:	9316      	str	r3, [sp, #88]	; 0x58
 8008c96:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008c98:	3b04      	subs	r3, #4
 8008c9a:	9317      	str	r3, [sp, #92]	; 0x5c
 8008c9c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008ca0:	9319      	str	r3, [sp, #100]	; 0x64
 8008ca2:	9a02      	ldr	r2, [sp, #8]
 8008ca4:	9b01      	ldr	r3, [sp, #4]
 8008ca6:	2a01      	cmp	r2, #1
 8008ca8:	f893 b000 	ldrb.w	fp, [r3]
 8008cac:	f240 8332 	bls.w	8009314 <forward_lite_nl_softmax_iu8ou8+0x69c>
 8008cb0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008cb2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8008cb6:	4593      	cmp	fp, r2
 8008cb8:	bfb8      	it	lt
 8008cba:	4693      	movlt	fp, r2
 8008cbc:	428b      	cmp	r3, r1
 8008cbe:	d1f8      	bne.n	8008cb2 <forward_lite_nl_softmax_iu8ou8+0x3a>
 8008cc0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008cc2:	445b      	add	r3, fp
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	9304      	str	r3, [sp, #16]
 8008cc8:	9b01      	ldr	r3, [sp, #4]
 8008cca:	9203      	str	r2, [sp, #12]
 8008ccc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008cce:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 8008cd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cd4:	0fd2      	lsrs	r2, r2, #31
 8008cd6:	e9cd 2b13 	strd	r2, fp, [sp, #76]	; 0x4c
 8008cda:	469a      	mov	sl, r3
 8008cdc:	e168      	b.n	8008fb0 <forward_lite_nl_softmax_iu8ou8+0x338>
 8008cde:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ce0:	9926      	ldr	r1, [sp, #152]	; 0x98
 8008ce2:	1a9b      	subs	r3, r3, r2
 8008ce4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8008ce6:	4093      	lsls	r3, r2
 8008ce8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008cea:	ebb2 7fd3 	cmp.w	r2, r3, lsr #31
 8008cee:	4ac9      	ldr	r2, [pc, #804]	; (8009014 <forward_lite_nl_softmax_iu8ou8+0x39c>)
 8008cf0:	bf06      	itte	eq
 8008cf2:	f04f 0e00 	moveq.w	lr, #0
 8008cf6:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 8008cfa:	f04f 3eff 	movne.w	lr, #4294967295	; 0xffffffff
 8008cfe:	fbc1 2e03 	smlal	r2, lr, r1, r3
 8008d02:	f1be 0f00 	cmp.w	lr, #0
 8008d06:	da04      	bge.n	8008d12 <forward_lite_nl_softmax_iu8ou8+0x9a>
 8008d08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d0c:	1852      	adds	r2, r2, r1
 8008d0e:	f14e 0e00 	adc.w	lr, lr, #0
 8008d12:	0fd0      	lsrs	r0, r2, #31
 8008d14:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008d16:	429a      	cmp	r2, r3
 8008d18:	ea40 004e 	orr.w	r0, r0, lr, lsl #1
 8008d1c:	f000 8153 	beq.w	8008fc6 <forward_lite_nl_softmax_iu8ou8+0x34e>
 8008d20:	f040 457f 	orr.w	r5, r0, #4278190080	; 0xff000000
 8008d24:	0169      	lsls	r1, r5, #5
 8008d26:	f101 5280 	add.w	r2, r1, #268435456	; 0x10000000
 8008d2a:	1a2d      	subs	r5, r5, r0
 8008d2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d30:	f04f 0c00 	mov.w	ip, #0
 8008d34:	fbc2 3c02 	smlal	r3, ip, r2, r2
 8008d38:	9200      	str	r2, [sp, #0]
 8008d3a:	f3c5 7280 	ubfx	r2, r5, #30, #1
 8008d3e:	1e51      	subs	r1, r2, #1
 8008d40:	f3c5 7640 	ubfx	r6, r5, #29, #1
 8008d44:	4252      	negs	r2, r2
 8008d46:	920f      	str	r2, [sp, #60]	; 0x3c
 8008d48:	f1bc 0f00 	cmp.w	ip, #0
 8008d4c:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 8008d50:	9111      	str	r1, [sp, #68]	; 0x44
 8008d52:	9210      	str	r2, [sp, #64]	; 0x40
 8008d54:	da05      	bge.n	8008d62 <forward_lite_nl_softmax_iu8ou8+0xea>
 8008d56:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 8008d5a:	eb13 030e 	adds.w	r3, r3, lr
 8008d5e:	f14c 0c00 	adc.w	ip, ip, #0
 8008d62:	0fdb      	lsrs	r3, r3, #31
 8008d64:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
 8008d68:	fba3 2403 	umull	r2, r4, r3, r3
 8008d6c:	ea4f 7cec 	mov.w	ip, ip, asr #31
 8008d70:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
 8008d74:	fb03 f70c 	mul.w	r7, r3, ip
 8008d78:	eb44 0447 	adc.w	r4, r4, r7, lsl #1
 8008d7c:	2c00      	cmp	r4, #0
 8008d7e:	930e      	str	r3, [sp, #56]	; 0x38
 8008d80:	da04      	bge.n	8008d8c <forward_lite_nl_softmax_iu8ou8+0x114>
 8008d82:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8008d86:	19d2      	adds	r2, r2, r7
 8008d88:	f144 0400 	adc.w	r4, r4, #0
 8008d8c:	fab0 fe80 	clz	lr, r0
 8008d90:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8008d94:	4271      	negs	r1, r6
 8008d96:	f1ce 0800 	rsb	r8, lr, #0
 8008d9a:	0fd2      	lsrs	r2, r2, #31
 8008d9c:	9105      	str	r1, [sp, #20]
 8008d9e:	f028 4100 	bic.w	r1, r8, #2147483648	; 0x80000000
 8008da2:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8008da6:	910c      	str	r1, [sp, #48]	; 0x30
 8008da8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8008dac:	9800      	ldr	r0, [sp, #0]
 8008dae:	9108      	str	r1, [sp, #32]
 8008db0:	f002 0103 	and.w	r1, r2, #3
 8008db4:	910d      	str	r1, [sp, #52]	; 0x34
 8008db6:	9900      	ldr	r1, [sp, #0]
 8008db8:	fb00 fc0c 	mul.w	ip, r0, ip
 8008dbc:	17c0      	asrs	r0, r0, #31
 8008dbe:	fb03 cc00 	mla	ip, r3, r0, ip
 8008dc2:	ea4f 78d3 	mov.w	r8, r3, lsr #31
 8008dc6:	fba1 1303 	umull	r1, r3, r1, r3
 8008dca:	9112      	str	r1, [sp, #72]	; 0x48
 8008dcc:	9900      	ldr	r1, [sp, #0]
 8008dce:	f3c5 6780 	ubfx	r7, r5, #26, #1
 8008dd2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008dd6:	1e79      	subs	r1, r7, #1
 8008dd8:	f3c5 7600 	ubfx	r6, r5, #28, #1
 8008ddc:	910b      	str	r1, [sp, #44]	; 0x2c
 8008dde:	4279      	negs	r1, r7
 8008de0:	9109      	str	r1, [sp, #36]	; 0x24
 8008de2:	1e71      	subs	r1, r6, #1
 8008de4:	f3c5 6400 	ubfx	r4, r5, #24, #1
 8008de8:	f3c5 6040 	ubfx	r0, r5, #25, #1
 8008dec:	1092      	asrs	r2, r2, #2
 8008dee:	f3c5 65c0 	ubfx	r5, r5, #27, #1
 8008df2:	910a      	str	r1, [sp, #40]	; 0x28
 8008df4:	4271      	negs	r1, r6
 8008df6:	9106      	str	r1, [sp, #24]
 8008df8:	2a00      	cmp	r2, #0
 8008dfa:	f1c5 0100 	rsb	r1, r5, #0
 8008dfe:	4463      	add	r3, ip
 8008e00:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
 8008e04:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8008e08:	f1c0 0000 	rsb	r0, r0, #0
 8008e0c:	f1c4 0400 	rsb	r4, r4, #0
 8008e10:	f105 36ff 	add.w	r6, r5, #4294967295	; 0xffffffff
 8008e14:	9107      	str	r1, [sp, #28]
 8008e16:	f2c0 80d4 	blt.w	8008fc2 <forward_lite_nl_softmax_iu8ou8+0x34a>
 8008e1a:	2501      	movs	r5, #1
 8008e1c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008e1e:	428d      	cmp	r5, r1
 8008e20:	bfb8      	it	lt
 8008e22:	3201      	addlt	r2, #1
 8008e24:	4d7b      	ldr	r5, [pc, #492]	; (8009014 <forward_lite_nl_softmax_iu8ou8+0x39c>)
 8008e26:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008e28:	45c6      	cmp	lr, r8
 8008e2a:	bf06      	itte	eq
 8008e2c:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 8008e30:	f04f 0800 	moveq.w	r8, #0
 8008e34:	f04f 38ff 	movne.w	r8, #4294967295	; 0xffffffff
 8008e38:	186d      	adds	r5, r5, r1
 8008e3a:	eb43 0308 	adc.w	r3, r3, r8
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	da05      	bge.n	8008e4e <forward_lite_nl_softmax_iu8ou8+0x1d6>
 8008e42:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 8008e46:	eb15 050e 	adds.w	r5, r5, lr
 8008e4a:	f143 0300 	adc.w	r3, r3, #0
 8008e4e:	0fed      	lsrs	r5, r5, #31
 8008e50:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
 8008e54:	442a      	add	r2, r5
 8008e56:	2a00      	cmp	r2, #0
 8008e58:	4b6e      	ldr	r3, [pc, #440]	; (8009014 <forward_lite_nl_softmax_iu8ou8+0x39c>)
 8008e5a:	496f      	ldr	r1, [pc, #444]	; (8009018 <forward_lite_nl_softmax_iu8ou8+0x3a0>)
 8008e5c:	bfa6      	itte	ge
 8008e5e:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 8008e62:	2500      	movge	r5, #0
 8008e64:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 8008e68:	fbc2 3501 	smlal	r3, r5, r2, r1
 8008e6c:	2d00      	cmp	r5, #0
 8008e6e:	da04      	bge.n	8008e7a <forward_lite_nl_softmax_iu8ou8+0x202>
 8008e70:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008e74:	189b      	adds	r3, r3, r2
 8008e76:	f145 0500 	adc.w	r5, r5, #0
 8008e7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e7c:	0fdb      	lsrs	r3, r3, #31
 8008e7e:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 8008e82:	441a      	add	r2, r3
 8008e84:	4613      	mov	r3, r2
 8008e86:	1052      	asrs	r2, r2, #1
 8008e88:	d402      	bmi.n	8008e90 <forward_lite_nl_softmax_iu8ou8+0x218>
 8008e8a:	07dd      	lsls	r5, r3, #31
 8008e8c:	bf48      	it	mi
 8008e8e:	3201      	addmi	r2, #1
 8008e90:	9900      	ldr	r1, [sp, #0]
 8008e92:	4d62      	ldr	r5, [pc, #392]	; (800901c <forward_lite_nl_softmax_iu8ou8+0x3a4>)
 8008e94:	4411      	add	r1, r2
 8008e96:	2900      	cmp	r1, #0
 8008e98:	4a5e      	ldr	r2, [pc, #376]	; (8009014 <forward_lite_nl_softmax_iu8ou8+0x39c>)
 8008e9a:	bfa6      	itte	ge
 8008e9c:	2300      	movge	r3, #0
 8008e9e:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
 8008ea2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008ea6:	fbc1 2305 	smlal	r2, r3, r1, r5
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	da04      	bge.n	8008eb8 <forward_lite_nl_softmax_iu8ou8+0x240>
 8008eae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008eb2:	1852      	adds	r2, r2, r1
 8008eb4:	f143 0300 	adc.w	r3, r3, #0
 8008eb8:	0fd2      	lsrs	r2, r2, #31
 8008eba:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 8008ebe:	f102 42e2 	add.w	r2, r2, #1895825408	; 0x71000000
 8008ec2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	4d55      	ldr	r5, [pc, #340]	; (8009020 <forward_lite_nl_softmax_iu8ou8+0x3a8>)
 8008eca:	f5a2 2225 	sub.w	r2, r2, #675840	; 0xa5000
 8008ece:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
 8008ed2:	4698      	mov	r8, r3
 8008ed4:	468e      	mov	lr, r1
 8008ed6:	fbc2 8e05 	smlal	r8, lr, r2, r5
 8008eda:	4645      	mov	r5, r8
 8008edc:	0fed      	lsrs	r5, r5, #31
 8008ede:	ea45 054e 	orr.w	r5, r5, lr, lsl #1
 8008ee2:	4025      	ands	r5, r4
 8008ee4:	ea02 0c0c 	and.w	ip, r2, ip
 8008ee8:	ea8c 0c05 	eor.w	ip, ip, r5
 8008eec:	4d4d      	ldr	r5, [pc, #308]	; (8009024 <forward_lite_nl_softmax_iu8ou8+0x3ac>)
 8008eee:	461a      	mov	r2, r3
 8008ef0:	460c      	mov	r4, r1
 8008ef2:	fbcc 2405 	smlal	r2, r4, ip, r5
 8008ef6:	0fd2      	lsrs	r2, r2, #31
 8008ef8:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8008efc:	4002      	ands	r2, r0
 8008efe:	4d4a      	ldr	r5, [pc, #296]	; (8009028 <forward_lite_nl_softmax_iu8ou8+0x3b0>)
 8008f00:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008f02:	ea0c 0707 	and.w	r7, ip, r7
 8008f06:	4057      	eors	r7, r2
 8008f08:	460c      	mov	r4, r1
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	fbc7 2405 	smlal	r2, r4, r7, r5
 8008f10:	0fd2      	lsrs	r2, r2, #31
 8008f12:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8008f16:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008f18:	4038      	ands	r0, r7
 8008f1a:	4014      	ands	r4, r2
 8008f1c:	4060      	eors	r0, r4
 8008f1e:	4c43      	ldr	r4, [pc, #268]	; (800902c <forward_lite_nl_softmax_iu8ou8+0x3b4>)
 8008f20:	461d      	mov	r5, r3
 8008f22:	460a      	mov	r2, r1
 8008f24:	fbc0 5204 	smlal	r5, r2, r0, r4
 8008f28:	0fed      	lsrs	r5, r5, #31
 8008f2a:	ea45 0542 	orr.w	r5, r5, r2, lsl #1
 8008f2e:	9a07      	ldr	r2, [sp, #28]
 8008f30:	4006      	ands	r6, r0
 8008f32:	402a      	ands	r2, r5
 8008f34:	4d3e      	ldr	r5, [pc, #248]	; (8009030 <forward_lite_nl_softmax_iu8ou8+0x3b8>)
 8008f36:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f38:	4056      	eors	r6, r2
 8008f3a:	460c      	mov	r4, r1
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	fbc6 2405 	smlal	r2, r4, r6, r5
 8008f42:	4030      	ands	r0, r6
 8008f44:	0fd2      	lsrs	r2, r2, #31
 8008f46:	9e06      	ldr	r6, [sp, #24]
 8008f48:	4d3a      	ldr	r5, [pc, #232]	; (8009034 <forward_lite_nl_softmax_iu8ou8+0x3bc>)
 8008f4a:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8008f4e:	4016      	ands	r6, r2
 8008f50:	4070      	eors	r0, r6
 8008f52:	461a      	mov	r2, r3
 8008f54:	460e      	mov	r6, r1
 8008f56:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008f58:	fbc0 2605 	smlal	r2, r6, r0, r5
 8008f5c:	4004      	ands	r4, r0
 8008f5e:	0fd2      	lsrs	r2, r2, #31
 8008f60:	9805      	ldr	r0, [sp, #20]
 8008f62:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
 8008f66:	4010      	ands	r0, r2
 8008f68:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008f6a:	4044      	eors	r4, r0
 8008f6c:	ea04 0e02 	and.w	lr, r4, r2
 8008f70:	22f2      	movs	r2, #242	; 0xf2
 8008f72:	fbc4 3102 	smlal	r3, r1, r4, r2
 8008f76:	0fdb      	lsrs	r3, r3, #31
 8008f78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f7a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8008f7e:	401a      	ands	r2, r3
 8008f80:	ea8e 0302 	eor.w	r3, lr, r2
 8008f84:	9a08      	ldr	r2, [sp, #32]
 8008f86:	ea03 0e02 	and.w	lr, r3, r2
 8008f8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f8c:	ea8e 0303 	eor.w	r3, lr, r3
 8008f90:	131a      	asrs	r2, r3, #12
 8008f92:	0519      	lsls	r1, r3, #20
 8008f94:	9903      	ldr	r1, [sp, #12]
 8008f96:	bf48      	it	mi
 8008f98:	3201      	addmi	r2, #1
 8008f9a:	4411      	add	r1, r2
 8008f9c:	9103      	str	r1, [sp, #12]
 8008f9e:	9a01      	ldr	r2, [sp, #4]
 8008fa0:	f84a 3f04 	str.w	r3, [sl, #4]!
 8008fa4:	f10b 0302 	add.w	r3, fp, #2
 8008fa8:	1a9b      	subs	r3, r3, r2
 8008faa:	9a02      	ldr	r2, [sp, #8]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d943      	bls.n	8009038 <forward_lite_nl_softmax_iu8ou8+0x3c0>
 8008fb0:	9a04      	ldr	r2, [sp, #16]
 8008fb2:	46cb      	mov	fp, r9
 8008fb4:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	f77f ae90 	ble.w	8008cde <forward_lite_nl_softmax_iu8ou8+0x66>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	e7ed      	b.n	8008f9e <forward_lite_nl_softmax_iu8ou8+0x326>
 8008fc2:	2502      	movs	r5, #2
 8008fc4:	e72a      	b.n	8008e1c <forward_lite_nl_softmax_iu8ou8+0x1a4>
 8008fc6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008fca:	f000 8234 	beq.w	8009436 <forward_lite_nl_softmax_iu8ou8+0x7be>
 8008fce:	f040 457f 	orr.w	r5, r0, #4278190080	; 0xff000000
 8008fd2:	0169      	lsls	r1, r5, #5
 8008fd4:	f101 5280 	add.w	r2, r1, #268435456	; 0x10000000
 8008fd8:	1a2d      	subs	r5, r5, r0
 8008fda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008fde:	f04f 0c00 	mov.w	ip, #0
 8008fe2:	fbc2 3c02 	smlal	r3, ip, r2, r2
 8008fe6:	9200      	str	r2, [sp, #0]
 8008fe8:	f3c5 7280 	ubfx	r2, r5, #30, #1
 8008fec:	1e51      	subs	r1, r2, #1
 8008fee:	f3c5 7640 	ubfx	r6, r5, #29, #1
 8008ff2:	4252      	negs	r2, r2
 8008ff4:	920f      	str	r2, [sp, #60]	; 0x3c
 8008ff6:	f1bc 0f00 	cmp.w	ip, #0
 8008ffa:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 8008ffe:	9111      	str	r1, [sp, #68]	; 0x44
 8009000:	9210      	str	r2, [sp, #64]	; 0x40
 8009002:	f6bf aeae 	bge.w	8008d62 <forward_lite_nl_softmax_iu8ou8+0xea>
 8009006:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800900a:	189b      	adds	r3, r3, r2
 800900c:	f14c 0c00 	adc.w	ip, ip, #0
 8009010:	e6a7      	b.n	8008d62 <forward_lite_nl_softmax_iu8ou8+0xea>
 8009012:	bf00      	nop
 8009014:	c0000001 	.word	0xc0000001
 8009018:	2aaaaaab 	.word	0x2aaaaaab
 800901c:	70f5a894 	.word	0x70f5a894
 8009020:	63afbe7b 	.word	0x63afbe7b
 8009024:	4da2cbf2 	.word	0x4da2cbf2
 8009028:	2f16ac6c 	.word	0x2f16ac6c
 800902c:	1152aaa4 	.word	0x1152aaa4
 8009030:	02582ab7 	.word	0x02582ab7
 8009034:	000afe11 	.word	0x000afe11
 8009038:	9b03      	ldr	r3, [sp, #12]
 800903a:	2b00      	cmp	r3, #0
 800903c:	f000 816d 	beq.w	800931a <forward_lite_nl_softmax_iu8ou8+0x6a2>
 8009040:	fab3 f483 	clz	r4, r3
 8009044:	fa03 f104 	lsl.w	r1, r3, r4
 8009048:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800904c:	17da      	asrs	r2, r3, #31
 800904e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009052:	bf08      	it	eq
 8009054:	2900      	cmpeq	r1, #0
 8009056:	f1c4 0423 	rsb	r4, r4, #35	; 0x23
 800905a:	f000 815f 	beq.w	800931c <forward_lite_nl_softmax_iu8ou8+0x6a4>
 800905e:	f113 4300 	adds.w	r3, r3, #2147483648	; 0x80000000
 8009062:	f142 0200 	adc.w	r2, r2, #0
 8009066:	085b      	lsrs	r3, r3, #1
 8009068:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 800906c:	49a7      	ldr	r1, [pc, #668]	; (800930c <forward_lite_nl_softmax_iu8ou8+0x694>)
 800906e:	4fa8      	ldr	r7, [pc, #672]	; (8009310 <forward_lite_nl_softmax_iu8ou8+0x698>)
 8009070:	1052      	asrs	r2, r2, #1
 8009072:	425d      	negs	r5, r3
 8009074:	fb01 5502 	mla	r5, r1, r2, r5
 8009078:	fba3 1601 	umull	r1, r6, r3, r1
 800907c:	19c9      	adds	r1, r1, r7
 800907e:	4435      	add	r5, r6
 8009080:	f165 0500 	sbc.w	r5, r5, #0
 8009084:	2d00      	cmp	r5, #0
 8009086:	da04      	bge.n	8009092 <forward_lite_nl_softmax_iu8ou8+0x41a>
 8009088:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800908c:	1809      	adds	r1, r1, r0
 800908e:	f145 0500 	adc.w	r5, r5, #0
 8009092:	0fc9      	lsrs	r1, r1, #31
 8009094:	ea41 0045 	orr.w	r0, r1, r5, lsl #1
 8009098:	f100 315a 	add.w	r1, r0, #1515870810	; 0x5a5a5a5a
 800909c:	17ce      	asrs	r6, r1, #31
 800909e:	fb01 f502 	mul.w	r5, r1, r2
 80090a2:	fb03 5506 	mla	r5, r3, r6, r5
 80090a6:	fba1 ce03 	umull	ip, lr, r1, r3
 80090aa:	f11c 4780 	adds.w	r7, ip, #1073741824	; 0x40000000
 80090ae:	44ae      	add	lr, r5
 80090b0:	f14e 0500 	adc.w	r5, lr, #0
 80090b4:	0fff      	lsrs	r7, r7, #31
 80090b6:	ea47 0745 	orr.w	r7, r7, r5, lsl #1
 80090ba:	f1d7 5700 	rsbs	r7, r7, #536870912	; 0x20000000
 80090be:	f140 81da 	bpl.w	8009476 <forward_lite_nl_softmax_iu8ou8+0x7fe>
 80090c2:	4e93      	ldr	r6, [pc, #588]	; (8009310 <forward_lite_nl_softmax_iu8ou8+0x698>)
 80090c4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80090c8:	fbc1 6807 	smlal	r6, r8, r1, r7
 80090cc:	f1b8 0f00 	cmp.w	r8, #0
 80090d0:	da04      	bge.n	80090dc <forward_lite_nl_softmax_iu8ou8+0x464>
 80090d2:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80090d6:	1976      	adds	r6, r6, r5
 80090d8:	f148 0800 	adc.w	r8, r8, #0
 80090dc:	0ff6      	lsrs	r6, r6, #31
 80090de:	ea46 0648 	orr.w	r6, r6, r8, lsl #1
 80090e2:	f1b6 4f60 	cmp.w	r6, #3758096384	; 0xe0000000
 80090e6:	f300 8191 	bgt.w	800940c <forward_lite_nl_softmax_iu8ou8+0x794>
 80090ea:	4f89      	ldr	r7, [pc, #548]	; (8009310 <forward_lite_nl_softmax_iu8ou8+0x698>)
 80090ec:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80090f0:	07d6      	lsls	r6, r2, #31
 80090f2:	07d9      	lsls	r1, r3, #31
 80090f4:	ebbc 0101 	subs.w	r1, ip, r1
 80090f8:	ea46 0653 	orr.w	r6, r6, r3, lsr #1
 80090fc:	eb6e 0606 	sbc.w	r6, lr, r6
 8009100:	19c9      	adds	r1, r1, r7
 8009102:	f166 0600 	sbc.w	r6, r6, #0
 8009106:	2e00      	cmp	r6, #0
 8009108:	da04      	bge.n	8009114 <forward_lite_nl_softmax_iu8ou8+0x49c>
 800910a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800910e:	19c9      	adds	r1, r1, r7
 8009110:	f146 0600 	adc.w	r6, r6, #0
 8009114:	0fc9      	lsrs	r1, r1, #31
 8009116:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 800911a:	4e7d      	ldr	r6, [pc, #500]	; (8009310 <forward_lite_nl_softmax_iu8ou8+0x698>)
 800911c:	f1c1 5100 	rsb	r1, r1, #536870912	; 0x20000000
 8009120:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009124:	fbc1 6705 	smlal	r6, r7, r1, r5
 8009128:	2f00      	cmp	r7, #0
 800912a:	da04      	bge.n	8009136 <forward_lite_nl_softmax_iu8ou8+0x4be>
 800912c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009130:	1876      	adds	r6, r6, r1
 8009132:	f147 0700 	adc.w	r7, r7, #0
 8009136:	0ff1      	lsrs	r1, r6, #31
 8009138:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
 800913c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8009140:	f2c0 80a6 	blt.w	8009290 <forward_lite_nl_softmax_iu8ou8+0x618>
 8009144:	f1a0 35a5 	sub.w	r5, r0, #2779096485	; 0xa5a5a5a5
 8009148:	3d02      	subs	r5, #2
 800914a:	2600      	movs	r6, #0
 800914c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8009150:	2700      	movs	r7, #0
 8009152:	fb05 f202 	mul.w	r2, r5, r2
 8009156:	17e9      	asrs	r1, r5, #31
 8009158:	fb03 2201 	mla	r2, r3, r1, r2
 800915c:	fba5 3c03 	umull	r3, ip, r5, r3
 8009160:	181b      	adds	r3, r3, r0
 8009162:	4462      	add	r2, ip
 8009164:	eb42 0707 	adc.w	r7, r2, r7
 8009168:	2f00      	cmp	r7, #0
 800916a:	da04      	bge.n	8009176 <forward_lite_nl_softmax_iu8ou8+0x4fe>
 800916c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8009170:	189b      	adds	r3, r3, r2
 8009172:	f147 0700 	adc.w	r7, r7, #0
 8009176:	0fdb      	lsrs	r3, r3, #31
 8009178:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
 800917c:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 8009180:	0fd8      	lsrs	r0, r3, #31
 8009182:	42b0      	cmp	r0, r6
 8009184:	4a62      	ldr	r2, [pc, #392]	; (8009310 <forward_lite_nl_softmax_iu8ou8+0x698>)
 8009186:	bf06      	itte	eq
 8009188:	2000      	moveq	r0, #0
 800918a:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 800918e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8009192:	fb03 f101 	mul.w	r1, r3, r1
 8009196:	17de      	asrs	r6, r3, #31
 8009198:	fb05 1106 	mla	r1, r5, r6, r1
 800919c:	fba3 3605 	umull	r3, r6, r3, r5
 80091a0:	189b      	adds	r3, r3, r2
 80091a2:	4431      	add	r1, r6
 80091a4:	eb41 0000 	adc.w	r0, r1, r0
 80091a8:	2800      	cmp	r0, #0
 80091aa:	da04      	bge.n	80091b6 <forward_lite_nl_softmax_iu8ou8+0x53e>
 80091ac:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80091b0:	189b      	adds	r3, r3, r2
 80091b2:	f140 0000 	adc.w	r0, r0, #0
 80091b6:	0fdb      	lsrs	r3, r3, #31
 80091b8:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 80091bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091c0:	f2c0 8096 	blt.w	80092f0 <forward_lite_nl_softmax_iu8ou8+0x678>
 80091c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80091c8:	440d      	add	r5, r1
 80091ca:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80091ce:	bfb8      	it	lt
 80091d0:	0069      	lsllt	r1, r5, #1
 80091d2:	9b02      	ldr	r3, [sp, #8]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d044      	beq.n	8009262 <forward_lite_nl_softmax_iu8ou8+0x5ea>
 80091d8:	2601      	movs	r6, #1
 80091da:	40a6      	lsls	r6, r4
 80091dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091de:	f8df c130 	ldr.w	ip, [pc, #304]	; 8009310 <forward_lite_nl_softmax_iu8ou8+0x698>
 80091e2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80091e4:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80091e8:	3e01      	subs	r6, #1
 80091ea:	ea4f 0866 	mov.w	r8, r6, asr #1
 80091ee:	f108 0901 	add.w	r9, r8, #1
 80091f2:	0fcf      	lsrs	r7, r1, #31
 80091f4:	1e5d      	subs	r5, r3, #1
 80091f6:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 80091fa:	e009      	b.n	8009210 <forward_lite_nl_softmax_iu8ou8+0x598>
 80091fc:	4590      	cmp	r8, r2
 80091fe:	da00      	bge.n	8009202 <forward_lite_nl_softmax_iu8ou8+0x58a>
 8009200:	3301      	adds	r3, #1
 8009202:	2bfe      	cmp	r3, #254	; 0xfe
 8009204:	dd40      	ble.n	8009288 <forward_lite_nl_softmax_iu8ou8+0x610>
 8009206:	23ff      	movs	r3, #255	; 0xff
 8009208:	4582      	cmp	sl, r0
 800920a:	f805 3f01 	strb.w	r3, [r5, #1]!
 800920e:	d028      	beq.n	8009262 <forward_lite_nl_softmax_iu8ou8+0x5ea>
 8009210:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8009214:	ea4f 73db 	mov.w	r3, fp, lsr #31
 8009218:	42bb      	cmp	r3, r7
 800921a:	bf0b      	itete	eq
 800921c:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 8009220:	4662      	movne	r2, ip
 8009222:	2300      	moveq	r3, #0
 8009224:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8009228:	fbcb 2301 	smlal	r2, r3, fp, r1
 800922c:	2b00      	cmp	r3, #0
 800922e:	da03      	bge.n	8009238 <forward_lite_nl_softmax_iu8ou8+0x5c0>
 8009230:	eb12 020e 	adds.w	r2, r2, lr
 8009234:	f143 0300 	adc.w	r3, r3, #0
 8009238:	0fd2      	lsrs	r2, r2, #31
 800923a:	458b      	cmp	fp, r1
 800923c:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 8009240:	d104      	bne.n	800924c <forward_lite_nl_softmax_iu8ou8+0x5d4>
 8009242:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8009246:	bf08      	it	eq
 8009248:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
 800924c:	ea06 0203 	and.w	r2, r6, r3
 8009250:	4123      	asrs	r3, r4
 8009252:	d5d3      	bpl.n	80091fc <forward_lite_nl_softmax_iu8ou8+0x584>
 8009254:	4591      	cmp	r9, r2
 8009256:	dbd3      	blt.n	8009200 <forward_lite_nl_softmax_iu8ou8+0x588>
 8009258:	2300      	movs	r3, #0
 800925a:	4582      	cmp	sl, r0
 800925c:	f805 3f01 	strb.w	r3, [r5, #1]!
 8009260:	d1d6      	bne.n	8009210 <forward_lite_nl_softmax_iu8ou8+0x598>
 8009262:	9b01      	ldr	r3, [sp, #4]
 8009264:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009266:	9925      	ldr	r1, [sp, #148]	; 0x94
 8009268:	4413      	add	r3, r2
 800926a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800926c:	9301      	str	r3, [sp, #4]
 800926e:	440a      	add	r2, r1
 8009270:	9215      	str	r2, [sp, #84]	; 0x54
 8009272:	9924      	ldr	r1, [sp, #144]	; 0x90
 8009274:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009276:	440a      	add	r2, r1
 8009278:	9216      	str	r2, [sp, #88]	; 0x58
 800927a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800927c:	429a      	cmp	r2, r3
 800927e:	f63f ad10 	bhi.w	8008ca2 <forward_lite_nl_softmax_iu8ou8+0x2a>
 8009282:	b01b      	add	sp, #108	; 0x6c
 8009284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009288:	2b00      	cmp	r3, #0
 800928a:	dde5      	ble.n	8009258 <forward_lite_nl_softmax_iu8ou8+0x5e0>
 800928c:	b2db      	uxtb	r3, r3
 800928e:	e7bb      	b.n	8009208 <forward_lite_nl_softmax_iu8ou8+0x590>
 8009290:	f1b1 4f60 	cmp.w	r1, #3758096384	; 0xe0000000
 8009294:	bfc8      	it	gt
 8009296:	f04f 0800 	movgt.w	r8, #0
 800929a:	f300 8106 	bgt.w	80094aa <forward_lite_nl_softmax_iu8ou8+0x832>
 800929e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80092a2:	17e8      	asrs	r0, r5, #31
 80092a4:	491a      	ldr	r1, [pc, #104]	; (8009310 <forward_lite_nl_softmax_iu8ou8+0x698>)
 80092a6:	fb05 f202 	mul.w	r2, r5, r2
 80092aa:	fb03 2200 	mla	r2, r3, r0, r2
 80092ae:	fba5 3003 	umull	r3, r0, r5, r3
 80092b2:	185b      	adds	r3, r3, r1
 80092b4:	4410      	add	r0, r2
 80092b6:	f160 0000 	sbc.w	r0, r0, #0
 80092ba:	2800      	cmp	r0, #0
 80092bc:	da04      	bge.n	80092c8 <forward_lite_nl_softmax_iu8ou8+0x650>
 80092be:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80092c2:	189b      	adds	r3, r3, r2
 80092c4:	f140 0000 	adc.w	r0, r0, #0
 80092c8:	0fdb      	lsrs	r3, r3, #31
 80092ca:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 80092ce:	f1c3 5200 	rsb	r2, r3, #536870912	; 0x20000000
 80092d2:	4b0f      	ldr	r3, [pc, #60]	; (8009310 <forward_lite_nl_softmax_iu8ou8+0x698>)
 80092d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80092d8:	fbc5 3102 	smlal	r3, r1, r5, r2
 80092dc:	2900      	cmp	r1, #0
 80092de:	da04      	bge.n	80092ea <forward_lite_nl_softmax_iu8ou8+0x672>
 80092e0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80092e4:	189b      	adds	r3, r3, r2
 80092e6:	f141 0100 	adc.w	r1, r1, #0
 80092ea:	0fdb      	lsrs	r3, r3, #31
 80092ec:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80092f0:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80092f4:	f300 80db 	bgt.w	80094ae <forward_lite_nl_softmax_iu8ou8+0x836>
 80092f8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80092fc:	0069      	lsls	r1, r5, #1
 80092fe:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8009302:	bfd8      	it	le
 8009304:	f04f 4100 	movle.w	r1, #2147483648	; 0x80000000
 8009308:	e763      	b.n	80091d2 <forward_lite_nl_softmax_iu8ou8+0x55a>
 800930a:	bf00      	nop
 800930c:	c3c3c3c4 	.word	0xc3c3c3c4
 8009310:	c0000001 	.word	0xc0000001
 8009314:	2a00      	cmp	r2, #0
 8009316:	f47f acd3 	bne.w	8008cc0 <forward_lite_nl_softmax_iu8ou8+0x48>
 800931a:	2403      	movs	r4, #3
 800931c:	4869      	ldr	r0, [pc, #420]	; (80094c4 <forward_lite_nl_softmax_iu8ou8+0x84c>)
 800931e:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 80094dc <forward_lite_nl_softmax_iu8ou8+0x864>
 8009322:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009326:	f04f 0c00 	mov.w	ip, #0
 800932a:	f04f 0801 	mov.w	r8, #1
 800932e:	4605      	mov	r5, r0
 8009330:	463b      	mov	r3, r7
 8009332:	463a      	mov	r2, r7
 8009334:	46c1      	mov	r9, r8
 8009336:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800933a:	2600      	movs	r6, #0
 800933c:	eb11 010e 	adds.w	r1, r1, lr
 8009340:	eb46 060c 	adc.w	r6, r6, ip
 8009344:	2e00      	cmp	r6, #0
 8009346:	da05      	bge.n	8009354 <forward_lite_nl_softmax_iu8ou8+0x6dc>
 8009348:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 800934c:	eb11 010c 	adds.w	r1, r1, ip
 8009350:	f146 0600 	adc.w	r6, r6, #0
 8009354:	0fc9      	lsrs	r1, r1, #31
 8009356:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 800935a:	f1c1 5100 	rsb	r1, r1, #536870912	; 0x20000000
 800935e:	ea4f 7cd1 	mov.w	ip, r1, lsr #31
 8009362:	45cc      	cmp	ip, r9
 8009364:	4e58      	ldr	r6, [pc, #352]	; (80094c8 <forward_lite_nl_softmax_iu8ou8+0x850>)
 8009366:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 800936a:	fb01 f707 	mul.w	r7, r1, r7
 800936e:	fb00 770c 	mla	r7, r0, ip, r7
 8009372:	bf08      	it	eq
 8009374:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
 8009378:	fba1 0100 	umull	r0, r1, r1, r0
 800937c:	bf0c      	ite	eq
 800937e:	f04f 0c00 	moveq.w	ip, #0
 8009382:	f04f 3cff 	movne.w	ip, #4294967295	; 0xffffffff
 8009386:	440f      	add	r7, r1
 8009388:	1986      	adds	r6, r0, r6
 800938a:	eb47 070c 	adc.w	r7, r7, ip
 800938e:	2f00      	cmp	r7, #0
 8009390:	da04      	bge.n	800939c <forward_lite_nl_softmax_iu8ou8+0x724>
 8009392:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009396:	1876      	adds	r6, r6, r1
 8009398:	f147 0700 	adc.w	r7, r7, #0
 800939c:	0ff6      	lsrs	r6, r6, #31
 800939e:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
 80093a2:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 80093a6:	4631      	mov	r1, r6
 80093a8:	da23      	bge.n	80093f2 <forward_lite_nl_softmax_iu8ou8+0x77a>
 80093aa:	f1b6 4f60 	cmp.w	r6, #3758096384	; 0xe0000000
 80093ae:	dc7c      	bgt.n	80094aa <forward_lite_nl_softmax_iu8ou8+0x832>
 80093b0:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80093b4:	f1b8 0f00 	cmp.w	r8, #0
 80093b8:	f43f af73 	beq.w	80092a2 <forward_lite_nl_softmax_iu8ou8+0x62a>
 80093bc:	fb05 f202 	mul.w	r2, r5, r2
 80093c0:	17e9      	asrs	r1, r5, #31
 80093c2:	fb03 2201 	mla	r2, r3, r1, r2
 80093c6:	fba5 3003 	umull	r3, r0, r5, r3
 80093ca:	f113 4380 	adds.w	r3, r3, #1073741824	; 0x40000000
 80093ce:	eb42 0200 	adc.w	r2, r2, r0
 80093d2:	2a00      	cmp	r2, #0
 80093d4:	da04      	bge.n	80093e0 <forward_lite_nl_softmax_iu8ou8+0x768>
 80093d6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80093da:	181b      	adds	r3, r3, r0
 80093dc:	f142 0200 	adc.w	r2, r2, #0
 80093e0:	0fdb      	lsrs	r3, r3, #31
 80093e2:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80093e6:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 80093ea:	4a37      	ldr	r2, [pc, #220]	; (80094c8 <forward_lite_nl_softmax_iu8ou8+0x850>)
 80093ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093f0:	e6cf      	b.n	8009192 <forward_lite_nl_softmax_iu8ou8+0x51a>
 80093f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80093f6:	440d      	add	r5, r1
 80093f8:	ebb8 7fd5 	cmp.w	r8, r5, lsr #31
 80093fc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8009400:	f43f aea4 	beq.w	800914c <forward_lite_nl_softmax_iu8ou8+0x4d4>
 8009404:	4830      	ldr	r0, [pc, #192]	; (80094c8 <forward_lite_nl_softmax_iu8ou8+0x850>)
 8009406:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800940a:	e6a2      	b.n	8009152 <forward_lite_nl_softmax_iu8ou8+0x4da>
 800940c:	eb01 0586 	add.w	r5, r1, r6, lsl #2
 8009410:	17ef      	asrs	r7, r5, #31
 8009412:	fb03 f107 	mul.w	r1, r3, r7
 8009416:	fb05 1102 	mla	r1, r5, r2, r1
 800941a:	fba3 ec05 	umull	lr, ip, r3, r5
 800941e:	2d00      	cmp	r5, #0
 8009420:	4628      	mov	r0, r5
 8009422:	448c      	add	ip, r1
 8009424:	da3e      	bge.n	80094a4 <forward_lite_nl_softmax_iu8ou8+0x82c>
 8009426:	4928      	ldr	r1, [pc, #160]	; (80094c8 <forward_lite_nl_softmax_iu8ou8+0x850>)
 8009428:	f04f 0901 	mov.w	r9, #1
 800942c:	f04f 0800 	mov.w	r8, #0
 8009430:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8009434:	e782      	b.n	800933c <forward_lite_nl_softmax_iu8ou8+0x6c4>
 8009436:	4925      	ldr	r1, [pc, #148]	; (80094cc <forward_lite_nl_softmax_iu8ou8+0x854>)
 8009438:	910e      	str	r1, [sp, #56]	; 0x38
 800943a:	2200      	movs	r2, #0
 800943c:	4924      	ldr	r1, [pc, #144]	; (80094d0 <forward_lite_nl_softmax_iu8ou8+0x858>)
 800943e:	4b25      	ldr	r3, [pc, #148]	; (80094d4 <forward_lite_nl_softmax_iu8ou8+0x85c>)
 8009440:	9100      	str	r1, [sp, #0]
 8009442:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8009446:	4611      	mov	r1, r2
 8009448:	e9cd 2609 	strd	r2, r6, [sp, #36]	; 0x24
 800944c:	e9cd 620b 	strd	r6, r2, [sp, #44]	; 0x2c
 8009450:	9205      	str	r2, [sp, #20]
 8009452:	9312      	str	r3, [sp, #72]	; 0x48
 8009454:	9206      	str	r2, [sp, #24]
 8009456:	9207      	str	r2, [sp, #28]
 8009458:	4610      	mov	r0, r2
 800945a:	4614      	mov	r4, r2
 800945c:	4696      	mov	lr, r2
 800945e:	4690      	mov	r8, r2
 8009460:	e9cd 160f 	strd	r1, r6, [sp, #60]	; 0x3c
 8009464:	4b1c      	ldr	r3, [pc, #112]	; (80094d8 <forward_lite_nl_softmax_iu8ou8+0x860>)
 8009466:	9608      	str	r6, [sp, #32]
 8009468:	46b4      	mov	ip, r6
 800946a:	4637      	mov	r7, r6
 800946c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009470:	910d      	str	r1, [sp, #52]	; 0x34
 8009472:	9611      	str	r6, [sp, #68]	; 0x44
 8009474:	e4d1      	b.n	8008e1a <forward_lite_nl_softmax_iu8ou8+0x1a2>
 8009476:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800947a:	f04f 0800 	mov.w	r8, #0
 800947e:	4605      	mov	r5, r0
 8009480:	4640      	mov	r0, r8
 8009482:	fbc1 5007 	smlal	r5, r0, r1, r7
 8009486:	0fed      	lsrs	r5, r5, #31
 8009488:	ea45 0540 	orr.w	r5, r5, r0, lsl #1
 800948c:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8009490:	17ef      	asrs	r7, r5, #31
 8009492:	fb03 f107 	mul.w	r1, r3, r7
 8009496:	fb05 1102 	mla	r1, r5, r2, r1
 800949a:	fba3 ec05 	umull	lr, ip, r3, r5
 800949e:	4628      	mov	r0, r5
 80094a0:	448c      	add	ip, r1
 80094a2:	e747      	b.n	8009334 <forward_lite_nl_softmax_iu8ou8+0x6bc>
 80094a4:	f04f 0800 	mov.w	r8, #0
 80094a8:	e744      	b.n	8009334 <forward_lite_nl_softmax_iu8ou8+0x6bc>
 80094aa:	0089      	lsls	r1, r1, #2
 80094ac:	e7a3      	b.n	80093f6 <forward_lite_nl_softmax_iu8ou8+0x77e>
 80094ae:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80094b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094b6:	ea4f 0143 	mov.w	r1, r3, lsl #1
 80094ba:	f6ff af20 	blt.w	80092fe <forward_lite_nl_softmax_iu8ou8+0x686>
 80094be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80094c2:	e686      	b.n	80091d2 <forward_lite_nl_softmax_iu8ou8+0x55a>
 80094c4:	b4b4b4b6 	.word	0xb4b4b4b6
 80094c8:	c0000001 	.word	0xc0000001
 80094cc:	01fffff8 	.word	0x01fffff8
 80094d0:	0fffffe0 	.word	0x0fffffe0
 80094d4:	40000100 	.word	0x40000100
 80094d8:	001fffff 	.word	0x001fffff
 80094dc:	4b4b4b4a 	.word	0x4b4b4b4a

080094e0 <forward_lite_pad_8bit_ch1st_3x3_constant>:
 80094e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e4:	b083      	sub	sp, #12
 80094e6:	461e      	mov	r6, r3
 80094e8:	2e06      	cmp	r6, #6
 80094ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094ec:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80094ee:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80094f2:	f992 4000 	ldrsb.w	r4, [r2]
 80094f6:	9301      	str	r3, [sp, #4]
 80094f8:	460d      	mov	r5, r1
 80094fa:	f000 8081 	beq.w	8009600 <forward_lite_pad_8bit_ch1st_3x3_constant+0x120>
 80094fe:	2e03      	cmp	r6, #3
 8009500:	d056      	beq.n	80095b0 <forward_lite_pad_8bit_ch1st_3x3_constant+0xd0>
 8009502:	2b00      	cmp	r3, #0
 8009504:	db05      	blt.n	8009512 <forward_lite_pad_8bit_ch1st_3x3_constant+0x32>
 8009506:	1c5a      	adds	r2, r3, #1
 8009508:	4608      	mov	r0, r1
 800950a:	4621      	mov	r1, r4
 800950c:	4415      	add	r5, r2
 800950e:	f004 fea1 	bl	800e254 <memset>
 8009512:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 8009516:	f1b8 0f00 	cmp.w	r8, #0
 800951a:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800951e:	dd27      	ble.n	8009570 <forward_lite_pad_8bit_ch1st_3x3_constant+0x90>
 8009520:	9b01      	ldr	r3, [sp, #4]
 8009522:	f109 0702 	add.w	r7, r9, #2
 8009526:	1c5a      	adds	r2, r3, #1
 8009528:	fb07 f306 	mul.w	r3, r7, r6
 800952c:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 8009530:	9300      	str	r3, [sp, #0]
 8009532:	f04f 0b00 	mov.w	fp, #0
 8009536:	2e00      	cmp	r6, #0
 8009538:	eb05 0109 	add.w	r1, r5, r9
 800953c:	dd0e      	ble.n	800955c <forward_lite_pad_8bit_ch1st_3x3_constant+0x7c>
 800953e:	4608      	mov	r0, r1
 8009540:	2500      	movs	r5, #0
 8009542:	f04f 0300 	mov.w	r3, #0
 8009546:	f364 0307 	bfi	r3, r4, #0, #8
 800954a:	3501      	adds	r5, #1
 800954c:	f364 230f 	bfi	r3, r4, #8, #8
 8009550:	42b5      	cmp	r5, r6
 8009552:	8003      	strh	r3, [r0, #0]
 8009554:	4438      	add	r0, r7
 8009556:	d1f4      	bne.n	8009542 <forward_lite_pad_8bit_ch1st_3x3_constant+0x62>
 8009558:	9b00      	ldr	r3, [sp, #0]
 800955a:	4419      	add	r1, r3
 800955c:	4652      	mov	r2, sl
 800955e:	f10b 0b01 	add.w	fp, fp, #1
 8009562:	4620      	mov	r0, r4
 8009564:	eb01 050a 	add.w	r5, r1, sl
 8009568:	f000 fe40 	bl	800a1ec <st_int8_fill>
 800956c:	45c3      	cmp	fp, r8
 800956e:	d1e2      	bne.n	8009536 <forward_lite_pad_8bit_ch1st_3x3_constant+0x56>
 8009570:	2e00      	cmp	r6, #0
 8009572:	eb05 0009 	add.w	r0, r5, r9
 8009576:	dd10      	ble.n	800959a <forward_lite_pad_8bit_ch1st_3x3_constant+0xba>
 8009578:	f109 0702 	add.w	r7, r9, #2
 800957c:	4601      	mov	r1, r0
 800957e:	2200      	movs	r2, #0
 8009580:	f04f 0300 	mov.w	r3, #0
 8009584:	f364 0307 	bfi	r3, r4, #0, #8
 8009588:	3201      	adds	r2, #1
 800958a:	f364 230f 	bfi	r3, r4, #8, #8
 800958e:	42b2      	cmp	r2, r6
 8009590:	800b      	strh	r3, [r1, #0]
 8009592:	4439      	add	r1, r7
 8009594:	d1f4      	bne.n	8009580 <forward_lite_pad_8bit_ch1st_3x3_constant+0xa0>
 8009596:	fb07 0002 	mla	r0, r7, r2, r0
 800959a:	9b01      	ldr	r3, [sp, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	db2c      	blt.n	80095fa <forward_lite_pad_8bit_ch1st_3x3_constant+0x11a>
 80095a0:	461a      	mov	r2, r3
 80095a2:	3201      	adds	r2, #1
 80095a4:	4621      	mov	r1, r4
 80095a6:	b003      	add	sp, #12
 80095a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ac:	f004 be52 	b.w	800e254 <memset>
 80095b0:	b2e2      	uxtb	r2, r4
 80095b2:	0223      	lsls	r3, r4, #8
 80095b4:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	0421      	lsls	r1, r4, #16
 80095bc:	431a      	orrs	r2, r3
 80095be:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 80095c2:	2f00      	cmp	r7, #0
 80095c4:	ea41 0102 	orr.w	r1, r1, r2
 80095c8:	b292      	uxth	r2, r2
 80095ca:	dd16      	ble.n	80095fa <forward_lite_pad_8bit_ch1st_3x3_constant+0x11a>
 80095cc:	eb07 0887 	add.w	r8, r7, r7, lsl #2
 80095d0:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 80095d4:	eb05 0008 	add.w	r0, r5, r8
 80095d8:	f04f 0300 	mov.w	r3, #0
 80095dc:	f364 0307 	bfi	r3, r4, #0, #8
 80095e0:	f364 230f 	bfi	r3, r4, #8, #8
 80095e4:	6029      	str	r1, [r5, #0]
 80095e6:	80aa      	strh	r2, [r5, #4]
 80095e8:	f8a5 3009 	strh.w	r3, [r5, #9]
 80095ec:	81ea      	strh	r2, [r5, #14]
 80095ee:	74ec      	strb	r4, [r5, #19]
 80095f0:	6169      	str	r1, [r5, #20]
 80095f2:	762c      	strb	r4, [r5, #24]
 80095f4:	3519      	adds	r5, #25
 80095f6:	4285      	cmp	r5, r0
 80095f8:	d1ee      	bne.n	80095d8 <forward_lite_pad_8bit_ch1st_3x3_constant+0xf8>
 80095fa:	b003      	add	sp, #12
 80095fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009600:	b2e2      	uxtb	r2, r4
 8009602:	0223      	lsls	r3, r4, #8
 8009604:	b29b      	uxth	r3, r3
 8009606:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 800960a:	431a      	orrs	r2, r3
 800960c:	0423      	lsls	r3, r4, #16
 800960e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009612:	2f00      	cmp	r7, #0
 8009614:	ea42 0203 	orr.w	r2, r2, r3
 8009618:	ddef      	ble.n	80095fa <forward_lite_pad_8bit_ch1st_3x3_constant+0x11a>
 800961a:	350f      	adds	r5, #15
 800961c:	2100      	movs	r1, #0
 800961e:	f04f 0300 	mov.w	r3, #0
 8009622:	f364 0307 	bfi	r3, r4, #0, #8
 8009626:	3101      	adds	r1, #1
 8009628:	f364 230f 	bfi	r3, r4, #8, #8
 800962c:	428f      	cmp	r7, r1
 800962e:	f845 2c0f 	str.w	r2, [r5, #-15]
 8009632:	f845 2c0b 	str.w	r2, [r5, #-11]
 8009636:	f805 4c07 	strb.w	r4, [r5, #-7]
 800963a:	802b      	strh	r3, [r5, #0]
 800963c:	812b      	strh	r3, [r5, #8]
 800963e:	822b      	strh	r3, [r5, #16]
 8009640:	832b      	strh	r3, [r5, #24]
 8009642:	842b      	strh	r3, [r5, #32]
 8009644:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
 8009648:	f8c5 2029 	str.w	r2, [r5, #41]	; 0x29
 800964c:	f8c5 202d 	str.w	r2, [r5, #45]	; 0x2d
 8009650:	f105 0540 	add.w	r5, r5, #64	; 0x40
 8009654:	d1e3      	bne.n	800961e <forward_lite_pad_8bit_ch1st_3x3_constant+0x13e>
 8009656:	b003      	add	sp, #12
 8009658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800965c <forward_lite_pad_constant>:
 800965c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009660:	b085      	sub	sp, #20
 8009662:	4616      	mov	r6, r2
 8009664:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009666:	9201      	str	r2, [sp, #4]
 8009668:	4681      	mov	r9, r0
 800966a:	e9dd 2011 	ldrd	r2, r0, [sp, #68]	; 0x44
 800966e:	2b08      	cmp	r3, #8
 8009670:	e9dd 5a0f 	ldrd	r5, sl, [sp, #60]	; 0x3c
 8009674:	e9dd 7813 	ldrd	r7, r8, [sp, #76]	; 0x4c
 8009678:	460c      	mov	r4, r1
 800967a:	9002      	str	r0, [sp, #8]
 800967c:	d052      	beq.n	8009724 <forward_lite_pad_constant+0xc8>
 800967e:	2a00      	cmp	r2, #0
 8009680:	dd11      	ble.n	80096a6 <forward_lite_pad_constant+0x4a>
 8009682:	f8cd 8000 	str.w	r8, [sp]
 8009686:	f04f 0b00 	mov.w	fp, #0
 800968a:	46b8      	mov	r8, r7
 800968c:	4617      	mov	r7, r2
 800968e:	4621      	mov	r1, r4
 8009690:	462a      	mov	r2, r5
 8009692:	44ab      	add	fp, r5
 8009694:	4630      	mov	r0, r6
 8009696:	f000 fe05 	bl	800a2a4 <st_int8_copy>
 800969a:	455f      	cmp	r7, fp
 800969c:	442c      	add	r4, r5
 800969e:	dcf6      	bgt.n	800968e <forward_lite_pad_constant+0x32>
 80096a0:	4647      	mov	r7, r8
 80096a2:	f8dd 8000 	ldr.w	r8, [sp]
 80096a6:	9b01      	ldr	r3, [sp, #4]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	dd2a      	ble.n	8009702 <forward_lite_pad_constant+0xa6>
 80096ac:	2300      	movs	r3, #0
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	2f00      	cmp	r7, #0
 80096b2:	bfc8      	it	gt
 80096b4:	f04f 0b00 	movgt.w	fp, #0
 80096b8:	dd08      	ble.n	80096cc <forward_lite_pad_constant+0x70>
 80096ba:	4621      	mov	r1, r4
 80096bc:	462a      	mov	r2, r5
 80096be:	44ab      	add	fp, r5
 80096c0:	4630      	mov	r0, r6
 80096c2:	f000 fdef 	bl	800a2a4 <st_int8_copy>
 80096c6:	455f      	cmp	r7, fp
 80096c8:	442c      	add	r4, r5
 80096ca:	dcf6      	bgt.n	80096ba <forward_lite_pad_constant+0x5e>
 80096cc:	4621      	mov	r1, r4
 80096ce:	4648      	mov	r0, r9
 80096d0:	4652      	mov	r2, sl
 80096d2:	f000 fde7 	bl	800a2a4 <st_int8_copy>
 80096d6:	f1b8 0f00 	cmp.w	r8, #0
 80096da:	4454      	add	r4, sl
 80096dc:	44d1      	add	r9, sl
 80096de:	dd0a      	ble.n	80096f6 <forward_lite_pad_constant+0x9a>
 80096e0:	f04f 0b00 	mov.w	fp, #0
 80096e4:	4621      	mov	r1, r4
 80096e6:	462a      	mov	r2, r5
 80096e8:	44ab      	add	fp, r5
 80096ea:	4630      	mov	r0, r6
 80096ec:	f000 fdda 	bl	800a2a4 <st_int8_copy>
 80096f0:	45d8      	cmp	r8, fp
 80096f2:	442c      	add	r4, r5
 80096f4:	dcf6      	bgt.n	80096e4 <forward_lite_pad_constant+0x88>
 80096f6:	9b00      	ldr	r3, [sp, #0]
 80096f8:	9a01      	ldr	r2, [sp, #4]
 80096fa:	3301      	adds	r3, #1
 80096fc:	429a      	cmp	r2, r3
 80096fe:	9300      	str	r3, [sp, #0]
 8009700:	d1d6      	bne.n	80096b0 <forward_lite_pad_constant+0x54>
 8009702:	9b02      	ldr	r3, [sp, #8]
 8009704:	2b00      	cmp	r3, #0
 8009706:	dd0a      	ble.n	800971e <forward_lite_pad_constant+0xc2>
 8009708:	2700      	movs	r7, #0
 800970a:	4698      	mov	r8, r3
 800970c:	4621      	mov	r1, r4
 800970e:	462a      	mov	r2, r5
 8009710:	4630      	mov	r0, r6
 8009712:	442f      	add	r7, r5
 8009714:	f000 fdc6 	bl	800a2a4 <st_int8_copy>
 8009718:	45b8      	cmp	r8, r7
 800971a:	442c      	add	r4, r5
 800971c:	dcf6      	bgt.n	800970c <forward_lite_pad_constant+0xb0>
 800971e:	b005      	add	sp, #20
 8009720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009724:	f996 5000 	ldrsb.w	r5, [r6]
 8009728:	4414      	add	r4, r2
 800972a:	4628      	mov	r0, r5
 800972c:	9403      	str	r4, [sp, #12]
 800972e:	f000 fd5d 	bl	800a1ec <st_int8_fill>
 8009732:	9b01      	ldr	r3, [sp, #4]
 8009734:	2b00      	cmp	r3, #0
 8009736:	4626      	mov	r6, r4
 8009738:	dd29      	ble.n	800978e <forward_lite_pad_constant+0x132>
 800973a:	eb0a 0308 	add.w	r3, sl, r8
 800973e:	443b      	add	r3, r7
 8009740:	f04f 0b00 	mov.w	fp, #0
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	4643      	mov	r3, r8
 8009748:	443c      	add	r4, r7
 800974a:	46d8      	mov	r8, fp
 800974c:	469b      	mov	fp, r3
 800974e:	9b00      	ldr	r3, [sp, #0]
 8009750:	4631      	mov	r1, r6
 8009752:	463a      	mov	r2, r7
 8009754:	4628      	mov	r0, r5
 8009756:	441e      	add	r6, r3
 8009758:	f000 fd48 	bl	800a1ec <st_int8_fill>
 800975c:	4621      	mov	r1, r4
 800975e:	4648      	mov	r0, r9
 8009760:	4652      	mov	r2, sl
 8009762:	f000 fd9f 	bl	800a2a4 <st_int8_copy>
 8009766:	9b00      	ldr	r3, [sp, #0]
 8009768:	eb04 010a 	add.w	r1, r4, sl
 800976c:	465a      	mov	r2, fp
 800976e:	4628      	mov	r0, r5
 8009770:	441c      	add	r4, r3
 8009772:	f000 fd3b 	bl	800a1ec <st_int8_fill>
 8009776:	9b01      	ldr	r3, [sp, #4]
 8009778:	f108 0801 	add.w	r8, r8, #1
 800977c:	4543      	cmp	r3, r8
 800977e:	44d1      	add	r9, sl
 8009780:	d1e5      	bne.n	800974e <forward_lite_pad_constant+0xf2>
 8009782:	461a      	mov	r2, r3
 8009784:	9900      	ldr	r1, [sp, #0]
 8009786:	9b03      	ldr	r3, [sp, #12]
 8009788:	fb01 3302 	mla	r3, r1, r2, r3
 800978c:	9303      	str	r3, [sp, #12]
 800978e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009792:	4628      	mov	r0, r5
 8009794:	b005      	add	sp, #20
 8009796:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800979a:	f000 bd27 	b.w	800a1ec <st_int8_fill>
 800979e:	bf00      	nop

080097a0 <forward_lite_pad_edge>:
 80097a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a4:	ed2d 8b02 	vpush	{d8}
 80097a8:	b087      	sub	sp, #28
 80097aa:	e9dd 4a14 	ldrd	r4, sl, [sp, #80]	; 0x50
 80097ae:	9305      	str	r3, [sp, #20]
 80097b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80097b2:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
 80097b6:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 80097ba:	9103      	str	r1, [sp, #12]
 80097bc:	18cd      	adds	r5, r1, r3
 80097be:	1e13      	subs	r3, r2, #0
 80097c0:	9504      	str	r5, [sp, #16]
 80097c2:	9301      	str	r3, [sp, #4]
 80097c4:	dd37      	ble.n	8009836 <forward_lite_pad_edge+0x96>
 80097c6:	fb04 f308 	mul.w	r3, r4, r8
 80097ca:	9302      	str	r3, [sp, #8]
 80097cc:	ee08 aa10 	vmov	s16, sl
 80097d0:	2300      	movs	r3, #0
 80097d2:	4607      	mov	r7, r0
 80097d4:	9300      	str	r3, [sp, #0]
 80097d6:	f1b9 0f00 	cmp.w	r9, #0
 80097da:	bfc8      	it	gt
 80097dc:	2600      	movgt	r6, #0
 80097de:	dd08      	ble.n	80097f2 <forward_lite_pad_edge+0x52>
 80097e0:	4629      	mov	r1, r5
 80097e2:	4426      	add	r6, r4
 80097e4:	4622      	mov	r2, r4
 80097e6:	4638      	mov	r0, r7
 80097e8:	f000 fd5c 	bl	800a2a4 <st_int8_copy>
 80097ec:	45b1      	cmp	r9, r6
 80097ee:	4425      	add	r5, r4
 80097f0:	dcf6      	bgt.n	80097e0 <forward_lite_pad_edge+0x40>
 80097f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097f4:	4629      	mov	r1, r5
 80097f6:	4638      	mov	r0, r7
 80097f8:	461a      	mov	r2, r3
 80097fa:	441f      	add	r7, r3
 80097fc:	441d      	add	r5, r3
 80097fe:	f000 fd51 	bl	800a2a4 <st_int8_copy>
 8009802:	f1b8 0f00 	cmp.w	r8, #0
 8009806:	eba7 0a04 	sub.w	sl, r7, r4
 800980a:	dd0c      	ble.n	8009826 <forward_lite_pad_edge+0x86>
 800980c:	46ab      	mov	fp, r5
 800980e:	2600      	movs	r6, #0
 8009810:	4659      	mov	r1, fp
 8009812:	3601      	adds	r6, #1
 8009814:	4622      	mov	r2, r4
 8009816:	4650      	mov	r0, sl
 8009818:	f000 fd44 	bl	800a2a4 <st_int8_copy>
 800981c:	4546      	cmp	r6, r8
 800981e:	44a3      	add	fp, r4
 8009820:	d1f6      	bne.n	8009810 <forward_lite_pad_edge+0x70>
 8009822:	9b02      	ldr	r3, [sp, #8]
 8009824:	441d      	add	r5, r3
 8009826:	9b00      	ldr	r3, [sp, #0]
 8009828:	9a01      	ldr	r2, [sp, #4]
 800982a:	3301      	adds	r3, #1
 800982c:	429a      	cmp	r2, r3
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	d1d1      	bne.n	80097d6 <forward_lite_pad_edge+0x36>
 8009832:	ee18 aa10 	vmov	sl, s16
 8009836:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800983a:	4293      	cmp	r3, r2
 800983c:	d009      	beq.n	8009852 <forward_lite_pad_edge+0xb2>
 800983e:	461c      	mov	r4, r3
 8009840:	4615      	mov	r5, r2
 8009842:	4621      	mov	r1, r4
 8009844:	4652      	mov	r2, sl
 8009846:	4628      	mov	r0, r5
 8009848:	4454      	add	r4, sl
 800984a:	f000 fd2b 	bl	800a2a4 <st_int8_copy>
 800984e:	42a5      	cmp	r5, r4
 8009850:	d1f7      	bne.n	8009842 <forward_lite_pad_edge+0xa2>
 8009852:	9b01      	ldr	r3, [sp, #4]
 8009854:	9d05      	ldr	r5, [sp, #20]
 8009856:	441d      	add	r5, r3
 8009858:	9b03      	ldr	r3, [sp, #12]
 800985a:	3d01      	subs	r5, #1
 800985c:	fb0a 3505 	mla	r5, sl, r5, r3
 8009860:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009862:	18ec      	adds	r4, r5, r3
 8009864:	42a5      	cmp	r5, r4
 8009866:	bf18      	it	ne
 8009868:	f1ca 0600 	rsbne	r6, sl, #0
 800986c:	d007      	beq.n	800987e <forward_lite_pad_edge+0xde>
 800986e:	4621      	mov	r1, r4
 8009870:	4652      	mov	r2, sl
 8009872:	4628      	mov	r0, r5
 8009874:	4434      	add	r4, r6
 8009876:	f000 fd15 	bl	800a2a4 <st_int8_copy>
 800987a:	42a5      	cmp	r5, r4
 800987c:	d1f7      	bne.n	800986e <forward_lite_pad_edge+0xce>
 800987e:	b007      	add	sp, #28
 8009880:	ecbd 8b02 	vpop	{d8}
 8009884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009888 <forward_lite_pad_reflect>:
 8009888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800988c:	b08f      	sub	sp, #60	; 0x3c
 800988e:	460e      	mov	r6, r1
 8009890:	9f22      	ldr	r7, [sp, #136]	; 0x88
 8009892:	f9bd 5080 	ldrsh.w	r5, [sp, #128]	; 0x80
 8009896:	f9bd e084 	ldrsh.w	lr, [sp, #132]	; 0x84
 800989a:	910b      	str	r1, [sp, #44]	; 0x2c
 800989c:	2b00      	cmp	r3, #0
 800989e:	4684      	mov	ip, r0
 80098a0:	9002      	str	r0, [sp, #8]
 80098a2:	950c      	str	r5, [sp, #48]	; 0x30
 80098a4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80098a6:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80098aa:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80098ac:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80098b0:	f9bd 007c 	ldrsh.w	r0, [sp, #124]	; 0x7c
 80098b4:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80098b6:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80098ba:	4437      	add	r7, r6
 80098bc:	9307      	str	r3, [sp, #28]
 80098be:	dd58      	ble.n	8009972 <forward_lite_pad_reflect+0xea>
 80098c0:	4408      	add	r0, r1
 80098c2:	fb02 f200 	mul.w	r2, r2, r0
 80098c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80098c8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80098ca:	9206      	str	r2, [sp, #24]
 80098cc:	4403      	add	r3, r0
 80098ce:	442b      	add	r3, r5
 80098d0:	930a      	str	r3, [sp, #40]	; 0x28
 80098d2:	197b      	adds	r3, r7, r5
 80098d4:	9301      	str	r3, [sp, #4]
 80098d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80098d8:	1e8b      	subs	r3, r1, #2
 80098da:	fb04 c303 	mla	r3, r4, r3, ip
 80098de:	9304      	str	r3, [sp, #16]
 80098e0:	fb08 2305 	mla	r3, r8, r5, r2
 80098e4:	fb09 6303 	mla	r3, r9, r3, r6
 80098e8:	9303      	str	r3, [sp, #12]
 80098ea:	fb09 f308 	mul.w	r3, r9, r8
 80098ee:	fb04 f101 	mul.w	r1, r4, r1
 80098f2:	9308      	str	r3, [sp, #32]
 80098f4:	2300      	movs	r3, #0
 80098f6:	9109      	str	r1, [sp, #36]	; 0x24
 80098f8:	9305      	str	r3, [sp, #20]
 80098fa:	f1c9 0a00 	rsb	sl, r9, #0
 80098fe:	9b01      	ldr	r3, [sp, #4]
 8009900:	42bb      	cmp	r3, r7
 8009902:	d00a      	beq.n	800991a <forward_lite_pad_reflect+0x92>
 8009904:	9e02      	ldr	r6, [sp, #8]
 8009906:	461d      	mov	r5, r3
 8009908:	4455      	add	r5, sl
 800990a:	4426      	add	r6, r4
 800990c:	4622      	mov	r2, r4
 800990e:	4629      	mov	r1, r5
 8009910:	4630      	mov	r0, r6
 8009912:	f000 fcc7 	bl	800a2a4 <st_int8_copy>
 8009916:	42bd      	cmp	r5, r7
 8009918:	d1f6      	bne.n	8009908 <forward_lite_pad_reflect+0x80>
 800991a:	9b02      	ldr	r3, [sp, #8]
 800991c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800991e:	9901      	ldr	r1, [sp, #4]
 8009920:	4618      	mov	r0, r3
 8009922:	4413      	add	r3, r2
 8009924:	9302      	str	r3, [sp, #8]
 8009926:	f000 fcbd 	bl	800a2a4 <st_int8_copy>
 800992a:	9b06      	ldr	r3, [sp, #24]
 800992c:	4543      	cmp	r3, r8
 800992e:	da0d      	bge.n	800994c <forward_lite_pad_reflect+0xc4>
 8009930:	e9dd b603 	ldrd	fp, r6, [sp, #12]
 8009934:	461d      	mov	r5, r3
 8009936:	4659      	mov	r1, fp
 8009938:	4630      	mov	r0, r6
 800993a:	3501      	adds	r5, #1
 800993c:	4622      	mov	r2, r4
 800993e:	f000 fcb1 	bl	800a2a4 <st_int8_copy>
 8009942:	45a8      	cmp	r8, r5
 8009944:	44cb      	add	fp, r9
 8009946:	eba6 0604 	sub.w	r6, r6, r4
 800994a:	d1f4      	bne.n	8009936 <forward_lite_pad_reflect+0xae>
 800994c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800994e:	9901      	ldr	r1, [sp, #4]
 8009950:	9b05      	ldr	r3, [sp, #20]
 8009952:	4411      	add	r1, r2
 8009954:	4417      	add	r7, r2
 8009956:	9101      	str	r1, [sp, #4]
 8009958:	9a04      	ldr	r2, [sp, #16]
 800995a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800995c:	440a      	add	r2, r1
 800995e:	9204      	str	r2, [sp, #16]
 8009960:	9908      	ldr	r1, [sp, #32]
 8009962:	9a03      	ldr	r2, [sp, #12]
 8009964:	440a      	add	r2, r1
 8009966:	9203      	str	r2, [sp, #12]
 8009968:	9a07      	ldr	r2, [sp, #28]
 800996a:	3301      	adds	r3, #1
 800996c:	429a      	cmp	r2, r3
 800996e:	9305      	str	r3, [sp, #20]
 8009970:	d1c5      	bne.n	80098fe <forward_lite_pad_reflect+0x76>
 8009972:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009974:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009976:	fb03 f404 	mul.w	r4, r3, r4
 800997a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800997c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8009980:	42a3      	cmp	r3, r4
 8009982:	d00c      	beq.n	800999e <forward_lite_pad_reflect+0x116>
 8009984:	461d      	mov	r5, r3
 8009986:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009988:	425e      	negs	r6, r3
 800998a:	461f      	mov	r7, r3
 800998c:	4629      	mov	r1, r5
 800998e:	4620      	mov	r0, r4
 8009990:	463a      	mov	r2, r7
 8009992:	443d      	add	r5, r7
 8009994:	4434      	add	r4, r6
 8009996:	f000 fc85 	bl	800a2a4 <st_int8_copy>
 800999a:	42a5      	cmp	r5, r4
 800999c:	d1f6      	bne.n	800998c <forward_lite_pad_reflect+0x104>
 800999e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099a0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80099a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80099a4:	1e5c      	subs	r4, r3, #1
 80099a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099a8:	fb02 f505 	mul.w	r5, r2, r5
 80099ac:	fb02 3404 	mla	r4, r2, r4, r3
 80099b0:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 80099b4:	42ac      	cmp	r4, r5
 80099b6:	d00a      	beq.n	80099ce <forward_lite_pad_reflect+0x146>
 80099b8:	4256      	negs	r6, r2
 80099ba:	4617      	mov	r7, r2
 80099bc:	4621      	mov	r1, r4
 80099be:	4628      	mov	r0, r5
 80099c0:	463a      	mov	r2, r7
 80099c2:	4434      	add	r4, r6
 80099c4:	443d      	add	r5, r7
 80099c6:	f000 fc6d 	bl	800a2a4 <st_int8_copy>
 80099ca:	42ac      	cmp	r4, r5
 80099cc:	d1f6      	bne.n	80099bc <forward_lite_pad_reflect+0x134>
 80099ce:	b00f      	add	sp, #60	; 0x3c
 80099d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080099d4 <align_factor>:
 80099d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80099d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80099dc:	b508      	push	{r3, lr}
 80099de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099e2:	f04f 0300 	mov.w	r3, #0
 80099e6:	8003      	strh	r3, [r0, #0]
 80099e8:	d425      	bmi.n	8009a36 <align_factor+0x62>
 80099ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80099ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80099f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80099f6:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80099fa:	e005      	b.n	8009a08 <align_factor+0x34>
 80099fc:	8003      	strh	r3, [r0, #0]
 80099fe:	b293      	uxth	r3, r2
 8009a00:	428b      	cmp	r3, r1
 8009a02:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009a06:	d02d      	beq.n	8009a64 <align_factor+0x90>
 8009a08:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a10:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8009a14:	dcf2      	bgt.n	80099fc <align_factor+0x28>
 8009a16:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009a78 <align_factor+0xa4>
 8009a1a:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009a1e:	ee17 0a90 	vmov	r0, s15
 8009a22:	f7f6 fc3d 	bl	80002a0 <__aeabi_f2lz>
 8009a26:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8009a2a:	bf1c      	itt	ne
 8009a2c:	f06f 4000 	mvnne.w	r0, #2147483648	; 0x80000000
 8009a30:	ea80 70e1 	eorne.w	r0, r0, r1, asr #31
 8009a34:	bd08      	pop	{r3, pc}
 8009a36:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a3e:	ddd4      	ble.n	80099ea <align_factor+0x16>
 8009a40:	2301      	movs	r3, #1
 8009a42:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009a46:	e005      	b.n	8009a54 <align_factor+0x80>
 8009a48:	8003      	strh	r3, [r0, #0]
 8009a4a:	b293      	uxth	r3, r2
 8009a4c:	2b21      	cmp	r3, #33	; 0x21
 8009a4e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009a52:	d00d      	beq.n	8009a70 <align_factor+0x9c>
 8009a54:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a5c:	f103 0201 	add.w	r2, r3, #1
 8009a60:	d4f2      	bmi.n	8009a48 <align_factor+0x74>
 8009a62:	e7d8      	b.n	8009a16 <align_factor+0x42>
 8009a64:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 8009a68:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009a6c:	8003      	strh	r3, [r0, #0]
 8009a6e:	e7d2      	b.n	8009a16 <align_factor+0x42>
 8009a70:	2300      	movs	r3, #0
 8009a72:	8003      	strh	r3, [r0, #0]
 8009a74:	4618      	mov	r0, r3
 8009a76:	bd08      	pop	{r3, pc}
 8009a78:	4f000000 	.word	0x4f000000

08009a7c <align_factor_ch>:
 8009a7c:	b361      	cbz	r1, 8009ad8 <align_factor_ch+0x5c>
 8009a7e:	ee80 7a20 	vdiv.f32	s14, s0, s1
 8009a82:	b530      	push	{r4, r5, lr}
 8009a84:	f1a2 0c04 	sub.w	ip, r2, #4
 8009a88:	f1a3 0e02 	sub.w	lr, r3, #2
 8009a8c:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 8009a90:	2500      	movs	r5, #0
 8009a92:	ecf0 7a01 	vldmia	r0!, {s15}
 8009a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a9a:	ee17 2a90 	vmov	r2, s15
 8009a9e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009aa2:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8009aa6:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 8009aaa:	2a00      	cmp	r2, #0
 8009aac:	f1c1 017e 	rsb	r1, r1, #126	; 0x7e
 8009ab0:	bfb8      	it	lt
 8009ab2:	425b      	neglt	r3, r3
 8009ab4:	291f      	cmp	r1, #31
 8009ab6:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8009aba:	dc06      	bgt.n	8009aca <align_factor_ch+0x4e>
 8009abc:	4284      	cmp	r4, r0
 8009abe:	f82e 1f02 	strh.w	r1, [lr, #2]!
 8009ac2:	f84c 3f04 	str.w	r3, [ip, #4]!
 8009ac6:	d1e4      	bne.n	8009a92 <align_factor_ch+0x16>
 8009ac8:	bd30      	pop	{r4, r5, pc}
 8009aca:	4284      	cmp	r4, r0
 8009acc:	f82e 5f02 	strh.w	r5, [lr, #2]!
 8009ad0:	f84c 5f04 	str.w	r5, [ip, #4]!
 8009ad4:	d1dd      	bne.n	8009a92 <align_factor_ch+0x16>
 8009ad6:	bd30      	pop	{r4, r5, pc}
 8009ad8:	4770      	bx	lr
 8009ada:	bf00      	nop

08009adc <st_sssa8_ch_convolve_rank1upd>:
 8009adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae0:	b085      	sub	sp, #20
 8009ae2:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8009ae6:	f99d b040 	ldrsb.w	fp, [sp, #64]	; 0x40
 8009aea:	fb13 f304 	smulbb	r3, r3, r4
 8009aee:	fb13 f500 	smulbb	r5, r3, r0
 8009af2:	460c      	mov	r4, r1
 8009af4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009af6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009af8:	2a00      	cmp	r2, #0
 8009afa:	d073      	beq.n	8009be4 <st_sssa8_ch_convolve_rank1upd+0x108>
 8009afc:	b2ad      	uxth	r5, r5
 8009afe:	ea4f 0895 	mov.w	r8, r5, lsr #2
 8009b02:	f1a3 0904 	sub.w	r9, r3, #4
 8009b06:	f1a8 0381 	sub.w	r3, r8, #129	; 0x81
 8009b0a:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8009b0e:	ebc3 2043 	rsb	r0, r3, r3, lsl #9
 8009b12:	f1a8 0780 	sub.w	r7, r8, #128	; 0x80
 8009b16:	eb07 17c0 	add.w	r7, r7, r0, lsl #7
 8009b1a:	0258      	lsls	r0, r3, #9
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	025b      	lsls	r3, r3, #9
 8009b20:	f005 0503 	and.w	r5, r5, #3
 8009b24:	9301      	str	r3, [sp, #4]
 8009b26:	f500 6380 	add.w	r3, r0, #1024	; 0x400
 8009b2a:	9303      	str	r3, [sp, #12]
 8009b2c:	1e6b      	subs	r3, r5, #1
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	9300      	str	r3, [sp, #0]
 8009b32:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8009b36:	b2bf      	uxth	r7, r7
 8009b38:	eb01 0a82 	add.w	sl, r1, r2, lsl #2
 8009b3c:	9302      	str	r3, [sp, #8]
 8009b3e:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8009b42:	d954      	bls.n	8009bee <st_sssa8_ch_convolve_rank1upd+0x112>
 8009b44:	9b03      	ldr	r3, [sp, #12]
 8009b46:	f504 7000 	add.w	r0, r4, #512	; 0x200
 8009b4a:	eb04 0c03 	add.w	ip, r4, r3
 8009b4e:	2600      	movs	r6, #0
 8009b50:	f5a0 7100 	sub.w	r1, r0, #512	; 0x200
 8009b54:	2200      	movs	r2, #0
 8009b56:	f851 3b04 	ldr.w	r3, [r1], #4
 8009b5a:	fa2f fe83 	sxtb16	lr, r3
 8009b5e:	4281      	cmp	r1, r0
 8009b60:	ea4f 2333 	mov.w	r3, r3, ror #8
 8009b64:	fa92 f21e 	qadd16	r2, r2, lr
 8009b68:	fa2f f383 	sxtb16	r3, r3
 8009b6c:	fa92 f213 	qadd16	r2, r2, r3
 8009b70:	d1f1      	bne.n	8009b56 <st_sssa8_ch_convolve_rank1upd+0x7a>
 8009b72:	f501 7000 	add.w	r0, r1, #512	; 0x200
 8009b76:	b213      	sxth	r3, r2
 8009b78:	eb03 4222 	add.w	r2, r3, r2, asr #16
 8009b7c:	4560      	cmp	r0, ip
 8009b7e:	4416      	add	r6, r2
 8009b80:	d1e6      	bne.n	8009b50 <st_sssa8_ch_convolve_rank1upd+0x74>
 8009b82:	9b01      	ldr	r3, [sp, #4]
 8009b84:	18e1      	adds	r1, r4, r3
 8009b86:	463c      	mov	r4, r7
 8009b88:	b37c      	cbz	r4, 8009bea <st_sssa8_ch_convolve_rank1upd+0x10e>
 8009b8a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f851 3b04 	ldr.w	r3, [r1], #4
 8009b94:	fa2f f083 	sxtb16	r0, r3
 8009b98:	428c      	cmp	r4, r1
 8009b9a:	ea4f 2333 	mov.w	r3, r3, ror #8
 8009b9e:	fa92 f210 	qadd16	r2, r2, r0
 8009ba2:	fa2f f383 	sxtb16	r3, r3
 8009ba6:	fa92 f213 	qadd16	r2, r2, r3
 8009baa:	d1f1      	bne.n	8009b90 <st_sssa8_ch_convolve_rank1upd+0xb4>
 8009bac:	b213      	sxth	r3, r2
 8009bae:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8009bb2:	441e      	add	r6, r3
 8009bb4:	b16d      	cbz	r5, 8009bd2 <st_sssa8_ch_convolve_rank1upd+0xf6>
 8009bb6:	f994 3000 	ldrsb.w	r3, [r4]
 8009bba:	441e      	add	r6, r3
 8009bbc:	9b00      	ldr	r3, [sp, #0]
 8009bbe:	b13b      	cbz	r3, 8009bd0 <st_sssa8_ch_convolve_rank1upd+0xf4>
 8009bc0:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8009bc4:	2d02      	cmp	r5, #2
 8009bc6:	441e      	add	r6, r3
 8009bc8:	bf1c      	itt	ne
 8009bca:	f994 3002 	ldrsbne.w	r3, [r4, #2]
 8009bce:	18f6      	addne	r6, r6, r3
 8009bd0:	442c      	add	r4, r5
 8009bd2:	f859 3f04 	ldr.w	r3, [r9, #4]!
 8009bd6:	fb0b 3616 	mls	r6, fp, r6, r3
 8009bda:	f84a 6b04 	str.w	r6, [sl], #4
 8009bde:	9b02      	ldr	r3, [sp, #8]
 8009be0:	459a      	cmp	sl, r3
 8009be2:	d1ac      	bne.n	8009b3e <st_sssa8_ch_convolve_rank1upd+0x62>
 8009be4:	b005      	add	sp, #20
 8009be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bea:	460c      	mov	r4, r1
 8009bec:	e7e2      	b.n	8009bb4 <st_sssa8_ch_convolve_rank1upd+0xd8>
 8009bee:	4621      	mov	r1, r4
 8009bf0:	2600      	movs	r6, #0
 8009bf2:	4644      	mov	r4, r8
 8009bf4:	e7c8      	b.n	8009b88 <st_sssa8_ch_convolve_rank1upd+0xac>
 8009bf6:	bf00      	nop

08009bf8 <st_sssa8_fully_connected>:
 8009bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfc:	b097      	sub	sp, #92	; 0x5c
 8009bfe:	460d      	mov	r5, r1
 8009c00:	9313      	str	r3, [sp, #76]	; 0x4c
 8009c02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c04:	9204      	str	r2, [sp, #16]
 8009c06:	f9b3 1000 	ldrsh.w	r1, [r3]
 8009c0a:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8009c0c:	f99d 6088 	ldrsb.w	r6, [sp, #136]	; 0x88
 8009c10:	6824      	ldr	r4, [r4, #0]
 8009c12:	9408      	str	r4, [sp, #32]
 8009c14:	1e4b      	subs	r3, r1, #1
 8009c16:	b29a      	uxth	r2, r3
 8009c18:	2a14      	cmp	r2, #20
 8009c1a:	930d      	str	r3, [sp, #52]	; 0x34
 8009c1c:	f99d 308c 	ldrsb.w	r3, [sp, #140]	; 0x8c
 8009c20:	9105      	str	r1, [sp, #20]
 8009c22:	bf9f      	itttt	ls
 8009c24:	2201      	movls	r2, #1
 8009c26:	408b      	lslls	r3, r1
 8009c28:	408a      	lslls	r2, r1
 8009c2a:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
 8009c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009c32:	4683      	mov	fp, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f000 81e4 	beq.w	800a002 <st_sssa8_fully_connected+0x40a>
 8009c3a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009c3c:	9600      	str	r6, [sp, #0]
 8009c3e:	b2b3      	uxth	r3, r6
 8009c40:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8009c44:	9e04      	ldr	r6, [sp, #16]
 8009c46:	0851      	lsrs	r1, r2, #1
 8009c48:	460c      	mov	r4, r1
 8009c4a:	9115      	str	r1, [sp, #84]	; 0x54
 8009c4c:	4632      	mov	r2, r6
 8009c4e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009c50:	f000 fbae 	bl	800a3b0 <st_int8_reordered_no_shift_zero>
 8009c54:	4621      	mov	r1, r4
 8009c56:	2c00      	cmp	r4, #0
 8009c58:	f000 8149 	beq.w	8009eee <st_sssa8_fully_connected+0x2f6>
 8009c5c:	4634      	mov	r4, r6
 8009c5e:	f1a6 0310 	sub.w	r3, r6, #16
 8009c62:	9e05      	ldr	r6, [sp, #20]
 8009c64:	1e4a      	subs	r2, r1, #1
 8009c66:	2001      	movs	r0, #1
 8009c68:	1eb1      	subs	r1, r6, #2
 8009c6a:	fa00 f101 	lsl.w	r1, r0, r1
 8009c6e:	9112      	str	r1, [sp, #72]	; 0x48
 8009c70:	9924      	ldr	r1, [sp, #144]	; 0x90
 8009c72:	b292      	uxth	r2, r2
 8009c74:	3110      	adds	r1, #16
 8009c76:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009c7a:	920e      	str	r2, [sp, #56]	; 0x38
 8009c7c:	1ee2      	subs	r2, r4, #3
 8009c7e:	920f      	str	r2, [sp, #60]	; 0x3c
 8009c80:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009c82:	3208      	adds	r2, #8
 8009c84:	9206      	str	r2, [sp, #24]
 8009c86:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8009c88:	091b      	lsrs	r3, r3, #4
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	3202      	adds	r2, #2
 8009c8e:	9207      	str	r2, [sp, #28]
 8009c90:	011a      	lsls	r2, r3, #4
 8009c92:	920a      	str	r2, [sp, #40]	; 0x28
 8009c94:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009c96:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8009c9a:	9310      	str	r3, [sp, #64]	; 0x40
 8009c9c:	1f23      	subs	r3, r4, #4
 8009c9e:	9311      	str	r3, [sp, #68]	; 0x44
 8009ca0:	1b83      	subs	r3, r0, r6
 8009ca2:	9314      	str	r3, [sp, #80]	; 0x50
 8009ca4:	9a06      	ldr	r2, [sp, #24]
 8009ca6:	e952 3102 	ldrd	r3, r1, [r2, #-8]
 8009caa:	9a04      	ldr	r2, [sp, #16]
 8009cac:	18ac      	adds	r4, r5, r2
 8009cae:	2a0f      	cmp	r2, #15
 8009cb0:	9403      	str	r4, [sp, #12]
 8009cb2:	f340 81a0 	ble.w	8009ff6 <st_sssa8_fully_connected+0x3fe>
 8009cb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cb8:	18ae      	adds	r6, r5, r2
 8009cba:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009cbc:	460f      	mov	r7, r1
 8009cbe:	f8d4 e000 	ldr.w	lr, [r4]
 8009cc2:	6828      	ldr	r0, [r5, #0]
 8009cc4:	fa2f fc8e 	sxtb16	ip, lr
 8009cc8:	ea4f 2130 	mov.w	r1, r0, ror #8
 8009ccc:	ea4f 283e 	mov.w	r8, lr, ror #8
 8009cd0:	fa2f f080 	sxtb16	r0, r0
 8009cd4:	f8d2 e000 	ldr.w	lr, [r2]
 8009cd8:	fa2f f181 	sxtb16	r1, r1
 8009cdc:	fa2f f888 	sxtb16	r8, r8
 8009ce0:	fb2e 3300 	smlad	r3, lr, r0, r3
 8009ce4:	fb2e 7e0c 	smlad	lr, lr, ip, r7
 8009ce8:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8009cec:	fb2c 3301 	smlad	r3, ip, r1, r3
 8009cf0:	fb2c e808 	smlad	r8, ip, r8, lr
 8009cf4:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8009cf8:	686f      	ldr	r7, [r5, #4]
 8009cfa:	fa2f f08c 	sxtb16	r0, ip
 8009cfe:	ea4f 2137 	mov.w	r1, r7, ror #8
 8009d02:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 8009d06:	fa2f f787 	sxtb16	r7, r7
 8009d0a:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8009d0e:	fa2f f181 	sxtb16	r1, r1
 8009d12:	fa2f fe8e 	sxtb16	lr, lr
 8009d16:	fb2c 3707 	smlad	r7, ip, r7, r3
 8009d1a:	fb2c 8c00 	smlad	ip, ip, r0, r8
 8009d1e:	68d0      	ldr	r0, [r2, #12]
 8009d20:	fb20 7701 	smlad	r7, r0, r1, r7
 8009d24:	fb20 ce0e 	smlad	lr, r0, lr, ip
 8009d28:	68a0      	ldr	r0, [r4, #8]
 8009d2a:	68a9      	ldr	r1, [r5, #8]
 8009d2c:	fa2f fc80 	sxtb16	ip, r0
 8009d30:	ea4f 2331 	mov.w	r3, r1, ror #8
 8009d34:	ea4f 2a30 	mov.w	sl, r0, ror #8
 8009d38:	fa2f f181 	sxtb16	r1, r1
 8009d3c:	6910      	ldr	r0, [r2, #16]
 8009d3e:	fa2f f383 	sxtb16	r3, r3
 8009d42:	fa2f fa8a 	sxtb16	sl, sl
 8009d46:	fb20 7101 	smlad	r1, r0, r1, r7
 8009d4a:	fb20 e00c 	smlad	r0, r0, ip, lr
 8009d4e:	6957      	ldr	r7, [r2, #20]
 8009d50:	fb27 1103 	smlad	r1, r7, r3, r1
 8009d54:	fb27 0a0a 	smlad	sl, r7, sl, r0
 8009d58:	68e7      	ldr	r7, [r4, #12]
 8009d5a:	68e8      	ldr	r0, [r5, #12]
 8009d5c:	fa2f fc87 	sxtb16	ip, r7
 8009d60:	ea4f 2930 	mov.w	r9, r0, ror #8
 8009d64:	ea4f 2837 	mov.w	r8, r7, ror #8
 8009d68:	3510      	adds	r5, #16
 8009d6a:	6997      	ldr	r7, [r2, #24]
 8009d6c:	fa2f f380 	sxtb16	r3, r0
 8009d70:	3410      	adds	r4, #16
 8009d72:	fa2f f989 	sxtb16	r9, r9
 8009d76:	fa2f f888 	sxtb16	r8, r8
 8009d7a:	fb27 1303 	smlad	r3, r7, r3, r1
 8009d7e:	fb27 a70c 	smlad	r7, r7, ip, sl
 8009d82:	f8d2 e01c 	ldr.w	lr, [r2, #28]
 8009d86:	3220      	adds	r2, #32
 8009d88:	fb2e 3309 	smlad	r3, lr, r9, r3
 8009d8c:	fb2e 7708 	smlad	r7, lr, r8, r7
 8009d90:	42b5      	cmp	r5, r6
 8009d92:	d194      	bne.n	8009cbe <st_sssa8_fully_connected+0xc6>
 8009d94:	9a03      	ldr	r2, [sp, #12]
 8009d96:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009d98:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8009d9c:	4402      	add	r2, r0
 8009d9e:	4639      	mov	r1, r7
 8009da0:	9203      	str	r2, [sp, #12]
 8009da2:	4681      	mov	r9, r0
 8009da4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009da6:	4591      	cmp	r9, r2
 8009da8:	f280 8123 	bge.w	8009ff2 <st_sssa8_fully_connected+0x3fa>
 8009dac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009dae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009db2:	eba2 0a09 	sub.w	sl, r2, r9
 8009db6:	ea4f 029a 	mov.w	r2, sl, lsr #2
 8009dba:	f102 0a01 	add.w	sl, r2, #1
 8009dbe:	920c      	str	r2, [sp, #48]	; 0x30
 8009dc0:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8009dc4:	920b      	str	r2, [sp, #44]	; 0x2c
 8009dc6:	eb06 048a 	add.w	r4, r6, sl, lsl #2
 8009dca:	465f      	mov	r7, fp
 8009dcc:	f858 2b04 	ldr.w	r2, [r8], #4
 8009dd0:	f856 eb04 	ldr.w	lr, [r6], #4
 8009dd4:	fa2f f082 	sxtb16	r0, r2
 8009dd8:	ea4f 2c3e 	mov.w	ip, lr, ror #8
 8009ddc:	ea4f 2532 	mov.w	r5, r2, ror #8
 8009de0:	fa2f fe8e 	sxtb16	lr, lr
 8009de4:	683a      	ldr	r2, [r7, #0]
 8009de6:	fa2f fc8c 	sxtb16	ip, ip
 8009dea:	fa2f f585 	sxtb16	r5, r5
 8009dee:	fb22 330e 	smlad	r3, r2, lr, r3
 8009df2:	fb22 1200 	smlad	r2, r2, r0, r1
 8009df6:	6879      	ldr	r1, [r7, #4]
 8009df8:	3708      	adds	r7, #8
 8009dfa:	fb21 330c 	smlad	r3, r1, ip, r3
 8009dfe:	fb21 2105 	smlad	r1, r1, r5, r2
 8009e02:	42a6      	cmp	r6, r4
 8009e04:	d1e2      	bne.n	8009dcc <st_sssa8_fully_connected+0x1d4>
 8009e06:	9a03      	ldr	r2, [sp, #12]
 8009e08:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009e0a:	4402      	add	r2, r0
 8009e0c:	9203      	str	r2, [sp, #12]
 8009e0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e10:	f109 0904 	add.w	r9, r9, #4
 8009e14:	eb0b 0bca 	add.w	fp, fp, sl, lsl #3
 8009e18:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 8009e1c:	9d04      	ldr	r5, [sp, #16]
 8009e1e:	454d      	cmp	r5, r9
 8009e20:	dd38      	ble.n	8009e94 <st_sssa8_fully_connected+0x29c>
 8009e22:	f9bb 2000 	ldrsh.w	r2, [fp]
 8009e26:	f994 0000 	ldrsb.w	r0, [r4]
 8009e2a:	9e03      	ldr	r6, [sp, #12]
 8009e2c:	fb12 3300 	smlabb	r3, r2, r0, r3
 8009e30:	f996 0000 	ldrsb.w	r0, [r6]
 8009e34:	fb12 1100 	smlabb	r1, r2, r0, r1
 8009e38:	f109 0201 	add.w	r2, r9, #1
 8009e3c:	42aa      	cmp	r2, r5
 8009e3e:	da25      	bge.n	8009e8c <st_sssa8_fully_connected+0x294>
 8009e40:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 8009e44:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8009e48:	fb12 3300 	smlabb	r3, r2, r0, r3
 8009e4c:	f996 0001 	ldrsb.w	r0, [r6, #1]
 8009e50:	fb12 1100 	smlabb	r1, r2, r0, r1
 8009e54:	f109 0202 	add.w	r2, r9, #2
 8009e58:	42aa      	cmp	r2, r5
 8009e5a:	da17      	bge.n	8009e8c <st_sssa8_fully_connected+0x294>
 8009e5c:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 8009e60:	f994 0002 	ldrsb.w	r0, [r4, #2]
 8009e64:	fb12 3300 	smlabb	r3, r2, r0, r3
 8009e68:	f996 0002 	ldrsb.w	r0, [r6, #2]
 8009e6c:	fb12 1100 	smlabb	r1, r2, r0, r1
 8009e70:	f109 0203 	add.w	r2, r9, #3
 8009e74:	4295      	cmp	r5, r2
 8009e76:	dd09      	ble.n	8009e8c <st_sssa8_fully_connected+0x294>
 8009e78:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
 8009e7c:	f996 0003 	ldrsb.w	r0, [r6, #3]
 8009e80:	fb12 1100 	smlabb	r1, r2, r0, r1
 8009e84:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8009e88:	fb12 3300 	smlabb	r3, r2, r0, r3
 8009e8c:	9a04      	ldr	r2, [sp, #16]
 8009e8e:	eba2 0909 	sub.w	r9, r2, r9
 8009e92:	444c      	add	r4, r9
 8009e94:	9a05      	ldr	r2, [sp, #20]
 8009e96:	2a15      	cmp	r2, #21
 8009e98:	dd7b      	ble.n	8009f92 <st_sssa8_fully_connected+0x39a>
 8009e9a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009e9c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009e9e:	9a08      	ldr	r2, [sp, #32]
 8009ea0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009ea2:	fb53 0302 	smmla	r3, r3, r2, r0
 8009ea6:	412b      	asrs	r3, r5
 8009ea8:	4433      	add	r3, r6
 8009eaa:	fb51 0102 	smmla	r1, r1, r2, r0
 8009eae:	f303 0307 	ssat	r3, #8, r3
 8009eb2:	9a07      	ldr	r2, [sp, #28]
 8009eb4:	4129      	asrs	r1, r5
 8009eb6:	f802 3c02 	strb.w	r3, [r2, #-2]
 8009eba:	198b      	adds	r3, r1, r6
 8009ebc:	f303 0307 	ssat	r3, #8, r3
 8009ec0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009ec4:	9a04      	ldr	r2, [sp, #16]
 8009ec6:	9b06      	ldr	r3, [sp, #24]
 8009ec8:	18a5      	adds	r5, r4, r2
 8009eca:	9a07      	ldr	r2, [sp, #28]
 8009ecc:	3202      	adds	r2, #2
 8009ece:	9207      	str	r2, [sp, #28]
 8009ed0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ed2:	3308      	adds	r3, #8
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	9306      	str	r3, [sp, #24]
 8009ed8:	f47f aee4 	bne.w	8009ca4 <st_sssa8_fully_connected+0xac>
 8009edc:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8009ede:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ee0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8009ee4:	9225      	str	r2, [sp, #148]	; 0x94
 8009ee6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009ee8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009eec:	9324      	str	r3, [sp, #144]	; 0x90
 8009eee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ef0:	07db      	lsls	r3, r3, #31
 8009ef2:	d54a      	bpl.n	8009f8a <st_sssa8_fully_connected+0x392>
 8009ef4:	9a04      	ldr	r2, [sp, #16]
 8009ef6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009ef8:	0897      	lsrs	r7, r2, #2
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f000 8173 	beq.w	800a1e6 <st_sssa8_fully_connected+0x5ee>
 8009f00:	9826      	ldr	r0, [sp, #152]	; 0x98
 8009f02:	eb05 0687 	add.w	r6, r5, r7, lsl #2
 8009f06:	f855 2b04 	ldr.w	r2, [r5], #4
 8009f0a:	6804      	ldr	r4, [r0, #0]
 8009f0c:	ea4f 2132 	mov.w	r1, r2, ror #8
 8009f10:	fa2f f282 	sxtb16	r2, r2
 8009f14:	fa2f f181 	sxtb16	r1, r1
 8009f18:	fb24 3202 	smlad	r2, r4, r2, r3
 8009f1c:	6843      	ldr	r3, [r0, #4]
 8009f1e:	3008      	adds	r0, #8
 8009f20:	fb23 2301 	smlad	r3, r3, r1, r2
 8009f24:	42b5      	cmp	r5, r6
 8009f26:	d1ee      	bne.n	8009f06 <st_sssa8_fully_connected+0x30e>
 8009f28:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009f2a:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 8009f2e:	9226      	str	r2, [sp, #152]	; 0x98
 8009f30:	9a04      	ldr	r2, [sp, #16]
 8009f32:	f012 0203 	ands.w	r2, r2, #3
 8009f36:	d016      	beq.n	8009f66 <st_sssa8_fully_connected+0x36e>
 8009f38:	9826      	ldr	r0, [sp, #152]	; 0x98
 8009f3a:	f996 1000 	ldrsb.w	r1, [r6]
 8009f3e:	8800      	ldrh	r0, [r0, #0]
 8009f40:	3a01      	subs	r2, #1
 8009f42:	b292      	uxth	r2, r2
 8009f44:	fb10 3301 	smlabb	r3, r0, r1, r3
 8009f48:	b16a      	cbz	r2, 8009f66 <st_sssa8_fully_connected+0x36e>
 8009f4a:	9826      	ldr	r0, [sp, #152]	; 0x98
 8009f4c:	f996 1001 	ldrsb.w	r1, [r6, #1]
 8009f50:	8840      	ldrh	r0, [r0, #2]
 8009f52:	2a01      	cmp	r2, #1
 8009f54:	fb10 3301 	smlabb	r3, r0, r1, r3
 8009f58:	d005      	beq.n	8009f66 <st_sssa8_fully_connected+0x36e>
 8009f5a:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009f5c:	f996 2002 	ldrsb.w	r2, [r6, #2]
 8009f60:	8889      	ldrh	r1, [r1, #4]
 8009f62:	fb11 3302 	smlabb	r3, r1, r2, r3
 8009f66:	9a05      	ldr	r2, [sp, #20]
 8009f68:	2a15      	cmp	r2, #21
 8009f6a:	f340 811a 	ble.w	800a1a2 <st_sssa8_fully_connected+0x5aa>
 8009f6e:	1e91      	subs	r1, r2, #2
 8009f70:	2201      	movs	r2, #1
 8009f72:	408a      	lsls	r2, r1
 8009f74:	9908      	ldr	r1, [sp, #32]
 8009f76:	fb53 2301 	smmla	r3, r3, r1, r2
 8009f7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f7c:	4113      	asrs	r3, r2
 8009f7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f80:	4413      	add	r3, r2
 8009f82:	f303 0307 	ssat	r3, #8, r3
 8009f86:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8009f88:	7013      	strb	r3, [r2, #0]
 8009f8a:	2000      	movs	r0, #0
 8009f8c:	b017      	add	sp, #92	; 0x5c
 8009f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f92:	2a00      	cmp	r2, #0
 8009f94:	dd13      	ble.n	8009fbe <st_sssa8_fully_connected+0x3c6>
 8009f96:	e9dd 0508 	ldrd	r0, r5, [sp, #32]
 8009f9a:	005b      	lsls	r3, r3, #1
 8009f9c:	0049      	lsls	r1, r1, #1
 8009f9e:	fb53 5300 	smmla	r3, r3, r0, r5
 8009fa2:	fb51 5100 	smmla	r1, r1, r0, r5
 8009fa6:	4113      	asrs	r3, r2
 8009fa8:	f303 0307 	ssat	r3, #8, r3
 8009fac:	9807      	ldr	r0, [sp, #28]
 8009fae:	4111      	asrs	r1, r2
 8009fb0:	f800 3c02 	strb.w	r3, [r0, #-2]
 8009fb4:	f301 0107 	ssat	r1, #8, r1
 8009fb8:	f800 1c01 	strb.w	r1, [r0, #-1]
 8009fbc:	e782      	b.n	8009ec4 <st_sssa8_fully_connected+0x2cc>
 8009fbe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009fc0:	4093      	lsls	r3, r2
 8009fc2:	f303 031f 	ssat	r3, #32, r3
 8009fc6:	9808      	ldr	r0, [sp, #32]
 8009fc8:	fb53 f310 	smmulr	r3, r3, r0
 8009fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8009fd0:	f302 021f 	ssat	r2, #32, r2
 8009fd4:	fb52 f210 	smmulr	r2, r2, r0
 8009fd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fda:	440b      	add	r3, r1
 8009fdc:	f303 0307 	ssat	r3, #8, r3
 8009fe0:	9807      	ldr	r0, [sp, #28]
 8009fe2:	440a      	add	r2, r1
 8009fe4:	f800 3c02 	strb.w	r3, [r0, #-2]
 8009fe8:	f302 0207 	ssat	r2, #8, r2
 8009fec:	f800 2c01 	strb.w	r2, [r0, #-1]
 8009ff0:	e768      	b.n	8009ec4 <st_sssa8_fully_connected+0x2cc>
 8009ff2:	4634      	mov	r4, r6
 8009ff4:	e712      	b.n	8009e1c <st_sssa8_fully_connected+0x224>
 8009ff6:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 8009ffa:	462e      	mov	r6, r5
 8009ffc:	f04f 0900 	mov.w	r9, #0
 800a000:	e6d0      	b.n	8009da4 <st_sssa8_fully_connected+0x1ac>
 800a002:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a004:	4274      	negs	r4, r6
 800a006:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d0bd      	beq.n	8009f8a <st_sssa8_fully_connected+0x392>
 800a00e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a010:	9904      	ldr	r1, [sp, #16]
 800a012:	9805      	ldr	r0, [sp, #20]
 800a014:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
 800a018:	f8cd b010 	str.w	fp, [sp, #16]
 800a01c:	3301      	adds	r3, #1
 800a01e:	18d3      	adds	r3, r2, r3
 800a020:	f1a1 0810 	sub.w	r8, r1, #16
 800a024:	9303      	str	r3, [sp, #12]
 800a026:	f102 0e01 	add.w	lr, r2, #1
 800a02a:	f028 080f 	bic.w	r8, r8, #15
 800a02e:	2201      	movs	r2, #1
 800a030:	1e83      	subs	r3, r0, #2
 800a032:	fa02 f303 	lsl.w	r3, r2, r3
 800a036:	f108 0810 	add.w	r8, r8, #16
 800a03a:	9307      	str	r3, [sp, #28]
 800a03c:	4689      	mov	r9, r1
 800a03e:	eb0b 0308 	add.w	r3, fp, r8
 800a042:	9306      	str	r3, [sp, #24]
 800a044:	f1b9 0f0f 	cmp.w	r9, #15
 800a048:	eba2 0300 	sub.w	r3, r2, r0
 800a04c:	930a      	str	r3, [sp, #40]	; 0x28
 800a04e:	b236      	sxth	r6, r6
 800a050:	f85a 3b04 	ldr.w	r3, [sl], #4
 800a054:	f340 8081 	ble.w	800a15a <st_sssa8_fully_connected+0x562>
 800a058:	9804      	ldr	r0, [sp, #16]
 800a05a:	eb05 0c08 	add.w	ip, r5, r8
 800a05e:	462a      	mov	r2, r5
 800a060:	f8d2 b000 	ldr.w	fp, [r2]
 800a064:	6801      	ldr	r1, [r0, #0]
 800a066:	ea4f 273b 	mov.w	r7, fp, ror #8
 800a06a:	ea4f 2531 	mov.w	r5, r1, ror #8
 800a06e:	fa2f fb8b 	sxtb16	fp, fp
 800a072:	fa2f f787 	sxtb16	r7, r7
 800a076:	fa24 f181 	sxtab16	r1, r4, r1
 800a07a:	fa24 f585 	sxtab16	r5, r4, r5
 800a07e:	fb21 330b 	smlad	r3, r1, fp, r3
 800a082:	fb25 3107 	smlad	r1, r5, r7, r3
 800a086:	f8d2 b004 	ldr.w	fp, [r2, #4]
 800a08a:	6843      	ldr	r3, [r0, #4]
 800a08c:	ea4f 273b 	mov.w	r7, fp, ror #8
 800a090:	ea4f 2533 	mov.w	r5, r3, ror #8
 800a094:	fa2f fb8b 	sxtb16	fp, fp
 800a098:	fa2f f787 	sxtb16	r7, r7
 800a09c:	fa24 f383 	sxtab16	r3, r4, r3
 800a0a0:	fa24 f585 	sxtab16	r5, r4, r5
 800a0a4:	fb23 110b 	smlad	r1, r3, fp, r1
 800a0a8:	fb25 1307 	smlad	r3, r5, r7, r1
 800a0ac:	f8d2 b008 	ldr.w	fp, [r2, #8]
 800a0b0:	6885      	ldr	r5, [r0, #8]
 800a0b2:	ea4f 273b 	mov.w	r7, fp, ror #8
 800a0b6:	ea4f 2135 	mov.w	r1, r5, ror #8
 800a0ba:	fa2f fb8b 	sxtb16	fp, fp
 800a0be:	fa2f f787 	sxtb16	r7, r7
 800a0c2:	fa24 f585 	sxtab16	r5, r4, r5
 800a0c6:	fa24 f181 	sxtab16	r1, r4, r1
 800a0ca:	fb25 330b 	smlad	r3, r5, fp, r3
 800a0ce:	fb21 3507 	smlad	r5, r1, r7, r3
 800a0d2:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800a0d6:	68c3      	ldr	r3, [r0, #12]
 800a0d8:	ea4f 273b 	mov.w	r7, fp, ror #8
 800a0dc:	ea4f 2133 	mov.w	r1, r3, ror #8
 800a0e0:	3210      	adds	r2, #16
 800a0e2:	3010      	adds	r0, #16
 800a0e4:	fa2f fb8b 	sxtb16	fp, fp
 800a0e8:	fa2f f787 	sxtb16	r7, r7
 800a0ec:	fa24 f383 	sxtab16	r3, r4, r3
 800a0f0:	fa24 f181 	sxtab16	r1, r4, r1
 800a0f4:	fb23 530b 	smlad	r3, r3, fp, r5
 800a0f8:	fb21 3307 	smlad	r3, r1, r7, r3
 800a0fc:	4594      	cmp	ip, r2
 800a0fe:	d1af      	bne.n	800a060 <st_sssa8_fully_connected+0x468>
 800a100:	4645      	mov	r5, r8
 800a102:	45a9      	cmp	r9, r5
 800a104:	9f06      	ldr	r7, [sp, #24]
 800a106:	dd2d      	ble.n	800a164 <st_sssa8_fully_connected+0x56c>
 800a108:	eba9 0505 	sub.w	r5, r9, r5
 800a10c:	4415      	add	r5, r2
 800a10e:	4611      	mov	r1, r2
 800a110:	f917 0b01 	ldrsb.w	r0, [r7], #1
 800a114:	7809      	ldrb	r1, [r1, #0]
 800a116:	3201      	adds	r2, #1
 800a118:	b249      	sxtb	r1, r1
 800a11a:	1b80      	subs	r0, r0, r6
 800a11c:	42aa      	cmp	r2, r5
 800a11e:	fb10 3301 	smlabb	r3, r0, r1, r3
 800a122:	d1f4      	bne.n	800a10e <st_sssa8_fully_connected+0x516>
 800a124:	9a05      	ldr	r2, [sp, #20]
 800a126:	2a15      	cmp	r2, #21
 800a128:	dd20      	ble.n	800a16c <st_sssa8_fully_connected+0x574>
 800a12a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800a12e:	fb53 1302 	smmla	r3, r3, r2, r1
 800a132:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a134:	4113      	asrs	r3, r2
 800a136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a138:	4413      	add	r3, r2
 800a13a:	f303 0307 	ssat	r3, #8, r3
 800a13e:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800a142:	9b03      	ldr	r3, [sp, #12]
 800a144:	f10e 0e01 	add.w	lr, lr, #1
 800a148:	459e      	cmp	lr, r3
 800a14a:	f43f af1e 	beq.w	8009f8a <st_sssa8_fully_connected+0x392>
 800a14e:	f1b9 0f0f 	cmp.w	r9, #15
 800a152:	f85a 3b04 	ldr.w	r3, [sl], #4
 800a156:	f73f af7f 	bgt.w	800a058 <st_sssa8_fully_connected+0x460>
 800a15a:	462a      	mov	r2, r5
 800a15c:	2500      	movs	r5, #0
 800a15e:	45a9      	cmp	r9, r5
 800a160:	9f04      	ldr	r7, [sp, #16]
 800a162:	dcd1      	bgt.n	800a108 <st_sssa8_fully_connected+0x510>
 800a164:	4615      	mov	r5, r2
 800a166:	9a05      	ldr	r2, [sp, #20]
 800a168:	2a15      	cmp	r2, #21
 800a16a:	dcde      	bgt.n	800a12a <st_sssa8_fully_connected+0x532>
 800a16c:	2a00      	cmp	r2, #0
 800a16e:	dd0a      	ble.n	800a186 <st_sssa8_fully_connected+0x58e>
 800a170:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 800a174:	005b      	lsls	r3, r3, #1
 800a176:	fb53 0301 	smmla	r3, r3, r1, r0
 800a17a:	4113      	asrs	r3, r2
 800a17c:	f303 0307 	ssat	r3, #8, r3
 800a180:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800a184:	e7dd      	b.n	800a142 <st_sssa8_fully_connected+0x54a>
 800a186:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a188:	4093      	lsls	r3, r2
 800a18a:	f303 031f 	ssat	r3, #32, r3
 800a18e:	9a08      	ldr	r2, [sp, #32]
 800a190:	fb53 f312 	smmulr	r3, r3, r2
 800a194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a196:	4413      	add	r3, r2
 800a198:	f303 0307 	ssat	r3, #8, r3
 800a19c:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800a1a0:	e7cf      	b.n	800a142 <st_sssa8_fully_connected+0x54a>
 800a1a2:	2a00      	cmp	r2, #0
 800a1a4:	dd0d      	ble.n	800a1c2 <st_sssa8_fully_connected+0x5ca>
 800a1a6:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 800a1aa:	005b      	lsls	r3, r3, #1
 800a1ac:	fb53 0301 	smmla	r3, r3, r1, r0
 800a1b0:	4113      	asrs	r3, r2
 800a1b2:	f303 0307 	ssat	r3, #8, r3
 800a1b6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a1b8:	2000      	movs	r0, #0
 800a1ba:	7013      	strb	r3, [r2, #0]
 800a1bc:	b017      	add	sp, #92	; 0x5c
 800a1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c2:	f1c2 0201 	rsb	r2, r2, #1
 800a1c6:	4093      	lsls	r3, r2
 800a1c8:	f303 031f 	ssat	r3, #32, r3
 800a1cc:	9a08      	ldr	r2, [sp, #32]
 800a1ce:	fb53 f312 	smmulr	r3, r3, r2
 800a1d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1d4:	441a      	add	r2, r3
 800a1d6:	f302 0307 	ssat	r3, #8, r2
 800a1da:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a1dc:	2000      	movs	r0, #0
 800a1de:	7013      	strb	r3, [r2, #0]
 800a1e0:	b017      	add	sp, #92	; 0x5c
 800a1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1e6:	462e      	mov	r6, r5
 800a1e8:	e6a2      	b.n	8009f30 <st_sssa8_fully_connected+0x338>
 800a1ea:	bf00      	nop

0800a1ec <st_int8_fill>:
 800a1ec:	b510      	push	{r4, lr}
 800a1ee:	b2c3      	uxtb	r3, r0
 800a1f0:	0204      	lsls	r4, r0, #8
 800a1f2:	b2a4      	uxth	r4, r4
 800a1f4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800a1f8:	4323      	orrs	r3, r4
 800a1fa:	0404      	lsls	r4, r0, #16
 800a1fc:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800a200:	431c      	orrs	r4, r3
 800a202:	078b      	lsls	r3, r1, #30
 800a204:	468c      	mov	ip, r1
 800a206:	d007      	beq.n	800a218 <st_int8_fill+0x2c>
 800a208:	b3a2      	cbz	r2, 800a274 <st_int8_fill+0x88>
 800a20a:	f80c 0b01 	strb.w	r0, [ip], #1
 800a20e:	f01c 0f03 	tst.w	ip, #3
 800a212:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800a216:	d1f7      	bne.n	800a208 <st_int8_fill+0x1c>
 800a218:	0911      	lsrs	r1, r2, #4
 800a21a:	d03e      	beq.n	800a29a <st_int8_fill+0xae>
 800a21c:	1e4b      	subs	r3, r1, #1
 800a21e:	2b04      	cmp	r3, #4
 800a220:	d929      	bls.n	800a276 <st_int8_fill+0x8a>
 800a222:	f01c 0f07 	tst.w	ip, #7
 800a226:	d126      	bne.n	800a276 <st_int8_fill+0x8a>
 800a228:	f10c 0310 	add.w	r3, ip, #16
 800a22c:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 800a230:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800a234:	e943 4404 	strd	r4, r4, [r3, #-16]
 800a238:	e943 4402 	strd	r4, r4, [r3, #-8]
 800a23c:	3310      	adds	r3, #16
 800a23e:	428b      	cmp	r3, r1
 800a240:	d1f8      	bne.n	800a234 <st_int8_fill+0x48>
 800a242:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800a246:	44f4      	add	ip, lr
 800a248:	f002 0203 	and.w	r2, r2, #3
 800a24c:	b15b      	cbz	r3, 800a266 <st_int8_fill+0x7a>
 800a24e:	1e59      	subs	r1, r3, #1
 800a250:	f8cc 4000 	str.w	r4, [ip]
 800a254:	d005      	beq.n	800a262 <st_int8_fill+0x76>
 800a256:	2901      	cmp	r1, #1
 800a258:	f8cc 4004 	str.w	r4, [ip, #4]
 800a25c:	bf18      	it	ne
 800a25e:	f8cc 4008 	strne.w	r4, [ip, #8]
 800a262:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 800a266:	b12a      	cbz	r2, 800a274 <st_int8_fill+0x88>
 800a268:	4601      	mov	r1, r0
 800a26a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a26e:	4660      	mov	r0, ip
 800a270:	f003 bff0 	b.w	800e254 <memset>
 800a274:	bd10      	pop	{r4, pc}
 800a276:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 800a27a:	4663      	mov	r3, ip
 800a27c:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 800a280:	601c      	str	r4, [r3, #0]
 800a282:	605c      	str	r4, [r3, #4]
 800a284:	609c      	str	r4, [r3, #8]
 800a286:	60dc      	str	r4, [r3, #12]
 800a288:	3310      	adds	r3, #16
 800a28a:	4299      	cmp	r1, r3
 800a28c:	d1f8      	bne.n	800a280 <st_int8_fill+0x94>
 800a28e:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800a292:	44f4      	add	ip, lr
 800a294:	f002 0203 	and.w	r2, r2, #3
 800a298:	e7d8      	b.n	800a24c <st_int8_fill+0x60>
 800a29a:	0893      	lsrs	r3, r2, #2
 800a29c:	f002 0203 	and.w	r2, r2, #3
 800a2a0:	e7d4      	b.n	800a24c <st_int8_fill+0x60>
 800a2a2:	bf00      	nop

0800a2a4 <st_int8_copy>:
 800a2a4:	4288      	cmp	r0, r1
 800a2a6:	d057      	beq.n	800a358 <st_int8_copy+0xb4>
 800a2a8:	2a00      	cmp	r2, #0
 800a2aa:	d055      	beq.n	800a358 <st_int8_copy+0xb4>
 800a2ac:	4288      	cmp	r0, r1
 800a2ae:	d354      	bcc.n	800a35a <st_int8_copy+0xb6>
 800a2b0:	078b      	lsls	r3, r1, #30
 800a2b2:	d102      	bne.n	800a2ba <st_int8_copy+0x16>
 800a2b4:	e009      	b.n	800a2ca <st_int8_copy+0x26>
 800a2b6:	2a00      	cmp	r2, #0
 800a2b8:	d05c      	beq.n	800a374 <st_int8_copy+0xd0>
 800a2ba:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800a2be:	f801 3b01 	strb.w	r3, [r1], #1
 800a2c2:	078b      	lsls	r3, r1, #30
 800a2c4:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800a2c8:	d1f5      	bne.n	800a2b6 <st_int8_copy+0x12>
 800a2ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ce:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800a2d2:	d069      	beq.n	800a3a8 <st_int8_copy+0x104>
 800a2d4:	ea41 0300 	orr.w	r3, r1, r0
 800a2d8:	075b      	lsls	r3, r3, #29
 800a2da:	d14c      	bne.n	800a376 <st_int8_copy+0xd2>
 800a2dc:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d948      	bls.n	800a376 <st_int8_copy+0xd2>
 800a2e4:	f100 0310 	add.w	r3, r0, #16
 800a2e8:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800a2ec:	f101 0c10 	add.w	ip, r1, #16
 800a2f0:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800a2f4:	ed13 6b04 	vldr	d6, [r3, #-16]
 800a2f8:	ed13 7b02 	vldr	d7, [r3, #-8]
 800a2fc:	3310      	adds	r3, #16
 800a2fe:	4573      	cmp	r3, lr
 800a300:	ed0c 6b04 	vstr	d6, [ip, #-16]
 800a304:	ed0c 7b02 	vstr	d7, [ip, #-8]
 800a308:	f10c 0c10 	add.w	ip, ip, #16
 800a30c:	d1f2      	bne.n	800a2f4 <st_int8_copy+0x50>
 800a30e:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800a312:	4421      	add	r1, r4
 800a314:	4420      	add	r0, r4
 800a316:	f002 0203 	and.w	r2, r2, #3
 800a31a:	b16b      	cbz	r3, 800a338 <st_int8_copy+0x94>
 800a31c:	6804      	ldr	r4, [r0, #0]
 800a31e:	600c      	str	r4, [r1, #0]
 800a320:	1e5c      	subs	r4, r3, #1
 800a322:	d005      	beq.n	800a330 <st_int8_copy+0x8c>
 800a324:	6845      	ldr	r5, [r0, #4]
 800a326:	604d      	str	r5, [r1, #4]
 800a328:	2c01      	cmp	r4, #1
 800a32a:	bf1c      	itt	ne
 800a32c:	6884      	ldrne	r4, [r0, #8]
 800a32e:	608c      	strne	r4, [r1, #8]
 800a330:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800a334:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800a338:	b162      	cbz	r2, 800a354 <st_int8_copy+0xb0>
 800a33a:	f990 3000 	ldrsb.w	r3, [r0]
 800a33e:	700b      	strb	r3, [r1, #0]
 800a340:	3a01      	subs	r2, #1
 800a342:	d007      	beq.n	800a354 <st_int8_copy+0xb0>
 800a344:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800a348:	704b      	strb	r3, [r1, #1]
 800a34a:	2a01      	cmp	r2, #1
 800a34c:	bf1c      	itt	ne
 800a34e:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 800a352:	708b      	strbne	r3, [r1, #2]
 800a354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a358:	4770      	bx	lr
 800a35a:	1883      	adds	r3, r0, r2
 800a35c:	428b      	cmp	r3, r1
 800a35e:	d9a7      	bls.n	800a2b0 <st_int8_copy+0xc>
 800a360:	4283      	cmp	r3, r0
 800a362:	440a      	add	r2, r1
 800a364:	d9f8      	bls.n	800a358 <st_int8_copy+0xb4>
 800a366:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800a36a:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800a36e:	4283      	cmp	r3, r0
 800a370:	d1f9      	bne.n	800a366 <st_int8_copy+0xc2>
 800a372:	4770      	bx	lr
 800a374:	4770      	bx	lr
 800a376:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800a37a:	460b      	mov	r3, r1
 800a37c:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800a380:	4684      	mov	ip, r0
 800a382:	f8dc 7000 	ldr.w	r7, [ip]
 800a386:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800a38a:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800a38e:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800a392:	f8c3 800c 	str.w	r8, [r3, #12]
 800a396:	601f      	str	r7, [r3, #0]
 800a398:	605e      	str	r6, [r3, #4]
 800a39a:	609d      	str	r5, [r3, #8]
 800a39c:	3310      	adds	r3, #16
 800a39e:	459e      	cmp	lr, r3
 800a3a0:	f10c 0c10 	add.w	ip, ip, #16
 800a3a4:	d1ed      	bne.n	800a382 <st_int8_copy+0xde>
 800a3a6:	e7b2      	b.n	800a30e <st_int8_copy+0x6a>
 800a3a8:	0893      	lsrs	r3, r2, #2
 800a3aa:	f002 0203 	and.w	r2, r2, #3
 800a3ae:	e7b4      	b.n	800a31a <st_int8_copy+0x76>

0800a3b0 <st_int8_reordered_no_shift_zero>:
 800a3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3b2:	0897      	lsrs	r7, r2, #2
 800a3b4:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800a3b8:	d02e      	beq.n	800a418 <st_int8_reordered_no_shift_zero+0x68>
 800a3ba:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 800a3be:	460c      	mov	r4, r1
 800a3c0:	f850 cb04 	ldr.w	ip, [r0], #4
 800a3c4:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 800a3c8:	fa2f fe8e 	sxtb16	lr, lr
 800a3cc:	fade fe03 	ssub16	lr, lr, r3
 800a3d0:	fa2f fc8c 	sxtb16	ip, ip
 800a3d4:	fadc fc03 	ssub16	ip, ip, r3
 800a3d8:	42a8      	cmp	r0, r5
 800a3da:	f8c4 c000 	str.w	ip, [r4]
 800a3de:	f8c4 e004 	str.w	lr, [r4, #4]
 800a3e2:	f104 0408 	add.w	r4, r4, #8
 800a3e6:	d1eb      	bne.n	800a3c0 <st_int8_reordered_no_shift_zero+0x10>
 800a3e8:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800a3ec:	f012 0203 	ands.w	r2, r2, #3
 800a3f0:	d011      	beq.n	800a416 <st_int8_reordered_no_shift_zero+0x66>
 800a3f2:	f995 3000 	ldrsb.w	r3, [r5]
 800a3f6:	b276      	sxtb	r6, r6
 800a3f8:	1b9b      	subs	r3, r3, r6
 800a3fa:	3a01      	subs	r2, #1
 800a3fc:	800b      	strh	r3, [r1, #0]
 800a3fe:	d00a      	beq.n	800a416 <st_int8_reordered_no_shift_zero+0x66>
 800a400:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800a404:	2a01      	cmp	r2, #1
 800a406:	eba3 0306 	sub.w	r3, r3, r6
 800a40a:	804b      	strh	r3, [r1, #2]
 800a40c:	d003      	beq.n	800a416 <st_int8_reordered_no_shift_zero+0x66>
 800a40e:	f995 3002 	ldrsb.w	r3, [r5, #2]
 800a412:	1b9e      	subs	r6, r3, r6
 800a414:	808e      	strh	r6, [r1, #4]
 800a416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a418:	4605      	mov	r5, r0
 800a41a:	e7e7      	b.n	800a3ec <st_int8_reordered_no_shift_zero+0x3c>

0800a41c <st_int8_to16_no_shift>:
 800a41c:	b570      	push	{r4, r5, r6, lr}
 800a41e:	f1b2 0410 	subs.w	r4, r2, #16
 800a422:	f04f 0e00 	mov.w	lr, #0
 800a426:	d437      	bmi.n	800a498 <st_int8_to16_no_shift+0x7c>
 800a428:	f8d0 c000 	ldr.w	ip, [r0]
 800a42c:	6843      	ldr	r3, [r0, #4]
 800a42e:	fa2f f59c 	sxtb16	r5, ip, ror #8
 800a432:	fa2f fc8c 	sxtb16	ip, ip
 800a436:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 800a43a:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 800a43e:	fa2f f593 	sxtb16	r5, r3, ror #8
 800a442:	604e      	str	r6, [r1, #4]
 800a444:	f8c1 c000 	str.w	ip, [r1]
 800a448:	fa2f f383 	sxtb16	r3, r3
 800a44c:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 800a450:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800a454:	60ce      	str	r6, [r1, #12]
 800a456:	608b      	str	r3, [r1, #8]
 800a458:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800a45c:	68c3      	ldr	r3, [r0, #12]
 800a45e:	3010      	adds	r0, #16
 800a460:	fa2f f59c 	sxtb16	r5, ip, ror #8
 800a464:	fa2f fc8c 	sxtb16	ip, ip
 800a468:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 800a46c:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 800a470:	fa2f f593 	sxtb16	r5, r3, ror #8
 800a474:	f8c1 c010 	str.w	ip, [r1, #16]
 800a478:	614e      	str	r6, [r1, #20]
 800a47a:	f10e 0e10 	add.w	lr, lr, #16
 800a47e:	3120      	adds	r1, #32
 800a480:	45a6      	cmp	lr, r4
 800a482:	fa2f f383 	sxtb16	r3, r3
 800a486:	eac5 4c23 	pkhtb	ip, r5, r3, asr #16
 800a48a:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800a48e:	f841 cc04 	str.w	ip, [r1, #-4]
 800a492:	f841 3c08 	str.w	r3, [r1, #-8]
 800a496:	ddc7      	ble.n	800a428 <st_int8_to16_no_shift+0xc>
 800a498:	1f16      	subs	r6, r2, #4
 800a49a:	4576      	cmp	r6, lr
 800a49c:	db12      	blt.n	800a4c4 <st_int8_to16_no_shift+0xa8>
 800a49e:	f850 3b04 	ldr.w	r3, [r0], #4
 800a4a2:	fa2f f493 	sxtb16	r4, r3, ror #8
 800a4a6:	3108      	adds	r1, #8
 800a4a8:	f10e 0e04 	add.w	lr, lr, #4
 800a4ac:	45b6      	cmp	lr, r6
 800a4ae:	fa2f f383 	sxtb16	r3, r3
 800a4b2:	eac4 4523 	pkhtb	r5, r4, r3, asr #16
 800a4b6:	eac3 4304 	pkhbt	r3, r3, r4, lsl #16
 800a4ba:	f841 5c04 	str.w	r5, [r1, #-4]
 800a4be:	f841 3c08 	str.w	r3, [r1, #-8]
 800a4c2:	ddec      	ble.n	800a49e <st_int8_to16_no_shift+0x82>
 800a4c4:	4572      	cmp	r2, lr
 800a4c6:	dd08      	ble.n	800a4da <st_int8_to16_no_shift+0xbe>
 800a4c8:	eba2 020e 	sub.w	r2, r2, lr
 800a4cc:	4402      	add	r2, r0
 800a4ce:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800a4d2:	f821 3b02 	strh.w	r3, [r1], #2
 800a4d6:	4290      	cmp	r0, r2
 800a4d8:	d1f9      	bne.n	800a4ce <st_int8_to16_no_shift+0xb2>
 800a4da:	bd70      	pop	{r4, r5, r6, pc}

0800a4dc <st_int8_to16_no_shift_interleaved>:
 800a4dc:	b570      	push	{r4, r5, r6, lr}
 800a4de:	f1b2 0510 	subs.w	r5, r2, #16
 800a4e2:	f04f 0e00 	mov.w	lr, #0
 800a4e6:	d426      	bmi.n	800a536 <st_int8_to16_no_shift_interleaved+0x5a>
 800a4e8:	f8d0 c000 	ldr.w	ip, [r0]
 800a4ec:	6843      	ldr	r3, [r0, #4]
 800a4ee:	fa2f f69c 	sxtb16	r6, ip, ror #8
 800a4f2:	fa2f fc8c 	sxtb16	ip, ip
 800a4f6:	fa2f f493 	sxtb16	r4, r3, ror #8
 800a4fa:	600e      	str	r6, [r1, #0]
 800a4fc:	f8c1 c004 	str.w	ip, [r1, #4]
 800a500:	608c      	str	r4, [r1, #8]
 800a502:	fa2f f383 	sxtb16	r3, r3
 800a506:	60cb      	str	r3, [r1, #12]
 800a508:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800a50c:	68c3      	ldr	r3, [r0, #12]
 800a50e:	3010      	adds	r0, #16
 800a510:	fa2f f69c 	sxtb16	r6, ip, ror #8
 800a514:	fa2f fc8c 	sxtb16	ip, ip
 800a518:	fa2f f493 	sxtb16	r4, r3, ror #8
 800a51c:	610e      	str	r6, [r1, #16]
 800a51e:	f8c1 c014 	str.w	ip, [r1, #20]
 800a522:	618c      	str	r4, [r1, #24]
 800a524:	f10e 0e10 	add.w	lr, lr, #16
 800a528:	3120      	adds	r1, #32
 800a52a:	45ae      	cmp	lr, r5
 800a52c:	fa2f f383 	sxtb16	r3, r3
 800a530:	f841 3c04 	str.w	r3, [r1, #-4]
 800a534:	ddd8      	ble.n	800a4e8 <st_int8_to16_no_shift_interleaved+0xc>
 800a536:	1f14      	subs	r4, r2, #4
 800a538:	4574      	cmp	r4, lr
 800a53a:	db10      	blt.n	800a55e <st_int8_to16_no_shift_interleaved+0x82>
 800a53c:	ebae 0e00 	sub.w	lr, lr, r0
 800a540:	f850 3b04 	ldr.w	r3, [r0], #4
 800a544:	fa2f fc93 	sxtb16	ip, r3, ror #8
 800a548:	f8c1 c000 	str.w	ip, [r1]
 800a54c:	eb00 020e 	add.w	r2, r0, lr
 800a550:	3108      	adds	r1, #8
 800a552:	4294      	cmp	r4, r2
 800a554:	fa2f f383 	sxtb16	r3, r3
 800a558:	f841 3c04 	str.w	r3, [r1, #-4]
 800a55c:	daf0      	bge.n	800a540 <st_int8_to16_no_shift_interleaved+0x64>
 800a55e:	bd70      	pop	{r4, r5, r6, pc}

0800a560 <st_int8_to16_dual>:
 800a560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a564:	4698      	mov	r8, r3
 800a566:	085b      	lsrs	r3, r3, #1
 800a568:	eb00 0c02 	add.w	ip, r0, r2
 800a56c:	f000 80ba 	beq.w	800a6e4 <st_int8_to16_dual+0x184>
 800a570:	f1a2 0710 	sub.w	r7, r2, #16
 800a574:	1f16      	subs	r6, r2, #4
 800a576:	2f00      	cmp	r7, #0
 800a578:	f04f 0500 	mov.w	r5, #0
 800a57c:	db73      	blt.n	800a666 <st_int8_to16_dual+0x106>
 800a57e:	f8d0 e000 	ldr.w	lr, [r0]
 800a582:	f8dc 4000 	ldr.w	r4, [ip]
 800a586:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a58a:	fa2f fe8e 	sxtb16	lr, lr
 800a58e:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a592:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a596:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a59a:	f8c1 e000 	str.w	lr, [r1]
 800a59e:	f8c1 a008 	str.w	sl, [r1, #8]
 800a5a2:	fa2f f484 	sxtb16	r4, r4
 800a5a6:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800a5aa:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800a5ae:	f8c1 e00c 	str.w	lr, [r1, #12]
 800a5b2:	604c      	str	r4, [r1, #4]
 800a5b4:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800a5b8:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800a5bc:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a5c0:	fa2f fe8e 	sxtb16	lr, lr
 800a5c4:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a5c8:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a5cc:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a5d0:	f8c1 e010 	str.w	lr, [r1, #16]
 800a5d4:	f8c1 a018 	str.w	sl, [r1, #24]
 800a5d8:	fa2f f484 	sxtb16	r4, r4
 800a5dc:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800a5e0:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800a5e4:	f8c1 e01c 	str.w	lr, [r1, #28]
 800a5e8:	614c      	str	r4, [r1, #20]
 800a5ea:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800a5ee:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800a5f2:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a5f6:	fa2f fe8e 	sxtb16	lr, lr
 800a5fa:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a5fe:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a602:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a606:	3010      	adds	r0, #16
 800a608:	f8c1 e020 	str.w	lr, [r1, #32]
 800a60c:	f8c1 a028 	str.w	sl, [r1, #40]	; 0x28
 800a610:	fa2f f484 	sxtb16	r4, r4
 800a614:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800a618:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800a61c:	f8c1 e02c 	str.w	lr, [r1, #44]	; 0x2c
 800a620:	624c      	str	r4, [r1, #36]	; 0x24
 800a622:	f8dc 400c 	ldr.w	r4, [ip, #12]
 800a626:	f850 ec04 	ldr.w	lr, [r0, #-4]
 800a62a:	f10c 0c10 	add.w	ip, ip, #16
 800a62e:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a632:	fa2f fe8e 	sxtb16	lr, lr
 800a636:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a63a:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a63e:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a642:	f8c1 e030 	str.w	lr, [r1, #48]	; 0x30
 800a646:	f8c1 a038 	str.w	sl, [r1, #56]	; 0x38
 800a64a:	3510      	adds	r5, #16
 800a64c:	3140      	adds	r1, #64	; 0x40
 800a64e:	42bd      	cmp	r5, r7
 800a650:	fa2f f484 	sxtb16	r4, r4
 800a654:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800a658:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800a65c:	f841 ec04 	str.w	lr, [r1, #-4]
 800a660:	f841 4c0c 	str.w	r4, [r1, #-12]
 800a664:	dd8b      	ble.n	800a57e <st_int8_to16_dual+0x1e>
 800a666:	42ae      	cmp	r6, r5
 800a668:	db1e      	blt.n	800a6a8 <st_int8_to16_dual+0x148>
 800a66a:	f850 4b04 	ldr.w	r4, [r0], #4
 800a66e:	f85c eb04 	ldr.w	lr, [ip], #4
 800a672:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a676:	fa2f f484 	sxtb16	r4, r4
 800a67a:	eac9 4a24 	pkhtb	sl, r9, r4, asr #16
 800a67e:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800a682:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a686:	600c      	str	r4, [r1, #0]
 800a688:	f8c1 a008 	str.w	sl, [r1, #8]
 800a68c:	3504      	adds	r5, #4
 800a68e:	3110      	adds	r1, #16
 800a690:	42b5      	cmp	r5, r6
 800a692:	fa2f fe8e 	sxtb16	lr, lr
 800a696:	eac9 442e 	pkhtb	r4, r9, lr, asr #16
 800a69a:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a69e:	f841 4c04 	str.w	r4, [r1, #-4]
 800a6a2:	f841 ec0c 	str.w	lr, [r1, #-12]
 800a6a6:	dde0      	ble.n	800a66a <st_int8_to16_dual+0x10a>
 800a6a8:	42aa      	cmp	r2, r5
 800a6aa:	dd41      	ble.n	800a730 <st_int8_to16_dual+0x1d0>
 800a6ac:	1b55      	subs	r5, r2, r5
 800a6ae:	1d0c      	adds	r4, r1, #4
 800a6b0:	eb00 0a05 	add.w	sl, r0, r5
 800a6b4:	46e6      	mov	lr, ip
 800a6b6:	f910 9b01 	ldrsb.w	r9, [r0], #1
 800a6ba:	f824 9c04 	strh.w	r9, [r4, #-4]
 800a6be:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 800a6c2:	f824 9c02 	strh.w	r9, [r4, #-2]
 800a6c6:	4550      	cmp	r0, sl
 800a6c8:	f104 0404 	add.w	r4, r4, #4
 800a6cc:	d1f3      	bne.n	800a6b6 <st_int8_to16_dual+0x156>
 800a6ce:	44ac      	add	ip, r5
 800a6d0:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	eb0a 0002 	add.w	r0, sl, r2
 800a6dc:	4494      	add	ip, r2
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	f47f af49 	bne.w	800a576 <st_int8_to16_dual+0x16>
 800a6e4:	f018 0f01 	tst.w	r8, #1
 800a6e8:	d020      	beq.n	800a72c <st_int8_to16_dual+0x1cc>
 800a6ea:	1f17      	subs	r7, r2, #4
 800a6ec:	f04f 0400 	mov.w	r4, #0
 800a6f0:	d411      	bmi.n	800a716 <st_int8_to16_dual+0x1b6>
 800a6f2:	f850 3b04 	ldr.w	r3, [r0], #4
 800a6f6:	fa2f f593 	sxtb16	r5, r3, ror #8
 800a6fa:	3108      	adds	r1, #8
 800a6fc:	3404      	adds	r4, #4
 800a6fe:	42a7      	cmp	r7, r4
 800a700:	fa2f f383 	sxtb16	r3, r3
 800a704:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 800a708:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800a70c:	f841 6c04 	str.w	r6, [r1, #-4]
 800a710:	f841 3c08 	str.w	r3, [r1, #-8]
 800a714:	daed      	bge.n	800a6f2 <st_int8_to16_dual+0x192>
 800a716:	42a2      	cmp	r2, r4
 800a718:	dd08      	ble.n	800a72c <st_int8_to16_dual+0x1cc>
 800a71a:	1b13      	subs	r3, r2, r4
 800a71c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a720:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800a724:	f821 2b02 	strh.w	r2, [r1], #2
 800a728:	428b      	cmp	r3, r1
 800a72a:	d1f9      	bne.n	800a720 <st_int8_to16_dual+0x1c0>
 800a72c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a730:	4682      	mov	sl, r0
 800a732:	e7cf      	b.n	800a6d4 <st_int8_to16_dual+0x174>

0800a734 <st_int8_to16_dual_interleaved>:
 800a734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a738:	4698      	mov	r8, r3
 800a73a:	085b      	lsrs	r3, r3, #1
 800a73c:	eb00 0c02 	add.w	ip, r0, r2
 800a740:	f000 808d 	beq.w	800a85e <st_int8_to16_dual_interleaved+0x12a>
 800a744:	f1a2 0710 	sub.w	r7, r2, #16
 800a748:	1f16      	subs	r6, r2, #4
 800a74a:	2f00      	cmp	r7, #0
 800a74c:	f04f 0e00 	mov.w	lr, #0
 800a750:	db4c      	blt.n	800a7ec <st_int8_to16_dual_interleaved+0xb8>
 800a752:	6805      	ldr	r5, [r0, #0]
 800a754:	f8dc 4000 	ldr.w	r4, [ip]
 800a758:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a75c:	fa2f f585 	sxtb16	r5, r5
 800a760:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a764:	f8c1 a000 	str.w	sl, [r1]
 800a768:	f8c1 9004 	str.w	r9, [r1, #4]
 800a76c:	608d      	str	r5, [r1, #8]
 800a76e:	fa2f f484 	sxtb16	r4, r4
 800a772:	60cc      	str	r4, [r1, #12]
 800a774:	6845      	ldr	r5, [r0, #4]
 800a776:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800a77a:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a77e:	fa2f f585 	sxtb16	r5, r5
 800a782:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a786:	f8c1 a010 	str.w	sl, [r1, #16]
 800a78a:	f8c1 9014 	str.w	r9, [r1, #20]
 800a78e:	618d      	str	r5, [r1, #24]
 800a790:	fa2f f484 	sxtb16	r4, r4
 800a794:	61cc      	str	r4, [r1, #28]
 800a796:	6885      	ldr	r5, [r0, #8]
 800a798:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800a79c:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a7a0:	fa2f f585 	sxtb16	r5, r5
 800a7a4:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a7a8:	f8c1 a020 	str.w	sl, [r1, #32]
 800a7ac:	f8c1 9024 	str.w	r9, [r1, #36]	; 0x24
 800a7b0:	628d      	str	r5, [r1, #40]	; 0x28
 800a7b2:	fa2f f484 	sxtb16	r4, r4
 800a7b6:	62cc      	str	r4, [r1, #44]	; 0x2c
 800a7b8:	68c5      	ldr	r5, [r0, #12]
 800a7ba:	f8dc 400c 	ldr.w	r4, [ip, #12]
 800a7be:	3010      	adds	r0, #16
 800a7c0:	f10c 0c10 	add.w	ip, ip, #16
 800a7c4:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a7c8:	fa2f f585 	sxtb16	r5, r5
 800a7cc:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a7d0:	f8c1 a030 	str.w	sl, [r1, #48]	; 0x30
 800a7d4:	f8c1 9034 	str.w	r9, [r1, #52]	; 0x34
 800a7d8:	638d      	str	r5, [r1, #56]	; 0x38
 800a7da:	f10e 0e10 	add.w	lr, lr, #16
 800a7de:	3140      	adds	r1, #64	; 0x40
 800a7e0:	45be      	cmp	lr, r7
 800a7e2:	fa2f f484 	sxtb16	r4, r4
 800a7e6:	f841 4c04 	str.w	r4, [r1, #-4]
 800a7ea:	ddb2      	ble.n	800a752 <st_int8_to16_dual_interleaved+0x1e>
 800a7ec:	4576      	cmp	r6, lr
 800a7ee:	db17      	blt.n	800a820 <st_int8_to16_dual_interleaved+0xec>
 800a7f0:	f850 5b04 	ldr.w	r5, [r0], #4
 800a7f4:	f85c 4b04 	ldr.w	r4, [ip], #4
 800a7f8:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a7fc:	fa2f f585 	sxtb16	r5, r5
 800a800:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a804:	f8c1 a000 	str.w	sl, [r1]
 800a808:	f8c1 9004 	str.w	r9, [r1, #4]
 800a80c:	608d      	str	r5, [r1, #8]
 800a80e:	f10e 0e04 	add.w	lr, lr, #4
 800a812:	3110      	adds	r1, #16
 800a814:	45b6      	cmp	lr, r6
 800a816:	fa2f f484 	sxtb16	r4, r4
 800a81a:	f841 4c04 	str.w	r4, [r1, #-4]
 800a81e:	dde7      	ble.n	800a7f0 <st_int8_to16_dual_interleaved+0xbc>
 800a820:	4572      	cmp	r2, lr
 800a822:	dd3d      	ble.n	800a8a0 <st_int8_to16_dual_interleaved+0x16c>
 800a824:	eba2 0e0e 	sub.w	lr, r2, lr
 800a828:	1d0c      	adds	r4, r1, #4
 800a82a:	eb00 0a0e 	add.w	sl, r0, lr
 800a82e:	4665      	mov	r5, ip
 800a830:	f910 9b01 	ldrsb.w	r9, [r0], #1
 800a834:	f824 9c04 	strh.w	r9, [r4, #-4]
 800a838:	f915 9b01 	ldrsb.w	r9, [r5], #1
 800a83c:	f824 9c02 	strh.w	r9, [r4, #-2]
 800a840:	4550      	cmp	r0, sl
 800a842:	f104 0404 	add.w	r4, r4, #4
 800a846:	d1f3      	bne.n	800a830 <st_int8_to16_dual_interleaved+0xfc>
 800a848:	44f4      	add	ip, lr
 800a84a:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800a84e:	3b01      	subs	r3, #1
 800a850:	b29b      	uxth	r3, r3
 800a852:	eb0a 0002 	add.w	r0, sl, r2
 800a856:	4494      	add	ip, r2
 800a858:	2b00      	cmp	r3, #0
 800a85a:	f47f af76 	bne.w	800a74a <st_int8_to16_dual_interleaved+0x16>
 800a85e:	f018 0f01 	tst.w	r8, #1
 800a862:	d01b      	beq.n	800a89c <st_int8_to16_dual_interleaved+0x168>
 800a864:	1f16      	subs	r6, r2, #4
 800a866:	f04f 0400 	mov.w	r4, #0
 800a86a:	d40c      	bmi.n	800a886 <st_int8_to16_dual_interleaved+0x152>
 800a86c:	f850 3b04 	ldr.w	r3, [r0], #4
 800a870:	fa2f f593 	sxtb16	r5, r3, ror #8
 800a874:	600d      	str	r5, [r1, #0]
 800a876:	3404      	adds	r4, #4
 800a878:	3108      	adds	r1, #8
 800a87a:	42a6      	cmp	r6, r4
 800a87c:	fa2f f383 	sxtb16	r3, r3
 800a880:	f841 3c04 	str.w	r3, [r1, #-4]
 800a884:	daf2      	bge.n	800a86c <st_int8_to16_dual_interleaved+0x138>
 800a886:	42a2      	cmp	r2, r4
 800a888:	dd08      	ble.n	800a89c <st_int8_to16_dual_interleaved+0x168>
 800a88a:	1b13      	subs	r3, r2, r4
 800a88c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a890:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800a894:	f821 2b02 	strh.w	r2, [r1], #2
 800a898:	428b      	cmp	r3, r1
 800a89a:	d1f9      	bne.n	800a890 <st_int8_to16_dual_interleaved+0x15c>
 800a89c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8a0:	4682      	mov	sl, r0
 800a8a2:	e7d4      	b.n	800a84e <st_int8_to16_dual_interleaved+0x11a>

0800a8a4 <ai_padding_opt_init>:
 800a8a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8a8:	2700      	movs	r7, #0
 800a8aa:	e9c0 7700 	strd	r7, r7, [r0]
 800a8ae:	6087      	str	r7, [r0, #8]
 800a8b0:	690d      	ldr	r5, [r1, #16]
 800a8b2:	9c07      	ldr	r4, [sp, #28]
 800a8b4:	f1c5 0c00 	rsb	ip, r5, #0
 800a8b8:	689d      	ldr	r5, [r3, #8]
 800a8ba:	42bd      	cmp	r5, r7
 800a8bc:	46b9      	mov	r9, r7
 800a8be:	dd1b      	ble.n	800a8f8 <ai_padding_opt_init+0x54>
 800a8c0:	463e      	mov	r6, r7
 800a8c2:	46be      	mov	lr, r7
 800a8c4:	e012      	b.n	800a8ec <ai_padding_opt_init+0x48>
 800a8c6:	6895      	ldr	r5, [r2, #8]
 800a8c8:	eba5 080c 	sub.w	r8, r5, ip
 800a8cc:	68a5      	ldr	r5, [r4, #8]
 800a8ce:	45a8      	cmp	r8, r5
 800a8d0:	bfb5      	itete	lt
 800a8d2:	f109 0901 	addlt.w	r9, r9, #1
 800a8d6:	3701      	addge	r7, #1
 800a8d8:	f8c0 9008 	strlt.w	r9, [r0, #8]
 800a8dc:	6047      	strge	r7, [r0, #4]
 800a8de:	688d      	ldr	r5, [r1, #8]
 800a8e0:	44ac      	add	ip, r5
 800a8e2:	689d      	ldr	r5, [r3, #8]
 800a8e4:	f10e 0e01 	add.w	lr, lr, #1
 800a8e8:	4575      	cmp	r5, lr
 800a8ea:	dd06      	ble.n	800a8fa <ai_padding_opt_init+0x56>
 800a8ec:	f1bc 0f00 	cmp.w	ip, #0
 800a8f0:	dae9      	bge.n	800a8c6 <ai_padding_opt_init+0x22>
 800a8f2:	3601      	adds	r6, #1
 800a8f4:	6006      	str	r6, [r0, #0]
 800a8f6:	e7f2      	b.n	800a8de <ai_padding_opt_init+0x3a>
 800a8f8:	463e      	mov	r6, r7
 800a8fa:	2500      	movs	r5, #0
 800a8fc:	e9c0 6703 	strd	r6, r7, [r0, #12]
 800a900:	e9c0 5506 	strd	r5, r5, [r0, #24]
 800a904:	f8c0 9014 	str.w	r9, [r0, #20]
 800a908:	6205      	str	r5, [r0, #32]
 800a90a:	694e      	ldr	r6, [r1, #20]
 800a90c:	f1c6 0c00 	rsb	ip, r6, #0
 800a910:	685e      	ldr	r6, [r3, #4]
 800a912:	42ae      	cmp	r6, r5
 800a914:	dd1c      	ble.n	800a950 <ai_padding_opt_init+0xac>
 800a916:	46ae      	mov	lr, r5
 800a918:	e00f      	b.n	800a93a <ai_padding_opt_init+0x96>
 800a91a:	6855      	ldr	r5, [r2, #4]
 800a91c:	6866      	ldr	r6, [r4, #4]
 800a91e:	eba5 050c 	sub.w	r5, r5, ip
 800a922:	42b5      	cmp	r5, r6
 800a924:	da10      	bge.n	800a948 <ai_padding_opt_init+0xa4>
 800a926:	6a05      	ldr	r5, [r0, #32]
 800a928:	3501      	adds	r5, #1
 800a92a:	6205      	str	r5, [r0, #32]
 800a92c:	68cd      	ldr	r5, [r1, #12]
 800a92e:	44ac      	add	ip, r5
 800a930:	685d      	ldr	r5, [r3, #4]
 800a932:	f10e 0e01 	add.w	lr, lr, #1
 800a936:	4575      	cmp	r5, lr
 800a938:	dd0a      	ble.n	800a950 <ai_padding_opt_init+0xac>
 800a93a:	f1bc 0f00 	cmp.w	ip, #0
 800a93e:	daec      	bge.n	800a91a <ai_padding_opt_init+0x76>
 800a940:	6985      	ldr	r5, [r0, #24]
 800a942:	3501      	adds	r5, #1
 800a944:	6185      	str	r5, [r0, #24]
 800a946:	e7f1      	b.n	800a92c <ai_padding_opt_init+0x88>
 800a948:	69c5      	ldr	r5, [r0, #28]
 800a94a:	3501      	adds	r5, #1
 800a94c:	61c5      	str	r5, [r0, #28]
 800a94e:	e7ed      	b.n	800a92c <ai_padding_opt_init+0x88>
 800a950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a954 <ai_padding_opt_phase1>:
 800a954:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 800a958:	b923      	cbnz	r3, 800a964 <ai_padding_opt_phase1+0x10>
 800a95a:	b17a      	cbz	r2, 800a97c <ai_padding_opt_phase1+0x28>
 800a95c:	3a01      	subs	r2, #1
 800a95e:	8483      	strh	r3, [r0, #36]	; 0x24
 800a960:	61c2      	str	r2, [r0, #28]
 800a962:	e004      	b.n	800a96e <ai_padding_opt_phase1+0x1a>
 800a964:	b152      	cbz	r2, 800a97c <ai_padding_opt_phase1+0x28>
 800a966:	2201      	movs	r2, #1
 800a968:	3b01      	subs	r3, #1
 800a96a:	8482      	strh	r2, [r0, #36]	; 0x24
 800a96c:	6183      	str	r3, [r0, #24]
 800a96e:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800a972:	68c1      	ldr	r1, [r0, #12]
 800a974:	6083      	str	r3, [r0, #8]
 800a976:	e9c0 1200 	strd	r1, r2, [r0]
 800a97a:	4770      	bx	lr
 800a97c:	6a03      	ldr	r3, [r0, #32]
 800a97e:	2201      	movs	r2, #1
 800a980:	3b01      	subs	r3, #1
 800a982:	8482      	strh	r2, [r0, #36]	; 0x24
 800a984:	6203      	str	r3, [r0, #32]
 800a986:	e7f2      	b.n	800a96e <ai_padding_opt_phase1+0x1a>

0800a988 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 800a988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a98c:	b09b      	sub	sp, #108	; 0x6c
 800a98e:	4683      	mov	fp, r0
 800a990:	f89d 00ac 	ldrb.w	r0, [sp, #172]	; 0xac
 800a994:	900b      	str	r0, [sp, #44]	; 0x2c
 800a996:	2800      	cmp	r0, #0
 800a998:	9825      	ldr	r0, [sp, #148]	; 0x94
 800a99a:	9317      	str	r3, [sp, #92]	; 0x5c
 800a99c:	bf18      	it	ne
 800a99e:	2301      	movne	r3, #1
 800a9a0:	fb00 3303 	mla	r3, r0, r3, r3
 800a9a4:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800a9a6:	910c      	str	r1, [sp, #48]	; 0x30
 800a9a8:	18c3      	adds	r3, r0, r3
 800a9aa:	9302      	str	r3, [sp, #8]
 800a9ac:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 800a9b0:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 800a9b4:	9205      	str	r2, [sp, #20]
 800a9b6:	085c      	lsrs	r4, r3, #1
 800a9b8:	9314      	str	r3, [sp, #80]	; 0x50
 800a9ba:	9006      	str	r0, [sp, #24]
 800a9bc:	9415      	str	r4, [sp, #84]	; 0x54
 800a9be:	f000 81c5 	beq.w	800ad4c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3c4>
 800a9c2:	460d      	mov	r5, r1
 800a9c4:	4601      	mov	r1, r0
 800a9c6:	1ece      	subs	r6, r1, #3
 800a9c8:	960d      	str	r6, [sp, #52]	; 0x34
 800a9ca:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 800a9cc:	3604      	adds	r6, #4
 800a9ce:	f1a0 0310 	sub.w	r3, r0, #16
 800a9d2:	9601      	str	r6, [sp, #4]
 800a9d4:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 800a9d6:	091b      	lsrs	r3, r3, #4
 800a9d8:	3301      	adds	r3, #1
 800a9da:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 800a9de:	3608      	adds	r6, #8
 800a9e0:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800a9e4:	9604      	str	r6, [sp, #16]
 800a9e6:	920e      	str	r2, [sp, #56]	; 0x38
 800a9e8:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 800a9ea:	900f      	str	r0, [sp, #60]	; 0x3c
 800a9ec:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800a9f0:	9207      	str	r2, [sp, #28]
 800a9f2:	011a      	lsls	r2, r3, #4
 800a9f4:	3608      	adds	r6, #8
 800a9f6:	9212      	str	r2, [sp, #72]	; 0x48
 800a9f8:	019a      	lsls	r2, r3, #6
 800a9fa:	eb05 1343 	add.w	r3, r5, r3, lsl #5
 800a9fe:	9603      	str	r6, [sp, #12]
 800aa00:	9311      	str	r3, [sp, #68]	; 0x44
 800aa02:	00e6      	lsls	r6, r4, #3
 800aa04:	1f0b      	subs	r3, r1, #4
 800aa06:	9616      	str	r6, [sp, #88]	; 0x58
 800aa08:	9210      	str	r2, [sp, #64]	; 0x40
 800aa0a:	9313      	str	r3, [sp, #76]	; 0x4c
 800aa0c:	46d9      	mov	r9, fp
 800aa0e:	9905      	ldr	r1, [sp, #20]
 800aa10:	9c06      	ldr	r4, [sp, #24]
 800aa12:	680b      	ldr	r3, [r1, #0]
 800aa14:	9319      	str	r3, [sp, #100]	; 0x64
 800aa16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa18:	9819      	ldr	r0, [sp, #100]	; 0x64
 800aa1a:	684a      	ldr	r2, [r1, #4]
 800aa1c:	9219      	str	r2, [sp, #100]	; 0x64
 800aa1e:	3108      	adds	r1, #8
 800aa20:	2c0f      	cmp	r4, #15
 800aa22:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aa24:	9105      	str	r1, [sp, #20]
 800aa26:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aa28:	9919      	ldr	r1, [sp, #100]	; 0x64
 800aa2a:	f340 82cd 	ble.w	800afc8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x640>
 800aa2e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800aa30:	9e07      	ldr	r6, [sp, #28]
 800aa32:	464c      	mov	r4, r9
 800aa34:	f8d7 e000 	ldr.w	lr, [r7]
 800aa38:	f8d5 a000 	ldr.w	sl, [r5]
 800aa3c:	f8d4 c000 	ldr.w	ip, [r4]
 800aa40:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800aa44:	fb2c 330e 	smlad	r3, ip, lr, r3
 800aa48:	fb2c 000a 	smlad	r0, ip, sl, r0
 800aa4c:	fb28 2e0e 	smlad	lr, r8, lr, r2
 800aa50:	fb28 110a 	smlad	r1, r8, sl, r1
 800aa54:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800aa58:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800aa5c:	68a2      	ldr	r2, [r4, #8]
 800aa5e:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 800aa62:	fb22 330c 	smlad	r3, r2, ip, r3
 800aa66:	fb22 0008 	smlad	r0, r2, r8, r0
 800aa6a:	fb2b ee0c 	smlad	lr, fp, ip, lr
 800aa6e:	fb2b 1808 	smlad	r8, fp, r8, r1
 800aa72:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800aa76:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800aa7a:	6922      	ldr	r2, [r4, #16]
 800aa7c:	f8d4 a014 	ldr.w	sl, [r4, #20]
 800aa80:	fb22 330c 	smlad	r3, r2, ip, r3
 800aa84:	fb22 000b 	smlad	r0, r2, fp, r0
 800aa88:	fb2a ee0c 	smlad	lr, sl, ip, lr
 800aa8c:	fb2a 8b0b 	smlad	fp, sl, fp, r8
 800aa90:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800aa94:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800aa98:	f8d4 8018 	ldr.w	r8, [r4, #24]
 800aa9c:	69e1      	ldr	r1, [r4, #28]
 800aa9e:	fb28 330c 	smlad	r3, r8, ip, r3
 800aaa2:	fb28 000a 	smlad	r0, r8, sl, r0
 800aaa6:	fb21 ec0c 	smlad	ip, r1, ip, lr
 800aaaa:	fb21 ba0a 	smlad	sl, r1, sl, fp
 800aaae:	f8d7 e010 	ldr.w	lr, [r7, #16]
 800aab2:	6929      	ldr	r1, [r5, #16]
 800aab4:	f8d4 8020 	ldr.w	r8, [r4, #32]
 800aab8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800aaba:	fb28 330e 	smlad	r3, r8, lr, r3
 800aabe:	fb28 0001 	smlad	r0, r8, r1, r0
 800aac2:	fb22 cc0e 	smlad	ip, r2, lr, ip
 800aac6:	fb22 a101 	smlad	r1, r2, r1, sl
 800aaca:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800aace:	f8d5 a014 	ldr.w	sl, [r5, #20]
 800aad2:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 800aad6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800aad8:	fb28 330e 	smlad	r3, r8, lr, r3
 800aadc:	fb28 000a 	smlad	r0, r8, sl, r0
 800aae0:	fb22 cc0e 	smlad	ip, r2, lr, ip
 800aae4:	fb22 120a 	smlad	r2, r2, sl, r1
 800aae8:	f8d7 e018 	ldr.w	lr, [r7, #24]
 800aaec:	f8d5 b018 	ldr.w	fp, [r5, #24]
 800aaf0:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 800aaf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aaf6:	fb28 330e 	smlad	r3, r8, lr, r3
 800aafa:	fb28 080b 	smlad	r8, r8, fp, r0
 800aafe:	fb21 ce0e 	smlad	lr, r1, lr, ip
 800ab02:	fb21 210b 	smlad	r1, r1, fp, r2
 800ab06:	69fa      	ldr	r2, [r7, #28]
 800ab08:	f8d5 b01c 	ldr.w	fp, [r5, #28]
 800ab0c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800ab0e:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 800ab12:	3720      	adds	r7, #32
 800ab14:	3520      	adds	r5, #32
 800ab16:	3440      	adds	r4, #64	; 0x40
 800ab18:	fb20 3302 	smlad	r3, r0, r2, r3
 800ab1c:	fb20 800b 	smlad	r0, r0, fp, r8
 800ab20:	fb2c e202 	smlad	r2, ip, r2, lr
 800ab24:	fb2c 110b 	smlad	r1, ip, fp, r1
 800ab28:	42b5      	cmp	r5, r6
 800ab2a:	d183      	bne.n	800aa34 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xac>
 800ab2c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800ab2e:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 800ab32:	9d07      	ldr	r5, [sp, #28]
 800ab34:	44a1      	add	r9, r4
 800ab36:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800ab38:	9400      	str	r4, [sp, #0]
 800ab3a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ab3c:	45a3      	cmp	fp, r4
 800ab3e:	f280 824b 	bge.w	800afd8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x650>
 800ab42:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800ab44:	f8dd c000 	ldr.w	ip, [sp]
 800ab48:	eba4 040b 	sub.w	r4, r4, fp
 800ab4c:	08a4      	lsrs	r4, r4, #2
 800ab4e:	940a      	str	r4, [sp, #40]	; 0x28
 800ab50:	3401      	adds	r4, #1
 800ab52:	00e6      	lsls	r6, r4, #3
 800ab54:	9409      	str	r4, [sp, #36]	; 0x24
 800ab56:	eb05 08c4 	add.w	r8, r5, r4, lsl #3
 800ab5a:	9608      	str	r6, [sp, #32]
 800ab5c:	464c      	mov	r4, r9
 800ab5e:	f8dc e000 	ldr.w	lr, [ip]
 800ab62:	682f      	ldr	r7, [r5, #0]
 800ab64:	f8d4 a000 	ldr.w	sl, [r4]
 800ab68:	6866      	ldr	r6, [r4, #4]
 800ab6a:	fb2a 330e 	smlad	r3, sl, lr, r3
 800ab6e:	fb2a 0007 	smlad	r0, sl, r7, r0
 800ab72:	fb26 220e 	smlad	r2, r6, lr, r2
 800ab76:	fb26 1107 	smlad	r1, r6, r7, r1
 800ab7a:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800ab7e:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800ab82:	68a6      	ldr	r6, [r4, #8]
 800ab84:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800ab88:	f10c 0c08 	add.w	ip, ip, #8
 800ab8c:	3508      	adds	r5, #8
 800ab8e:	3410      	adds	r4, #16
 800ab90:	fb26 3307 	smlad	r3, r6, r7, r3
 800ab94:	fb26 000a 	smlad	r0, r6, sl, r0
 800ab98:	fb2e 2207 	smlad	r2, lr, r7, r2
 800ab9c:	fb2e 110a 	smlad	r1, lr, sl, r1
 800aba0:	4545      	cmp	r5, r8
 800aba2:	d1dc      	bne.n	800ab5e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1d6>
 800aba4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800aba6:	9d08      	ldr	r5, [sp, #32]
 800aba8:	eb09 1904 	add.w	r9, r9, r4, lsl #4
 800abac:	9c00      	ldr	r4, [sp, #0]
 800abae:	442c      	add	r4, r5
 800abb0:	9400      	str	r4, [sp, #0]
 800abb2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800abb4:	f10b 0b04 	add.w	fp, fp, #4
 800abb8:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 800abbc:	9f06      	ldr	r7, [sp, #24]
 800abbe:	455f      	cmp	r7, fp
 800abc0:	dd54      	ble.n	800ac6c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2e4>
 800abc2:	9c00      	ldr	r4, [sp, #0]
 800abc4:	f9b9 6000 	ldrsh.w	r6, [r9]
 800abc8:	f9b4 4000 	ldrsh.w	r4, [r4]
 800abcc:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 800abd0:	fb04 3306 	mla	r3, r4, r6, r3
 800abd4:	fb05 2204 	mla	r2, r5, r4, r2
 800abd8:	f9b8 4000 	ldrsh.w	r4, [r8]
 800abdc:	fb04 0006 	mla	r0, r4, r6, r0
 800abe0:	fb05 1104 	mla	r1, r5, r4, r1
 800abe4:	f10b 0401 	add.w	r4, fp, #1
 800abe8:	42bc      	cmp	r4, r7
 800abea:	da3a      	bge.n	800ac62 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2da>
 800abec:	9c00      	ldr	r4, [sp, #0]
 800abee:	f9b9 6004 	ldrsh.w	r6, [r9, #4]
 800abf2:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 800abf6:	f9b9 4006 	ldrsh.w	r4, [r9, #6]
 800abfa:	fb05 3306 	mla	r3, r5, r6, r3
 800abfe:	fb05 2204 	mla	r2, r5, r4, r2
 800ac02:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 800ac06:	fb05 1104 	mla	r1, r5, r4, r1
 800ac0a:	f10b 0402 	add.w	r4, fp, #2
 800ac0e:	42a7      	cmp	r7, r4
 800ac10:	fb06 0005 	mla	r0, r6, r5, r0
 800ac14:	dd25      	ble.n	800ac62 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2da>
 800ac16:	9c00      	ldr	r4, [sp, #0]
 800ac18:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 800ac1c:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
 800ac20:	f9b9 400a 	ldrsh.w	r4, [r9, #10]
 800ac24:	fb06 3305 	mla	r3, r6, r5, r3
 800ac28:	fb05 2204 	mla	r2, r5, r4, r2
 800ac2c:	f9b8 5004 	ldrsh.w	r5, [r8, #4]
 800ac30:	fb05 1104 	mla	r1, r5, r4, r1
 800ac34:	f10b 0403 	add.w	r4, fp, #3
 800ac38:	42a7      	cmp	r7, r4
 800ac3a:	fb06 0005 	mla	r0, r6, r5, r0
 800ac3e:	dd10      	ble.n	800ac62 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2da>
 800ac40:	9c00      	ldr	r4, [sp, #0]
 800ac42:	f9b8 6006 	ldrsh.w	r6, [r8, #6]
 800ac46:	f9b4 5006 	ldrsh.w	r5, [r4, #6]
 800ac4a:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
 800ac4e:	fb04 3305 	mla	r3, r4, r5, r3
 800ac52:	fb04 0006 	mla	r0, r4, r6, r0
 800ac56:	f9b9 400e 	ldrsh.w	r4, [r9, #14]
 800ac5a:	fb05 2204 	mla	r2, r5, r4, r2
 800ac5e:	fb06 1104 	mla	r1, r6, r4, r1
 800ac62:	9c06      	ldr	r4, [sp, #24]
 800ac64:	eba4 0b0b 	sub.w	fp, r4, fp
 800ac68:	eb09 098b 	add.w	r9, r9, fp, lsl #2
 800ac6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ac6e:	2c00      	cmp	r4, #0
 800ac70:	f000 80f2 	beq.w	800ae58 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4d0>
 800ac74:	9c01      	ldr	r4, [sp, #4]
 800ac76:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 800ac7a:	2c15      	cmp	r4, #21
 800ac7c:	f340 814e 	ble.w	800af1c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x594>
 800ac80:	9d03      	ldr	r5, [sp, #12]
 800ac82:	f855 6c08 	ldr.w	r6, [r5, #-8]
 800ac86:	9d04      	ldr	r5, [sp, #16]
 800ac88:	1ea7      	subs	r7, r4, #2
 800ac8a:	f04f 0c01 	mov.w	ip, #1
 800ac8e:	f855 5c08 	ldr.w	r5, [r5, #-8]
 800ac92:	fa0c f707 	lsl.w	r7, ip, r7
 800ac96:	3c01      	subs	r4, #1
 800ac98:	fb53 7305 	smmla	r3, r3, r5, r7
 800ac9c:	fb50 7005 	smmla	r0, r0, r5, r7
 800aca0:	9d04      	ldr	r5, [sp, #16]
 800aca2:	9f03      	ldr	r7, [sp, #12]
 800aca4:	4123      	asrs	r3, r4
 800aca6:	4433      	add	r3, r6
 800aca8:	3d04      	subs	r5, #4
 800acaa:	3f04      	subs	r7, #4
 800acac:	f303 0307 	ssat	r3, #8, r3
 800acb0:	4120      	asrs	r0, r4
 800acb2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800acb4:	4430      	add	r0, r6
 800acb6:	7023      	strb	r3, [r4, #0]
 800acb8:	f300 0007 	ssat	r0, #8, r0
 800acbc:	9b02      	ldr	r3, [sp, #8]
 800acbe:	7018      	strb	r0, [r3, #0]
 800acc0:	4620      	mov	r0, r4
 800acc2:	9b01      	ldr	r3, [sp, #4]
 800acc4:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800acc6:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 800acca:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800accc:	1904      	adds	r4, r0, r4
 800acce:	9802      	ldr	r0, [sp, #8]
 800acd0:	2b15      	cmp	r3, #21
 800acd2:	4430      	add	r0, r6
 800acd4:	f340 810e 	ble.w	800aef4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x56c>
 800acd8:	682e      	ldr	r6, [r5, #0]
 800acda:	683f      	ldr	r7, [r7, #0]
 800acdc:	1e9d      	subs	r5, r3, #2
 800acde:	f04f 0c01 	mov.w	ip, #1
 800ace2:	3b01      	subs	r3, #1
 800ace4:	fa0c f505 	lsl.w	r5, ip, r5
 800ace8:	fb52 5206 	smmla	r2, r2, r6, r5
 800acec:	411a      	asrs	r2, r3
 800acee:	fb51 5106 	smmla	r1, r1, r6, r5
 800acf2:	443a      	add	r2, r7
 800acf4:	f302 0207 	ssat	r2, #8, r2
 800acf8:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 800acfa:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800acfc:	4119      	asrs	r1, r3
 800acfe:	55aa      	strb	r2, [r5, r6]
 800ad00:	4439      	add	r1, r7
 800ad02:	f301 0107 	ssat	r1, #8, r1
 800ad06:	9b02      	ldr	r3, [sp, #8]
 800ad08:	5599      	strb	r1, [r3, r6]
 800ad0a:	4633      	mov	r3, r6
 800ad0c:	18e3      	adds	r3, r4, r3
 800ad0e:	932c      	str	r3, [sp, #176]	; 0xb0
 800ad10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ad12:	18c3      	adds	r3, r0, r3
 800ad14:	9302      	str	r3, [sp, #8]
 800ad16:	9b01      	ldr	r3, [sp, #4]
 800ad18:	9a05      	ldr	r2, [sp, #20]
 800ad1a:	3304      	adds	r3, #4
 800ad1c:	9301      	str	r3, [sp, #4]
 800ad1e:	9b04      	ldr	r3, [sp, #16]
 800ad20:	3308      	adds	r3, #8
 800ad22:	9304      	str	r3, [sp, #16]
 800ad24:	9b03      	ldr	r3, [sp, #12]
 800ad26:	3308      	adds	r3, #8
 800ad28:	9303      	str	r3, [sp, #12]
 800ad2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	f47f ae6e 	bne.w	800aa0e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x86>
 800ad32:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ad34:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ad36:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ad3a:	9328      	str	r3, [sp, #160]	; 0xa0
 800ad3c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ad3e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ad40:	4413      	add	r3, r2
 800ad42:	9329      	str	r3, [sp, #164]	; 0xa4
 800ad44:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800ad46:	4413      	add	r3, r2
 800ad48:	46cb      	mov	fp, r9
 800ad4a:	932a      	str	r3, [sp, #168]	; 0xa8
 800ad4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad4e:	07db      	lsls	r3, r3, #31
 800ad50:	f140 81c4 	bpl.w	800b0dc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x754>
 800ad54:	9a06      	ldr	r2, [sp, #24]
 800ad56:	9b05      	ldr	r3, [sp, #20]
 800ad58:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	0896      	lsrs	r6, r2, #2
 800ad5e:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 800ad62:	f000 8209 	beq.w	800b178 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x7f0>
 800ad66:	00f7      	lsls	r7, r6, #3
 800ad68:	4674      	mov	r4, lr
 800ad6a:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800ad6e:	4658      	mov	r0, fp
 800ad70:	461a      	mov	r2, r3
 800ad72:	f8d0 c000 	ldr.w	ip, [r0]
 800ad76:	6845      	ldr	r5, [r0, #4]
 800ad78:	f8d1 8000 	ldr.w	r8, [r1]
 800ad7c:	3008      	adds	r0, #8
 800ad7e:	fb2c 3308 	smlad	r3, ip, r8, r3
 800ad82:	f8d4 8000 	ldr.w	r8, [r4]
 800ad86:	fb2c 2208 	smlad	r2, ip, r8, r2
 800ad8a:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800ad8e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800ad92:	3108      	adds	r1, #8
 800ad94:	3408      	adds	r4, #8
 800ad96:	fb25 3308 	smlad	r3, r5, r8, r3
 800ad9a:	fb25 220c 	smlad	r2, r5, ip, r2
 800ad9e:	42b1      	cmp	r1, r6
 800ada0:	d1e7      	bne.n	800ad72 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3ea>
 800ada2:	44bb      	add	fp, r7
 800ada4:	44be      	add	lr, r7
 800ada6:	9906      	ldr	r1, [sp, #24]
 800ada8:	f011 0103 	ands.w	r1, r1, #3
 800adac:	d01f      	beq.n	800adee <st_sssa8_ch_nn_mat_mult_kernel_opt+0x466>
 800adae:	f9bb 0000 	ldrsh.w	r0, [fp]
 800adb2:	8834      	ldrh	r4, [r6, #0]
 800adb4:	3901      	subs	r1, #1
 800adb6:	fb14 3300 	smlabb	r3, r4, r0, r3
 800adba:	f8be 4000 	ldrh.w	r4, [lr]
 800adbe:	b289      	uxth	r1, r1
 800adc0:	fb14 2200 	smlabb	r2, r4, r0, r2
 800adc4:	b199      	cbz	r1, 800adee <st_sssa8_ch_nn_mat_mult_kernel_opt+0x466>
 800adc6:	f9bb 0002 	ldrsh.w	r0, [fp, #2]
 800adca:	8874      	ldrh	r4, [r6, #2]
 800adcc:	fb14 3300 	smlabb	r3, r4, r0, r3
 800add0:	f8be 4002 	ldrh.w	r4, [lr, #2]
 800add4:	2901      	cmp	r1, #1
 800add6:	fb14 2200 	smlabb	r2, r4, r0, r2
 800adda:	d008      	beq.n	800adee <st_sssa8_ch_nn_mat_mult_kernel_opt+0x466>
 800addc:	f9bb 1004 	ldrsh.w	r1, [fp, #4]
 800ade0:	88b0      	ldrh	r0, [r6, #4]
 800ade2:	fb11 3300 	smlabb	r3, r1, r0, r3
 800ade6:	f8be 0004 	ldrh.w	r0, [lr, #4]
 800adea:	fb11 2200 	smlabb	r2, r1, r0, r2
 800adee:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800adf0:	f9b1 0000 	ldrsh.w	r0, [r1]
 800adf4:	2815      	cmp	r0, #21
 800adf6:	f340 8180 	ble.w	800b0fa <st_sssa8_ch_nn_mat_mult_kernel_opt+0x772>
 800adfa:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800adfc:	680c      	ldr	r4, [r1, #0]
 800adfe:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800ae00:	1e85      	subs	r5, r0, #2
 800ae02:	2601      	movs	r6, #1
 800ae04:	3801      	subs	r0, #1
 800ae06:	6809      	ldr	r1, [r1, #0]
 800ae08:	40ae      	lsls	r6, r5
 800ae0a:	fb53 6501 	smmla	r5, r3, r1, r6
 800ae0e:	fb52 6301 	smmla	r3, r2, r1, r6
 800ae12:	fa45 f200 	asr.w	r2, r5, r0
 800ae16:	4422      	add	r2, r4
 800ae18:	f302 0207 	ssat	r2, #8, r2
 800ae1c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800ae1e:	4103      	asrs	r3, r0
 800ae20:	4423      	add	r3, r4
 800ae22:	f801 2b01 	strb.w	r2, [r1], #1
 800ae26:	f303 0307 	ssat	r3, #8, r3
 800ae2a:	9a02      	ldr	r2, [sp, #8]
 800ae2c:	912c      	str	r1, [sp, #176]	; 0xb0
 800ae2e:	7013      	strb	r3, [r2, #0]
 800ae30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	f000 8156 	beq.w	800b0e4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x75c>
 800ae38:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ae3a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800ae3c:	3b01      	subs	r3, #1
 800ae3e:	441a      	add	r2, r3
 800ae40:	922c      	str	r2, [sp, #176]	; 0xb0
 800ae42:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800ae44:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ae46:	1c98      	adds	r0, r3, #2
 800ae48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae4a:	fb02 0013 	mls	r0, r2, r3, r0
 800ae4e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800ae50:	4418      	add	r0, r3
 800ae52:	b01b      	add	sp, #108	; 0x6c
 800ae54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae58:	9c01      	ldr	r4, [sp, #4]
 800ae5a:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 800ae5e:	2c15      	cmp	r4, #21
 800ae60:	f340 8094 	ble.w	800af8c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x604>
 800ae64:	9d03      	ldr	r5, [sp, #12]
 800ae66:	f855 6c08 	ldr.w	r6, [r5, #-8]
 800ae6a:	9d04      	ldr	r5, [sp, #16]
 800ae6c:	1ea7      	subs	r7, r4, #2
 800ae6e:	f04f 0c01 	mov.w	ip, #1
 800ae72:	f855 5c08 	ldr.w	r5, [r5, #-8]
 800ae76:	fa0c f707 	lsl.w	r7, ip, r7
 800ae7a:	3c01      	subs	r4, #1
 800ae7c:	fb53 7305 	smmla	r3, r3, r5, r7
 800ae80:	fb50 7005 	smmla	r0, r0, r5, r7
 800ae84:	9f04      	ldr	r7, [sp, #16]
 800ae86:	9d03      	ldr	r5, [sp, #12]
 800ae88:	4123      	asrs	r3, r4
 800ae8a:	4433      	add	r3, r6
 800ae8c:	f1a7 0c04 	sub.w	ip, r7, #4
 800ae90:	f1a5 0804 	sub.w	r8, r5, #4
 800ae94:	f303 0307 	ssat	r3, #8, r3
 800ae98:	4120      	asrs	r0, r4
 800ae9a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800ae9c:	4430      	add	r0, r6
 800ae9e:	7023      	strb	r3, [r4, #0]
 800aea0:	f300 0007 	ssat	r0, #8, r0
 800aea4:	9b02      	ldr	r3, [sp, #8]
 800aea6:	7018      	strb	r0, [r3, #0]
 800aea8:	9b01      	ldr	r3, [sp, #4]
 800aeaa:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 800aeae:	2b15      	cmp	r3, #21
 800aeb0:	dd52      	ble.n	800af58 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5d0>
 800aeb2:	f8d8 4000 	ldr.w	r4, [r8]
 800aeb6:	f8dc 5000 	ldr.w	r5, [ip]
 800aeba:	1e98      	subs	r0, r3, #2
 800aebc:	2601      	movs	r6, #1
 800aebe:	3b01      	subs	r3, #1
 800aec0:	fa06 f000 	lsl.w	r0, r6, r0
 800aec4:	fb52 0205 	smmla	r2, r2, r5, r0
 800aec8:	411a      	asrs	r2, r3
 800aeca:	fb51 0105 	smmla	r1, r1, r5, r0
 800aece:	4422      	add	r2, r4
 800aed0:	f302 0207 	ssat	r2, #8, r2
 800aed4:	fa41 f303 	asr.w	r3, r1, r3
 800aed8:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800aeda:	4423      	add	r3, r4
 800aedc:	704a      	strb	r2, [r1, #1]
 800aede:	f303 0307 	ssat	r3, #8, r3
 800aee2:	9a02      	ldr	r2, [sp, #8]
 800aee4:	7053      	strb	r3, [r2, #1]
 800aee6:	460b      	mov	r3, r1
 800aee8:	3302      	adds	r3, #2
 800aeea:	932c      	str	r3, [sp, #176]	; 0xb0
 800aeec:	9b02      	ldr	r3, [sp, #8]
 800aeee:	3302      	adds	r3, #2
 800aef0:	9302      	str	r3, [sp, #8]
 800aef2:	e710      	b.n	800ad16 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x38e>
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	dd71      	ble.n	800afdc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x654>
 800aef8:	682d      	ldr	r5, [r5, #0]
 800aefa:	683f      	ldr	r7, [r7, #0]
 800aefc:	0052      	lsls	r2, r2, #1
 800aefe:	0049      	lsls	r1, r1, #1
 800af00:	fb52 7205 	smmla	r2, r2, r5, r7
 800af04:	fb51 7105 	smmla	r1, r1, r5, r7
 800af08:	411a      	asrs	r2, r3
 800af0a:	f302 0207 	ssat	r2, #8, r2
 800af0e:	7022      	strb	r2, [r4, #0]
 800af10:	4119      	asrs	r1, r3
 800af12:	f301 0107 	ssat	r1, #8, r1
 800af16:	7001      	strb	r1, [r0, #0]
 800af18:	4633      	mov	r3, r6
 800af1a:	e6f7      	b.n	800ad0c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x384>
 800af1c:	2c00      	cmp	r4, #0
 800af1e:	f340 809b 	ble.w	800b058 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x6d0>
 800af22:	9f04      	ldr	r7, [sp, #16]
 800af24:	9e03      	ldr	r6, [sp, #12]
 800af26:	f857 5c08 	ldr.w	r5, [r7, #-8]
 800af2a:	f856 6c08 	ldr.w	r6, [r6, #-8]
 800af2e:	005b      	lsls	r3, r3, #1
 800af30:	0040      	lsls	r0, r0, #1
 800af32:	fb53 6305 	smmla	r3, r3, r5, r6
 800af36:	fb50 6005 	smmla	r0, r0, r5, r6
 800af3a:	9e03      	ldr	r6, [sp, #12]
 800af3c:	1f3d      	subs	r5, r7, #4
 800af3e:	4123      	asrs	r3, r4
 800af40:	1f37      	subs	r7, r6, #4
 800af42:	f303 0307 	ssat	r3, #8, r3
 800af46:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 800af48:	4120      	asrs	r0, r4
 800af4a:	7033      	strb	r3, [r6, #0]
 800af4c:	f300 0007 	ssat	r0, #8, r0
 800af50:	9b02      	ldr	r3, [sp, #8]
 800af52:	7018      	strb	r0, [r3, #0]
 800af54:	4630      	mov	r0, r6
 800af56:	e6b4      	b.n	800acc2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x33a>
 800af58:	2b00      	cmp	r3, #0
 800af5a:	f340 80a0 	ble.w	800b09e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x716>
 800af5e:	f8dc 0000 	ldr.w	r0, [ip]
 800af62:	f8d8 4000 	ldr.w	r4, [r8]
 800af66:	0052      	lsls	r2, r2, #1
 800af68:	0049      	lsls	r1, r1, #1
 800af6a:	fb52 4200 	smmla	r2, r2, r0, r4
 800af6e:	fb51 4100 	smmla	r1, r1, r0, r4
 800af72:	411a      	asrs	r2, r3
 800af74:	f302 0207 	ssat	r2, #8, r2
 800af78:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800af7a:	fa41 f303 	asr.w	r3, r1, r3
 800af7e:	7042      	strb	r2, [r0, #1]
 800af80:	f303 0307 	ssat	r3, #8, r3
 800af84:	9a02      	ldr	r2, [sp, #8]
 800af86:	7053      	strb	r3, [r2, #1]
 800af88:	4603      	mov	r3, r0
 800af8a:	e7ad      	b.n	800aee8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x560>
 800af8c:	2c00      	cmp	r4, #0
 800af8e:	dd3f      	ble.n	800b010 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x688>
 800af90:	9f04      	ldr	r7, [sp, #16]
 800af92:	9e03      	ldr	r6, [sp, #12]
 800af94:	f857 5c08 	ldr.w	r5, [r7, #-8]
 800af98:	f856 6c08 	ldr.w	r6, [r6, #-8]
 800af9c:	005b      	lsls	r3, r3, #1
 800af9e:	0040      	lsls	r0, r0, #1
 800afa0:	fb53 6305 	smmla	r3, r3, r5, r6
 800afa4:	fb50 6005 	smmla	r0, r0, r5, r6
 800afa8:	9e03      	ldr	r6, [sp, #12]
 800afaa:	4123      	asrs	r3, r4
 800afac:	f1a7 0c04 	sub.w	ip, r7, #4
 800afb0:	f1a6 0804 	sub.w	r8, r6, #4
 800afb4:	f303 0307 	ssat	r3, #8, r3
 800afb8:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 800afba:	4120      	asrs	r0, r4
 800afbc:	702b      	strb	r3, [r5, #0]
 800afbe:	f300 0007 	ssat	r0, #8, r0
 800afc2:	9b02      	ldr	r3, [sp, #8]
 800afc4:	7018      	strb	r0, [r3, #0]
 800afc6:	e76f      	b.n	800aea8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x520>
 800afc8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800afca:	9400      	str	r4, [sp, #0]
 800afcc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800afce:	f04f 0b00 	mov.w	fp, #0
 800afd2:	45a3      	cmp	fp, r4
 800afd4:	f6ff adb5 	blt.w	800ab42 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1ba>
 800afd8:	46a8      	mov	r8, r5
 800afda:	e5ef      	b.n	800abbc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x234>
 800afdc:	f1c3 0301 	rsb	r3, r3, #1
 800afe0:	409a      	lsls	r2, r3
 800afe2:	f302 021f 	ssat	r2, #32, r2
 800afe6:	682d      	ldr	r5, [r5, #0]
 800afe8:	fb52 f215 	smmulr	r2, r2, r5
 800afec:	fa01 f303 	lsl.w	r3, r1, r3
 800aff0:	f303 031f 	ssat	r3, #32, r3
 800aff4:	fb53 f515 	smmulr	r5, r3, r5
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	4413      	add	r3, r2
 800affc:	f303 0307 	ssat	r3, #8, r3
 800b000:	7023      	strb	r3, [r4, #0]
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	442b      	add	r3, r5
 800b006:	f303 0307 	ssat	r3, #8, r3
 800b00a:	7003      	strb	r3, [r0, #0]
 800b00c:	4633      	mov	r3, r6
 800b00e:	e67d      	b.n	800ad0c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x384>
 800b010:	f1c4 0401 	rsb	r4, r4, #1
 800b014:	fa03 f504 	lsl.w	r5, r3, r4
 800b018:	f305 051f 	ssat	r5, #32, r5
 800b01c:	9e04      	ldr	r6, [sp, #16]
 800b01e:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800b022:	fb55 f513 	smmulr	r5, r5, r3
 800b026:	40a0      	lsls	r0, r4
 800b028:	f300 001f 	ssat	r0, #32, r0
 800b02c:	f1a6 0c04 	sub.w	ip, r6, #4
 800b030:	fb50 f013 	smmulr	r0, r0, r3
 800b034:	9c03      	ldr	r4, [sp, #12]
 800b036:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800b03a:	442b      	add	r3, r5
 800b03c:	f303 0307 	ssat	r3, #8, r3
 800b040:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 800b042:	702b      	strb	r3, [r5, #0]
 800b044:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800b048:	f1a4 0804 	sub.w	r8, r4, #4
 800b04c:	4403      	add	r3, r0
 800b04e:	f303 0307 	ssat	r3, #8, r3
 800b052:	9802      	ldr	r0, [sp, #8]
 800b054:	7003      	strb	r3, [r0, #0]
 800b056:	e727      	b.n	800aea8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x520>
 800b058:	f1c4 0401 	rsb	r4, r4, #1
 800b05c:	fa03 f604 	lsl.w	r6, r3, r4
 800b060:	f306 061f 	ssat	r6, #32, r6
 800b064:	9d04      	ldr	r5, [sp, #16]
 800b066:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800b06a:	fb56 f613 	smmulr	r6, r6, r3
 800b06e:	40a0      	lsls	r0, r4
 800b070:	f300 001f 	ssat	r0, #32, r0
 800b074:	3d04      	subs	r5, #4
 800b076:	fb50 f013 	smmulr	r0, r0, r3
 800b07a:	9c03      	ldr	r4, [sp, #12]
 800b07c:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800b080:	4433      	add	r3, r6
 800b082:	f303 0307 	ssat	r3, #8, r3
 800b086:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 800b088:	7033      	strb	r3, [r6, #0]
 800b08a:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800b08e:	1f27      	subs	r7, r4, #4
 800b090:	4403      	add	r3, r0
 800b092:	f303 0307 	ssat	r3, #8, r3
 800b096:	9802      	ldr	r0, [sp, #8]
 800b098:	7003      	strb	r3, [r0, #0]
 800b09a:	4630      	mov	r0, r6
 800b09c:	e611      	b.n	800acc2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x33a>
 800b09e:	f1c3 0301 	rsb	r3, r3, #1
 800b0a2:	409a      	lsls	r2, r3
 800b0a4:	f302 021f 	ssat	r2, #32, r2
 800b0a8:	f8dc 0000 	ldr.w	r0, [ip]
 800b0ac:	fb52 f210 	smmulr	r2, r2, r0
 800b0b0:	fa01 f303 	lsl.w	r3, r1, r3
 800b0b4:	f303 031f 	ssat	r3, #32, r3
 800b0b8:	fb53 f010 	smmulr	r0, r3, r0
 800b0bc:	f8d8 3000 	ldr.w	r3, [r8]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	f303 0307 	ssat	r3, #8, r3
 800b0c6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800b0c8:	7053      	strb	r3, [r2, #1]
 800b0ca:	f8d8 3000 	ldr.w	r3, [r8]
 800b0ce:	4403      	add	r3, r0
 800b0d0:	f303 0307 	ssat	r3, #8, r3
 800b0d4:	9a02      	ldr	r2, [sp, #8]
 800b0d6:	7053      	strb	r3, [r2, #1]
 800b0d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800b0da:	e705      	b.n	800aee8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x560>
 800b0dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	f47f aeaf 	bne.w	800ae42 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4ba>
 800b0e4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800b0e6:	9914      	ldr	r1, [sp, #80]	; 0x50
 800b0e8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b0ea:	1a50      	subs	r0, r2, r1
 800b0ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b0ee:	3302      	adds	r3, #2
 800b0f0:	fb02 0003 	mla	r0, r2, r3, r0
 800b0f4:	b01b      	add	sp, #108	; 0x6c
 800b0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0fa:	2800      	cmp	r0, #0
 800b0fc:	dd1b      	ble.n	800b136 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x7ae>
 800b0fe:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800b100:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800b102:	6809      	ldr	r1, [r1, #0]
 800b104:	6824      	ldr	r4, [r4, #0]
 800b106:	0052      	lsls	r2, r2, #1
 800b108:	005b      	lsls	r3, r3, #1
 800b10a:	fb53 4301 	smmla	r3, r3, r1, r4
 800b10e:	fb52 4101 	smmla	r1, r2, r1, r4
 800b112:	fa43 f000 	asr.w	r0, r3, r0
 800b116:	f300 0307 	ssat	r3, #8, r0
 800b11a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800b11c:	f802 3b01 	strb.w	r3, [r2], #1
 800b120:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b122:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b126:	fa41 f303 	asr.w	r3, r1, r3
 800b12a:	f303 0307 	ssat	r3, #8, r3
 800b12e:	9902      	ldr	r1, [sp, #8]
 800b130:	922c      	str	r2, [sp, #176]	; 0xb0
 800b132:	700b      	strb	r3, [r1, #0]
 800b134:	e67c      	b.n	800ae30 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4a8>
 800b136:	f1c0 0001 	rsb	r0, r0, #1
 800b13a:	fa03 f100 	lsl.w	r1, r3, r0
 800b13e:	f301 011f 	ssat	r1, #32, r1
 800b142:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b144:	681c      	ldr	r4, [r3, #0]
 800b146:	fb51 f114 	smmulr	r1, r1, r4
 800b14a:	fa02 f300 	lsl.w	r3, r2, r0
 800b14e:	f303 031f 	ssat	r3, #32, r3
 800b152:	fb53 f414 	smmulr	r4, r3, r4
 800b156:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	440b      	add	r3, r1
 800b15c:	f303 0307 	ssat	r3, #8, r3
 800b160:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800b162:	f802 3b01 	strb.w	r3, [r2], #1
 800b166:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4423      	add	r3, r4
 800b16c:	f303 0307 	ssat	r3, #8, r3
 800b170:	9902      	ldr	r1, [sp, #8]
 800b172:	922c      	str	r2, [sp, #176]	; 0xb0
 800b174:	700b      	strb	r3, [r1, #0]
 800b176:	e65b      	b.n	800ae30 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4a8>
 800b178:	460e      	mov	r6, r1
 800b17a:	461a      	mov	r2, r3
 800b17c:	e613      	b.n	800ada6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x41e>
 800b17e:	bf00      	nop

0800b180 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 800b180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b184:	b095      	sub	sp, #84	; 0x54
 800b186:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 800b18a:	920d      	str	r2, [sp, #52]	; 0x34
 800b18c:	9311      	str	r3, [sp, #68]	; 0x44
 800b18e:	f8bd 2080 	ldrh.w	r2, [sp, #128]	; 0x80
 800b192:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
 800b196:	9204      	str	r2, [sp, #16]
 800b198:	0862      	lsrs	r2, r4, #1
 800b19a:	940f      	str	r4, [sp, #60]	; 0x3c
 800b19c:	9106      	str	r1, [sp, #24]
 800b19e:	9310      	str	r3, [sp, #64]	; 0x40
 800b1a0:	920e      	str	r2, [sp, #56]	; 0x38
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	f000 81f8 	beq.w	800b598 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x418>
 800b1a8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b1aa:	b29c      	uxth	r4, r3
 800b1ac:	2a00      	cmp	r2, #0
 800b1ae:	f000 8142 	beq.w	800b436 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2b6>
 800b1b2:	1c61      	adds	r1, r4, #1
 800b1b4:	0064      	lsls	r4, r4, #1
 800b1b6:	9407      	str	r4, [sp, #28]
 800b1b8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b1ba:	9d04      	ldr	r5, [sp, #16]
 800b1bc:	1861      	adds	r1, r4, r1
 800b1be:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b1c0:	9102      	str	r1, [sp, #8]
 800b1c2:	3a01      	subs	r2, #1
 800b1c4:	f104 0110 	add.w	r1, r4, #16
 800b1c8:	b292      	uxth	r2, r2
 800b1ca:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800b1ce:	1ee9      	subs	r1, r5, #3
 800b1d0:	9108      	str	r1, [sp, #32]
 800b1d2:	9921      	ldr	r1, [sp, #132]	; 0x84
 800b1d4:	9209      	str	r2, [sp, #36]	; 0x24
 800b1d6:	3104      	adds	r1, #4
 800b1d8:	9100      	str	r1, [sp, #0]
 800b1da:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b1dc:	3108      	adds	r1, #8
 800b1de:	9101      	str	r1, [sp, #4]
 800b1e0:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800b1e2:	f101 0b08 	add.w	fp, r1, #8
 800b1e6:	9925      	ldr	r1, [sp, #148]	; 0x94
 800b1e8:	f1a5 0310 	sub.w	r3, r5, #16
 800b1ec:	3101      	adds	r1, #1
 800b1ee:	091b      	lsrs	r3, r3, #4
 800b1f0:	9103      	str	r1, [sp, #12]
 800b1f2:	9906      	ldr	r1, [sp, #24]
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	eb01 1743 	add.w	r7, r1, r3, lsl #5
 800b1fa:	0119      	lsls	r1, r3, #4
 800b1fc:	019b      	lsls	r3, r3, #6
 800b1fe:	930a      	str	r3, [sp, #40]	; 0x28
 800b200:	1f2b      	subs	r3, r5, #4
 800b202:	f104 0908 	add.w	r9, r4, #8
 800b206:	910b      	str	r1, [sp, #44]	; 0x2c
 800b208:	930c      	str	r3, [sp, #48]	; 0x30
 800b20a:	f859 3c08 	ldr.w	r3, [r9, #-8]
 800b20e:	9904      	ldr	r1, [sp, #16]
 800b210:	9313      	str	r3, [sp, #76]	; 0x4c
 800b212:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800b216:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b218:	9313      	str	r3, [sp, #76]	; 0x4c
 800b21a:	290f      	cmp	r1, #15
 800b21c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b21e:	9c06      	ldr	r4, [sp, #24]
 800b220:	f340 81b7 	ble.w	800b592 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x412>
 800b224:	4601      	mov	r1, r0
 800b226:	f8d4 c000 	ldr.w	ip, [r4]
 800b22a:	680e      	ldr	r6, [r1, #0]
 800b22c:	fb26 220c 	smlad	r2, r6, ip, r2
 800b230:	684d      	ldr	r5, [r1, #4]
 800b232:	fb25 330c 	smlad	r3, r5, ip, r3
 800b236:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800b23a:	688e      	ldr	r6, [r1, #8]
 800b23c:	fb26 260c 	smlad	r6, r6, ip, r2
 800b240:	68cd      	ldr	r5, [r1, #12]
 800b242:	fb25 350c 	smlad	r5, r5, ip, r3
 800b246:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800b24a:	690a      	ldr	r2, [r1, #16]
 800b24c:	fb22 660c 	smlad	r6, r2, ip, r6
 800b250:	694b      	ldr	r3, [r1, #20]
 800b252:	fb23 550c 	smlad	r5, r3, ip, r5
 800b256:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800b25a:	698a      	ldr	r2, [r1, #24]
 800b25c:	fb22 620c 	smlad	r2, r2, ip, r6
 800b260:	69cb      	ldr	r3, [r1, #28]
 800b262:	fb23 530c 	smlad	r3, r3, ip, r5
 800b266:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800b26a:	6a0e      	ldr	r6, [r1, #32]
 800b26c:	fb26 220c 	smlad	r2, r6, ip, r2
 800b270:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800b272:	fb25 330c 	smlad	r3, r5, ip, r3
 800b276:	f8d4 c014 	ldr.w	ip, [r4, #20]
 800b27a:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 800b27c:	fb26 260c 	smlad	r6, r6, ip, r2
 800b280:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 800b282:	fb25 350c 	smlad	r5, r5, ip, r3
 800b286:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800b28a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800b28c:	fb22 660c 	smlad	r6, r2, ip, r6
 800b290:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800b292:	fb23 550c 	smlad	r5, r3, ip, r5
 800b296:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 800b29a:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 800b29c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800b29e:	3420      	adds	r4, #32
 800b2a0:	3140      	adds	r1, #64	; 0x40
 800b2a2:	fb22 620c 	smlad	r2, r2, ip, r6
 800b2a6:	fb23 530c 	smlad	r3, r3, ip, r5
 800b2aa:	42bc      	cmp	r4, r7
 800b2ac:	d1bb      	bne.n	800b226 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xa6>
 800b2ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b2b0:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 800b2b4:	4408      	add	r0, r1
 800b2b6:	463c      	mov	r4, r7
 800b2b8:	9908      	ldr	r1, [sp, #32]
 800b2ba:	458e      	cmp	lr, r1
 800b2bc:	da24      	bge.n	800b308 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x188>
 800b2be:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b2c0:	eba1 0a0e 	sub.w	sl, r1, lr
 800b2c4:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 800b2c8:	f10a 0101 	add.w	r1, sl, #1
 800b2cc:	9105      	str	r1, [sp, #20]
 800b2ce:	eb04 08c1 	add.w	r8, r4, r1, lsl #3
 800b2d2:	4601      	mov	r1, r0
 800b2d4:	6825      	ldr	r5, [r4, #0]
 800b2d6:	680e      	ldr	r6, [r1, #0]
 800b2d8:	fb26 2205 	smlad	r2, r6, r5, r2
 800b2dc:	684e      	ldr	r6, [r1, #4]
 800b2de:	fb26 3505 	smlad	r5, r6, r5, r3
 800b2e2:	6866      	ldr	r6, [r4, #4]
 800b2e4:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800b2e8:	68cb      	ldr	r3, [r1, #12]
 800b2ea:	3408      	adds	r4, #8
 800b2ec:	3110      	adds	r1, #16
 800b2ee:	fb2c 2206 	smlad	r2, ip, r6, r2
 800b2f2:	fb23 5306 	smlad	r3, r3, r6, r5
 800b2f6:	45a0      	cmp	r8, r4
 800b2f8:	d1ec      	bne.n	800b2d4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x154>
 800b2fa:	9905      	ldr	r1, [sp, #20]
 800b2fc:	f10e 0e04 	add.w	lr, lr, #4
 800b300:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800b304:	eb0e 0e8a 	add.w	lr, lr, sl, lsl #2
 800b308:	9e04      	ldr	r6, [sp, #16]
 800b30a:	4576      	cmp	r6, lr
 800b30c:	dd30      	ble.n	800b370 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1f0>
 800b30e:	f9b4 1000 	ldrsh.w	r1, [r4]
 800b312:	8805      	ldrh	r5, [r0, #0]
 800b314:	fb15 2201 	smlabb	r2, r5, r1, r2
 800b318:	8845      	ldrh	r5, [r0, #2]
 800b31a:	fb11 3305 	smlabb	r3, r1, r5, r3
 800b31e:	f10e 0101 	add.w	r1, lr, #1
 800b322:	428e      	cmp	r6, r1
 800b324:	dd1f      	ble.n	800b366 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1e6>
 800b326:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800b32a:	8885      	ldrh	r5, [r0, #4]
 800b32c:	fb15 2201 	smlabb	r2, r5, r1, r2
 800b330:	88c5      	ldrh	r5, [r0, #6]
 800b332:	fb11 3305 	smlabb	r3, r1, r5, r3
 800b336:	f10e 0102 	add.w	r1, lr, #2
 800b33a:	428e      	cmp	r6, r1
 800b33c:	dd13      	ble.n	800b366 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1e6>
 800b33e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800b342:	8905      	ldrh	r5, [r0, #8]
 800b344:	fb15 2201 	smlabb	r2, r5, r1, r2
 800b348:	8945      	ldrh	r5, [r0, #10]
 800b34a:	fb11 3305 	smlabb	r3, r1, r5, r3
 800b34e:	f10e 0103 	add.w	r1, lr, #3
 800b352:	428e      	cmp	r6, r1
 800b354:	dd07      	ble.n	800b366 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1e6>
 800b356:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800b35a:	8984      	ldrh	r4, [r0, #12]
 800b35c:	fb14 2201 	smlabb	r2, r4, r1, r2
 800b360:	89c4      	ldrh	r4, [r0, #14]
 800b362:	fb11 3304 	smlabb	r3, r1, r4, r3
 800b366:	9904      	ldr	r1, [sp, #16]
 800b368:	eba1 0e0e 	sub.w	lr, r1, lr
 800b36c:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 800b370:	9900      	ldr	r1, [sp, #0]
 800b372:	f931 5c04 	ldrsh.w	r5, [r1, #-4]
 800b376:	2d15      	cmp	r5, #21
 800b378:	f340 80b4 	ble.w	800b4e4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x364>
 800b37c:	9901      	ldr	r1, [sp, #4]
 800b37e:	f85b 6c08 	ldr.w	r6, [fp, #-8]
 800b382:	f851 1c08 	ldr.w	r1, [r1, #-8]
 800b386:	1eac      	subs	r4, r5, #2
 800b388:	f04f 0c01 	mov.w	ip, #1
 800b38c:	fa0c f404 	lsl.w	r4, ip, r4
 800b390:	3d01      	subs	r5, #1
 800b392:	fb52 4201 	smmla	r2, r2, r1, r4
 800b396:	9c01      	ldr	r4, [sp, #4]
 800b398:	9900      	ldr	r1, [sp, #0]
 800b39a:	412a      	asrs	r2, r5
 800b39c:	4432      	add	r2, r6
 800b39e:	f1a4 0e04 	sub.w	lr, r4, #4
 800b3a2:	f1a1 0c02 	sub.w	ip, r1, #2
 800b3a6:	f1ab 0604 	sub.w	r6, fp, #4
 800b3aa:	f302 0207 	ssat	r2, #8, r2
 800b3ae:	9903      	ldr	r1, [sp, #12]
 800b3b0:	f801 2c01 	strb.w	r2, [r1, #-1]
 800b3b4:	f9bc 2000 	ldrsh.w	r2, [ip]
 800b3b8:	2a15      	cmp	r2, #21
 800b3ba:	f340 80b0 	ble.w	800b51e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x39e>
 800b3be:	6834      	ldr	r4, [r6, #0]
 800b3c0:	f8de 1000 	ldr.w	r1, [lr]
 800b3c4:	1e95      	subs	r5, r2, #2
 800b3c6:	2601      	movs	r6, #1
 800b3c8:	3a01      	subs	r2, #1
 800b3ca:	fa06 f505 	lsl.w	r5, r6, r5
 800b3ce:	fb53 5501 	smmla	r5, r3, r1, r5
 800b3d2:	4115      	asrs	r5, r2
 800b3d4:	4425      	add	r5, r4
 800b3d6:	f305 0507 	ssat	r5, #8, r5
 800b3da:	9b02      	ldr	r3, [sp, #8]
 800b3dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b3e0:	9b00      	ldr	r3, [sp, #0]
 800b3e2:	9a07      	ldr	r2, [sp, #28]
 800b3e4:	3304      	adds	r3, #4
 800b3e6:	9300      	str	r3, [sp, #0]
 800b3e8:	9b01      	ldr	r3, [sp, #4]
 800b3ea:	3308      	adds	r3, #8
 800b3ec:	9301      	str	r3, [sp, #4]
 800b3ee:	9b02      	ldr	r3, [sp, #8]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	9302      	str	r3, [sp, #8]
 800b3f4:	9b03      	ldr	r3, [sp, #12]
 800b3f6:	4413      	add	r3, r2
 800b3f8:	9303      	str	r3, [sp, #12]
 800b3fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3fc:	f109 0908 	add.w	r9, r9, #8
 800b400:	4599      	cmp	r9, r3
 800b402:	f10b 0b08 	add.w	fp, fp, #8
 800b406:	f47f af00 	bne.w	800b20a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x8a>
 800b40a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b40c:	4611      	mov	r1, r2
 800b40e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800b410:	fb03 2201 	mla	r2, r3, r1, r2
 800b414:	9225      	str	r2, [sp, #148]	; 0x94
 800b416:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b418:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b41c:	920d      	str	r2, [sp, #52]	; 0x34
 800b41e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b420:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b424:	9221      	str	r2, [sp, #132]	; 0x84
 800b426:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b428:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b42c:	9222      	str	r2, [sp, #136]	; 0x88
 800b42e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b430:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b434:	9323      	str	r3, [sp, #140]	; 0x8c
 800b436:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b438:	07db      	lsls	r3, r3, #31
 800b43a:	d545      	bpl.n	800b4c8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x348>
 800b43c:	9a04      	ldr	r2, [sp, #16]
 800b43e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b440:	0896      	lsrs	r6, r2, #2
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	d012      	beq.n	800b46c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2ec>
 800b446:	9906      	ldr	r1, [sp, #24]
 800b448:	00f7      	lsls	r7, r6, #3
 800b44a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b44e:	6804      	ldr	r4, [r0, #0]
 800b450:	6842      	ldr	r2, [r0, #4]
 800b452:	680d      	ldr	r5, [r1, #0]
 800b454:	3008      	adds	r0, #8
 800b456:	fb24 3305 	smlad	r3, r4, r5, r3
 800b45a:	684c      	ldr	r4, [r1, #4]
 800b45c:	3108      	adds	r1, #8
 800b45e:	fb22 3304 	smlad	r3, r2, r4, r3
 800b462:	4286      	cmp	r6, r0
 800b464:	d1f3      	bne.n	800b44e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2ce>
 800b466:	9a06      	ldr	r2, [sp, #24]
 800b468:	443a      	add	r2, r7
 800b46a:	9206      	str	r2, [sp, #24]
 800b46c:	9a04      	ldr	r2, [sp, #16]
 800b46e:	f012 0203 	ands.w	r2, r2, #3
 800b472:	d011      	beq.n	800b498 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x318>
 800b474:	9d06      	ldr	r5, [sp, #24]
 800b476:	8801      	ldrh	r1, [r0, #0]
 800b478:	882c      	ldrh	r4, [r5, #0]
 800b47a:	3a01      	subs	r2, #1
 800b47c:	b292      	uxth	r2, r2
 800b47e:	fb14 3301 	smlabb	r3, r4, r1, r3
 800b482:	b14a      	cbz	r2, 800b498 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x318>
 800b484:	886c      	ldrh	r4, [r5, #2]
 800b486:	8841      	ldrh	r1, [r0, #2]
 800b488:	2a01      	cmp	r2, #1
 800b48a:	fb14 3301 	smlabb	r3, r4, r1, r3
 800b48e:	d003      	beq.n	800b498 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x318>
 800b490:	8881      	ldrh	r1, [r0, #4]
 800b492:	88aa      	ldrh	r2, [r5, #4]
 800b494:	fb11 3302 	smlabb	r3, r1, r2, r3
 800b498:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b49a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b49e:	2a15      	cmp	r2, #21
 800b4a0:	f340 8084 	ble.w	800b5ac <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x42c>
 800b4a4:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800b4a6:	680c      	ldr	r4, [r1, #0]
 800b4a8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b4aa:	1e95      	subs	r5, r2, #2
 800b4ac:	2001      	movs	r0, #1
 800b4ae:	3a01      	subs	r2, #1
 800b4b0:	6809      	ldr	r1, [r1, #0]
 800b4b2:	40a8      	lsls	r0, r5
 800b4b4:	fb53 0301 	smmla	r3, r3, r1, r0
 800b4b8:	4113      	asrs	r3, r2
 800b4ba:	4423      	add	r3, r4
 800b4bc:	f303 0307 	ssat	r3, #8, r3
 800b4c0:	9825      	ldr	r0, [sp, #148]	; 0x94
 800b4c2:	f800 3b01 	strb.w	r3, [r0], #1
 800b4c6:	9025      	str	r0, [sp, #148]	; 0x94
 800b4c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d066      	beq.n	800b59c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x41c>
 800b4ce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b4d0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b4d2:	fb03 f000 	mul.w	r0, r3, r0
 800b4d6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b4d8:	f1c0 0001 	rsb	r0, r0, #1
 800b4dc:	4418      	add	r0, r3
 800b4de:	b015      	add	sp, #84	; 0x54
 800b4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e4:	2d00      	cmp	r5, #0
 800b4e6:	dd29      	ble.n	800b53c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3bc>
 800b4e8:	9e01      	ldr	r6, [sp, #4]
 800b4ea:	f85b 4c08 	ldr.w	r4, [fp, #-8]
 800b4ee:	f856 1c08 	ldr.w	r1, [r6, #-8]
 800b4f2:	0052      	lsls	r2, r2, #1
 800b4f4:	fb52 4201 	smmla	r2, r2, r1, r4
 800b4f8:	fa42 f505 	asr.w	r5, r2, r5
 800b4fc:	9a00      	ldr	r2, [sp, #0]
 800b4fe:	f1a6 0e04 	sub.w	lr, r6, #4
 800b502:	f1a2 0c02 	sub.w	ip, r2, #2
 800b506:	f1ab 0604 	sub.w	r6, fp, #4
 800b50a:	f305 0507 	ssat	r5, #8, r5
 800b50e:	9a03      	ldr	r2, [sp, #12]
 800b510:	f802 5c01 	strb.w	r5, [r2, #-1]
 800b514:	f9bc 2000 	ldrsh.w	r2, [ip]
 800b518:	2a15      	cmp	r2, #21
 800b51a:	f73f af50 	bgt.w	800b3be <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x23e>
 800b51e:	2a00      	cmp	r2, #0
 800b520:	dd25      	ble.n	800b56e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3ee>
 800b522:	f8de 1000 	ldr.w	r1, [lr]
 800b526:	6834      	ldr	r4, [r6, #0]
 800b528:	005b      	lsls	r3, r3, #1
 800b52a:	fb53 4301 	smmla	r3, r3, r1, r4
 800b52e:	4113      	asrs	r3, r2
 800b530:	f303 0307 	ssat	r3, #8, r3
 800b534:	9a02      	ldr	r2, [sp, #8]
 800b536:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b53a:	e751      	b.n	800b3e0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x260>
 800b53c:	f1c5 0501 	rsb	r5, r5, #1
 800b540:	40aa      	lsls	r2, r5
 800b542:	f1a1 0c02 	sub.w	ip, r1, #2
 800b546:	f302 021f 	ssat	r2, #32, r2
 800b54a:	9901      	ldr	r1, [sp, #4]
 800b54c:	f1a1 0e04 	sub.w	lr, r1, #4
 800b550:	f851 1c08 	ldr.w	r1, [r1, #-8]
 800b554:	fb52 f111 	smmulr	r1, r2, r1
 800b558:	f85b 2c08 	ldr.w	r2, [fp, #-8]
 800b55c:	f1ab 0604 	sub.w	r6, fp, #4
 800b560:	440a      	add	r2, r1
 800b562:	f302 0207 	ssat	r2, #8, r2
 800b566:	9903      	ldr	r1, [sp, #12]
 800b568:	f801 2c01 	strb.w	r2, [r1, #-1]
 800b56c:	e722      	b.n	800b3b4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x234>
 800b56e:	f1c2 0201 	rsb	r2, r2, #1
 800b572:	fa03 f202 	lsl.w	r2, r3, r2
 800b576:	f302 021f 	ssat	r2, #32, r2
 800b57a:	f8de 3000 	ldr.w	r3, [lr]
 800b57e:	fb52 f313 	smmulr	r3, r2, r3
 800b582:	6832      	ldr	r2, [r6, #0]
 800b584:	4413      	add	r3, r2
 800b586:	f303 0307 	ssat	r3, #8, r3
 800b58a:	9a02      	ldr	r2, [sp, #8]
 800b58c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b590:	e726      	b.n	800b3e0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x260>
 800b592:	f04f 0e00 	mov.w	lr, #0
 800b596:	e68f      	b.n	800b2b8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x138>
 800b598:	2401      	movs	r4, #1
 800b59a:	e607      	b.n	800b1ac <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2c>
 800b59c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b59e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b5a0:	1a98      	subs	r0, r3, r2
 800b5a2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b5a4:	4418      	add	r0, r3
 800b5a6:	b015      	add	sp, #84	; 0x54
 800b5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ac:	2a00      	cmp	r2, #0
 800b5ae:	dd0e      	ble.n	800b5ce <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x44e>
 800b5b0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b5b2:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800b5b4:	6809      	ldr	r1, [r1, #0]
 800b5b6:	6800      	ldr	r0, [r0, #0]
 800b5b8:	005b      	lsls	r3, r3, #1
 800b5ba:	fb53 0301 	smmla	r3, r3, r1, r0
 800b5be:	4113      	asrs	r3, r2
 800b5c0:	f303 0307 	ssat	r3, #8, r3
 800b5c4:	9825      	ldr	r0, [sp, #148]	; 0x94
 800b5c6:	f800 3b01 	strb.w	r3, [r0], #1
 800b5ca:	9025      	str	r0, [sp, #148]	; 0x94
 800b5cc:	e77c      	b.n	800b4c8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x348>
 800b5ce:	f1c2 0201 	rsb	r2, r2, #1
 800b5d2:	4093      	lsls	r3, r2
 800b5d4:	f303 031f 	ssat	r3, #32, r3
 800b5d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b5da:	6812      	ldr	r2, [r2, #0]
 800b5dc:	fb53 f312 	smmulr	r3, r3, r2
 800b5e0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b5e2:	6812      	ldr	r2, [r2, #0]
 800b5e4:	4413      	add	r3, r2
 800b5e6:	f303 0307 	ssat	r3, #8, r3
 800b5ea:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800b5ec:	f802 3b01 	strb.w	r3, [r2], #1
 800b5f0:	9225      	str	r2, [sp, #148]	; 0x94
 800b5f2:	e769      	b.n	800b4c8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x348>

0800b5f4 <weights_2channels_prefetch>:
 800b5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f8:	b087      	sub	sp, #28
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800b600:	9302      	str	r3, [sp, #8]
 800b602:	f340 80d7 	ble.w	800b7b4 <weights_2channels_prefetch+0x1c0>
 800b606:	f1a8 0310 	sub.w	r3, r8, #16
 800b60a:	091b      	lsrs	r3, r3, #4
 800b60c:	3301      	adds	r3, #1
 800b60e:	f1a8 0403 	sub.w	r4, r8, #3
 800b612:	9403      	str	r4, [sp, #12]
 800b614:	011c      	lsls	r4, r3, #4
 800b616:	019b      	lsls	r3, r3, #6
 800b618:	9304      	str	r3, [sp, #16]
 800b61a:	f1a8 0304 	sub.w	r3, r8, #4
 800b61e:	9400      	str	r4, [sp, #0]
 800b620:	f04f 0b00 	mov.w	fp, #0
 800b624:	9305      	str	r3, [sp, #20]
 800b626:	f1b8 0f0f 	cmp.w	r8, #15
 800b62a:	f340 80c8 	ble.w	800b7be <weights_2channels_prefetch+0x1ca>
 800b62e:	9b00      	ldr	r3, [sp, #0]
 800b630:	460c      	mov	r4, r1
 800b632:	18c6      	adds	r6, r0, r3
 800b634:	4613      	mov	r3, r2
 800b636:	6807      	ldr	r7, [r0, #0]
 800b638:	6825      	ldr	r5, [r4, #0]
 800b63a:	ea4f 2c37 	mov.w	ip, r7, ror #8
 800b63e:	fa2f f787 	sxtb16	r7, r7
 800b642:	601f      	str	r7, [r3, #0]
 800b644:	fa2f f78c 	sxtb16	r7, ip
 800b648:	605f      	str	r7, [r3, #4]
 800b64a:	ea4f 2735 	mov.w	r7, r5, ror #8
 800b64e:	fa2f f585 	sxtb16	r5, r5
 800b652:	609d      	str	r5, [r3, #8]
 800b654:	fa2f f587 	sxtb16	r5, r7
 800b658:	60dd      	str	r5, [r3, #12]
 800b65a:	6847      	ldr	r7, [r0, #4]
 800b65c:	6865      	ldr	r5, [r4, #4]
 800b65e:	ea4f 2c37 	mov.w	ip, r7, ror #8
 800b662:	fa2f f787 	sxtb16	r7, r7
 800b666:	611f      	str	r7, [r3, #16]
 800b668:	fa2f f78c 	sxtb16	r7, ip
 800b66c:	615f      	str	r7, [r3, #20]
 800b66e:	ea4f 2735 	mov.w	r7, r5, ror #8
 800b672:	fa2f f585 	sxtb16	r5, r5
 800b676:	619d      	str	r5, [r3, #24]
 800b678:	fa2f f587 	sxtb16	r5, r7
 800b67c:	61dd      	str	r5, [r3, #28]
 800b67e:	6887      	ldr	r7, [r0, #8]
 800b680:	68a5      	ldr	r5, [r4, #8]
 800b682:	ea4f 2c37 	mov.w	ip, r7, ror #8
 800b686:	fa2f f787 	sxtb16	r7, r7
 800b68a:	621f      	str	r7, [r3, #32]
 800b68c:	fa2f f78c 	sxtb16	r7, ip
 800b690:	625f      	str	r7, [r3, #36]	; 0x24
 800b692:	ea4f 2735 	mov.w	r7, r5, ror #8
 800b696:	fa2f f585 	sxtb16	r5, r5
 800b69a:	629d      	str	r5, [r3, #40]	; 0x28
 800b69c:	fa2f f587 	sxtb16	r5, r7
 800b6a0:	62dd      	str	r5, [r3, #44]	; 0x2c
 800b6a2:	68c7      	ldr	r7, [r0, #12]
 800b6a4:	68e5      	ldr	r5, [r4, #12]
 800b6a6:	3010      	adds	r0, #16
 800b6a8:	42b0      	cmp	r0, r6
 800b6aa:	ea4f 2c37 	mov.w	ip, r7, ror #8
 800b6ae:	f104 0410 	add.w	r4, r4, #16
 800b6b2:	fa2f f787 	sxtb16	r7, r7
 800b6b6:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800b6ba:	f843 7c10 	str.w	r7, [r3, #-16]
 800b6be:	fa2f f78c 	sxtb16	r7, ip
 800b6c2:	f843 7c0c 	str.w	r7, [r3, #-12]
 800b6c6:	ea4f 2735 	mov.w	r7, r5, ror #8
 800b6ca:	fa2f f585 	sxtb16	r5, r5
 800b6ce:	f843 5c08 	str.w	r5, [r3, #-8]
 800b6d2:	fa2f f587 	sxtb16	r5, r7
 800b6d6:	f843 5c04 	str.w	r5, [r3, #-4]
 800b6da:	d1ac      	bne.n	800b636 <weights_2channels_prefetch+0x42>
 800b6dc:	9b04      	ldr	r3, [sp, #16]
 800b6de:	441a      	add	r2, r3
 800b6e0:	9b00      	ldr	r3, [sp, #0]
 800b6e2:	4419      	add	r1, r3
 800b6e4:	469e      	mov	lr, r3
 800b6e6:	9b03      	ldr	r3, [sp, #12]
 800b6e8:	4573      	cmp	r3, lr
 800b6ea:	dd66      	ble.n	800b7ba <weights_2channels_prefetch+0x1c6>
 800b6ec:	9b05      	ldr	r3, [sp, #20]
 800b6ee:	eba3 090e 	sub.w	r9, r3, lr
 800b6f2:	ea4f 0999 	mov.w	r9, r9, lsr #2
 800b6f6:	f109 0a01 	add.w	sl, r9, #1
 800b6fa:	ea4f 038a 	mov.w	r3, sl, lsl #2
 800b6fe:	9301      	str	r3, [sp, #4]
 800b700:	eb06 008a 	add.w	r0, r6, sl, lsl #2
 800b704:	4613      	mov	r3, r2
 800b706:	468c      	mov	ip, r1
 800b708:	f856 5b04 	ldr.w	r5, [r6], #4
 800b70c:	f85c 4b04 	ldr.w	r4, [ip], #4
 800b710:	4286      	cmp	r6, r0
 800b712:	ea4f 2735 	mov.w	r7, r5, ror #8
 800b716:	f103 0310 	add.w	r3, r3, #16
 800b71a:	fa2f f585 	sxtb16	r5, r5
 800b71e:	fa2f f787 	sxtb16	r7, r7
 800b722:	f843 5c10 	str.w	r5, [r3, #-16]
 800b726:	f843 7c0c 	str.w	r7, [r3, #-12]
 800b72a:	ea4f 2534 	mov.w	r5, r4, ror #8
 800b72e:	fa2f f484 	sxtb16	r4, r4
 800b732:	f843 4c08 	str.w	r4, [r3, #-8]
 800b736:	fa2f f485 	sxtb16	r4, r5
 800b73a:	f843 4c04 	str.w	r4, [r3, #-4]
 800b73e:	d1e3      	bne.n	800b708 <weights_2channels_prefetch+0x114>
 800b740:	9b01      	ldr	r3, [sp, #4]
 800b742:	f10e 0e04 	add.w	lr, lr, #4
 800b746:	eb02 120a 	add.w	r2, r2, sl, lsl #4
 800b74a:	4419      	add	r1, r3
 800b74c:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 800b750:	45f0      	cmp	r8, lr
 800b752:	dd29      	ble.n	800b7a8 <weights_2channels_prefetch+0x1b4>
 800b754:	f990 3000 	ldrsb.w	r3, [r0]
 800b758:	8013      	strh	r3, [r2, #0]
 800b75a:	f991 3000 	ldrsb.w	r3, [r1]
 800b75e:	8053      	strh	r3, [r2, #2]
 800b760:	f10e 0301 	add.w	r3, lr, #1
 800b764:	4598      	cmp	r8, r3
 800b766:	dd19      	ble.n	800b79c <weights_2channels_prefetch+0x1a8>
 800b768:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b76c:	8093      	strh	r3, [r2, #4]
 800b76e:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800b772:	80d3      	strh	r3, [r2, #6]
 800b774:	f10e 0302 	add.w	r3, lr, #2
 800b778:	4598      	cmp	r8, r3
 800b77a:	dd0f      	ble.n	800b79c <weights_2channels_prefetch+0x1a8>
 800b77c:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800b780:	8113      	strh	r3, [r2, #8]
 800b782:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800b786:	8153      	strh	r3, [r2, #10]
 800b788:	f10e 0303 	add.w	r3, lr, #3
 800b78c:	4598      	cmp	r8, r3
 800b78e:	dd05      	ble.n	800b79c <weights_2channels_prefetch+0x1a8>
 800b790:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800b794:	8193      	strh	r3, [r2, #12]
 800b796:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800b79a:	81d3      	strh	r3, [r2, #14]
 800b79c:	eba8 0e0e 	sub.w	lr, r8, lr
 800b7a0:	4470      	add	r0, lr
 800b7a2:	4471      	add	r1, lr
 800b7a4:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 800b7a8:	9b02      	ldr	r3, [sp, #8]
 800b7aa:	f10b 0b01 	add.w	fp, fp, #1
 800b7ae:	455b      	cmp	r3, fp
 800b7b0:	f47f af39 	bne.w	800b626 <weights_2channels_prefetch+0x32>
 800b7b4:	b007      	add	sp, #28
 800b7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ba:	4630      	mov	r0, r6
 800b7bc:	e7c8      	b.n	800b750 <weights_2channels_prefetch+0x15c>
 800b7be:	4606      	mov	r6, r0
 800b7c0:	f04f 0e00 	mov.w	lr, #0
 800b7c4:	e78f      	b.n	800b6e6 <weights_2channels_prefetch+0xf2>
 800b7c6:	bf00      	nop

0800b7c8 <weights_2channels_prefetch_3x3>:
 800b7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7cc:	1edc      	subs	r4, r3, #3
 800b7ce:	b087      	sub	sp, #28
 800b7d0:	2c00      	cmp	r4, #0
 800b7d2:	e9cd 0103 	strd	r0, r1, [sp, #12]
 800b7d6:	9400      	str	r4, [sp, #0]
 800b7d8:	f340 80e4 	ble.w	800b9a4 <weights_2channels_prefetch_3x3+0x1dc>
 800b7dc:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 800b7e0:	468c      	mov	ip, r1
 800b7e2:	0079      	lsls	r1, r7, #1
 800b7e4:	9102      	str	r1, [sp, #8]
 800b7e6:	00dc      	lsls	r4, r3, #3
 800b7e8:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 800b7ec:	9101      	str	r1, [sp, #4]
 800b7ee:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 800b7f2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800b7f6:	eb03 0983 	add.w	r9, r3, r3, lsl #2
 800b7fa:	2604      	movs	r6, #4
 800b7fc:	4611      	mov	r1, r2
 800b7fe:	f04f 0800 	mov.w	r8, #0
 800b802:	9205      	str	r2, [sp, #20]
 800b804:	46a6      	mov	lr, r4
 800b806:	6804      	ldr	r4, [r0, #0]
 800b808:	f8dc 2000 	ldr.w	r2, [ip]
 800b80c:	ea4f 2534 	mov.w	r5, r4, ror #8
 800b810:	fa2f f484 	sxtb16	r4, r4
 800b814:	fa2f f585 	sxtb16	r5, r5
 800b818:	600c      	str	r4, [r1, #0]
 800b81a:	604d      	str	r5, [r1, #4]
 800b81c:	ea4f 2432 	mov.w	r4, r2, ror #8
 800b820:	fa2f f282 	sxtb16	r2, r2
 800b824:	fa2f f484 	sxtb16	r4, r4
 800b828:	608a      	str	r2, [r1, #8]
 800b82a:	60cc      	str	r4, [r1, #12]
 800b82c:	58c4      	ldr	r4, [r0, r3]
 800b82e:	f85c 2003 	ldr.w	r2, [ip, r3]
 800b832:	ea4f 2534 	mov.w	r5, r4, ror #8
 800b836:	fa2f f484 	sxtb16	r4, r4
 800b83a:	fa2f f585 	sxtb16	r5, r5
 800b83e:	610c      	str	r4, [r1, #16]
 800b840:	614d      	str	r5, [r1, #20]
 800b842:	ea4f 2432 	mov.w	r4, r2, ror #8
 800b846:	fa2f f282 	sxtb16	r2, r2
 800b84a:	fa2f f484 	sxtb16	r4, r4
 800b84e:	618a      	str	r2, [r1, #24]
 800b850:	61cc      	str	r4, [r1, #28]
 800b852:	f85b 4000 	ldr.w	r4, [fp, r0]
 800b856:	f85b 200c 	ldr.w	r2, [fp, ip]
 800b85a:	ea4f 2534 	mov.w	r5, r4, ror #8
 800b85e:	fa2f f484 	sxtb16	r4, r4
 800b862:	fa2f f585 	sxtb16	r5, r5
 800b866:	620c      	str	r4, [r1, #32]
 800b868:	624d      	str	r5, [r1, #36]	; 0x24
 800b86a:	ea4f 2432 	mov.w	r4, r2, ror #8
 800b86e:	fa2f f282 	sxtb16	r2, r2
 800b872:	fa2f f484 	sxtb16	r4, r4
 800b876:	628a      	str	r2, [r1, #40]	; 0x28
 800b878:	62cc      	str	r4, [r1, #44]	; 0x2c
 800b87a:	583c      	ldr	r4, [r7, r0]
 800b87c:	f857 200c 	ldr.w	r2, [r7, ip]
 800b880:	ea4f 2534 	mov.w	r5, r4, ror #8
 800b884:	fa2f f484 	sxtb16	r4, r4
 800b888:	fa2f f585 	sxtb16	r5, r5
 800b88c:	630c      	str	r4, [r1, #48]	; 0x30
 800b88e:	634d      	str	r5, [r1, #52]	; 0x34
 800b890:	ea4f 2432 	mov.w	r4, r2, ror #8
 800b894:	fa2f f282 	sxtb16	r2, r2
 800b898:	fa2f f484 	sxtb16	r4, r4
 800b89c:	638a      	str	r2, [r1, #56]	; 0x38
 800b89e:	63cc      	str	r4, [r1, #60]	; 0x3c
 800b8a0:	f85a 4000 	ldr.w	r4, [sl, r0]
 800b8a4:	f85a 200c 	ldr.w	r2, [sl, ip]
 800b8a8:	ea4f 2534 	mov.w	r5, r4, ror #8
 800b8ac:	fa2f f484 	sxtb16	r4, r4
 800b8b0:	fa2f f585 	sxtb16	r5, r5
 800b8b4:	640c      	str	r4, [r1, #64]	; 0x40
 800b8b6:	644d      	str	r5, [r1, #68]	; 0x44
 800b8b8:	ea4f 2432 	mov.w	r4, r2, ror #8
 800b8bc:	fa2f f282 	sxtb16	r2, r2
 800b8c0:	fa2f f484 	sxtb16	r4, r4
 800b8c4:	648a      	str	r2, [r1, #72]	; 0x48
 800b8c6:	64cc      	str	r4, [r1, #76]	; 0x4c
 800b8c8:	f859 4000 	ldr.w	r4, [r9, r0]
 800b8cc:	f859 200c 	ldr.w	r2, [r9, ip]
 800b8d0:	ea4f 2534 	mov.w	r5, r4, ror #8
 800b8d4:	fa2f f484 	sxtb16	r4, r4
 800b8d8:	650c      	str	r4, [r1, #80]	; 0x50
 800b8da:	ea4f 2432 	mov.w	r4, r2, ror #8
 800b8de:	fa2f f282 	sxtb16	r2, r2
 800b8e2:	658a      	str	r2, [r1, #88]	; 0x58
 800b8e4:	9a02      	ldr	r2, [sp, #8]
 800b8e6:	fa2f f585 	sxtb16	r5, r5
 800b8ea:	fa2f f484 	sxtb16	r4, r4
 800b8ee:	654d      	str	r5, [r1, #84]	; 0x54
 800b8f0:	65cc      	str	r4, [r1, #92]	; 0x5c
 800b8f2:	5884      	ldr	r4, [r0, r2]
 800b8f4:	f85c 2002 	ldr.w	r2, [ip, r2]
 800b8f8:	ea4f 2534 	mov.w	r5, r4, ror #8
 800b8fc:	fa2f f484 	sxtb16	r4, r4
 800b900:	660c      	str	r4, [r1, #96]	; 0x60
 800b902:	ea4f 2432 	mov.w	r4, r2, ror #8
 800b906:	fa2f f282 	sxtb16	r2, r2
 800b90a:	668a      	str	r2, [r1, #104]	; 0x68
 800b90c:	9a01      	ldr	r2, [sp, #4]
 800b90e:	fa2f f585 	sxtb16	r5, r5
 800b912:	fa2f f484 	sxtb16	r4, r4
 800b916:	664d      	str	r5, [r1, #100]	; 0x64
 800b918:	66cc      	str	r4, [r1, #108]	; 0x6c
 800b91a:	5814      	ldr	r4, [r2, r0]
 800b91c:	f852 200c 	ldr.w	r2, [r2, ip]
 800b920:	ea4f 2534 	mov.w	r5, r4, ror #8
 800b924:	fa2f f484 	sxtb16	r4, r4
 800b928:	fa2f f585 	sxtb16	r5, r5
 800b92c:	670c      	str	r4, [r1, #112]	; 0x70
 800b92e:	674d      	str	r5, [r1, #116]	; 0x74
 800b930:	ea4f 2432 	mov.w	r4, r2, ror #8
 800b934:	fa2f f282 	sxtb16	r2, r2
 800b938:	fa2f f484 	sxtb16	r4, r4
 800b93c:	678a      	str	r2, [r1, #120]	; 0x78
 800b93e:	67cc      	str	r4, [r1, #124]	; 0x7c
 800b940:	f850 400e 	ldr.w	r4, [r0, lr]
 800b944:	f85c 200e 	ldr.w	r2, [ip, lr]
 800b948:	ea4f 2534 	mov.w	r5, r4, ror #8
 800b94c:	fa2f f484 	sxtb16	r4, r4
 800b950:	f8c1 4080 	str.w	r4, [r1, #128]	; 0x80
 800b954:	ea4f 2432 	mov.w	r4, r2, ror #8
 800b958:	fa2f f282 	sxtb16	r2, r2
 800b95c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 800b960:	9a00      	ldr	r2, [sp, #0]
 800b962:	fa2f f585 	sxtb16	r5, r5
 800b966:	f108 0804 	add.w	r8, r8, #4
 800b96a:	4590      	cmp	r8, r2
 800b96c:	f8c1 5084 	str.w	r5, [r1, #132]	; 0x84
 800b970:	fa2f f484 	sxtb16	r4, r4
 800b974:	4430      	add	r0, r6
 800b976:	f8c1 408c 	str.w	r4, [r1, #140]	; 0x8c
 800b97a:	44b4      	add	ip, r6
 800b97c:	f101 0190 	add.w	r1, r1, #144	; 0x90
 800b980:	f6ff af41 	blt.w	800b806 <weights_2channels_prefetch_3x3+0x3e>
 800b984:	1f19      	subs	r1, r3, #4
 800b986:	0889      	lsrs	r1, r1, #2
 800b988:	fb01 6606 	mla	r6, r1, r6, r6
 800b98c:	9a05      	ldr	r2, [sp, #20]
 800b98e:	3101      	adds	r1, #1
 800b990:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800b994:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800b998:	9903      	ldr	r1, [sp, #12]
 800b99a:	4431      	add	r1, r6
 800b99c:	9103      	str	r1, [sp, #12]
 800b99e:	9904      	ldr	r1, [sp, #16]
 800b9a0:	4431      	add	r1, r6
 800b9a2:	9104      	str	r1, [sp, #16]
 800b9a4:	f013 0503 	ands.w	r5, r3, #3
 800b9a8:	f000 80f4 	beq.w	800bb94 <weights_2channels_prefetch_3x3+0x3cc>
 800b9ac:	9803      	ldr	r0, [sp, #12]
 800b9ae:	9c04      	ldr	r4, [sp, #16]
 800b9b0:	f990 1000 	ldrsb.w	r1, [r0]
 800b9b4:	8011      	strh	r1, [r2, #0]
 800b9b6:	f994 1000 	ldrsb.w	r1, [r4]
 800b9ba:	8051      	strh	r1, [r2, #2]
 800b9bc:	56c1      	ldrsb	r1, [r0, r3]
 800b9be:	8091      	strh	r1, [r2, #4]
 800b9c0:	56e1      	ldrsb	r1, [r4, r3]
 800b9c2:	80d1      	strh	r1, [r2, #6]
 800b9c4:	f910 1013 	ldrsb.w	r1, [r0, r3, lsl #1]
 800b9c8:	8111      	strh	r1, [r2, #8]
 800b9ca:	f914 1013 	ldrsb.w	r1, [r4, r3, lsl #1]
 800b9ce:	8151      	strh	r1, [r2, #10]
 800b9d0:	18c1      	adds	r1, r0, r3
 800b9d2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800b9d6:	f911 1013 	ldrsb.w	r1, [r1, r3, lsl #1]
 800b9da:	8191      	strh	r1, [r2, #12]
 800b9dc:	4621      	mov	r1, r4
 800b9de:	441c      	add	r4, r3
 800b9e0:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800b9e4:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 800b9e8:	81d4      	strh	r4, [r2, #14]
 800b9ea:	f910 4013 	ldrsb.w	r4, [r0, r3, lsl #1]
 800b9ee:	8214      	strh	r4, [r2, #16]
 800b9f0:	f911 4013 	ldrsb.w	r4, [r1, r3, lsl #1]
 800b9f4:	8254      	strh	r4, [r2, #18]
 800b9f6:	18c4      	adds	r4, r0, r3
 800b9f8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800b9fc:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 800ba00:	8294      	strh	r4, [r2, #20]
 800ba02:	18cc      	adds	r4, r1, r3
 800ba04:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800ba08:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 800ba0c:	82d4      	strh	r4, [r2, #22]
 800ba0e:	f910 4013 	ldrsb.w	r4, [r0, r3, lsl #1]
 800ba12:	8314      	strh	r4, [r2, #24]
 800ba14:	f911 4013 	ldrsb.w	r4, [r1, r3, lsl #1]
 800ba18:	8354      	strh	r4, [r2, #26]
 800ba1a:	18c4      	adds	r4, r0, r3
 800ba1c:	ebc3 7743 	rsb	r7, r3, r3, lsl #29
 800ba20:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 800ba24:	8394      	strh	r4, [r2, #28]
 800ba26:	18cc      	adds	r4, r1, r3
 800ba28:	00ff      	lsls	r7, r7, #3
 800ba2a:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 800ba2e:	83d4      	strh	r4, [r2, #30]
 800ba30:	f910 4023 	ldrsb.w	r4, [r0, r3, lsl #2]
 800ba34:	8414      	strh	r4, [r2, #32]
 800ba36:	f911 4023 	ldrsb.w	r4, [r1, r3, lsl #2]
 800ba3a:	8454      	strh	r4, [r2, #34]	; 0x22
 800ba3c:	3701      	adds	r7, #1
 800ba3e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800ba42:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800ba46:	2d01      	cmp	r5, #1
 800ba48:	eb00 0607 	add.w	r6, r0, r7
 800ba4c:	eb01 0407 	add.w	r4, r1, r7
 800ba50:	f000 80a0 	beq.w	800bb94 <weights_2channels_prefetch_3x3+0x3cc>
 800ba54:	57c0      	ldrsb	r0, [r0, r7]
 800ba56:	8490      	strh	r0, [r2, #36]	; 0x24
 800ba58:	57c9      	ldrsb	r1, [r1, r7]
 800ba5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ba5c:	56f1      	ldrsb	r1, [r6, r3]
 800ba5e:	8511      	strh	r1, [r2, #40]	; 0x28
 800ba60:	56e1      	ldrsb	r1, [r4, r3]
 800ba62:	8551      	strh	r1, [r2, #42]	; 0x2a
 800ba64:	f916 1013 	ldrsb.w	r1, [r6, r3, lsl #1]
 800ba68:	8591      	strh	r1, [r2, #44]	; 0x2c
 800ba6a:	f914 1013 	ldrsb.w	r1, [r4, r3, lsl #1]
 800ba6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ba70:	18f1      	adds	r1, r6, r3
 800ba72:	eb06 0043 	add.w	r0, r6, r3, lsl #1
 800ba76:	f911 1013 	ldrsb.w	r1, [r1, r3, lsl #1]
 800ba7a:	8611      	strh	r1, [r2, #48]	; 0x30
 800ba7c:	18e6      	adds	r6, r4, r3
 800ba7e:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 800ba82:	f916 4013 	ldrsb.w	r4, [r6, r3, lsl #1]
 800ba86:	8654      	strh	r4, [r2, #50]	; 0x32
 800ba88:	f910 4013 	ldrsb.w	r4, [r0, r3, lsl #1]
 800ba8c:	8694      	strh	r4, [r2, #52]	; 0x34
 800ba8e:	f911 4013 	ldrsb.w	r4, [r1, r3, lsl #1]
 800ba92:	86d4      	strh	r4, [r2, #54]	; 0x36
 800ba94:	18c4      	adds	r4, r0, r3
 800ba96:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800ba9a:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 800ba9e:	8714      	strh	r4, [r2, #56]	; 0x38
 800baa0:	18cc      	adds	r4, r1, r3
 800baa2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800baa6:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 800baaa:	8754      	strh	r4, [r2, #58]	; 0x3a
 800baac:	f910 4013 	ldrsb.w	r4, [r0, r3, lsl #1]
 800bab0:	8794      	strh	r4, [r2, #60]	; 0x3c
 800bab2:	f911 4013 	ldrsb.w	r4, [r1, r3, lsl #1]
 800bab6:	87d4      	strh	r4, [r2, #62]	; 0x3e
 800bab8:	18c4      	adds	r4, r0, r3
 800baba:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 800babe:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 800bac2:	f8a2 4040 	strh.w	r4, [r2, #64]	; 0x40
 800bac6:	18cc      	adds	r4, r1, r3
 800bac8:	2d03      	cmp	r5, #3
 800baca:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 800bace:	f8a2 4042 	strh.w	r4, [r2, #66]	; 0x42
 800bad2:	f910 4023 	ldrsb.w	r4, [r0, r3, lsl #2]
 800bad6:	f8a2 4044 	strh.w	r4, [r2, #68]	; 0x44
 800bada:	f911 4023 	ldrsb.w	r4, [r1, r3, lsl #2]
 800bade:	f8a2 4046 	strh.w	r4, [r2, #70]	; 0x46
 800bae2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800bae6:	eb00 0407 	add.w	r4, r0, r7
 800baea:	eb06 0107 	add.w	r1, r6, r7
 800baee:	d151      	bne.n	800bb94 <weights_2channels_prefetch_3x3+0x3cc>
 800baf0:	57c0      	ldrsb	r0, [r0, r7]
 800baf2:	f8a2 0048 	strh.w	r0, [r2, #72]	; 0x48
 800baf6:	57f0      	ldrsb	r0, [r6, r7]
 800baf8:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
 800bafc:	56e5      	ldrsb	r5, [r4, r3]
 800bafe:	f8a2 504c 	strh.w	r5, [r2, #76]	; 0x4c
 800bb02:	56cd      	ldrsb	r5, [r1, r3]
 800bb04:	f8a2 504e 	strh.w	r5, [r2, #78]	; 0x4e
 800bb08:	f914 5013 	ldrsb.w	r5, [r4, r3, lsl #1]
 800bb0c:	f8a2 5050 	strh.w	r5, [r2, #80]	; 0x50
 800bb10:	f911 5013 	ldrsb.w	r5, [r1, r3, lsl #1]
 800bb14:	f8a2 5052 	strh.w	r5, [r2, #82]	; 0x52
 800bb18:	18e0      	adds	r0, r4, r3
 800bb1a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800bb1e:	f910 0013 	ldrsb.w	r0, [r0, r3, lsl #1]
 800bb22:	f8a2 0054 	strh.w	r0, [r2, #84]	; 0x54
 800bb26:	18c8      	adds	r0, r1, r3
 800bb28:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800bb2c:	f910 0013 	ldrsb.w	r0, [r0, r3, lsl #1]
 800bb30:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
 800bb34:	f914 5013 	ldrsb.w	r5, [r4, r3, lsl #1]
 800bb38:	f8a2 5058 	strh.w	r5, [r2, #88]	; 0x58
 800bb3c:	f911 5013 	ldrsb.w	r5, [r1, r3, lsl #1]
 800bb40:	f8a2 505a 	strh.w	r5, [r2, #90]	; 0x5a
 800bb44:	eb04 0043 	add.w	r0, r4, r3, lsl #1
 800bb48:	441c      	add	r4, r3
 800bb4a:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 800bb4e:	f8a2 405c 	strh.w	r4, [r2, #92]	; 0x5c
 800bb52:	18cc      	adds	r4, r1, r3
 800bb54:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800bb58:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 800bb5c:	f8a2 405e 	strh.w	r4, [r2, #94]	; 0x5e
 800bb60:	f910 4013 	ldrsb.w	r4, [r0, r3, lsl #1]
 800bb64:	f8a2 4060 	strh.w	r4, [r2, #96]	; 0x60
 800bb68:	f911 4013 	ldrsb.w	r4, [r1, r3, lsl #1]
 800bb6c:	f8a2 4062 	strh.w	r4, [r2, #98]	; 0x62
 800bb70:	18c4      	adds	r4, r0, r3
 800bb72:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 800bb76:	f8a2 4064 	strh.w	r4, [r2, #100]	; 0x64
 800bb7a:	18cc      	adds	r4, r1, r3
 800bb7c:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 800bb80:	f8a2 4066 	strh.w	r4, [r2, #102]	; 0x66
 800bb84:	f910 0023 	ldrsb.w	r0, [r0, r3, lsl #2]
 800bb88:	f8a2 0068 	strh.w	r0, [r2, #104]	; 0x68
 800bb8c:	f911 3023 	ldrsb.w	r3, [r1, r3, lsl #2]
 800bb90:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 800bb94:	b007      	add	sp, #28
 800bb96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb9a:	bf00      	nop

0800bb9c <st_sssa8_ch_fullW_prefetch>:
 800bb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba0:	b087      	sub	sp, #28
 800bba2:	4680      	mov	r8, r0
 800bba4:	4618      	mov	r0, r3
 800bba6:	4613      	mov	r3, r2
 800bba8:	e9dd 2a10 	ldrd	r2, sl, [sp, #64]	; 0x40
 800bbac:	104f      	asrs	r7, r1, #1
 800bbae:	9103      	str	r1, [sp, #12]
 800bbb0:	eb08 0402 	add.w	r4, r8, r2
 800bbb4:	9704      	str	r7, [sp, #16]
 800bbb6:	d020      	beq.n	800bbfa <st_sssa8_ch_fullW_prefetch+0x5e>
 800bbb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bbba:	f8cd 8014 	str.w	r8, [sp, #20]
 800bbbe:	4646      	mov	r6, r8
 800bbc0:	4655      	mov	r5, sl
 800bbc2:	ea4f 0942 	mov.w	r9, r2, lsl #1
 800bbc6:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800bbca:	4680      	mov	r8, r0
 800bbcc:	469a      	mov	sl, r3
 800bbce:	462a      	mov	r2, r5
 800bbd0:	4621      	mov	r1, r4
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	f8cd 8000 	str.w	r8, [sp]
 800bbd8:	4653      	mov	r3, sl
 800bbda:	f7ff fd0b 	bl	800b5f4 <weights_2channels_prefetch>
 800bbde:	3f01      	subs	r7, #1
 800bbe0:	445d      	add	r5, fp
 800bbe2:	444c      	add	r4, r9
 800bbe4:	444e      	add	r6, r9
 800bbe6:	d1f2      	bne.n	800bbce <st_sssa8_ch_fullW_prefetch+0x32>
 800bbe8:	9b04      	ldr	r3, [sp, #16]
 800bbea:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800bbee:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800bbf2:	fb03 8809 	mla	r8, r3, r9, r8
 800bbf6:	fb03 aa0b 	mla	sl, r3, fp, sl
 800bbfa:	9b03      	ldr	r3, [sp, #12]
 800bbfc:	07db      	lsls	r3, r3, #31
 800bbfe:	d509      	bpl.n	800bc14 <st_sssa8_ch_fullW_prefetch+0x78>
 800bc00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	dd06      	ble.n	800bc14 <st_sssa8_ch_fullW_prefetch+0x78>
 800bc06:	4443      	add	r3, r8
 800bc08:	f918 2b01 	ldrsb.w	r2, [r8], #1
 800bc0c:	f82a 2b02 	strh.w	r2, [sl], #2
 800bc10:	4543      	cmp	r3, r8
 800bc12:	d1f9      	bne.n	800bc08 <st_sssa8_ch_fullW_prefetch+0x6c>
 800bc14:	b007      	add	sp, #28
 800bc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc1a:	bf00      	nop

0800bc1c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t>:
 800bc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc20:	b0cd      	sub	sp, #308	; 0x134
 800bc22:	9240      	str	r2, [sp, #256]	; 0x100
 800bc24:	9329      	str	r3, [sp, #164]	; 0xa4
 800bc26:	9a59      	ldr	r2, [sp, #356]	; 0x164
 800bc28:	f8bd 317c 	ldrh.w	r3, [sp, #380]	; 0x17c
 800bc2c:	912f      	str	r1, [sp, #188]	; 0xbc
 800bc2e:	fb02 f303 	mul.w	r3, r2, r3
 800bc32:	9327      	str	r3, [sp, #156]	; 0x9c
 800bc34:	e9dd 3265 	ldrd	r3, r2, [sp, #404]	; 0x194
 800bc38:	f8bd 1178 	ldrh.w	r1, [sp, #376]	; 0x178
 800bc3c:	912a      	str	r1, [sp, #168]	; 0xa8
 800bc3e:	2a00      	cmp	r2, #0
 800bc40:	bf18      	it	ne
 800bc42:	4613      	movne	r3, r2
 800bc44:	f8bd 1180 	ldrh.w	r1, [sp, #384]	; 0x180
 800bc48:	9365      	str	r3, [sp, #404]	; 0x194
 800bc4a:	f8bd 3168 	ldrh.w	r3, [sp, #360]	; 0x168
 800bc4e:	9341      	str	r3, [sp, #260]	; 0x104
 800bc50:	9109      	str	r1, [sp, #36]	; 0x24
 800bc52:	f8bd 316c 	ldrh.w	r3, [sp, #364]	; 0x16c
 800bc56:	9962      	ldr	r1, [sp, #392]	; 0x188
 800bc58:	f8bd 2174 	ldrh.w	r2, [sp, #372]	; 0x174
 800bc5c:	9342      	str	r3, [sp, #264]	; 0x108
 800bc5e:	f8bd 3170 	ldrh.w	r3, [sp, #368]	; 0x170
 800bc62:	9325      	str	r3, [sp, #148]	; 0x94
 800bc64:	f011 0101 	ands.w	r1, r1, #1
 800bc68:	bf18      	it	ne
 800bc6a:	3302      	addne	r3, #2
 800bc6c:	922e      	str	r2, [sp, #184]	; 0xb8
 800bc6e:	bf18      	it	ne
 800bc70:	3202      	addne	r2, #2
 800bc72:	fb02 f303 	mul.w	r3, r2, r3
 800bc76:	9326      	str	r3, [sp, #152]	; 0x98
 800bc78:	9b58      	ldr	r3, [sp, #352]	; 0x160
 800bc7a:	902d      	str	r0, [sp, #180]	; 0xb4
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	913b      	str	r1, [sp, #236]	; 0xec
 800bc80:	f340 82a3 	ble.w	800c1ca <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x5ae>
 800bc84:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bc86:	9859      	ldr	r0, [sp, #356]	; 0x164
 800bc88:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800bc8a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800bc8c:	fb00 f002 	mul.w	r0, r0, r2
 800bc90:	9a58      	ldr	r2, [sp, #352]	; 0x160
 800bc92:	9008      	str	r0, [sp, #32]
 800bc94:	3a02      	subs	r2, #2
 800bc96:	0852      	lsrs	r2, r2, #1
 800bc98:	923d      	str	r2, [sp, #244]	; 0xf4
 800bc9a:	1ea2      	subs	r2, r4, #2
 800bc9c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800bc9e:	fb01 f404 	mul.w	r4, r1, r4
 800bca2:	943c      	str	r4, [sp, #240]	; 0xf0
 800bca4:	108c      	asrs	r4, r1, #2
 800bca6:	943f      	str	r4, [sp, #252]	; 0xfc
 800bca8:	0852      	lsrs	r2, r2, #1
 800bcaa:	0044      	lsls	r4, r0, #1
 800bcac:	fb04 f202 	mul.w	r2, r4, r2
 800bcb0:	924a      	str	r2, [sp, #296]	; 0x128
 800bcb2:	9a57      	ldr	r2, [sp, #348]	; 0x15c
 800bcb4:	9423      	str	r4, [sp, #140]	; 0x8c
 800bcb6:	9c3d      	ldr	r4, [sp, #244]	; 0xf4
 800bcb8:	3204      	adds	r2, #4
 800bcba:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800bcbe:	9244      	str	r2, [sp, #272]	; 0x110
 800bcc0:	f06f 0203 	mvn.w	r2, #3
 800bcc4:	1a12      	subs	r2, r2, r0
 800bcc6:	9205      	str	r2, [sp, #20]
 800bcc8:	1f02      	subs	r2, r0, #4
 800bcca:	920f      	str	r2, [sp, #60]	; 0x3c
 800bccc:	9a62      	ldr	r2, [sp, #392]	; 0x188
 800bcce:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800bcd0:	090e      	lsrs	r6, r1, #4
 800bcd2:	f3c1 0781 	ubfx	r7, r1, #2, #2
 800bcd6:	1e70      	subs	r0, r6, #1
 800bcd8:	f002 0202 	and.w	r2, r2, #2
 800bcdc:	970b      	str	r7, [sp, #44]	; 0x2c
 800bcde:	921b      	str	r2, [sp, #108]	; 0x6c
 800bce0:	900d      	str	r0, [sp, #52]	; 0x34
 800bce2:	1e62      	subs	r2, r4, #1
 800bce4:	4638      	mov	r0, r7
 800bce6:	3f01      	subs	r7, #1
 800bce8:	960a      	str	r6, [sp, #40]	; 0x28
 800bcea:	9222      	str	r2, [sp, #136]	; 0x88
 800bcec:	970e      	str	r7, [sp, #56]	; 0x38
 800bcee:	4632      	mov	r2, r6
 800bcf0:	f004 0701 	and.w	r7, r4, #1
 800bcf4:	9e3c      	ldr	r6, [sp, #240]	; 0xf0
 800bcf6:	9745      	str	r7, [sp, #276]	; 0x114
 800bcf8:	f1a1 070f 	sub.w	r7, r1, #15
 800bcfc:	9733      	str	r7, [sp, #204]	; 0xcc
 800bcfe:	0077      	lsls	r7, r6, #1
 800bd00:	973e      	str	r7, [sp, #248]	; 0xf8
 800bd02:	9f26      	ldr	r7, [sp, #152]	; 0x98
 800bd04:	f001 0503 	and.w	r5, r1, #3
 800bd08:	007f      	lsls	r7, r7, #1
 800bd0a:	00b6      	lsls	r6, r6, #2
 800bd0c:	9748      	str	r7, [sp, #288]	; 0x120
 800bd0e:	9506      	str	r5, [sp, #24]
 800bd10:	9646      	str	r6, [sp, #280]	; 0x118
 800bd12:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 800bd14:	f1a1 0310 	sub.w	r3, r1, #16
 800bd18:	1a77      	subs	r7, r6, r1
 800bd1a:	993f      	ldr	r1, [sp, #252]	; 0xfc
 800bd1c:	970c      	str	r7, [sp, #48]	; 0x30
 800bd1e:	0109      	lsls	r1, r1, #4
 800bd20:	9149      	str	r1, [sp, #292]	; 0x124
 800bd22:	1e69      	subs	r1, r5, #1
 800bd24:	9115      	str	r1, [sp, #84]	; 0x54
 800bd26:	1ea9      	subs	r1, r5, #2
 800bd28:	9117      	str	r1, [sp, #92]	; 0x5c
 800bd2a:	00a9      	lsls	r1, r5, #2
 800bd2c:	9116      	str	r1, [sp, #88]	; 0x58
 800bd2e:	9958      	ldr	r1, [sp, #352]	; 0x160
 800bd30:	9f57      	ldr	r7, [sp, #348]	; 0x15c
 800bd32:	9737      	str	r7, [sp, #220]	; 0xdc
 800bd34:	fb04 f101 	mul.w	r1, r4, r1
 800bd38:	9143      	str	r1, [sp, #268]	; 0x10c
 800bd3a:	9942      	ldr	r1, [sp, #264]	; 0x108
 800bd3c:	9f56      	ldr	r7, [sp, #344]	; 0x158
 800bd3e:	fb06 f101 	mul.w	r1, r6, r1
 800bd42:	9147      	str	r1, [sp, #284]	; 0x11c
 800bd44:	0111      	lsls	r1, r2, #4
 800bd46:	0192      	lsls	r2, r2, #6
 800bd48:	3704      	adds	r7, #4
 800bd4a:	091b      	lsrs	r3, r3, #4
 800bd4c:	9210      	str	r2, [sp, #64]	; 0x40
 800bd4e:	0082      	lsls	r2, r0, #2
 800bd50:	3301      	adds	r3, #1
 800bd52:	9730      	str	r7, [sp, #192]	; 0xc0
 800bd54:	9213      	str	r2, [sp, #76]	; 0x4c
 800bd56:	9f40      	ldr	r7, [sp, #256]	; 0x100
 800bd58:	9111      	str	r1, [sp, #68]	; 0x44
 800bd5a:	0102      	lsls	r2, r0, #4
 800bd5c:	9212      	str	r2, [sp, #72]	; 0x48
 800bd5e:	011a      	lsls	r2, r3, #4
 800bd60:	019b      	lsls	r3, r3, #6
 800bd62:	3704      	adds	r7, #4
 800bd64:	9338      	str	r3, [sp, #224]	; 0xe0
 800bd66:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800bd68:	9734      	str	r7, [sp, #208]	; 0xd0
 800bd6a:	9228      	str	r2, [sp, #160]	; 0xa0
 800bd6c:	9336      	str	r3, [sp, #216]	; 0xd8
 800bd6e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800bd70:	f9b3 7000 	ldrsh.w	r7, [r3]
 800bd74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bd78:	9335      	str	r3, [sp, #212]	; 0xd4
 800bd7a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800bd7c:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	931d      	str	r3, [sp, #116]	; 0x74
 800bd84:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800bd86:	921c      	str	r2, [sp, #112]	; 0x70
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	931e      	str	r3, [sp, #120]	; 0x78
 800bd8c:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	f000 8495 	beq.w	800c6be <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xaa2>
 800bd94:	9b61      	ldr	r3, [sp, #388]	; 0x184
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	f040 8439 	bne.w	800c60e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9f2>
 800bd9c:	461c      	mov	r4, r3
 800bd9e:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800bda0:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800bda4:	18a2      	adds	r2, r4, r2
 800bda6:	9220      	str	r2, [sp, #128]	; 0x80
 800bda8:	680a      	ldr	r2, [r1, #0]
 800bdaa:	4413      	add	r3, r2
 800bdac:	9321      	str	r3, [sp, #132]	; 0x84
 800bdae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	f000 81e4 	beq.w	800c17e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x562>
 800bdb6:	9925      	ldr	r1, [sp, #148]	; 0x94
 800bdb8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800bdba:	9232      	str	r2, [sp, #200]	; 0xc8
 800bdbc:	1cbb      	adds	r3, r7, #2
 800bdbe:	931f      	str	r3, [sp, #124]	; 0x7c
 800bdc0:	1ccb      	adds	r3, r1, #3
 800bdc2:	18d3      	adds	r3, r2, r3
 800bdc4:	933a      	str	r3, [sp, #232]	; 0xe8
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	932b      	str	r3, [sp, #172]	; 0xac
 800bdca:	4613      	mov	r3, r2
 800bdcc:	9331      	str	r3, [sp, #196]	; 0xc4
 800bdce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800bdd0:	9307      	str	r3, [sp, #28]
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	932c      	str	r3, [sp, #176]	; 0xb0
 800bdd6:	9b08      	ldr	r3, [sp, #32]
 800bdd8:	1c8a      	adds	r2, r1, #2
 800bdda:	3304      	adds	r3, #4
 800bddc:	924b      	str	r2, [sp, #300]	; 0x12c
 800bdde:	9314      	str	r3, [sp, #80]	; 0x50
 800bde0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	f000 82e1 	beq.w	800c3aa <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x78e>
 800bde8:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	f000 83ed 	beq.w	800c5ca <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9ae>
 800bdf0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800bdf2:	9339      	str	r3, [sp, #228]	; 0xe4
 800bdf4:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800bdf6:	9319      	str	r3, [sp, #100]	; 0x64
 800bdf8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	f340 81a3 	ble.w	800c146 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x52a>
 800be00:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800be02:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800be04:	3302      	adds	r3, #2
 800be06:	9324      	str	r3, [sp, #144]	; 0x90
 800be08:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800be0a:	4413      	add	r3, r2
 800be0c:	9318      	str	r3, [sp, #96]	; 0x60
 800be0e:	2300      	movs	r3, #0
 800be10:	931a      	str	r3, [sp, #104]	; 0x68
 800be12:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800be14:	9304      	str	r3, [sp, #16]
 800be16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be18:	2b00      	cmp	r3, #0
 800be1a:	f000 82c1 	beq.w	800c3a0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x784>
 800be1e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800be20:	9820      	ldr	r0, [sp, #128]	; 0x80
 800be22:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800be24:	9303      	str	r3, [sp, #12]
 800be26:	2100      	movs	r1, #0
 800be28:	4613      	mov	r3, r2
 800be2a:	4604      	mov	r4, r0
 800be2c:	9107      	str	r1, [sp, #28]
 800be2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800be30:	2900      	cmp	r1, #0
 800be32:	f000 80a1 	beq.w	800bf78 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x35c>
 800be36:	9904      	ldr	r1, [sp, #16]
 800be38:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800be3a:	9e03      	ldr	r6, [sp, #12]
 800be3c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800be40:	194f      	adds	r7, r1, r5
 800be42:	9d05      	ldr	r5, [sp, #20]
 800be44:	6831      	ldr	r1, [r6, #0]
 800be46:	f855 c007 	ldr.w	ip, [r5, r7]
 800be4a:	f8d6 a004 	ldr.w	sl, [r6, #4]
 800be4e:	f8d6 b008 	ldr.w	fp, [r6, #8]
 800be52:	f8d6 900c 	ldr.w	r9, [r6, #12]
 800be56:	eb05 0e07 	add.w	lr, r5, r7
 800be5a:	fa2f f58c 	sxtb16	r5, ip
 800be5e:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 800be62:	fb25 0001 	smlad	r0, r5, r1, r0
 800be66:	fb2c 000a 	smlad	r0, ip, sl, r0
 800be6a:	fb25 250b 	smlad	r5, r5, fp, r2
 800be6e:	fb2c 5509 	smlad	r5, ip, r9, r5
 800be72:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800be76:	fa2f fc82 	sxtb16	ip, r2
 800be7a:	fa2f f292 	sxtb16	r2, r2, ror #8
 800be7e:	fb2c 4101 	smlad	r1, ip, r1, r4
 800be82:	fb2c 330b 	smlad	r3, ip, fp, r3
 800be86:	fb22 110a 	smlad	r1, r2, sl, r1
 800be8a:	f8d6 a010 	ldr.w	sl, [r6, #16]
 800be8e:	6974      	ldr	r4, [r6, #20]
 800be90:	fb22 3909 	smlad	r9, r2, r9, r3
 800be94:	f8de 3004 	ldr.w	r3, [lr, #4]
 800be98:	69b2      	ldr	r2, [r6, #24]
 800be9a:	f8d6 b01c 	ldr.w	fp, [r6, #28]
 800be9e:	fa2f fc83 	sxtb16	ip, r3
 800bea2:	fa2f f393 	sxtb16	r3, r3, ror #8
 800bea6:	fb2c 000a 	smlad	r0, ip, sl, r0
 800beaa:	fb23 0004 	smlad	r0, r3, r4, r0
 800beae:	fb2c 5c02 	smlad	ip, ip, r2, r5
 800beb2:	fb23 cc0b 	smlad	ip, r3, fp, ip
 800beb6:	683d      	ldr	r5, [r7, #0]
 800beb8:	fa2f f385 	sxtb16	r3, r5
 800bebc:	fa2f f595 	sxtb16	r5, r5, ror #8
 800bec0:	fb23 1a0a 	smlad	sl, r3, sl, r1
 800bec4:	fb23 9902 	smlad	r9, r3, r2, r9
 800bec8:	fb25 aa04 	smlad	sl, r5, r4, sl
 800becc:	6a34      	ldr	r4, [r6, #32]
 800bece:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800bed0:	fb25 9b0b 	smlad	fp, r5, fp, r9
 800bed4:	f8de 1008 	ldr.w	r1, [lr, #8]
 800bed8:	f8d6 9028 	ldr.w	r9, [r6, #40]	; 0x28
 800bedc:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 800bede:	fa2f f381 	sxtb16	r3, r1
 800bee2:	fa2f f191 	sxtb16	r1, r1, ror #8
 800bee6:	fb23 0004 	smlad	r0, r3, r4, r0
 800beea:	fb21 0002 	smlad	r0, r1, r2, r0
 800beee:	fb23 c309 	smlad	r3, r3, r9, ip
 800bef2:	fb21 3105 	smlad	r1, r1, r5, r3
 800bef6:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800befa:	fa2f f38c 	sxtb16	r3, ip
 800befe:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 800bf02:	fb23 a404 	smlad	r4, r3, r4, sl
 800bf06:	fb23 bb09 	smlad	fp, r3, r9, fp
 800bf0a:	fb2c 4a02 	smlad	sl, ip, r2, r4
 800bf0e:	f8d6 9030 	ldr.w	r9, [r6, #48]	; 0x30
 800bf12:	6b74      	ldr	r4, [r6, #52]	; 0x34
 800bf14:	fb2c b505 	smlad	r5, ip, r5, fp
 800bf18:	f8de 200c 	ldr.w	r2, [lr, #12]
 800bf1c:	f8d6 b038 	ldr.w	fp, [r6, #56]	; 0x38
 800bf20:	f8d6 e03c 	ldr.w	lr, [r6, #60]	; 0x3c
 800bf24:	fa2f f382 	sxtb16	r3, r2
 800bf28:	3640      	adds	r6, #64	; 0x40
 800bf2a:	fa2f f292 	sxtb16	r2, r2, ror #8
 800bf2e:	fb23 0009 	smlad	r0, r3, r9, r0
 800bf32:	fb22 0004 	smlad	r0, r2, r4, r0
 800bf36:	fb23 110b 	smlad	r1, r3, fp, r1
 800bf3a:	fb22 120e 	smlad	r2, r2, lr, r1
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	fa2f f183 	sxtb16	r1, r3
 800bf44:	fa2f f393 	sxtb16	r3, r3, ror #8
 800bf48:	fb21 aa09 	smlad	sl, r1, r9, sl
 800bf4c:	fb21 550b 	smlad	r5, r1, fp, r5
 800bf50:	fb23 a404 	smlad	r4, r3, r4, sl
 800bf54:	fb23 530e 	smlad	r3, r3, lr, r5
 800bf58:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bf5c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800bf60:	f107 0710 	add.w	r7, r7, #16
 800bf64:	f47f af6d 	bne.w	800be42 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x226>
 800bf68:	9904      	ldr	r1, [sp, #16]
 800bf6a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800bf6c:	4429      	add	r1, r5
 800bf6e:	9104      	str	r1, [sp, #16]
 800bf70:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800bf72:	9903      	ldr	r1, [sp, #12]
 800bf74:	4429      	add	r1, r5
 800bf76:	9103      	str	r1, [sp, #12]
 800bf78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bf7a:	b389      	cbz	r1, 800bfe0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x3c4>
 800bf7c:	e9dd 1e03 	ldrd	r1, lr, [sp, #12]
 800bf80:	e9dd ca0e 	ldrd	ip, sl, [sp, #56]	; 0x38
 800bf84:	680e      	ldr	r6, [r1, #0]
 800bf86:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800bf8a:	f85e 5b04 	ldr.w	r5, [lr], #4
 800bf8e:	f8d1 9008 	ldr.w	r9, [r1, #8]
 800bf92:	68cf      	ldr	r7, [r1, #12]
 800bf94:	fa2f fb85 	sxtb16	fp, r5
 800bf98:	3110      	adds	r1, #16
 800bf9a:	fa2f f595 	sxtb16	r5, r5, ror #8
 800bf9e:	fb2b 0006 	smlad	r0, fp, r6, r0
 800bfa2:	fb25 0008 	smlad	r0, r5, r8, r0
 800bfa6:	fb2b 2209 	smlad	r2, fp, r9, r2
 800bfaa:	fb25 2207 	smlad	r2, r5, r7, r2
 800bfae:	f85e 500a 	ldr.w	r5, [lr, sl]
 800bfb2:	fa2f fb85 	sxtb16	fp, r5
 800bfb6:	fa2f f595 	sxtb16	r5, r5, ror #8
 800bfba:	fb2b 4406 	smlad	r4, fp, r6, r4
 800bfbe:	fb2b 3309 	smlad	r3, fp, r9, r3
 800bfc2:	fb25 4408 	smlad	r4, r5, r8, r4
 800bfc6:	fb25 3307 	smlad	r3, r5, r7, r3
 800bfca:	f1bc 0c01 	subs.w	ip, ip, #1
 800bfce:	d2d9      	bcs.n	800bf84 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x368>
 800bfd0:	9904      	ldr	r1, [sp, #16]
 800bfd2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800bfd4:	4429      	add	r1, r5
 800bfd6:	9104      	str	r1, [sp, #16]
 800bfd8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800bfda:	9903      	ldr	r1, [sp, #12]
 800bfdc:	4429      	add	r1, r5
 800bfde:	9103      	str	r1, [sp, #12]
 800bfe0:	9906      	ldr	r1, [sp, #24]
 800bfe2:	2900      	cmp	r1, #0
 800bfe4:	d059      	beq.n	800c09a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x47e>
 800bfe6:	9d03      	ldr	r5, [sp, #12]
 800bfe8:	9f04      	ldr	r7, [sp, #16]
 800bfea:	f9b5 6000 	ldrsh.w	r6, [r5]
 800bfee:	f997 1000 	ldrsb.w	r1, [r7]
 800bff2:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
 800bff6:	fb16 0001 	smlabb	r0, r6, r1, r0
 800bffa:	fb15 2201 	smlabb	r2, r5, r1, r2
 800bffe:	9908      	ldr	r1, [sp, #32]
 800c000:	5679      	ldrsb	r1, [r7, r1]
 800c002:	fb16 4401 	smlabb	r4, r6, r1, r4
 800c006:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800c008:	fb15 3301 	smlabb	r3, r5, r1, r3
 800c00c:	2e00      	cmp	r6, #0
 800c00e:	d03c      	beq.n	800c08a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x46e>
 800c010:	9908      	ldr	r1, [sp, #32]
 800c012:	9d03      	ldr	r5, [sp, #12]
 800c014:	1879      	adds	r1, r7, r1
 800c016:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 800c01a:	f991 1001 	ldrsb.w	r1, [r1, #1]
 800c01e:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 800c022:	fb16 4401 	smlabb	r4, r6, r1, r4
 800c026:	fb15 3301 	smlabb	r3, r5, r1, r3
 800c02a:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800c02e:	fb16 0001 	smlabb	r0, r6, r1, r0
 800c032:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c034:	fb15 2201 	smlabb	r2, r5, r1, r2
 800c038:	1cb9      	adds	r1, r7, #2
 800c03a:	b336      	cbz	r6, 800c08a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x46e>
 800c03c:	9e08      	ldr	r6, [sp, #32]
 800c03e:	9d03      	ldr	r5, [sp, #12]
 800c040:	5789      	ldrsb	r1, [r1, r6]
 800c042:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 800c046:	f9b5 500a 	ldrsh.w	r5, [r5, #10]
 800c04a:	fb16 4401 	smlabb	r4, r6, r1, r4
 800c04e:	fb15 3301 	smlabb	r3, r5, r1, r3
 800c052:	f997 1002 	ldrsb.w	r1, [r7, #2]
 800c056:	fb16 0001 	smlabb	r0, r6, r1, r0
 800c05a:	9e06      	ldr	r6, [sp, #24]
 800c05c:	2e03      	cmp	r6, #3
 800c05e:	fb15 2201 	smlabb	r2, r5, r1, r2
 800c062:	f107 0103 	add.w	r1, r7, #3
 800c066:	d010      	beq.n	800c08a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x46e>
 800c068:	9e08      	ldr	r6, [sp, #32]
 800c06a:	9d03      	ldr	r5, [sp, #12]
 800c06c:	5789      	ldrsb	r1, [r1, r6]
 800c06e:	f9b5 600c 	ldrsh.w	r6, [r5, #12]
 800c072:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 800c076:	fb16 4401 	smlabb	r4, r6, r1, r4
 800c07a:	fb15 3301 	smlabb	r3, r5, r1, r3
 800c07e:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800c082:	fb16 0001 	smlabb	r0, r6, r1, r0
 800c086:	fb15 2201 	smlabb	r2, r5, r1, r2
 800c08a:	9904      	ldr	r1, [sp, #16]
 800c08c:	9d06      	ldr	r5, [sp, #24]
 800c08e:	4429      	add	r1, r5
 800c090:	9104      	str	r1, [sp, #16]
 800c092:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800c094:	9903      	ldr	r1, [sp, #12]
 800c096:	4429      	add	r1, r5
 800c098:	9103      	str	r1, [sp, #12]
 800c09a:	9d04      	ldr	r5, [sp, #16]
 800c09c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c09e:	9907      	ldr	r1, [sp, #28]
 800c0a0:	4435      	add	r5, r6
 800c0a2:	9504      	str	r5, [sp, #16]
 800c0a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c0a6:	3101      	adds	r1, #1
 800c0a8:	428d      	cmp	r5, r1
 800c0aa:	9107      	str	r1, [sp, #28]
 800c0ac:	f47f aebf 	bne.w	800be2e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x212>
 800c0b0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800c0b2:	2900      	cmp	r1, #0
 800c0b4:	f000 813d 	beq.w	800c332 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x716>
 800c0b8:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800c0ba:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800c0bc:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
 800c0c0:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800c0c2:	0101      	lsls	r1, r0, #4
 800c0c4:	f04f 0c00 	mov.w	ip, #0
 800c0c8:	fb51 c106 	smmla	r1, r1, r6, ip
 800c0cc:	4139      	asrs	r1, r7
 800c0ce:	4429      	add	r1, r5
 800c0d0:	1049      	asrs	r1, r1, #1
 800c0d2:	4670      	mov	r0, lr
 800c0d4:	f301 0107 	ssat	r1, #8, r1
 800c0d8:	f800 1b02 	strb.w	r1, [r0], #2
 800c0dc:	0121      	lsls	r1, r4, #4
 800c0de:	fb51 c106 	smmla	r1, r1, r6, ip
 800c0e2:	4139      	asrs	r1, r7
 800c0e4:	4429      	add	r1, r5
 800c0e6:	462c      	mov	r4, r5
 800c0e8:	1049      	asrs	r1, r1, #1
 800c0ea:	f301 0107 	ssat	r1, #8, r1
 800c0ee:	9f24      	ldr	r7, [sp, #144]	; 0x90
 800c0f0:	f88e 1001 	strb.w	r1, [lr, #1]
 800c0f4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c0f6:	9926      	ldr	r1, [sp, #152]	; 0x98
 800c0f8:	0112      	lsls	r2, r2, #4
 800c0fa:	fb52 c206 	smmla	r2, r2, r6, ip
 800c0fe:	413a      	asrs	r2, r7
 800c100:	4422      	add	r2, r4
 800c102:	4675      	mov	r5, lr
 800c104:	1052      	asrs	r2, r2, #1
 800c106:	448e      	add	lr, r1
 800c108:	f302 0207 	ssat	r2, #8, r2
 800c10c:	011b      	lsls	r3, r3, #4
 800c10e:	fb53 c306 	smmla	r3, r3, r6, ip
 800c112:	413b      	asrs	r3, r7
 800c114:	4423      	add	r3, r4
 800c116:	546a      	strb	r2, [r5, r1]
 800c118:	105b      	asrs	r3, r3, #1
 800c11a:	f303 0307 	ssat	r3, #8, r3
 800c11e:	f88e 3001 	strb.w	r3, [lr, #1]
 800c122:	9019      	str	r0, [sp, #100]	; 0x64
 800c124:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c126:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800c128:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c12a:	440a      	add	r2, r1
 800c12c:	9218      	str	r2, [sp, #96]	; 0x60
 800c12e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c130:	3302      	adds	r3, #2
 800c132:	429a      	cmp	r2, r3
 800c134:	931a      	str	r3, [sp, #104]	; 0x68
 800c136:	f73f ae6c 	bgt.w	800be12 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x1f6>
 800c13a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800c13c:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800c13e:	4413      	add	r3, r2
 800c140:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800c142:	18d3      	adds	r3, r2, r3
 800c144:	9307      	str	r3, [sp, #28]
 800c146:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c148:	2b00      	cmp	r3, #0
 800c14a:	f040 8133 	bne.w	800c3b4 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x798>
 800c14e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800c150:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800c152:	4413      	add	r3, r2
 800c154:	9332      	str	r3, [sp, #200]	; 0xc8
 800c156:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800c158:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800c15a:	4413      	add	r3, r2
 800c15c:	9331      	str	r3, [sp, #196]	; 0xc4
 800c15e:	9a4b      	ldr	r2, [sp, #300]	; 0x12c
 800c160:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800c162:	4413      	add	r3, r2
 800c164:	933a      	str	r3, [sp, #232]	; 0xe8
 800c166:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800c168:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800c16a:	3301      	adds	r3, #1
 800c16c:	932c      	str	r3, [sp, #176]	; 0xb0
 800c16e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800c170:	4413      	add	r3, r2
 800c172:	932b      	str	r3, [sp, #172]	; 0xac
 800c174:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 800c176:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c178:	4293      	cmp	r3, r2
 800c17a:	f73f ae31 	bgt.w	800bde0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x1c4>
 800c17e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800c180:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 800c182:	4413      	add	r3, r2
 800c184:	9336      	str	r3, [sp, #216]	; 0xd8
 800c186:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c188:	2b00      	cmp	r3, #0
 800c18a:	f000 8291 	beq.w	800c6b0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa94>
 800c18e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c190:	9a48      	ldr	r2, [sp, #288]	; 0x120
 800c192:	4413      	add	r3, r2
 800c194:	9329      	str	r3, [sp, #164]	; 0xa4
 800c196:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800c198:	b11b      	cbz	r3, 800c1a2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x586>
 800c19a:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800c19c:	9a46      	ldr	r2, [sp, #280]	; 0x118
 800c19e:	4413      	add	r3, r2
 800c1a0:	9365      	str	r3, [sp, #404]	; 0x194
 800c1a2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800c1a4:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800c1a6:	3208      	adds	r2, #8
 800c1a8:	9230      	str	r2, [sp, #192]	; 0xc0
 800c1aa:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800c1ac:	3208      	adds	r2, #8
 800c1ae:	9234      	str	r2, [sp, #208]	; 0xd0
 800c1b0:	9a44      	ldr	r2, [sp, #272]	; 0x110
 800c1b2:	3304      	adds	r3, #4
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	9337      	str	r3, [sp, #220]	; 0xdc
 800c1b8:	f47f add9 	bne.w	800bd6e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x152>
 800c1bc:	e9dd 233d 	ldrd	r2, r3, [sp, #244]	; 0xf4
 800c1c0:	fb02 3303 	mla	r3, r2, r3, r3
 800c1c4:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800c1c6:	441a      	add	r2, r3
 800c1c8:	922f      	str	r2, [sp, #188]	; 0xbc
 800c1ca:	9b58      	ldr	r3, [sp, #352]	; 0x160
 800c1cc:	f013 0a01 	ands.w	sl, r3, #1
 800c1d0:	f000 80ab 	beq.w	800c32a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x70e>
 800c1d4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	f000 80a7 	beq.w	800c32a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x70e>
 800c1dc:	9a59      	ldr	r2, [sp, #356]	; 0x164
 800c1de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c1e0:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800c1e2:	f8dd b0a4 	ldr.w	fp, [sp, #164]	; 0xa4
 800c1e6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c1ea:	9e61      	ldr	r6, [sp, #388]	; 0x184
 800c1ec:	f8cd b014 	str.w	fp, [sp, #20]
 800c1f0:	fb02 f303 	mul.w	r3, r2, r3
 800c1f4:	930e      	str	r3, [sp, #56]	; 0x38
 800c1f6:	9b62      	ldr	r3, [sp, #392]	; 0x188
 800c1f8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800c1fa:	f003 0302 	and.w	r3, r3, #2
 800c1fe:	9308      	str	r3, [sp, #32]
 800c200:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800c202:	fb02 f303 	mul.w	r3, r2, r3
 800c206:	930a      	str	r3, [sp, #40]	; 0x28
 800c208:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c20a:	9a40      	ldr	r2, [sp, #256]	; 0x100
 800c20c:	440b      	add	r3, r1
 800c20e:	9303      	str	r3, [sp, #12]
 800c210:	9b58      	ldr	r3, [sp, #352]	; 0x160
 800c212:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c216:	3b01      	subs	r3, #1
 800c218:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c21c:	920b      	str	r2, [sp, #44]	; 0x2c
 800c21e:	9a56      	ldr	r2, [sp, #344]	; 0x158
 800c220:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c224:	930c      	str	r3, [sp, #48]	; 0x30
 800c226:	9b58      	ldr	r3, [sp, #352]	; 0x160
 800c228:	9a57      	ldr	r2, [sp, #348]	; 0x15c
 800c22a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c22e:	3b01      	subs	r3, #1
 800c230:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800c234:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800c236:	930d      	str	r3, [sp, #52]	; 0x34
 800c238:	1cd3      	adds	r3, r2, #3
 800c23a:	445b      	add	r3, fp
 800c23c:	9306      	str	r3, [sp, #24]
 800c23e:	9b58      	ldr	r3, [sp, #352]	; 0x160
 800c240:	fb03 f302 	mul.w	r3, r3, r2
 800c244:	930f      	str	r3, [sp, #60]	; 0x3c
 800c246:	1c93      	adds	r3, r2, #2
 800c248:	9310      	str	r3, [sp, #64]	; 0x40
 800c24a:	468e      	mov	lr, r1
 800c24c:	9b08      	ldr	r3, [sp, #32]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	f000 8247 	beq.w	800c6e2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xac6>
 800c254:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800c256:	2b00      	cmp	r3, #0
 800c258:	f000 8248 	beq.w	800c6ec <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xad0>
 800c25c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c260:	f8cd a01c 	str.w	sl, [sp, #28]
 800c264:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800c266:	2b00      	cmp	r3, #0
 800c268:	d04b      	beq.n	800c302 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6e6>
 800c26a:	9b03      	ldr	r3, [sp, #12]
 800c26c:	9304      	str	r3, [sp, #16]
 800c26e:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800c272:	2300      	movs	r3, #0
 800c274:	f8dd a0a8 	ldr.w	sl, [sp, #168]	; 0xa8
 800c278:	9309      	str	r3, [sp, #36]	; 0x24
 800c27a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c27c:	6819      	ldr	r1, [r3, #0]
 800c27e:	f1b9 0f00 	cmp.w	r9, #0
 800c282:	d018      	beq.n	800c2b6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x69a>
 800c284:	9d04      	ldr	r5, [sp, #16]
 800c286:	f8dd c0bc 	ldr.w	ip, [sp, #188]	; 0xbc
 800c28a:	2700      	movs	r7, #0
 800c28c:	f1be 0f00 	cmp.w	lr, #0
 800c290:	eba5 020e 	sub.w	r2, r5, lr
 800c294:	dd0b      	ble.n	800c2ae <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x692>
 800c296:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800c29a:	f912 3b01 	ldrsb.w	r3, [r2], #1
 800c29e:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 800c2a2:	1b9b      	subs	r3, r3, r6
 800c2a4:	42aa      	cmp	r2, r5
 800c2a6:	fb04 1103 	mla	r1, r4, r3, r1
 800c2aa:	d1f6      	bne.n	800c29a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x67e>
 800c2ac:	44f4      	add	ip, lr
 800c2ae:	3701      	adds	r7, #1
 800c2b0:	45b9      	cmp	r9, r7
 800c2b2:	4455      	add	r5, sl
 800c2b4:	d1ea      	bne.n	800c28c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x670>
 800c2b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2ba:	f9b3 0000 	ldrsh.w	r0, [r3]
 800c2be:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800c2c0:	6812      	ldr	r2, [r2, #0]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	3002      	adds	r0, #2
 800c2c6:	2400      	movs	r4, #0
 800c2c8:	0109      	lsls	r1, r1, #4
 800c2ca:	fb51 4102 	smmla	r1, r1, r2, r4
 800c2ce:	fa41 f000 	asr.w	r0, r1, r0
 800c2d2:	4403      	add	r3, r0
 800c2d4:	105b      	asrs	r3, r3, #1
 800c2d6:	f303 0307 	ssat	r3, #8, r3
 800c2da:	f888 3000 	strb.w	r3, [r8]
 800c2de:	9b08      	ldr	r3, [sp, #32]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	f000 81fb 	beq.w	800c6dc <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xac0>
 800c2e6:	f108 0801 	add.w	r8, r8, #1
 800c2ea:	9a04      	ldr	r2, [sp, #16]
 800c2ec:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2f0:	440a      	add	r2, r1
 800c2f2:	9204      	str	r2, [sp, #16]
 800c2f4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	9309      	str	r3, [sp, #36]	; 0x24
 800c2fc:	d1bd      	bne.n	800c27a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x65e>
 800c2fe:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800c302:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800c304:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c306:	449b      	add	fp, r3
 800c308:	9b05      	ldr	r3, [sp, #20]
 800c30a:	4413      	add	r3, r2
 800c30c:	9305      	str	r3, [sp, #20]
 800c30e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c310:	9b06      	ldr	r3, [sp, #24]
 800c312:	4413      	add	r3, r2
 800c314:	9306      	str	r3, [sp, #24]
 800c316:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c318:	9b03      	ldr	r3, [sp, #12]
 800c31a:	4413      	add	r3, r2
 800c31c:	9303      	str	r3, [sp, #12]
 800c31e:	9a07      	ldr	r2, [sp, #28]
 800c320:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c322:	4293      	cmp	r3, r2
 800c324:	f10a 0a01 	add.w	sl, sl, #1
 800c328:	dc90      	bgt.n	800c24c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x630>
 800c32a:	2000      	movs	r0, #0
 800c32c:	b04d      	add	sp, #308	; 0x134
 800c32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c332:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800c334:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800c336:	460f      	mov	r7, r1
 800c338:	0101      	lsls	r1, r0, #4
 800c33a:	981c      	ldr	r0, [sp, #112]	; 0x70
 800c33c:	fb51 7100 	smmla	r1, r1, r0, r7
 800c340:	981e      	ldr	r0, [sp, #120]	; 0x78
 800c342:	4129      	asrs	r1, r5
 800c344:	4401      	add	r1, r0
 800c346:	9d58      	ldr	r5, [sp, #352]	; 0x160
 800c348:	9858      	ldr	r0, [sp, #352]	; 0x160
 800c34a:	1049      	asrs	r1, r1, #1
 800c34c:	1975      	adds	r5, r6, r5
 800c34e:	eb06 0c40 	add.w	ip, r6, r0, lsl #1
 800c352:	f301 0107 	ssat	r1, #8, r1
 800c356:	7031      	strb	r1, [r6, #0]
 800c358:	0121      	lsls	r1, r4, #4
 800c35a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c35c:	fb51 7104 	smmla	r1, r1, r4, r7
 800c360:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800c362:	4121      	asrs	r1, r4
 800c364:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800c366:	4421      	add	r1, r4
 800c368:	1049      	asrs	r1, r1, #1
 800c36a:	f301 0107 	ssat	r1, #8, r1
 800c36e:	5431      	strb	r1, [r6, r0]
 800c370:	9824      	ldr	r0, [sp, #144]	; 0x90
 800c372:	991d      	ldr	r1, [sp, #116]	; 0x74
 800c374:	0112      	lsls	r2, r2, #4
 800c376:	fb52 7201 	smmla	r2, r2, r1, r7
 800c37a:	4102      	asrs	r2, r0
 800c37c:	4422      	add	r2, r4
 800c37e:	1052      	asrs	r2, r2, #1
 800c380:	f302 0207 	ssat	r2, #8, r2
 800c384:	7072      	strb	r2, [r6, #1]
 800c386:	011b      	lsls	r3, r3, #4
 800c388:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c38a:	fb53 7302 	smmla	r3, r3, r2, r7
 800c38e:	4103      	asrs	r3, r0
 800c390:	4423      	add	r3, r4
 800c392:	105b      	asrs	r3, r3, #1
 800c394:	f303 0307 	ssat	r3, #8, r3
 800c398:	706b      	strb	r3, [r5, #1]
 800c39a:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 800c39e:	e6c1      	b.n	800c124 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x508>
 800c3a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c3a2:	9820      	ldr	r0, [sp, #128]	; 0x80
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	4604      	mov	r4, r0
 800c3a8:	e682      	b.n	800c0b0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x494>
 800c3aa:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800c3ac:	9319      	str	r3, [sp, #100]	; 0x64
 800c3ae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800c3b0:	9339      	str	r3, [sp, #228]	; 0xe4
 800c3b2:	e521      	b.n	800bdf8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x1dc>
 800c3b4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	bf13      	iteet	ne
 800c3ba:	9b07      	ldrne	r3, [sp, #28]
 800c3bc:	9b2d      	ldreq	r3, [sp, #180]	; 0xb4
 800c3be:	9a2b      	ldreq	r2, [sp, #172]	; 0xac
 800c3c0:	9a23      	ldrne	r2, [sp, #140]	; 0x8c
 800c3c2:	4413      	add	r3, r2
 800c3c4:	9307      	str	r3, [sp, #28]
 800c3c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	f000 8175 	beq.w	800c6b8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa9c>
 800c3ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c3d0:	f8dd 9194 	ldr.w	r9, [sp, #404]	; 0x194
 800c3d4:	1eda      	subs	r2, r3, #3
 800c3d6:	921a      	str	r2, [sp, #104]	; 0x68
 800c3d8:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800c3dc:	9a07      	ldr	r2, [sp, #28]
 800c3de:	9203      	str	r2, [sp, #12]
 800c3e0:	3b04      	subs	r3, #4
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	9204      	str	r2, [sp, #16]
 800c3e6:	9324      	str	r3, [sp, #144]	; 0x90
 800c3e8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800c3ea:	9a03      	ldr	r2, [sp, #12]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	4611      	mov	r1, r2
 800c3f0:	f340 80e7 	ble.w	800c5c2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9a6>
 800c3f4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800c3f6:	464b      	mov	r3, r9
 800c3f8:	188c      	adds	r4, r1, r2
 800c3fa:	6808      	ldr	r0, [r1, #0]
 800c3fc:	fa2f f280 	sxtb16	r2, r0
 800c400:	fa2f f090 	sxtb16	r0, r0, ror #8
 800c404:	681d      	ldr	r5, [r3, #0]
 800c406:	fb22 a505 	smlad	r5, r2, r5, sl
 800c40a:	685e      	ldr	r6, [r3, #4]
 800c40c:	fb20 5706 	smlad	r7, r0, r6, r5
 800c410:	689d      	ldr	r5, [r3, #8]
 800c412:	fb22 b205 	smlad	r2, r2, r5, fp
 800c416:	68dd      	ldr	r5, [r3, #12]
 800c418:	fb20 2005 	smlad	r0, r0, r5, r2
 800c41c:	684a      	ldr	r2, [r1, #4]
 800c41e:	fa2f f582 	sxtb16	r5, r2
 800c422:	fa2f f292 	sxtb16	r2, r2, ror #8
 800c426:	691e      	ldr	r6, [r3, #16]
 800c428:	fb25 7606 	smlad	r6, r5, r6, r7
 800c42c:	695f      	ldr	r7, [r3, #20]
 800c42e:	fb22 6607 	smlad	r6, r2, r7, r6
 800c432:	699f      	ldr	r7, [r3, #24]
 800c434:	fb25 0007 	smlad	r0, r5, r7, r0
 800c438:	69dd      	ldr	r5, [r3, #28]
 800c43a:	fb22 0205 	smlad	r2, r2, r5, r0
 800c43e:	688f      	ldr	r7, [r1, #8]
 800c440:	fa2f f087 	sxtb16	r0, r7
 800c444:	fa2f f797 	sxtb16	r7, r7, ror #8
 800c448:	6a1d      	ldr	r5, [r3, #32]
 800c44a:	fb20 6505 	smlad	r5, r0, r5, r6
 800c44e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800c450:	fb27 5606 	smlad	r6, r7, r6, r5
 800c454:	f8d3 b028 	ldr.w	fp, [r3, #40]	; 0x28
 800c458:	fb20 200b 	smlad	r0, r0, fp, r2
 800c45c:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
 800c460:	fb27 000b 	smlad	r0, r7, fp, r0
 800c464:	68ca      	ldr	r2, [r1, #12]
 800c466:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800c468:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 800c46c:	f8d3 c038 	ldr.w	ip, [r3, #56]	; 0x38
 800c470:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800c472:	fa2f fb82 	sxtb16	fp, r2
 800c476:	3110      	adds	r1, #16
 800c478:	3340      	adds	r3, #64	; 0x40
 800c47a:	fa2f f292 	sxtb16	r2, r2, ror #8
 800c47e:	fb2b 6505 	smlad	r5, fp, r5, r6
 800c482:	fb22 5a0a 	smlad	sl, r2, sl, r5
 800c486:	fb2b 0b0c 	smlad	fp, fp, ip, r0
 800c48a:	fb22 bb07 	smlad	fp, r2, r7, fp
 800c48e:	42a1      	cmp	r1, r4
 800c490:	d1b3      	bne.n	800c3fa <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7de>
 800c492:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800c494:	f8dd e0a0 	ldr.w	lr, [sp, #160]	; 0xa0
 800c498:	4499      	add	r9, r3
 800c49a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c49c:	459e      	cmp	lr, r3
 800c49e:	f280 808e 	bge.w	800c5be <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9a2>
 800c4a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c4a4:	eba3 080e 	sub.w	r8, r3, lr
 800c4a8:	ea4f 0898 	mov.w	r8, r8, lsr #2
 800c4ac:	f108 0301 	add.w	r3, r8, #1
 800c4b0:	9318      	str	r3, [sp, #96]	; 0x60
 800c4b2:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 800c4b6:	4649      	mov	r1, r9
 800c4b8:	6808      	ldr	r0, [r1, #0]
 800c4ba:	684f      	ldr	r7, [r1, #4]
 800c4bc:	688e      	ldr	r6, [r1, #8]
 800c4be:	68cd      	ldr	r5, [r1, #12]
 800c4c0:	f854 3b04 	ldr.w	r3, [r4], #4
 800c4c4:	fa2f f283 	sxtb16	r2, r3
 800c4c8:	3110      	adds	r1, #16
 800c4ca:	fa2f f393 	sxtb16	r3, r3, ror #8
 800c4ce:	fb22 a000 	smlad	r0, r2, r0, sl
 800c4d2:	fb23 0a07 	smlad	sl, r3, r7, r0
 800c4d6:	fb22 b206 	smlad	r2, r2, r6, fp
 800c4da:	fb23 2b05 	smlad	fp, r3, r5, r2
 800c4de:	45a4      	cmp	ip, r4
 800c4e0:	d1ea      	bne.n	800c4b8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x89c>
 800c4e2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c4e4:	f10e 0e04 	add.w	lr, lr, #4
 800c4e8:	eb09 1903 	add.w	r9, r9, r3, lsl #4
 800c4ec:	eb0e 0e88 	add.w	lr, lr, r8, lsl #2
 800c4f0:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800c4f2:	4571      	cmp	r1, lr
 800c4f4:	dd38      	ble.n	800c568 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x94c>
 800c4f6:	f99c 3000 	ldrsb.w	r3, [ip]
 800c4fa:	f8b9 2000 	ldrh.w	r2, [r9]
 800c4fe:	fb12 aa03 	smlabb	sl, r2, r3, sl
 800c502:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 800c506:	fb12 bb03 	smlabb	fp, r2, r3, fp
 800c50a:	f10e 0301 	add.w	r3, lr, #1
 800c50e:	4299      	cmp	r1, r3
 800c510:	dd25      	ble.n	800c55e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x942>
 800c512:	f99c 3001 	ldrsb.w	r3, [ip, #1]
 800c516:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 800c51a:	fb12 aa03 	smlabb	sl, r2, r3, sl
 800c51e:	f8b9 2006 	ldrh.w	r2, [r9, #6]
 800c522:	fb12 bb03 	smlabb	fp, r2, r3, fp
 800c526:	f10e 0302 	add.w	r3, lr, #2
 800c52a:	4299      	cmp	r1, r3
 800c52c:	dd17      	ble.n	800c55e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x942>
 800c52e:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 800c532:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 800c536:	fb12 aa03 	smlabb	sl, r2, r3, sl
 800c53a:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 800c53e:	fb12 bb03 	smlabb	fp, r2, r3, fp
 800c542:	f10e 0303 	add.w	r3, lr, #3
 800c546:	4299      	cmp	r1, r3
 800c548:	dd09      	ble.n	800c55e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x942>
 800c54a:	f99c 3003 	ldrsb.w	r3, [ip, #3]
 800c54e:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 800c552:	fb12 aa03 	smlabb	sl, r2, r3, sl
 800c556:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 800c55a:	fb12 bb03 	smlabb	fp, r2, r3, fp
 800c55e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c560:	eba3 0e0e 	sub.w	lr, r3, lr
 800c564:	eb09 098e 	add.w	r9, r9, lr, lsl #2
 800c568:	9a03      	ldr	r2, [sp, #12]
 800c56a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800c56c:	9b04      	ldr	r3, [sp, #16]
 800c56e:	440a      	add	r2, r1
 800c570:	9203      	str	r2, [sp, #12]
 800c572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c574:	3301      	adds	r3, #1
 800c576:	429a      	cmp	r2, r3
 800c578:	9304      	str	r3, [sp, #16]
 800c57a:	f47f af35 	bne.w	800c3e8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7cc>
 800c57e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c580:	b343      	cbz	r3, 800c5d4 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9b8>
 800c582:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c584:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c586:	ea4f 130a 	mov.w	r3, sl, lsl #4
 800c58a:	2400      	movs	r4, #0
 800c58c:	fb53 4302 	smmla	r3, r3, r2, r4
 800c590:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c592:	4113      	asrs	r3, r2
 800c594:	440b      	add	r3, r1
 800c596:	105b      	asrs	r3, r3, #1
 800c598:	f303 0307 	ssat	r3, #8, r3
 800c59c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c59e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c5a0:	7003      	strb	r3, [r0, #0]
 800c5a2:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800c5a6:	fb53 4302 	smmla	r3, r3, r2, r4
 800c5aa:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800c5ac:	3202      	adds	r2, #2
 800c5ae:	4113      	asrs	r3, r2
 800c5b0:	440b      	add	r3, r1
 800c5b2:	105b      	asrs	r3, r3, #1
 800c5b4:	f303 0307 	ssat	r3, #8, r3
 800c5b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c5ba:	5483      	strb	r3, [r0, r2]
 800c5bc:	e5c7      	b.n	800c14e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x532>
 800c5be:	46a4      	mov	ip, r4
 800c5c0:	e796      	b.n	800c4f0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x8d4>
 800c5c2:	4614      	mov	r4, r2
 800c5c4:	f04f 0e00 	mov.w	lr, #0
 800c5c8:	e767      	b.n	800c49a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x87e>
 800c5ca:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800c5cc:	9319      	str	r3, [sp, #100]	; 0x64
 800c5ce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800c5d0:	9339      	str	r3, [sp, #228]	; 0xe4
 800c5d2:	e411      	b.n	800bdf8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x1dc>
 800c5d4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	ea4f 130a 	mov.w	r3, sl, lsl #4
 800c5dc:	fb53 2301 	smmla	r3, r3, r1, r2
 800c5e0:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800c5e2:	410b      	asrs	r3, r1
 800c5e4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c5e6:	440b      	add	r3, r1
 800c5e8:	105b      	asrs	r3, r3, #1
 800c5ea:	f303 0307 	ssat	r3, #8, r3
 800c5ee:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c5f0:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800c5f2:	7003      	strb	r3, [r0, #0]
 800c5f4:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800c5f8:	fb53 2304 	smmla	r3, r3, r4, r2
 800c5fc:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800c5fe:	3202      	adds	r2, #2
 800c600:	4113      	asrs	r3, r2
 800c602:	440b      	add	r3, r1
 800c604:	105b      	asrs	r3, r3, #1
 800c606:	f303 0307 	ssat	r3, #8, r3
 800c60a:	7043      	strb	r3, [r0, #1]
 800c60c:	e59f      	b.n	800c14e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x532>
 800c60e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c610:	2b00      	cmp	r3, #0
 800c612:	d060      	beq.n	800c6d6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xaba>
 800c614:	2300      	movs	r3, #0
 800c616:	9865      	ldr	r0, [sp, #404]	; 0x194
 800c618:	993f      	ldr	r1, [sp, #252]	; 0xfc
 800c61a:	461c      	mov	r4, r3
 800c61c:	461e      	mov	r6, r3
 800c61e:	b311      	cbz	r1, 800c666 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa4a>
 800c620:	f100 0510 	add.w	r5, r0, #16
 800c624:	468c      	mov	ip, r1
 800c626:	f935 2c10 	ldrsh.w	r2, [r5, #-16]
 800c62a:	1aa4      	subs	r4, r4, r2
 800c62c:	f935 2c08 	ldrsh.w	r2, [r5, #-8]
 800c630:	1a9b      	subs	r3, r3, r2
 800c632:	f935 2c0e 	ldrsh.w	r2, [r5, #-14]
 800c636:	1aa4      	subs	r4, r4, r2
 800c638:	f935 2c06 	ldrsh.w	r2, [r5, #-6]
 800c63c:	1a9b      	subs	r3, r3, r2
 800c63e:	f935 2c0c 	ldrsh.w	r2, [r5, #-12]
 800c642:	1aa4      	subs	r4, r4, r2
 800c644:	f935 2c04 	ldrsh.w	r2, [r5, #-4]
 800c648:	1a9b      	subs	r3, r3, r2
 800c64a:	f935 2c0a 	ldrsh.w	r2, [r5, #-10]
 800c64e:	1aa4      	subs	r4, r4, r2
 800c650:	f935 2c02 	ldrsh.w	r2, [r5, #-2]
 800c654:	f1bc 0c01 	subs.w	ip, ip, #1
 800c658:	eba3 0302 	sub.w	r3, r3, r2
 800c65c:	f105 0510 	add.w	r5, r5, #16
 800c660:	d1e1      	bne.n	800c626 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa0a>
 800c662:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800c664:	4410      	add	r0, r2
 800c666:	9a06      	ldr	r2, [sp, #24]
 800c668:	b1ba      	cbz	r2, 800c69a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa7e>
 800c66a:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c66e:	1aa4      	subs	r4, r4, r2
 800c670:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800c674:	1a9b      	subs	r3, r3, r2
 800c676:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c678:	b16a      	cbz	r2, 800c696 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa7a>
 800c67a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800c67e:	1aa4      	subs	r4, r4, r2
 800c680:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800c684:	1a9b      	subs	r3, r3, r2
 800c686:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c688:	b12a      	cbz	r2, 800c696 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa7a>
 800c68a:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 800c68e:	1aa4      	subs	r4, r4, r2
 800c690:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800c694:	1a9b      	subs	r3, r3, r2
 800c696:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c698:	4410      	add	r0, r2
 800c69a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c69c:	3601      	adds	r6, #1
 800c69e:	42b2      	cmp	r2, r6
 800c6a0:	d1bd      	bne.n	800c61e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa02>
 800c6a2:	9a61      	ldr	r2, [sp, #388]	; 0x184
 800c6a4:	fb02 f404 	mul.w	r4, r2, r4
 800c6a8:	fb02 f303 	mul.w	r3, r2, r3
 800c6ac:	f7ff bb77 	b.w	800bd9e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x182>
 800c6b0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c6b2:	3302      	adds	r3, #2
 800c6b4:	9329      	str	r3, [sp, #164]	; 0xa4
 800c6b6:	e56e      	b.n	800c196 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x57a>
 800c6b8:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800c6bc:	e75f      	b.n	800c57e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x962>
 800c6be:	9836      	ldr	r0, [sp, #216]	; 0xd8
 800c6c0:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
 800c6c2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c6c4:	9300      	str	r3, [sp, #0]
 800c6c6:	4601      	mov	r1, r0
 800c6c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6ca:	9a65      	ldr	r2, [sp, #404]	; 0x194
 800c6cc:	4421      	add	r1, r4
 800c6ce:	f7fe ff91 	bl	800b5f4 <weights_2channels_prefetch>
 800c6d2:	f7ff bb5f 	b.w	800bd94 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x178>
 800c6d6:	461c      	mov	r4, r3
 800c6d8:	f7ff bb61 	b.w	800bd9e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x182>
 800c6dc:	9b58      	ldr	r3, [sp, #352]	; 0x160
 800c6de:	4498      	add	r8, r3
 800c6e0:	e603      	b.n	800c2ea <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6ce>
 800c6e2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c6e6:	f8cd a01c 	str.w	sl, [sp, #28]
 800c6ea:	e5bb      	b.n	800c264 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x648>
 800c6ec:	46d8      	mov	r8, fp
 800c6ee:	f8cd a01c 	str.w	sl, [sp, #28]
 800c6f2:	e5b7      	b.n	800c264 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x648>

0800c6f4 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t>:
 800c6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f8:	b0c7      	sub	sp, #284	; 0x11c
 800c6fa:	f8dd 814c 	ldr.w	r8, [sp, #332]	; 0x14c
 800c6fe:	912f      	str	r1, [sp, #188]	; 0xbc
 800c700:	923d      	str	r2, [sp, #244]	; 0xf4
 800c702:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
 800c706:	9331      	str	r3, [sp, #196]	; 0xc4
 800c708:	e9dd 325b 	ldrd	r3, r2, [sp, #364]	; 0x16c
 800c70c:	9127      	str	r1, [sp, #156]	; 0x9c
 800c70e:	ea4f 0148 	mov.w	r1, r8, lsl #1
 800c712:	910c      	str	r1, [sp, #48]	; 0x30
 800c714:	eb08 0148 	add.w	r1, r8, r8, lsl #1
 800c718:	2a00      	cmp	r2, #0
 800c71a:	bf18      	it	ne
 800c71c:	4613      	movne	r3, r2
 800c71e:	9132      	str	r1, [sp, #200]	; 0xc8
 800c720:	9958      	ldr	r1, [sp, #352]	; 0x160
 800c722:	f8bd 2154 	ldrh.w	r2, [sp, #340]	; 0x154
 800c726:	935b      	str	r3, [sp, #364]	; 0x16c
 800c728:	f8bd 3150 	ldrh.w	r3, [sp, #336]	; 0x150
 800c72c:	9324      	str	r3, [sp, #144]	; 0x90
 800c72e:	f011 0101 	ands.w	r1, r1, #1
 800c732:	bf18      	it	ne
 800c734:	3302      	addne	r3, #2
 800c736:	9228      	str	r2, [sp, #160]	; 0xa0
 800c738:	bf18      	it	ne
 800c73a:	3202      	addne	r2, #2
 800c73c:	fb02 f303 	mul.w	r3, r2, r3
 800c740:	9316      	str	r3, [sp, #88]	; 0x58
 800c742:	9b52      	ldr	r3, [sp, #328]	; 0x148
 800c744:	903c      	str	r0, [sp, #240]	; 0xf0
 800c746:	2b01      	cmp	r3, #1
 800c748:	9130      	str	r1, [sp, #192]	; 0xc0
 800c74a:	f340 82b5 	ble.w	800ccb8 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x5c4>
 800c74e:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 800c750:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800c752:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800c756:	1bf1      	subs	r1, r6, r7
 800c758:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800c75c:	19d5      	adds	r5, r2, r7
 800c75e:	eb06 0048 	add.w	r0, r6, r8, lsl #1
 800c762:	eb07 0208 	add.w	r2, r7, r8
 800c766:	1bc4      	subs	r4, r0, r7
 800c768:	9021      	str	r0, [sp, #132]	; 0x84
 800c76a:	0052      	lsls	r2, r2, #1
 800c76c:	f1c6 0002 	rsb	r0, r6, #2
 800c770:	912e      	str	r1, [sp, #184]	; 0xb8
 800c772:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800c776:	eba0 0108 	sub.w	r1, r0, r8
 800c77a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800c77e:	f1a8 0304 	sub.w	r3, r8, #4
 800c782:	4617      	mov	r7, r2
 800c784:	089b      	lsrs	r3, r3, #2
 800c786:	9223      	str	r2, [sp, #140]	; 0x8c
 800c788:	eb05 0241 	add.w	r2, r5, r1, lsl #1
 800c78c:	fb07 2203 	mla	r2, r7, r3, r2
 800c790:	9239      	str	r2, [sp, #228]	; 0xe4
 800c792:	f008 0203 	and.w	r2, r8, #3
 800c796:	9f52      	ldr	r7, [sp, #328]	; 0x148
 800c798:	9219      	str	r2, [sp, #100]	; 0x64
 800c79a:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800c79e:	eb02 05c2 	add.w	r5, r2, r2, lsl #3
 800c7a2:	0072      	lsls	r2, r6, #1
 800c7a4:	9538      	str	r5, [sp, #224]	; 0xe0
 800c7a6:	f1c2 0501 	rsb	r5, r2, #1
 800c7aa:	1eba      	subs	r2, r7, #2
 800c7ac:	0852      	lsrs	r2, r2, #1
 800c7ae:	923b      	str	r2, [sp, #236]	; 0xec
 800c7b0:	eba8 0288 	sub.w	r2, r8, r8, lsl #2
 800c7b4:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800c7b8:	9005      	str	r0, [sp, #20]
 800c7ba:	eb08 00c8 	add.w	r0, r8, r8, lsl #3
 800c7be:	903a      	str	r0, [sp, #232]	; 0xe8
 800c7c0:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800c7c2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800c7c6:	0080      	lsls	r0, r0, #2
 800c7c8:	eb08 0704 	add.w	r7, r8, r4
 800c7cc:	9042      	str	r0, [sp, #264]	; 0x108
 800c7ce:	9851      	ldr	r0, [sp, #324]	; 0x144
 800c7d0:	971b      	str	r7, [sp, #108]	; 0x6c
 800c7d2:	9f3b      	ldr	r7, [sp, #236]	; 0xec
 800c7d4:	3004      	adds	r0, #4
 800c7d6:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800c7da:	3301      	adds	r3, #1
 800c7dc:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c7de:	f8cd c100 	str.w	ip, [sp, #256]	; 0x100
 800c7e2:	eb03 00c3 	add.w	r0, r3, r3, lsl #3
 800c7e6:	009b      	lsls	r3, r3, #2
 800c7e8:	9313      	str	r3, [sp, #76]	; 0x4c
 800c7ea:	007b      	lsls	r3, r7, #1
 800c7ec:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800c7f0:	9919      	ldr	r1, [sp, #100]	; 0x64
 800c7f2:	931e      	str	r3, [sp, #120]	; 0x78
 800c7f4:	1c4b      	adds	r3, r1, #1
 800c7f6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800c7fa:	9345      	str	r3, [sp, #276]	; 0x114
 800c7fc:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800c800:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800c802:	9341      	str	r3, [sp, #260]	; 0x104
 800c804:	1993      	adds	r3, r2, r6
 800c806:	9301      	str	r3, [sp, #4]
 800c808:	1953      	adds	r3, r2, r5
 800c80a:	9315      	str	r3, [sp, #84]	; 0x54
 800c80c:	1beb      	subs	r3, r5, r7
 800c80e:	9333      	str	r3, [sp, #204]	; 0xcc
 800c810:	9b58      	ldr	r3, [sp, #352]	; 0x160
 800c812:	f003 0302 	and.w	r3, r3, #2
 800c816:	9309      	str	r3, [sp, #36]	; 0x24
 800c818:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c81a:	0100      	lsls	r0, r0, #4
 800c81c:	1e5a      	subs	r2, r3, #1
 800c81e:	9044      	str	r0, [sp, #272]	; 0x110
 800c820:	920b      	str	r2, [sp, #44]	; 0x2c
 800c822:	f1a8 0203 	sub.w	r2, r8, #3
 800c826:	983a      	ldr	r0, [sp, #232]	; 0xe8
 800c828:	9204      	str	r2, [sp, #16]
 800c82a:	f003 0201 	and.w	r2, r3, #1
 800c82e:	922b      	str	r2, [sp, #172]	; 0xac
 800c830:	0042      	lsls	r2, r0, #1
 800c832:	923e      	str	r2, [sp, #248]	; 0xf8
 800c834:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c836:	9d38      	ldr	r5, [sp, #224]	; 0xe0
 800c838:	0052      	lsls	r2, r2, #1
 800c83a:	923f      	str	r2, [sp, #252]	; 0xfc
 800c83c:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800c83e:	9237      	str	r2, [sp, #220]	; 0xdc
 800c840:	9a50      	ldr	r2, [sp, #320]	; 0x140
 800c842:	3204      	adds	r2, #4
 800c844:	9236      	str	r2, [sp, #216]	; 0xd8
 800c846:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 800c848:	3204      	adds	r2, #4
 800c84a:	9235      	str	r2, [sp, #212]	; 0xd4
 800c84c:	012a      	lsls	r2, r5, #4
 800c84e:	9243      	str	r2, [sp, #268]	; 0x10c
 800c850:	9a52      	ldr	r2, [sp, #328]	; 0x148
 800c852:	fb02 f303 	mul.w	r3, r2, r3
 800c856:	932d      	str	r3, [sp, #180]	; 0xb4
 800c858:	eb08 0306 	add.w	r3, r8, r6
 800c85c:	9322      	str	r3, [sp, #136]	; 0x88
 800c85e:	0063      	lsls	r3, r4, #1
 800c860:	9320      	str	r3, [sp, #128]	; 0x80
 800c862:	eb04 0348 	add.w	r3, r4, r8, lsl #1
 800c866:	931f      	str	r3, [sp, #124]	; 0x7c
 800c868:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800c86a:	9334      	str	r3, [sp, #208]	; 0xd0
 800c86c:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800c86e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c872:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c876:	932a      	str	r3, [sp, #168]	; 0xa8
 800c878:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800c87a:	9229      	str	r2, [sp, #164]	; 0xa4
 800c87c:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	9311      	str	r3, [sp, #68]	; 0x44
 800c884:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 800c886:	9210      	str	r2, [sp, #64]	; 0x40
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	9312      	str	r3, [sp, #72]	; 0x48
 800c88c:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 800c88e:	2b00      	cmp	r3, #0
 800c890:	f000 8616 	beq.w	800d4c0 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xdcc>
 800c894:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 800c896:	2b00      	cmp	r3, #0
 800c898:	f040 85d5 	bne.w	800d446 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xd52>
 800c89c:	461a      	mov	r2, r3
 800c89e:	9835      	ldr	r0, [sp, #212]	; 0xd4
 800c8a0:	f850 1c04 	ldr.w	r1, [r0, #-4]
 800c8a4:	440a      	add	r2, r1
 800c8a6:	920e      	str	r2, [sp, #56]	; 0x38
 800c8a8:	6802      	ldr	r2, [r0, #0]
 800c8aa:	4413      	add	r3, r2
 800c8ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	f000 81db 	beq.w	800cc6c <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x578>
 800c8b6:	9924      	ldr	r1, [sp, #144]	; 0x90
 800c8b8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800c8ba:	921d      	str	r2, [sp, #116]	; 0x74
 800c8bc:	1ccb      	adds	r3, r1, #3
 800c8be:	18d3      	adds	r3, r2, r3
 800c8c0:	931c      	str	r3, [sp, #112]	; 0x70
 800c8c2:	4613      	mov	r3, r2
 800c8c4:	1c8a      	adds	r2, r1, #2
 800c8c6:	922c      	str	r2, [sp, #176]	; 0xb0
 800c8c8:	931a      	str	r3, [sp, #104]	; 0x68
 800c8ca:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800c8cc:	9944      	ldr	r1, [sp, #272]	; 0x110
 800c8ce:	9217      	str	r2, [sp, #92]	; 0x5c
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
 800c8d4:	9318      	str	r3, [sp, #96]	; 0x60
 800c8d6:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c8d8:	440a      	add	r2, r1
 800c8da:	009b      	lsls	r3, r3, #2
 800c8dc:	9214      	str	r2, [sp, #80]	; 0x50
 800c8de:	9326      	str	r3, [sp, #152]	; 0x98
 800c8e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	f000 8371 	beq.w	800cfca <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x8d6>
 800c8e8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	f000 8464 	beq.w	800d1b8 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xac4>
 800c8f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c8f2:	9325      	str	r3, [sp, #148]	; 0x94
 800c8f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c8f6:	9307      	str	r3, [sp, #28]
 800c8f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	f340 819a 	ble.w	800cc34 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x540>
 800c900:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c902:	3302      	adds	r3, #2
 800c904:	930a      	str	r3, [sp, #40]	; 0x28
 800c906:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800c908:	3302      	adds	r3, #2
 800c90a:	930d      	str	r3, [sp, #52]	; 0x34
 800c90c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c90e:	9306      	str	r3, [sp, #24]
 800c910:	2300      	movs	r3, #0
 800c912:	9308      	str	r3, [sp, #32]
 800c914:	9b04      	ldr	r3, [sp, #16]
 800c916:	f8dd c018 	ldr.w	ip, [sp, #24]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	f340 834e 	ble.w	800cfbc <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x8c8>
 800c920:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c922:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c924:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 800c926:	2100      	movs	r1, #0
 800c928:	4691      	mov	r9, r2
 800c92a:	9102      	str	r1, [sp, #8]
 800c92c:	4607      	mov	r7, r0
 800c92e:	eb0c 0408 	add.w	r4, ip, r8
 800c932:	f8dc 1000 	ldr.w	r1, [ip]
 800c936:	9400      	str	r4, [sp, #0]
 800c938:	f8d3 a000 	ldr.w	sl, [r3]
 800c93c:	f8d3 e004 	ldr.w	lr, [r3, #4]
 800c940:	689d      	ldr	r5, [r3, #8]
 800c942:	68de      	ldr	r6, [r3, #12]
 800c944:	fa2f f481 	sxtb16	r4, r1
 800c948:	fa2f f191 	sxtb16	r1, r1, ror #8
 800c94c:	fb24 220a 	smlad	r2, r4, sl, r2
 800c950:	fb21 220e 	smlad	r2, r1, lr, r2
 800c954:	fb24 0005 	smlad	r0, r4, r5, r0
 800c958:	fb21 0006 	smlad	r0, r1, r6, r0
 800c95c:	9900      	ldr	r1, [sp, #0]
 800c95e:	f85c 4008 	ldr.w	r4, [ip, r8]
 800c962:	eb01 0b08 	add.w	fp, r1, r8
 800c966:	fa2f f184 	sxtb16	r1, r4
 800c96a:	fa2f f494 	sxtb16	r4, r4, ror #8
 800c96e:	fb21 990a 	smlad	r9, r1, sl, r9
 800c972:	fb21 7505 	smlad	r5, r1, r5, r7
 800c976:	fb24 990e 	smlad	r9, r4, lr, r9
 800c97a:	fb24 5506 	smlad	r5, r4, r6, r5
 800c97e:	f8d3 e010 	ldr.w	lr, [r3, #16]
 800c982:	f8d3 a014 	ldr.w	sl, [r3, #20]
 800c986:	699e      	ldr	r6, [r3, #24]
 800c988:	69df      	ldr	r7, [r3, #28]
 800c98a:	fb21 220e 	smlad	r2, r1, lr, r2
 800c98e:	fb24 220a 	smlad	r2, r4, sl, r2
 800c992:	fb21 0106 	smlad	r1, r1, r6, r0
 800c996:	fb24 1407 	smlad	r4, r4, r7, r1
 800c99a:	f85c 1018 	ldr.w	r1, [ip, r8, lsl #1]
 800c99e:	fa2f fc81 	sxtb16	ip, r1
 800c9a2:	44c3      	add	fp, r8
 800c9a4:	fa2f f191 	sxtb16	r1, r1, ror #8
 800c9a8:	fb2c 9e0e 	smlad	lr, ip, lr, r9
 800c9ac:	fb2c 5606 	smlad	r6, ip, r6, r5
 800c9b0:	fb21 ea0a 	smlad	sl, r1, sl, lr
 800c9b4:	fb21 6707 	smlad	r7, r1, r7, r6
 800c9b8:	6a18      	ldr	r0, [r3, #32]
 800c9ba:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
 800c9be:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 800c9c0:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800c9c2:	fb2c 2200 	smlad	r2, ip, r0, r2
 800c9c6:	fb21 2209 	smlad	r2, r1, r9, r2
 800c9ca:	9203      	str	r2, [sp, #12]
 800c9cc:	fb2c 4406 	smlad	r4, ip, r6, r4
 800c9d0:	fb21 4105 	smlad	r1, r1, r5, r4
 800c9d4:	9c00      	ldr	r4, [sp, #0]
 800c9d6:	9a01      	ldr	r2, [sp, #4]
 800c9d8:	f854 4018 	ldr.w	r4, [r4, r8, lsl #1]
 800c9dc:	fa2f fe84 	sxtb16	lr, r4
 800c9e0:	eb0b 0c02 	add.w	ip, fp, r2
 800c9e4:	fa2f f494 	sxtb16	r4, r4, ror #8
 800c9e8:	fb2e aa00 	smlad	sl, lr, r0, sl
 800c9ec:	fb2e 7706 	smlad	r7, lr, r6, r7
 800c9f0:	fb24 a909 	smlad	r9, r4, r9, sl
 800c9f4:	fb24 7505 	smlad	r5, r4, r5, r7
 800c9f8:	eb0c 0408 	add.w	r4, ip, r8
 800c9fc:	f85b 0002 	ldr.w	r0, [fp, r2]
 800ca00:	9400      	str	r4, [sp, #0]
 800ca02:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800ca04:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 800ca08:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800ca0a:	f8d3 e03c 	ldr.w	lr, [r3, #60]	; 0x3c
 800ca0e:	fa2f f480 	sxtb16	r4, r0
 800ca12:	fa2f f090 	sxtb16	r0, r0, ror #8
 800ca16:	9a03      	ldr	r2, [sp, #12]
 800ca18:	fb24 2206 	smlad	r2, r4, r6, r2
 800ca1c:	fb20 220b 	smlad	r2, r0, fp, r2
 800ca20:	fb24 1107 	smlad	r1, r4, r7, r1
 800ca24:	fb20 100e 	smlad	r0, r0, lr, r1
 800ca28:	9900      	ldr	r1, [sp, #0]
 800ca2a:	f85c 4008 	ldr.w	r4, [ip, r8]
 800ca2e:	eb01 0a08 	add.w	sl, r1, r8
 800ca32:	fa2f f184 	sxtb16	r1, r4
 800ca36:	fa2f f494 	sxtb16	r4, r4, ror #8
 800ca3a:	fb21 9906 	smlad	r9, r1, r6, r9
 800ca3e:	fb21 5507 	smlad	r5, r1, r7, r5
 800ca42:	fb24 990b 	smlad	r9, r4, fp, r9
 800ca46:	fb24 550e 	smlad	r5, r4, lr, r5
 800ca4a:	f8d3 b040 	ldr.w	fp, [r3, #64]	; 0x40
 800ca4e:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 800ca50:	f8d3 e048 	ldr.w	lr, [r3, #72]	; 0x48
 800ca54:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 800ca56:	fb21 220b 	smlad	r2, r1, fp, r2
 800ca5a:	fb24 2206 	smlad	r2, r4, r6, r2
 800ca5e:	fb21 010e 	smlad	r1, r1, lr, r0
 800ca62:	fb24 1407 	smlad	r4, r4, r7, r1
 800ca66:	f85c c018 	ldr.w	ip, [ip, r8, lsl #1]
 800ca6a:	fa2f f08c 	sxtb16	r0, ip
 800ca6e:	44c2      	add	sl, r8
 800ca70:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 800ca74:	fb20 9b0b 	smlad	fp, r0, fp, r9
 800ca78:	fb20 5e0e 	smlad	lr, r0, lr, r5
 800ca7c:	fb2c b606 	smlad	r6, ip, r6, fp
 800ca80:	fb2c e507 	smlad	r5, ip, r7, lr
 800ca84:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ca86:	f8d3 9054 	ldr.w	r9, [r3, #84]	; 0x54
 800ca8a:	f8d3 e058 	ldr.w	lr, [r3, #88]	; 0x58
 800ca8e:	f8d3 b05c 	ldr.w	fp, [r3, #92]	; 0x5c
 800ca92:	fb20 2201 	smlad	r2, r0, r1, r2
 800ca96:	fb2c 2209 	smlad	r2, ip, r9, r2
 800ca9a:	fb20 440e 	smlad	r4, r0, lr, r4
 800ca9e:	fb2c 4c0b 	smlad	ip, ip, fp, r4
 800caa2:	9f01      	ldr	r7, [sp, #4]
 800caa4:	9800      	ldr	r0, [sp, #0]
 800caa6:	eb0a 0407 	add.w	r4, sl, r7
 800caaa:	f850 0018 	ldr.w	r0, [r0, r8, lsl #1]
 800caae:	9400      	str	r4, [sp, #0]
 800cab0:	fa2f f480 	sxtb16	r4, r0
 800cab4:	fa2f f090 	sxtb16	r0, r0, ror #8
 800cab8:	fb24 6601 	smlad	r6, r4, r1, r6
 800cabc:	fb24 5e0e 	smlad	lr, r4, lr, r5
 800cac0:	fb20 6509 	smlad	r5, r0, r9, r6
 800cac4:	fb20 ee0b 	smlad	lr, r0, fp, lr
 800cac8:	9800      	ldr	r0, [sp, #0]
 800caca:	f85a 1007 	ldr.w	r1, [sl, r7]
 800cace:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 800cad0:	f8d3 9064 	ldr.w	r9, [r3, #100]	; 0x64
 800cad4:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 800cad6:	f8d3 a06c 	ldr.w	sl, [r3, #108]	; 0x6c
 800cada:	4440      	add	r0, r8
 800cadc:	4607      	mov	r7, r0
 800cade:	fa2f f081 	sxtb16	r0, r1
 800cae2:	fa2f f191 	sxtb16	r1, r1, ror #8
 800cae6:	fb20 2206 	smlad	r2, r0, r6, r2
 800caea:	fb21 2209 	smlad	r2, r1, r9, r2
 800caee:	fb20 cc04 	smlad	ip, r0, r4, ip
 800caf2:	fb21 c10a 	smlad	r1, r1, sl, ip
 800caf6:	9800      	ldr	r0, [sp, #0]
 800caf8:	eb07 0c08 	add.w	ip, r7, r8
 800cafc:	f850 0008 	ldr.w	r0, [r0, r8]
 800cb00:	fa2f fb80 	sxtb16	fp, r0
 800cb04:	fa2f f090 	sxtb16	r0, r0, ror #8
 800cb08:	fb2b 5606 	smlad	r6, fp, r6, r5
 800cb0c:	fb2b ee04 	smlad	lr, fp, r4, lr
 800cb10:	fb20 6909 	smlad	r9, r0, r9, r6
 800cb14:	fb20 ea0a 	smlad	sl, r0, sl, lr
 800cb18:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
 800cb1c:	6f5e      	ldr	r6, [r3, #116]	; 0x74
 800cb1e:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800cb20:	6fdd      	ldr	r5, [r3, #124]	; 0x7c
 800cb22:	fb2b 220e 	smlad	r2, fp, lr, r2
 800cb26:	fb20 2206 	smlad	r2, r0, r6, r2
 800cb2a:	fb2b 1104 	smlad	r1, fp, r4, r1
 800cb2e:	fb20 1105 	smlad	r1, r0, r5, r1
 800cb32:	9800      	ldr	r0, [sp, #0]
 800cb34:	44c4      	add	ip, r8
 800cb36:	f850 0018 	ldr.w	r0, [r0, r8, lsl #1]
 800cb3a:	fa2f fb80 	sxtb16	fp, r0
 800cb3e:	fa2f f090 	sxtb16	r0, r0, ror #8
 800cb42:	fb2b 990e 	smlad	r9, fp, lr, r9
 800cb46:	fb2b a404 	smlad	r4, fp, r4, sl
 800cb4a:	fb20 9606 	smlad	r6, r0, r6, r9
 800cb4e:	fb20 4505 	smlad	r5, r0, r5, r4
 800cb52:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800cb56:	f8d3 9084 	ldr.w	r9, [r3, #132]	; 0x84
 800cb5a:	f8d3 a088 	ldr.w	sl, [r3, #136]	; 0x88
 800cb5e:	f8d3 e08c 	ldr.w	lr, [r3, #140]	; 0x8c
 800cb62:	3390      	adds	r3, #144	; 0x90
 800cb64:	fb2b 2204 	smlad	r2, fp, r4, r2
 800cb68:	fb20 2209 	smlad	r2, r0, r9, r2
 800cb6c:	fb2b 110a 	smlad	r1, fp, sl, r1
 800cb70:	fb20 100e 	smlad	r0, r0, lr, r1
 800cb74:	9905      	ldr	r1, [sp, #20]
 800cb76:	f857 7018 	ldr.w	r7, [r7, r8, lsl #1]
 800cb7a:	448c      	add	ip, r1
 800cb7c:	fa2f f187 	sxtb16	r1, r7
 800cb80:	fa2f f797 	sxtb16	r7, r7, ror #8
 800cb84:	fb21 6404 	smlad	r4, r1, r4, r6
 800cb88:	fb21 510a 	smlad	r1, r1, sl, r5
 800cb8c:	fb27 4909 	smlad	r9, r7, r9, r4
 800cb90:	fb27 170e 	smlad	r7, r7, lr, r1
 800cb94:	9902      	ldr	r1, [sp, #8]
 800cb96:	9c04      	ldr	r4, [sp, #16]
 800cb98:	3104      	adds	r1, #4
 800cb9a:	42a1      	cmp	r1, r4
 800cb9c:	9102      	str	r1, [sp, #8]
 800cb9e:	f6ff aec6 	blt.w	800c92e <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x23a>
 800cba2:	e9dd 3113 	ldrd	r3, r1, [sp, #76]	; 0x4c
 800cba6:	46be      	mov	lr, r7
 800cba8:	4598      	cmp	r8, r3
 800cbaa:	f300 815e 	bgt.w	800ce6a <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x776>
 800cbae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	f000 8124 	beq.w	800cdfe <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x70a>
 800cbb6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cbb8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800cbba:	9c07      	ldr	r4, [sp, #28]
 800cbbc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800cbbe:	0113      	lsls	r3, r2, #4
 800cbc0:	f04f 0c00 	mov.w	ip, #0
 800cbc4:	fb53 c305 	smmla	r3, r3, r5, ip
 800cbc8:	4133      	asrs	r3, r6
 800cbca:	440b      	add	r3, r1
 800cbcc:	105b      	asrs	r3, r3, #1
 800cbce:	4622      	mov	r2, r4
 800cbd0:	f303 0307 	ssat	r3, #8, r3
 800cbd4:	f802 3b02 	strb.w	r3, [r2], #2
 800cbd8:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800cbdc:	fb53 c305 	smmla	r3, r3, r5, ip
 800cbe0:	4133      	asrs	r3, r6
 800cbe2:	440b      	add	r3, r1
 800cbe4:	105b      	asrs	r3, r3, #1
 800cbe6:	f303 0307 	ssat	r3, #8, r3
 800cbea:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800cbec:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800cbee:	7063      	strb	r3, [r4, #1]
 800cbf0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800cbf2:	0103      	lsls	r3, r0, #4
 800cbf4:	fb53 c305 	smmla	r3, r3, r5, ip
 800cbf8:	4133      	asrs	r3, r6
 800cbfa:	440b      	add	r3, r1
 800cbfc:	4608      	mov	r0, r1
 800cbfe:	105b      	asrs	r3, r3, #1
 800cc00:	19e1      	adds	r1, r4, r7
 800cc02:	f303 0307 	ssat	r3, #8, r3
 800cc06:	55e3      	strb	r3, [r4, r7]
 800cc08:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800cc0c:	fb53 c305 	smmla	r3, r3, r5, ip
 800cc10:	4133      	asrs	r3, r6
 800cc12:	4403      	add	r3, r0
 800cc14:	105b      	asrs	r3, r3, #1
 800cc16:	f303 0307 	ssat	r3, #8, r3
 800cc1a:	704b      	strb	r3, [r1, #1]
 800cc1c:	9207      	str	r2, [sp, #28]
 800cc1e:	9a06      	ldr	r2, [sp, #24]
 800cc20:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cc22:	9b08      	ldr	r3, [sp, #32]
 800cc24:	440a      	add	r2, r1
 800cc26:	9206      	str	r2, [sp, #24]
 800cc28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc2a:	3302      	adds	r3, #2
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	9308      	str	r3, [sp, #32]
 800cc30:	f6ff ae70 	blt.w	800c914 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x220>
 800cc34:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	f040 81cc 	bne.w	800cfd4 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x8e0>
 800cc3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cc3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cc40:	4413      	add	r3, r2
 800cc42:	931d      	str	r3, [sp, #116]	; 0x74
 800cc44:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800cc46:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800cc48:	4413      	add	r3, r2
 800cc4a:	931a      	str	r3, [sp, #104]	; 0x68
 800cc4c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800cc4e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800cc50:	4413      	add	r3, r2
 800cc52:	931c      	str	r3, [sp, #112]	; 0x70
 800cc54:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cc56:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800cc58:	3301      	adds	r3, #1
 800cc5a:	9318      	str	r3, [sp, #96]	; 0x60
 800cc5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc5e:	4413      	add	r3, r2
 800cc60:	9317      	str	r3, [sp, #92]	; 0x5c
 800cc62:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800cc64:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800cc66:	4293      	cmp	r3, r2
 800cc68:	f73f ae3a 	bgt.w	800c8e0 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x1ec>
 800cc6c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800cc6e:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 800cc70:	4413      	add	r3, r2
 800cc72:	9334      	str	r3, [sp, #208]	; 0xd0
 800cc74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	f000 83e1 	beq.w	800d43e <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xd4a>
 800cc7c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800cc7e:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800cc80:	4413      	add	r3, r2
 800cc82:	9331      	str	r3, [sp, #196]	; 0xc4
 800cc84:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 800cc86:	b11b      	cbz	r3, 800cc90 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x59c>
 800cc88:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 800cc8a:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800cc8c:	4413      	add	r3, r2
 800cc8e:	935b      	str	r3, [sp, #364]	; 0x16c
 800cc90:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 800cc92:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800cc94:	3208      	adds	r2, #8
 800cc96:	9236      	str	r2, [sp, #216]	; 0xd8
 800cc98:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800cc9a:	3208      	adds	r2, #8
 800cc9c:	9235      	str	r2, [sp, #212]	; 0xd4
 800cc9e:	9a40      	ldr	r2, [sp, #256]	; 0x100
 800cca0:	3304      	adds	r3, #4
 800cca2:	429a      	cmp	r2, r3
 800cca4:	9337      	str	r3, [sp, #220]	; 0xdc
 800cca6:	f47f ade1 	bne.w	800c86c <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x178>
 800ccaa:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800ccac:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 800ccae:	fb02 3203 	mla	r2, r2, r3, r3
 800ccb2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800ccb4:	4413      	add	r3, r2
 800ccb6:	932f      	str	r3, [sp, #188]	; 0xbc
 800ccb8:	9b52      	ldr	r3, [sp, #328]	; 0x148
 800ccba:	f013 0301 	ands.w	r3, r3, #1
 800ccbe:	9305      	str	r3, [sp, #20]
 800ccc0:	f000 8099 	beq.w	800cdf6 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x702>
 800ccc4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	f000 8095 	beq.w	800cdf6 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x702>
 800cccc:	9b58      	ldr	r3, [sp, #352]	; 0x160
 800ccce:	9951      	ldr	r1, [sp, #324]	; 0x144
 800ccd0:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800ccd2:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 800ccd6:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 800ccda:	9e57      	ldr	r6, [sp, #348]	; 0x15c
 800ccdc:	9209      	str	r2, [sp, #36]	; 0x24
 800ccde:	f003 0302 	and.w	r3, r3, #2
 800cce2:	9301      	str	r3, [sp, #4]
 800cce4:	9b52      	ldr	r3, [sp, #328]	; 0x148
 800cce6:	9208      	str	r2, [sp, #32]
 800cce8:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
 800ccec:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800ccee:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ccf2:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 800ccf6:	9302      	str	r3, [sp, #8]
 800ccf8:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800ccfa:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 800ccfe:	9b52      	ldr	r3, [sp, #328]	; 0x148
 800cd00:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cd04:	3b01      	subs	r3, #1
 800cd06:	eb01 0a43 	add.w	sl, r1, r3, lsl #1
 800cd0a:	9924      	ldr	r1, [sp, #144]	; 0x90
 800cd0c:	1ccb      	adds	r3, r1, #3
 800cd0e:	18d3      	adds	r3, r2, r3
 800cd10:	9307      	str	r3, [sp, #28]
 800cd12:	9b52      	ldr	r3, [sp, #328]	; 0x148
 800cd14:	fb03 f301 	mul.w	r3, r3, r1
 800cd18:	930d      	str	r3, [sp, #52]	; 0x34
 800cd1a:	e9cd ba03 	strd	fp, sl, [sp, #12]
 800cd1e:	1c8b      	adds	r3, r1, #2
 800cd20:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd22:	2300      	movs	r3, #0
 800cd24:	9306      	str	r3, [sp, #24]
 800cd26:	9b01      	ldr	r3, [sp, #4]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	f000 83d6 	beq.w	800d4da <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xde6>
 800cd2e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	f000 83d7 	beq.w	800d4e4 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xdf0>
 800cd36:	9b05      	ldr	r3, [sp, #20]
 800cd38:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800cd3c:	930a      	str	r3, [sp, #40]	; 0x28
 800cd3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d042      	beq.n	800cdca <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x6d6>
 800cd44:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800cd46:	9a06      	ldr	r2, [sp, #24]
 800cd48:	f04f 0b00 	mov.w	fp, #0
 800cd4c:	189f      	adds	r7, r3, r2
 800cd4e:	9b02      	ldr	r3, [sp, #8]
 800cd50:	f8dd e0bc 	ldr.w	lr, [sp, #188]	; 0xbc
 800cd54:	6819      	ldr	r1, [r3, #0]
 800cd56:	eb07 0508 	add.w	r5, r7, r8
 800cd5a:	9500      	str	r5, [sp, #0]
 800cd5c:	f04f 0c03 	mov.w	ip, #3
 800cd60:	f1b8 0f00 	cmp.w	r8, #0
 800cd64:	463a      	mov	r2, r7
 800cd66:	dd0b      	ble.n	800cd80 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x68c>
 800cd68:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 800cd6c:	f912 3b01 	ldrsb.w	r3, [r2], #1
 800cd70:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 800cd74:	1b9b      	subs	r3, r3, r6
 800cd76:	42aa      	cmp	r2, r5
 800cd78:	fb04 1103 	mla	r1, r4, r3, r1
 800cd7c:	d1f6      	bne.n	800cd6c <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x678>
 800cd7e:	44c6      	add	lr, r8
 800cd80:	f1bc 0c01 	subs.w	ip, ip, #1
 800cd84:	444f      	add	r7, r9
 800cd86:	444d      	add	r5, r9
 800cd88:	d1ea      	bne.n	800cd60 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x66c>
 800cd8a:	9b04      	ldr	r3, [sp, #16]
 800cd8c:	9a03      	ldr	r2, [sp, #12]
 800cd8e:	f9b3 0000 	ldrsh.w	r0, [r3]
 800cd92:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 800cd94:	6812      	ldr	r2, [r2, #0]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	3002      	adds	r0, #2
 800cd9a:	0109      	lsls	r1, r1, #4
 800cd9c:	fb51 c102 	smmla	r1, r1, r2, ip
 800cda0:	4101      	asrs	r1, r0
 800cda2:	440b      	add	r3, r1
 800cda4:	105b      	asrs	r3, r3, #1
 800cda6:	f303 0307 	ssat	r3, #8, r3
 800cdaa:	f88a 3000 	strb.w	r3, [sl]
 800cdae:	9b01      	ldr	r3, [sp, #4]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	f000 838f 	beq.w	800d4d4 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xde0>
 800cdb6:	f10a 0a01 	add.w	sl, sl, #1
 800cdba:	9b00      	ldr	r3, [sp, #0]
 800cdbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cdbe:	1a9f      	subs	r7, r3, r2
 800cdc0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800cdc2:	f10b 0b01 	add.w	fp, fp, #1
 800cdc6:	455b      	cmp	r3, fp
 800cdc8:	d1c1      	bne.n	800cd4e <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x65a>
 800cdca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdcc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cdce:	4413      	add	r3, r2
 800cdd0:	9309      	str	r3, [sp, #36]	; 0x24
 800cdd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cdd4:	9b08      	ldr	r3, [sp, #32]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	9308      	str	r3, [sp, #32]
 800cdda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cddc:	9b07      	ldr	r3, [sp, #28]
 800cdde:	4413      	add	r3, r2
 800cde0:	9307      	str	r3, [sp, #28]
 800cde2:	9b05      	ldr	r3, [sp, #20]
 800cde4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cde6:	3301      	adds	r3, #1
 800cde8:	9305      	str	r3, [sp, #20]
 800cdea:	9b06      	ldr	r3, [sp, #24]
 800cdec:	444b      	add	r3, r9
 800cdee:	9306      	str	r3, [sp, #24]
 800cdf0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	dc97      	bgt.n	800cd26 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x632>
 800cdf6:	2000      	movs	r0, #0
 800cdf8:	b047      	add	sp, #284	; 0x11c
 800cdfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdfe:	461d      	mov	r5, r3
 800ce00:	0113      	lsls	r3, r2, #4
 800ce02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce04:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800ce06:	9c07      	ldr	r4, [sp, #28]
 800ce08:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800ce0a:	9952      	ldr	r1, [sp, #328]	; 0x148
 800ce0c:	fb53 5307 	smmla	r3, r3, r7, r5
 800ce10:	4113      	asrs	r3, r2
 800ce12:	9a52      	ldr	r2, [sp, #328]	; 0x148
 800ce14:	4433      	add	r3, r6
 800ce16:	105b      	asrs	r3, r3, #1
 800ce18:	1861      	adds	r1, r4, r1
 800ce1a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800ce1e:	f303 0307 	ssat	r3, #8, r3
 800ce22:	7023      	strb	r3, [r4, #0]
 800ce24:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800ce28:	fb53 5307 	smmla	r3, r3, r7, r5
 800ce2c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ce2e:	413b      	asrs	r3, r7
 800ce30:	4433      	add	r3, r6
 800ce32:	105b      	asrs	r3, r3, #1
 800ce34:	f303 0307 	ssat	r3, #8, r3
 800ce38:	9f52      	ldr	r7, [sp, #328]	; 0x148
 800ce3a:	55e3      	strb	r3, [r4, r7]
 800ce3c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ce3e:	0103      	lsls	r3, r0, #4
 800ce40:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ce42:	fb53 5300 	smmla	r3, r3, r0, r5
 800ce46:	413b      	asrs	r3, r7
 800ce48:	4433      	add	r3, r6
 800ce4a:	105b      	asrs	r3, r3, #1
 800ce4c:	f303 0307 	ssat	r3, #8, r3
 800ce50:	7063      	strb	r3, [r4, #1]
 800ce52:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800ce56:	fb53 5300 	smmla	r3, r3, r0, r5
 800ce5a:	413b      	asrs	r3, r7
 800ce5c:	4433      	add	r3, r6
 800ce5e:	105b      	asrs	r3, r3, #1
 800ce60:	f303 0307 	ssat	r3, #8, r3
 800ce64:	704b      	strb	r3, [r1, #1]
 800ce66:	9207      	str	r2, [sp, #28]
 800ce68:	e6d9      	b.n	800cc1e <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x52a>
 800ce6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	f43f ae9e 	beq.w	800cbae <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x4ba>
 800ce72:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800ce74:	190d      	adds	r5, r1, r4
 800ce76:	9c01      	ldr	r4, [sp, #4]
 800ce78:	f101 0324 	add.w	r3, r1, #36	; 0x24
 800ce7c:	4677      	mov	r7, lr
 800ce7e:	f91c 6008 	ldrsb.w	r6, [ip, r8]
 800ce82:	f933 bc24 	ldrsh.w	fp, [r3, #-36]
 800ce86:	f933 ac22 	ldrsh.w	sl, [r3, #-34]
 800ce8a:	f99c 1000 	ldrsb.w	r1, [ip]
 800ce8e:	fb1b 9906 	smlabb	r9, fp, r6, r9
 800ce92:	fb1b 2201 	smlabb	r2, fp, r1, r2
 800ce96:	f933 bc20 	ldrsh.w	fp, [r3, #-32]
 800ce9a:	fb1a 0101 	smlabb	r1, sl, r1, r0
 800ce9e:	f91c 0018 	ldrsb.w	r0, [ip, r8, lsl #1]
 800cea2:	fb1a 7706 	smlabb	r7, sl, r6, r7
 800cea6:	fb1b 2206 	smlabb	r2, fp, r6, r2
 800ceaa:	fb1b 9900 	smlabb	r9, fp, r0, r9
 800ceae:	eb0c 0a08 	add.w	sl, ip, r8
 800ceb2:	f933 bc1e 	ldrsh.w	fp, [r3, #-30]
 800ceb6:	f91a a018 	ldrsb.w	sl, [sl, r8, lsl #1]
 800ceba:	fb1b 1106 	smlabb	r1, fp, r6, r1
 800cebe:	fb1b 7700 	smlabb	r7, fp, r0, r7
 800cec2:	eb0c 0e48 	add.w	lr, ip, r8, lsl #1
 800cec6:	f933 bc1c 	ldrsh.w	fp, [r3, #-28]
 800ceca:	44c6      	add	lr, r8
 800cecc:	eb0e 0c04 	add.w	ip, lr, r4
 800ced0:	fb1b 2200 	smlabb	r2, fp, r0, r2
 800ced4:	fb1b 990a 	smlabb	r9, fp, sl, r9
 800ced8:	f933 bc1a 	ldrsh.w	fp, [r3, #-26]
 800cedc:	f91c 6008 	ldrsb.w	r6, [ip, r8]
 800cee0:	f91e e004 	ldrsb.w	lr, [lr, r4]
 800cee4:	fb1b 1000 	smlabb	r0, fp, r0, r1
 800cee8:	fb1b 770a 	smlabb	r7, fp, sl, r7
 800ceec:	f933 bc18 	ldrsh.w	fp, [r3, #-24]
 800cef0:	eb0c 0a48 	add.w	sl, ip, r8, lsl #1
 800cef4:	44c2      	add	sl, r8
 800cef6:	fb1b 220e 	smlabb	r2, fp, lr, r2
 800cefa:	fb1b 9906 	smlabb	r9, fp, r6, r9
 800cefe:	eb0c 0108 	add.w	r1, ip, r8
 800cf02:	f933 bc16 	ldrsh.w	fp, [r3, #-22]
 800cf06:	f91c c018 	ldrsb.w	ip, [ip, r8, lsl #1]
 800cf0a:	fb1b 0e0e 	smlabb	lr, fp, lr, r0
 800cf0e:	fb1b 7706 	smlabb	r7, fp, r6, r7
 800cf12:	f91a 0004 	ldrsb.w	r0, [sl, r4]
 800cf16:	f911 b018 	ldrsb.w	fp, [r1, r8, lsl #1]
 800cf1a:	eb0a 0104 	add.w	r1, sl, r4
 800cf1e:	f933 ac14 	ldrsh.w	sl, [r3, #-20]
 800cf22:	fb1a 2206 	smlabb	r2, sl, r6, r2
 800cf26:	fb1a 990c 	smlabb	r9, sl, ip, r9
 800cf2a:	f933 ac12 	ldrsh.w	sl, [r3, #-18]
 800cf2e:	fb1a ee06 	smlabb	lr, sl, r6, lr
 800cf32:	fb1a 770c 	smlabb	r7, sl, ip, r7
 800cf36:	f933 6c10 	ldrsh.w	r6, [r3, #-16]
 800cf3a:	f933 ac0e 	ldrsh.w	sl, [r3, #-14]
 800cf3e:	fb16 220c 	smlabb	r2, r6, ip, r2
 800cf42:	fb1a ee0c 	smlabb	lr, sl, ip, lr
 800cf46:	fb16 990b 	smlabb	r9, r6, fp, r9
 800cf4a:	fb1a 770b 	smlabb	r7, sl, fp, r7
 800cf4e:	f933 6c0c 	ldrsh.w	r6, [r3, #-12]
 800cf52:	f911 a008 	ldrsb.w	sl, [r1, r8]
 800cf56:	fb16 2200 	smlabb	r2, r6, r0, r2
 800cf5a:	fb16 990a 	smlabb	r9, r6, sl, r9
 800cf5e:	f933 6c0a 	ldrsh.w	r6, [r3, #-10]
 800cf62:	fb16 ee00 	smlabb	lr, r6, r0, lr
 800cf66:	eb01 0008 	add.w	r0, r1, r8
 800cf6a:	fb16 770a 	smlabb	r7, r6, sl, r7
 800cf6e:	eb01 0c48 	add.w	ip, r1, r8, lsl #1
 800cf72:	f910 6018 	ldrsb.w	r6, [r0, r8, lsl #1]
 800cf76:	f911 0018 	ldrsb.w	r0, [r1, r8, lsl #1]
 800cf7a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800cf7c:	44c4      	add	ip, r8
 800cf7e:	448c      	add	ip, r1
 800cf80:	f933 1c08 	ldrsh.w	r1, [r3, #-8]
 800cf84:	fb11 9900 	smlabb	r9, r1, r0, r9
 800cf88:	fb11 220a 	smlabb	r2, r1, sl, r2
 800cf8c:	f933 1c06 	ldrsh.w	r1, [r3, #-6]
 800cf90:	fb11 7700 	smlabb	r7, r1, r0, r7
 800cf94:	fb11 ee0a 	smlabb	lr, r1, sl, lr
 800cf98:	f933 1c04 	ldrsh.w	r1, [r3, #-4]
 800cf9c:	3324      	adds	r3, #36	; 0x24
 800cf9e:	fb11 2200 	smlabb	r2, r1, r0, r2
 800cfa2:	fb11 9906 	smlabb	r9, r1, r6, r9
 800cfa6:	f933 1c26 	ldrsh.w	r1, [r3, #-38]
 800cfaa:	429d      	cmp	r5, r3
 800cfac:	fb11 e000 	smlabb	r0, r1, r0, lr
 800cfb0:	fb11 7706 	smlabb	r7, r1, r6, r7
 800cfb4:	f47f af63 	bne.w	800ce7e <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x78a>
 800cfb8:	46be      	mov	lr, r7
 800cfba:	e5f8      	b.n	800cbae <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x4ba>
 800cfbc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800cfbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cfc0:	995b      	ldr	r1, [sp, #364]	; 0x16c
 800cfc2:	4686      	mov	lr, r0
 800cfc4:	4691      	mov	r9, r2
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	e5ee      	b.n	800cba8 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x4b4>
 800cfca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800cfcc:	9307      	str	r3, [sp, #28]
 800cfce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cfd0:	9325      	str	r3, [sp, #148]	; 0x94
 800cfd2:	e491      	b.n	800c8f8 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x204>
 800cfd4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800cfd6:	2b01      	cmp	r3, #1
 800cfd8:	f000 8110 	beq.w	800d1fc <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xb08>
 800cfdc:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800cfde:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800cfe0:	1a9b      	subs	r3, r3, r2
 800cfe2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cfe4:	4413      	add	r3, r2
 800cfe6:	9300      	str	r3, [sp, #0]
 800cfe8:	9b04      	ldr	r3, [sp, #16]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	f340 810c 	ble.w	800d208 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xb14>
 800cff0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800cff2:	9800      	ldr	r0, [sp, #0]
 800cff4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800cff8:	e9dd 650e 	ldrd	r6, r5, [sp, #56]	; 0x38
 800cffc:	eb00 0c03 	add.w	ip, r0, r3
 800d000:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 800d002:	f04f 0900 	mov.w	r9, #0
 800d006:	6802      	ldr	r2, [r0, #0]
 800d008:	fa2f f182 	sxtb16	r1, r2
 800d00c:	fa2f f292 	sxtb16	r2, r2, ror #8
 800d010:	681c      	ldr	r4, [r3, #0]
 800d012:	fb21 6604 	smlad	r6, r1, r4, r6
 800d016:	685c      	ldr	r4, [r3, #4]
 800d018:	fb22 6604 	smlad	r6, r2, r4, r6
 800d01c:	689c      	ldr	r4, [r3, #8]
 800d01e:	fb21 5504 	smlad	r5, r1, r4, r5
 800d022:	68d9      	ldr	r1, [r3, #12]
 800d024:	fb22 5501 	smlad	r5, r2, r1, r5
 800d028:	f850 2008 	ldr.w	r2, [r0, r8]
 800d02c:	fa2f f182 	sxtb16	r1, r2
 800d030:	fa2f f292 	sxtb16	r2, r2, ror #8
 800d034:	691c      	ldr	r4, [r3, #16]
 800d036:	fb21 6604 	smlad	r6, r1, r4, r6
 800d03a:	695c      	ldr	r4, [r3, #20]
 800d03c:	fb22 6404 	smlad	r4, r2, r4, r6
 800d040:	699e      	ldr	r6, [r3, #24]
 800d042:	fb21 5506 	smlad	r5, r1, r6, r5
 800d046:	69d9      	ldr	r1, [r3, #28]
 800d048:	fb22 5201 	smlad	r2, r2, r1, r5
 800d04c:	f850 100b 	ldr.w	r1, [r0, fp]
 800d050:	fa2f f581 	sxtb16	r5, r1
 800d054:	fa2f f191 	sxtb16	r1, r1, ror #8
 800d058:	6a1e      	ldr	r6, [r3, #32]
 800d05a:	fb25 4406 	smlad	r4, r5, r6, r4
 800d05e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800d060:	fb21 4406 	smlad	r4, r1, r6, r4
 800d064:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 800d066:	fb25 2206 	smlad	r2, r5, r6, r2
 800d06a:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800d06c:	fb21 2105 	smlad	r1, r1, r5, r2
 800d070:	f8dc 2000 	ldr.w	r2, [ip]
 800d074:	fa2f f582 	sxtb16	r5, r2
 800d078:	fa2f f292 	sxtb16	r2, r2, ror #8
 800d07c:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800d07e:	fb25 4406 	smlad	r4, r5, r6, r4
 800d082:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800d084:	fb22 4406 	smlad	r4, r2, r6, r4
 800d088:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 800d08a:	fb25 1106 	smlad	r1, r5, r6, r1
 800d08e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800d090:	fb22 1205 	smlad	r2, r2, r5, r1
 800d094:	9922      	ldr	r1, [sp, #136]	; 0x88
 800d096:	5809      	ldr	r1, [r1, r0]
 800d098:	fa2f f581 	sxtb16	r5, r1
 800d09c:	fa2f f191 	sxtb16	r1, r1, ror #8
 800d0a0:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 800d0a2:	fb25 4406 	smlad	r4, r5, r6, r4
 800d0a6:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 800d0a8:	fb21 4406 	smlad	r4, r1, r6, r4
 800d0ac:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 800d0ae:	fb25 2206 	smlad	r2, r5, r6, r2
 800d0b2:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800d0b4:	fb21 2105 	smlad	r1, r1, r5, r2
 800d0b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d0ba:	5812      	ldr	r2, [r2, r0]
 800d0bc:	fa2f f582 	sxtb16	r5, r2
 800d0c0:	fa2f f292 	sxtb16	r2, r2, ror #8
 800d0c4:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 800d0c6:	fb25 4406 	smlad	r4, r5, r6, r4
 800d0ca:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 800d0cc:	fb22 4406 	smlad	r4, r2, r6, r4
 800d0d0:	6d9e      	ldr	r6, [r3, #88]	; 0x58
 800d0d2:	fb25 1106 	smlad	r1, r5, r6, r1
 800d0d6:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 800d0d8:	fb22 1205 	smlad	r2, r2, r5, r1
 800d0dc:	9920      	ldr	r1, [sp, #128]	; 0x80
 800d0de:	5809      	ldr	r1, [r1, r0]
 800d0e0:	fa2f f581 	sxtb16	r5, r1
 800d0e4:	fa2f f191 	sxtb16	r1, r1, ror #8
 800d0e8:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 800d0ea:	fb25 4406 	smlad	r4, r5, r6, r4
 800d0ee:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 800d0f0:	fb21 4407 	smlad	r4, r1, r7, r4
 800d0f4:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 800d0f6:	fb25 2206 	smlad	r2, r5, r6, r2
 800d0fa:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 800d0fc:	fb21 2105 	smlad	r1, r1, r5, r2
 800d100:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d102:	f852 200c 	ldr.w	r2, [r2, ip]
 800d106:	fa2f f582 	sxtb16	r5, r2
 800d10a:	fa2f f292 	sxtb16	r2, r2, ror #8
 800d10e:	6f1f      	ldr	r7, [r3, #112]	; 0x70
 800d110:	fb25 4407 	smlad	r4, r5, r7, r4
 800d114:	6f5f      	ldr	r7, [r3, #116]	; 0x74
 800d116:	fb22 4707 	smlad	r7, r2, r7, r4
 800d11a:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800d11c:	fb25 1104 	smlad	r1, r5, r4, r1
 800d120:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800d122:	fb22 1204 	smlad	r2, r2, r4, r1
 800d126:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d128:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
 800d12c:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 800d130:	f8d3 a088 	ldr.w	sl, [r3, #136]	; 0x88
 800d134:	f8d3 e08c 	ldr.w	lr, [r3, #140]	; 0x8c
 800d138:	4408      	add	r0, r1
 800d13a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800d13c:	3390      	adds	r3, #144	; 0x90
 800d13e:	f851 400c 	ldr.w	r4, [r1, ip]
 800d142:	fa2f f184 	sxtb16	r1, r4
 800d146:	fa2f f494 	sxtb16	r4, r4, ror #8
 800d14a:	fb21 7606 	smlad	r6, r1, r6, r7
 800d14e:	fb24 6605 	smlad	r6, r4, r5, r6
 800d152:	fb21 220a 	smlad	r2, r1, sl, r2
 800d156:	fb24 250e 	smlad	r5, r4, lr, r2
 800d15a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800d15c:	4494      	add	ip, r2
 800d15e:	9a04      	ldr	r2, [sp, #16]
 800d160:	f109 0904 	add.w	r9, r9, #4
 800d164:	4591      	cmp	r9, r2
 800d166:	f6ff af4e 	blt.w	800d006 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x912>
 800d16a:	9b00      	ldr	r3, [sp, #0]
 800d16c:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 800d16e:	4413      	add	r3, r2
 800d170:	9300      	str	r3, [sp, #0]
 800d172:	e9dd 2313 	ldrd	r2, r3, [sp, #76]	; 0x4c
 800d176:	4590      	cmp	r8, r2
 800d178:	dc4c      	bgt.n	800d214 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xb20>
 800d17a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d17c:	b313      	cbz	r3, 800d1c4 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xad0>
 800d17e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800d180:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d182:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d184:	3202      	adds	r2, #2
 800d186:	0136      	lsls	r6, r6, #4
 800d188:	2400      	movs	r4, #0
 800d18a:	fb56 4303 	smmla	r3, r6, r3, r4
 800d18e:	4113      	asrs	r3, r2
 800d190:	440b      	add	r3, r1
 800d192:	105b      	asrs	r3, r3, #1
 800d194:	f303 0307 	ssat	r3, #8, r3
 800d198:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800d19a:	9807      	ldr	r0, [sp, #28]
 800d19c:	3202      	adds	r2, #2
 800d19e:	7003      	strb	r3, [r0, #0]
 800d1a0:	012d      	lsls	r5, r5, #4
 800d1a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d1a4:	fb55 4303 	smmla	r3, r5, r3, r4
 800d1a8:	4113      	asrs	r3, r2
 800d1aa:	440b      	add	r3, r1
 800d1ac:	105b      	asrs	r3, r3, #1
 800d1ae:	f303 0307 	ssat	r3, #8, r3
 800d1b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d1b4:	5483      	strb	r3, [r0, r2]
 800d1b6:	e541      	b.n	800cc3c <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x548>
 800d1b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d1ba:	9307      	str	r3, [sp, #28]
 800d1bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d1be:	9325      	str	r3, [sp, #148]	; 0x94
 800d1c0:	f7ff bb9a 	b.w	800c8f8 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x204>
 800d1c4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800d1c6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d1c8:	3202      	adds	r2, #2
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	0136      	lsls	r6, r6, #4
 800d1ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d1d0:	fb56 1303 	smmla	r3, r6, r3, r1
 800d1d4:	4113      	asrs	r3, r2
 800d1d6:	4403      	add	r3, r0
 800d1d8:	105b      	asrs	r3, r3, #1
 800d1da:	f303 0307 	ssat	r3, #8, r3
 800d1de:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800d1e0:	9c07      	ldr	r4, [sp, #28]
 800d1e2:	3202      	adds	r2, #2
 800d1e4:	7023      	strb	r3, [r4, #0]
 800d1e6:	012d      	lsls	r5, r5, #4
 800d1e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d1ea:	fb55 1303 	smmla	r3, r5, r3, r1
 800d1ee:	4113      	asrs	r3, r2
 800d1f0:	4403      	add	r3, r0
 800d1f2:	105b      	asrs	r3, r3, #1
 800d1f4:	f303 0307 	ssat	r3, #8, r3
 800d1f8:	7063      	strb	r3, [r4, #1]
 800d1fa:	e51f      	b.n	800cc3c <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x548>
 800d1fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d1fe:	9300      	str	r3, [sp, #0]
 800d200:	9b04      	ldr	r3, [sp, #16]
 800d202:	2b00      	cmp	r3, #0
 800d204:	f73f aef4 	bgt.w	800cff0 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x8fc>
 800d208:	2200      	movs	r2, #0
 800d20a:	4590      	cmp	r8, r2
 800d20c:	e9dd 650e 	ldrd	r6, r5, [sp, #56]	; 0x38
 800d210:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 800d212:	ddb2      	ble.n	800d17a <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xa86>
 800d214:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d216:	2a00      	cmp	r2, #0
 800d218:	d0af      	beq.n	800d17a <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xa86>
 800d21a:	9800      	ldr	r0, [sp, #0]
 800d21c:	8819      	ldrh	r1, [r3, #0]
 800d21e:	f990 2000 	ldrsb.w	r2, [r0]
 800d222:	fb11 6602 	smlabb	r6, r1, r2, r6
 800d226:	8859      	ldrh	r1, [r3, #2]
 800d228:	fb11 5c02 	smlabb	ip, r1, r2, r5
 800d22c:	f910 1008 	ldrsb.w	r1, [r0, r8]
 800d230:	f910 5018 	ldrsb.w	r5, [r0, r8, lsl #1]
 800d234:	eb00 0248 	add.w	r2, r0, r8, lsl #1
 800d238:	8898      	ldrh	r0, [r3, #4]
 800d23a:	fb10 6701 	smlabb	r7, r0, r1, r6
 800d23e:	88d8      	ldrh	r0, [r3, #6]
 800d240:	fb10 c001 	smlabb	r0, r0, r1, ip
 800d244:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800d246:	1854      	adds	r4, r2, r1
 800d248:	5656      	ldrsb	r6, [r2, r1]
 800d24a:	895a      	ldrh	r2, [r3, #10]
 800d24c:	8919      	ldrh	r1, [r3, #8]
 800d24e:	fb12 0205 	smlabb	r2, r2, r5, r0
 800d252:	8998      	ldrh	r0, [r3, #12]
 800d254:	fb11 7105 	smlabb	r1, r1, r5, r7
 800d258:	fb10 1706 	smlabb	r7, r0, r6, r1
 800d25c:	89d9      	ldrh	r1, [r3, #14]
 800d25e:	8a18      	ldrh	r0, [r3, #16]
 800d260:	f914 5018 	ldrsb.w	r5, [r4, r8, lsl #1]
 800d264:	fb11 2606 	smlabb	r6, r1, r6, r2
 800d268:	f914 1008 	ldrsb.w	r1, [r4, r8]
 800d26c:	fb10 7701 	smlabb	r7, r0, r1, r7
 800d270:	8a58      	ldrh	r0, [r3, #18]
 800d272:	eb04 0248 	add.w	r2, r4, r8, lsl #1
 800d276:	fb10 6001 	smlabb	r0, r0, r1, r6
 800d27a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800d27c:	1854      	adds	r4, r2, r1
 800d27e:	5656      	ldrsb	r6, [r2, r1]
 800d280:	8ada      	ldrh	r2, [r3, #22]
 800d282:	8a99      	ldrh	r1, [r3, #20]
 800d284:	fb12 0205 	smlabb	r2, r2, r5, r0
 800d288:	8b18      	ldrh	r0, [r3, #24]
 800d28a:	fb11 7105 	smlabb	r1, r1, r5, r7
 800d28e:	fb10 1006 	smlabb	r0, r0, r6, r1
 800d292:	8b59      	ldrh	r1, [r3, #26]
 800d294:	8c5d      	ldrh	r5, [r3, #34]	; 0x22
 800d296:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800d298:	fb11 2606 	smlabb	r6, r1, r6, r2
 800d29c:	f914 2008 	ldrsb.w	r2, [r4, r8]
 800d2a0:	8b99      	ldrh	r1, [r3, #28]
 800d2a2:	fb11 0002 	smlabb	r0, r1, r2, r0
 800d2a6:	8bd9      	ldrh	r1, [r3, #30]
 800d2a8:	fb11 6102 	smlabb	r1, r1, r2, r6
 800d2ac:	f914 2018 	ldrsb.w	r2, [r4, r8, lsl #1]
 800d2b0:	8c1e      	ldrh	r6, [r3, #32]
 800d2b2:	fb15 1502 	smlabb	r5, r5, r2, r1
 800d2b6:	fb16 0602 	smlabb	r6, r6, r2, r0
 800d2ba:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 800d2bc:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800d2c0:	2f01      	cmp	r7, #1
 800d2c2:	eb04 0002 	add.w	r0, r4, r2
 800d2c6:	f43f af58 	beq.w	800d17a <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xa86>
 800d2ca:	56a2      	ldrsb	r2, [r4, r2]
 800d2cc:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800d2ce:	fb11 6602 	smlabb	r6, r1, r2, r6
 800d2d2:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
 800d2d4:	fb11 5c02 	smlabb	ip, r1, r2, r5
 800d2d8:	f910 1008 	ldrsb.w	r1, [r0, r8]
 800d2dc:	f910 5018 	ldrsb.w	r5, [r0, r8, lsl #1]
 800d2e0:	eb00 0248 	add.w	r2, r0, r8, lsl #1
 800d2e4:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 800d2e6:	fb10 6701 	smlabb	r7, r0, r1, r6
 800d2ea:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
 800d2ec:	fb10 c001 	smlabb	r0, r0, r1, ip
 800d2f0:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800d2f2:	1854      	adds	r4, r2, r1
 800d2f4:	5656      	ldrsb	r6, [r2, r1]
 800d2f6:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800d2f8:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 800d2fa:	fb12 0205 	smlabb	r2, r2, r5, r0
 800d2fe:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 800d300:	fb11 7105 	smlabb	r1, r1, r5, r7
 800d304:	fb10 1706 	smlabb	r7, r0, r6, r1
 800d308:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 800d30a:	8e98      	ldrh	r0, [r3, #52]	; 0x34
 800d30c:	f914 5018 	ldrsb.w	r5, [r4, r8, lsl #1]
 800d310:	fb11 2606 	smlabb	r6, r1, r6, r2
 800d314:	f914 1008 	ldrsb.w	r1, [r4, r8]
 800d318:	fb10 7701 	smlabb	r7, r0, r1, r7
 800d31c:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
 800d31e:	eb04 0248 	add.w	r2, r4, r8, lsl #1
 800d322:	fb10 6001 	smlabb	r0, r0, r1, r6
 800d326:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800d328:	1854      	adds	r4, r2, r1
 800d32a:	5656      	ldrsb	r6, [r2, r1]
 800d32c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800d32e:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 800d330:	fb12 0205 	smlabb	r2, r2, r5, r0
 800d334:	8f98      	ldrh	r0, [r3, #60]	; 0x3c
 800d336:	fb11 7105 	smlabb	r1, r1, r5, r7
 800d33a:	fb10 1006 	smlabb	r0, r0, r6, r1
 800d33e:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 800d340:	f8b3 5046 	ldrh.w	r5, [r3, #70]	; 0x46
 800d344:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800d346:	fb11 2606 	smlabb	r6, r1, r6, r2
 800d34a:	f914 2008 	ldrsb.w	r2, [r4, r8]
 800d34e:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 800d352:	fb11 0002 	smlabb	r0, r1, r2, r0
 800d356:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 800d35a:	fb11 6102 	smlabb	r1, r1, r2, r6
 800d35e:	f914 2018 	ldrsb.w	r2, [r4, r8, lsl #1]
 800d362:	f8b3 6044 	ldrh.w	r6, [r3, #68]	; 0x44
 800d366:	fb15 1502 	smlabb	r5, r5, r2, r1
 800d36a:	fb16 0602 	smlabb	r6, r6, r2, r0
 800d36e:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 800d370:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800d374:	2f03      	cmp	r7, #3
 800d376:	eb04 0002 	add.w	r0, r4, r2
 800d37a:	f47f aefe 	bne.w	800d17a <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xa86>
 800d37e:	56a2      	ldrsb	r2, [r4, r2]
 800d380:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 800d384:	fb11 6602 	smlabb	r6, r1, r2, r6
 800d388:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 800d38c:	fb11 5c02 	smlabb	ip, r1, r2, r5
 800d390:	f910 1008 	ldrsb.w	r1, [r0, r8]
 800d394:	f910 5018 	ldrsb.w	r5, [r0, r8, lsl #1]
 800d398:	eb00 0248 	add.w	r2, r0, r8, lsl #1
 800d39c:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 800d3a0:	fb10 6701 	smlabb	r7, r0, r1, r6
 800d3a4:	f8b3 004e 	ldrh.w	r0, [r3, #78]	; 0x4e
 800d3a8:	fb10 c001 	smlabb	r0, r0, r1, ip
 800d3ac:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800d3ae:	1854      	adds	r4, r2, r1
 800d3b0:	5656      	ldrsb	r6, [r2, r1]
 800d3b2:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 800d3b6:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 800d3ba:	fb12 0205 	smlabb	r2, r2, r5, r0
 800d3be:	f8b3 0054 	ldrh.w	r0, [r3, #84]	; 0x54
 800d3c2:	fb11 7105 	smlabb	r1, r1, r5, r7
 800d3c6:	fb10 1506 	smlabb	r5, r0, r6, r1
 800d3ca:	f8b3 1056 	ldrh.w	r1, [r3, #86]	; 0x56
 800d3ce:	f8b3 0058 	ldrh.w	r0, [r3, #88]	; 0x58
 800d3d2:	fb11 2606 	smlabb	r6, r1, r6, r2
 800d3d6:	f914 1008 	ldrsb.w	r1, [r4, r8]
 800d3da:	fb10 5701 	smlabb	r7, r0, r1, r5
 800d3de:	f8b3 005a 	ldrh.w	r0, [r3, #90]	; 0x5a
 800d3e2:	eb04 0248 	add.w	r2, r4, r8, lsl #1
 800d3e6:	fb10 6001 	smlabb	r0, r0, r1, r6
 800d3ea:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800d3ec:	f914 4018 	ldrsb.w	r4, [r4, r8, lsl #1]
 800d3f0:	5655      	ldrsb	r5, [r2, r1]
 800d3f2:	1856      	adds	r6, r2, r1
 800d3f4:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800d3f8:	f8b3 105c 	ldrh.w	r1, [r3, #92]	; 0x5c
 800d3fc:	f916 c018 	ldrsb.w	ip, [r6, r8, lsl #1]
 800d400:	fb12 0204 	smlabb	r2, r2, r4, r0
 800d404:	f8b3 0060 	ldrh.w	r0, [r3, #96]	; 0x60
 800d408:	fb11 7104 	smlabb	r1, r1, r4, r7
 800d40c:	fb10 1005 	smlabb	r0, r0, r5, r1
 800d410:	f8b3 1062 	ldrh.w	r1, [r3, #98]	; 0x62
 800d414:	fb11 2405 	smlabb	r4, r1, r5, r2
 800d418:	f916 2008 	ldrsb.w	r2, [r6, r8]
 800d41c:	f8b3 5066 	ldrh.w	r5, [r3, #102]	; 0x66
 800d420:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 800d424:	f8b3 6068 	ldrh.w	r6, [r3, #104]	; 0x68
 800d428:	fb11 0102 	smlabb	r1, r1, r2, r0
 800d42c:	fb15 4202 	smlabb	r2, r5, r2, r4
 800d430:	f8b3 506a 	ldrh.w	r5, [r3, #106]	; 0x6a
 800d434:	fb16 160c 	smlabb	r6, r6, ip, r1
 800d438:	fb15 250c 	smlabb	r5, r5, ip, r2
 800d43c:	e69d      	b.n	800d17a <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xa86>
 800d43e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800d440:	3302      	adds	r3, #2
 800d442:	9331      	str	r3, [sp, #196]	; 0xc4
 800d444:	e41e      	b.n	800cc84 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x590>
 800d446:	9838      	ldr	r0, [sp, #224]	; 0xe0
 800d448:	2800      	cmp	r0, #0
 800d44a:	d050      	beq.n	800d4ee <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xdfa>
 800d44c:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
 800d44e:	2300      	movs	r3, #0
 800d450:	f102 0110 	add.w	r1, r2, #16
 800d454:	461a      	mov	r2, r3
 800d456:	f931 4c10 	ldrsh.w	r4, [r1, #-16]
 800d45a:	1b12      	subs	r2, r2, r4
 800d45c:	f931 4c08 	ldrsh.w	r4, [r1, #-8]
 800d460:	1b1b      	subs	r3, r3, r4
 800d462:	f931 4c0e 	ldrsh.w	r4, [r1, #-14]
 800d466:	1b12      	subs	r2, r2, r4
 800d468:	f931 4c06 	ldrsh.w	r4, [r1, #-6]
 800d46c:	1b1b      	subs	r3, r3, r4
 800d46e:	f931 4c0c 	ldrsh.w	r4, [r1, #-12]
 800d472:	1b12      	subs	r2, r2, r4
 800d474:	f931 4c04 	ldrsh.w	r4, [r1, #-4]
 800d478:	1b1b      	subs	r3, r3, r4
 800d47a:	f931 4c0a 	ldrsh.w	r4, [r1, #-10]
 800d47e:	1b12      	subs	r2, r2, r4
 800d480:	f931 4c02 	ldrsh.w	r4, [r1, #-2]
 800d484:	3801      	subs	r0, #1
 800d486:	eba3 0304 	sub.w	r3, r3, r4
 800d48a:	f101 0110 	add.w	r1, r1, #16
 800d48e:	d1e2      	bne.n	800d456 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xd62>
 800d490:	995b      	ldr	r1, [sp, #364]	; 0x16c
 800d492:	9843      	ldr	r0, [sp, #268]	; 0x10c
 800d494:	4401      	add	r1, r0
 800d496:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d498:	b158      	cbz	r0, 800d4b2 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xdbe>
 800d49a:	3104      	adds	r1, #4
 800d49c:	f931 4c04 	ldrsh.w	r4, [r1, #-4]
 800d4a0:	1b12      	subs	r2, r2, r4
 800d4a2:	f931 4c02 	ldrsh.w	r4, [r1, #-2]
 800d4a6:	3801      	subs	r0, #1
 800d4a8:	eba3 0304 	sub.w	r3, r3, r4
 800d4ac:	f101 0104 	add.w	r1, r1, #4
 800d4b0:	d1f4      	bne.n	800d49c <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xda8>
 800d4b2:	9957      	ldr	r1, [sp, #348]	; 0x15c
 800d4b4:	fb01 f202 	mul.w	r2, r1, r2
 800d4b8:	fb01 f303 	mul.w	r3, r1, r3
 800d4bc:	f7ff b9ef 	b.w	800c89e <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x1aa>
 800d4c0:	9834      	ldr	r0, [sp, #208]	; 0xd0
 800d4c2:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800d4c4:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
 800d4c6:	4601      	mov	r1, r0
 800d4c8:	4643      	mov	r3, r8
 800d4ca:	4421      	add	r1, r4
 800d4cc:	f7fe f97c 	bl	800b7c8 <weights_2channels_prefetch_3x3>
 800d4d0:	f7ff b9e0 	b.w	800c894 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x1a0>
 800d4d4:	9b52      	ldr	r3, [sp, #328]	; 0x148
 800d4d6:	449a      	add	sl, r3
 800d4d8:	e46f      	b.n	800cdba <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x6c6>
 800d4da:	9b05      	ldr	r3, [sp, #20]
 800d4dc:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d4e0:	930a      	str	r3, [sp, #40]	; 0x28
 800d4e2:	e42c      	b.n	800cd3e <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x64a>
 800d4e4:	9b05      	ldr	r3, [sp, #20]
 800d4e6:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d4ea:	930a      	str	r3, [sp, #40]	; 0x28
 800d4ec:	e427      	b.n	800cd3e <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x64a>
 800d4ee:	995b      	ldr	r1, [sp, #364]	; 0x16c
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	e7cf      	b.n	800d496 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xda2>
 800d4f6:	bf00      	nop

0800d4f8 <st_int8_avepool>:
 800d4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4fc:	b097      	sub	sp, #92	; 0x5c
 800d4fe:	4699      	mov	r9, r3
 800d500:	9100      	str	r1, [sp, #0]
 800d502:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 800d506:	9111      	str	r1, [sp, #68]	; 0x44
 800d508:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 800d50c:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 800d510:	9112      	str	r1, [sp, #72]	; 0x48
 800d512:	f8bd 109c 	ldrh.w	r1, [sp, #156]	; 0x9c
 800d516:	930f      	str	r3, [sp, #60]	; 0x3c
 800d518:	4692      	mov	sl, r2
 800d51a:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 800d51e:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	; 0xa0
 800d522:	9105      	str	r1, [sp, #20]
 800d524:	f99d 10a4 	ldrsb.w	r1, [sp, #164]	; 0xa4
 800d528:	f8bd 4080 	ldrh.w	r4, [sp, #128]	; 0x80
 800d52c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d52e:	9103      	str	r1, [sp, #12]
 800d530:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 800d534:	f99d 10a8 	ldrsb.w	r1, [sp, #168]	; 0xa8
 800d538:	9310      	str	r3, [sp, #64]	; 0x40
 800d53a:	eec0 6a20 	vdiv.f32	s13, s0, s1
 800d53e:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 800d542:	9404      	str	r4, [sp, #16]
 800d544:	9213      	str	r2, [sp, #76]	; 0x4c
 800d546:	9102      	str	r1, [sp, #8]
 800d548:	2a00      	cmp	r2, #0
 800d54a:	f000 80aa 	beq.w	800d6a2 <st_int8_avepool+0x1aa>
 800d54e:	2c01      	cmp	r4, #1
 800d550:	4683      	mov	fp, r0
 800d552:	f040 80dd 	bne.w	800d710 <st_int8_avepool+0x218>
 800d556:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d558:	ed9f 6a6b 	vldr	s12, [pc, #428]	; 800d708 <st_int8_avepool+0x210>
 800d55c:	eddf 3a6b 	vldr	s7, [pc, #428]	; 800d70c <st_int8_avepool+0x214>
 800d560:	1ad3      	subs	r3, r2, r3
 800d562:	b29b      	uxth	r3, r3
 800d564:	9301      	str	r3, [sp, #4]
 800d566:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
 800d56a:	1ad2      	subs	r2, r2, r3
 800d56c:	425b      	negs	r3, r3
 800d56e:	b29b      	uxth	r3, r3
 800d570:	920d      	str	r2, [sp, #52]	; 0x34
 800d572:	2200      	movs	r2, #0
 800d574:	930c      	str	r3, [sp, #48]	; 0x30
 800d576:	4613      	mov	r3, r2
 800d578:	9905      	ldr	r1, [sp, #20]
 800d57a:	2900      	cmp	r1, #0
 800d57c:	f000 80c0 	beq.w	800d700 <st_int8_avepool+0x208>
 800d580:	b292      	uxth	r2, r2
 800d582:	9207      	str	r2, [sp, #28]
 800d584:	9a05      	ldr	r2, [sp, #20]
 800d586:	eddd 7a03 	vldr	s15, [sp, #12]
 800d58a:	fb03 f302 	mul.w	r3, r3, r2
 800d58e:	9308      	str	r3, [sp, #32]
 800d590:	9a01      	ldr	r2, [sp, #4]
 800d592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d594:	1ad3      	subs	r3, r2, r3
 800d596:	b21b      	sxth	r3, r3
 800d598:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 800d59c:	eddd 7a02 	vldr	s15, [sp, #8]
 800d5a0:	930a      	str	r3, [sp, #40]	; 0x28
 800d5a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5a4:	9304      	str	r3, [sp, #16]
 800d5a6:	2100      	movs	r1, #0
 800d5a8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800d5ac:	9306      	str	r3, [sp, #24]
 800d5ae:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800d5b2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800d5b6:	b216      	sxth	r6, r2
 800d5b8:	4688      	mov	r8, r1
 800d5ba:	b28b      	uxth	r3, r1
 800d5bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5be:	9309      	str	r3, [sp, #36]	; 0x24
 800d5c0:	9b08      	ldr	r3, [sp, #32]
 800d5c2:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 800d5c6:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 800d5ca:	42b2      	cmp	r2, r6
 800d5cc:	4498      	add	r8, r3
 800d5ce:	f280 8083 	bge.w	800d6d8 <st_int8_avepool+0x1e0>
 800d5d2:	2700      	movs	r7, #0
 800d5d4:	46bc      	mov	ip, r7
 800d5d6:	ea01 70e1 	and.w	r0, r1, r1, asr #31
 800d5da:	428c      	cmp	r4, r1
 800d5dc:	da13      	bge.n	800d606 <st_int8_avepool+0x10e>
 800d5de:	2a00      	cmp	r2, #0
 800d5e0:	fb0a f502 	mul.w	r5, sl, r2
 800d5e4:	db0f      	blt.n	800d606 <st_int8_avepool+0x10e>
 800d5e6:	454a      	cmp	r2, r9
 800d5e8:	da0d      	bge.n	800d606 <st_int8_avepool+0x10e>
 800d5ea:	2c00      	cmp	r4, #0
 800d5ec:	4623      	mov	r3, r4
 800d5ee:	db5b      	blt.n	800d6a8 <st_int8_avepool+0x1b0>
 800d5f0:	445d      	add	r5, fp
 800d5f2:	459a      	cmp	sl, r3
 800d5f4:	dd03      	ble.n	800d5fe <st_int8_avepool+0x106>
 800d5f6:	f915 e003 	ldrsb.w	lr, [r5, r3]
 800d5fa:	3701      	adds	r7, #1
 800d5fc:	44f4      	add	ip, lr
 800d5fe:	3301      	adds	r3, #1
 800d600:	b21b      	sxth	r3, r3
 800d602:	428b      	cmp	r3, r1
 800d604:	dbf5      	blt.n	800d5f2 <st_int8_avepool+0xfa>
 800d606:	3201      	adds	r2, #1
 800d608:	b212      	sxth	r2, r2
 800d60a:	42b2      	cmp	r2, r6
 800d60c:	dbe5      	blt.n	800d5da <st_int8_avepool+0xe2>
 800d60e:	eeb4 0a60 	vcmp.f32	s0, s1
 800d612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d616:	d103      	bne.n	800d620 <st_int8_avepool+0x128>
 800d618:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d04e      	beq.n	800d6be <st_int8_avepool+0x1c6>
 800d620:	ee07 ca90 	vmov	s15, ip
 800d624:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 800d628:	ee07 7a90 	vmov	s15, r7
 800d62c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d630:	ee84 7a27 	vdiv.f32	s14, s8, s15
 800d634:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d638:	eef0 7a45 	vmov.f32	s15, s10
 800d63c:	eee7 7a26 	vfma.f32	s15, s14, s13
 800d640:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d648:	bfb4      	ite	lt
 800d64a:	eeb0 7a46 	vmovlt.f32	s14, s12
 800d64e:	eeb0 7a65 	vmovge.f32	s14, s11
 800d652:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d656:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d65a:	ee17 3a90 	vmov	r3, s15
 800d65e:	f303 0307 	ssat	r3, #8, r3
 800d662:	9a00      	ldr	r2, [sp, #0]
 800d664:	f802 3008 	strb.w	r3, [r2, r8]
 800d668:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d66a:	9b06      	ldr	r3, [sp, #24]
 800d66c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d66e:	9a04      	ldr	r2, [sp, #16]
 800d670:	4403      	add	r3, r0
 800d672:	b29b      	uxth	r3, r3
 800d674:	3101      	adds	r1, #1
 800d676:	9306      	str	r3, [sp, #24]
 800d678:	9b05      	ldr	r3, [sp, #20]
 800d67a:	b209      	sxth	r1, r1
 800d67c:	4402      	add	r2, r0
 800d67e:	b292      	uxth	r2, r2
 800d680:	4299      	cmp	r1, r3
 800d682:	9204      	str	r2, [sp, #16]
 800d684:	4688      	mov	r8, r1
 800d686:	db98      	blt.n	800d5ba <st_int8_avepool+0xc2>
 800d688:	9b01      	ldr	r3, [sp, #4]
 800d68a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d68c:	9a07      	ldr	r2, [sp, #28]
 800d68e:	440b      	add	r3, r1
 800d690:	3201      	adds	r2, #1
 800d692:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d694:	b212      	sxth	r2, r2
 800d696:	b29b      	uxth	r3, r3
 800d698:	4291      	cmp	r1, r2
 800d69a:	9301      	str	r3, [sp, #4]
 800d69c:	4613      	mov	r3, r2
 800d69e:	f73f af6b 	bgt.w	800d578 <st_int8_avepool+0x80>
 800d6a2:	b017      	add	sp, #92	; 0x5c
 800d6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6a8:	3301      	adds	r3, #1
 800d6aa:	b21b      	sxth	r3, r3
 800d6ac:	4298      	cmp	r0, r3
 800d6ae:	dcfb      	bgt.n	800d6a8 <st_int8_avepool+0x1b0>
 800d6b0:	4299      	cmp	r1, r3
 800d6b2:	dc9d      	bgt.n	800d5f0 <st_int8_avepool+0xf8>
 800d6b4:	3201      	adds	r2, #1
 800d6b6:	b212      	sxth	r2, r2
 800d6b8:	42b2      	cmp	r2, r6
 800d6ba:	db8e      	blt.n	800d5da <st_int8_avepool+0xe2>
 800d6bc:	e7a7      	b.n	800d60e <st_int8_avepool+0x116>
 800d6be:	f1bc 0f00 	cmp.w	ip, #0
 800d6c2:	db16      	blt.n	800d6f2 <st_int8_avepool+0x1fa>
 800d6c4:	eb0c 0c67 	add.w	ip, ip, r7, asr #1
 800d6c8:	fbbc fcf7 	udiv	ip, ip, r7
 800d6cc:	f30c 0c07 	ssat	ip, #8, ip
 800d6d0:	9b00      	ldr	r3, [sp, #0]
 800d6d2:	f803 c008 	strb.w	ip, [r3, r8]
 800d6d6:	e7c7      	b.n	800d668 <st_int8_avepool+0x170>
 800d6d8:	eeb4 0a60 	vcmp.f32	s0, s1
 800d6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6e0:	d104      	bne.n	800d6ec <st_int8_avepool+0x1f4>
 800d6e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6e6:	4293      	cmp	r3, r2
 800d6e8:	f000 8103 	beq.w	800d8f2 <st_int8_avepool+0x3fa>
 800d6ec:	eeb0 7a63 	vmov.f32	s14, s7
 800d6f0:	e7a0      	b.n	800d634 <st_int8_avepool+0x13c>
 800d6f2:	eb07 73d7 	add.w	r3, r7, r7, lsr #31
 800d6f6:	ebac 0363 	sub.w	r3, ip, r3, asr #1
 800d6fa:	fb93 fcf7 	sdiv	ip, r3, r7
 800d6fe:	e7e5      	b.n	800d6cc <st_int8_avepool+0x1d4>
 800d700:	b293      	uxth	r3, r2
 800d702:	9307      	str	r3, [sp, #28]
 800d704:	e7c0      	b.n	800d688 <st_int8_avepool+0x190>
 800d706:	bf00      	nop
 800d708:	befffffc 	.word	0xbefffffc
 800d70c:	7fc00000 	.word	0x7fc00000
 800d710:	425b      	negs	r3, r3
 800d712:	9905      	ldr	r1, [sp, #20]
 800d714:	ed1f 5a04 	vldr	s10, [pc, #-16]	; 800d708 <st_int8_avepool+0x210>
 800d718:	ed5f 5a04 	vldr	s11, [pc, #-16]	; 800d70c <st_int8_avepool+0x214>
 800d71c:	9014      	str	r0, [sp, #80]	; 0x50
 800d71e:	b29b      	uxth	r3, r3
 800d720:	2200      	movs	r2, #0
 800d722:	930a      	str	r3, [sp, #40]	; 0x28
 800d724:	46d3      	mov	fp, sl
 800d726:	4613      	mov	r3, r2
 800d728:	46ca      	mov	sl, r9
 800d72a:	2900      	cmp	r1, #0
 800d72c:	f000 80b9 	beq.w	800d8a2 <st_int8_avepool+0x3aa>
 800d730:	b292      	uxth	r2, r2
 800d732:	920e      	str	r2, [sp, #56]	; 0x38
 800d734:	9a05      	ldr	r2, [sp, #20]
 800d736:	eddd 7a03 	vldr	s15, [sp, #12]
 800d73a:	fb03 f302 	mul.w	r3, r3, r2
 800d73e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d740:	9315      	str	r3, [sp, #84]	; 0x54
 800d742:	4253      	negs	r3, r2
 800d744:	b29b      	uxth	r3, r3
 800d746:	9308      	str	r3, [sp, #32]
 800d748:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d74a:	1a9b      	subs	r3, r3, r2
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	9309      	str	r3, [sp, #36]	; 0x24
 800d750:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d754:	4413      	add	r3, r2
 800d756:	fa0f f983 	sxth.w	r9, r3
 800d75a:	f04f 0800 	mov.w	r8, #0
 800d75e:	b213      	sxth	r3, r2
 800d760:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 800d764:	930c      	str	r3, [sp, #48]	; 0x30
 800d766:	4643      	mov	r3, r8
 800d768:	9a04      	ldr	r2, [sp, #16]
 800d76a:	2a00      	cmp	r2, #0
 800d76c:	f000 80bd 	beq.w	800d8ea <st_int8_avepool+0x3f2>
 800d770:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d772:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 800d776:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 800d77a:	4413      	add	r3, r2
 800d77c:	fa1f f288 	uxth.w	r2, r8
 800d780:	920d      	str	r2, [sp, #52]	; 0x34
 800d782:	9a04      	ldr	r2, [sp, #16]
 800d784:	f04f 0e00 	mov.w	lr, #0
 800d788:	fb02 f303 	mul.w	r3, r2, r3
 800d78c:	9307      	str	r3, [sp, #28]
 800d78e:	46f0      	mov	r8, lr
 800d790:	ea01 70e1 	and.w	r0, r1, r1, asr #31
 800d794:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d796:	454a      	cmp	r2, r9
 800d798:	f280 8094 	bge.w	800d8c4 <st_int8_avepool+0x3cc>
 800d79c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d79e:	2500      	movs	r5, #0
 800d7a0:	4443      	add	r3, r8
 800d7a2:	462e      	mov	r6, r5
 800d7a4:	9306      	str	r3, [sp, #24]
 800d7a6:	428c      	cmp	r4, r1
 800d7a8:	da1a      	bge.n	800d7e0 <st_int8_avepool+0x2e8>
 800d7aa:	2a00      	cmp	r2, #0
 800d7ac:	fb02 f70b 	mul.w	r7, r2, fp
 800d7b0:	db16      	blt.n	800d7e0 <st_int8_avepool+0x2e8>
 800d7b2:	4552      	cmp	r2, sl
 800d7b4:	da14      	bge.n	800d7e0 <st_int8_avepool+0x2e8>
 800d7b6:	2c00      	cmp	r4, #0
 800d7b8:	4623      	mov	r3, r4
 800d7ba:	db75      	blt.n	800d8a8 <st_int8_avepool+0x3b0>
 800d7bc:	9701      	str	r7, [sp, #4]
 800d7be:	459b      	cmp	fp, r3
 800d7c0:	dd0a      	ble.n	800d7d8 <st_int8_avepool+0x2e0>
 800d7c2:	9f01      	ldr	r7, [sp, #4]
 800d7c4:	eb07 0c03 	add.w	ip, r7, r3
 800d7c8:	9f04      	ldr	r7, [sp, #16]
 800d7ca:	fb07 fc0c 	mul.w	ip, r7, ip
 800d7ce:	9f06      	ldr	r7, [sp, #24]
 800d7d0:	f917 c00c 	ldrsb.w	ip, [r7, ip]
 800d7d4:	3501      	adds	r5, #1
 800d7d6:	4466      	add	r6, ip
 800d7d8:	3301      	adds	r3, #1
 800d7da:	b21b      	sxth	r3, r3
 800d7dc:	428b      	cmp	r3, r1
 800d7de:	dbee      	blt.n	800d7be <st_int8_avepool+0x2c6>
 800d7e0:	3201      	adds	r2, #1
 800d7e2:	b212      	sxth	r2, r2
 800d7e4:	454a      	cmp	r2, r9
 800d7e6:	dbde      	blt.n	800d7a6 <st_int8_avepool+0x2ae>
 800d7e8:	eeb4 0a60 	vcmp.f32	s0, s1
 800d7ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7f0:	d103      	bne.n	800d7fa <st_int8_avepool+0x302>
 800d7f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	d05d      	beq.n	800d8b6 <st_int8_avepool+0x3be>
 800d7fa:	ee07 6a90 	vmov	s15, r6
 800d7fe:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800d802:	ee07 5a90 	vmov	s15, r5
 800d806:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d80a:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800d80e:	ed9d 7a02 	vldr	s14, [sp, #8]
 800d812:	ee37 6ae4 	vsub.f32	s12, s15, s9
 800d816:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d81a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d81e:	eea6 7a26 	vfma.f32	s14, s12, s13
 800d822:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800d826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d82a:	bfb8      	it	lt
 800d82c:	eef0 7a45 	vmovlt.f32	s15, s10
 800d830:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d834:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d838:	ee17 3a90 	vmov	r3, s15
 800d83c:	f303 0307 	ssat	r3, #8, r3
 800d840:	9a00      	ldr	r2, [sp, #0]
 800d842:	9d07      	ldr	r5, [sp, #28]
 800d844:	442a      	add	r2, r5
 800d846:	f10e 0e01 	add.w	lr, lr, #1
 800d84a:	f802 3008 	strb.w	r3, [r2, r8]
 800d84e:	9b04      	ldr	r3, [sp, #16]
 800d850:	fa0f fe8e 	sxth.w	lr, lr
 800d854:	459e      	cmp	lr, r3
 800d856:	46f0      	mov	r8, lr
 800d858:	db9c      	blt.n	800d794 <st_int8_avepool+0x29c>
 800d85a:	9a08      	ldr	r2, [sp, #32]
 800d85c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d85e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d860:	440a      	add	r2, r1
 800d862:	f103 0801 	add.w	r8, r3, #1
 800d866:	b292      	uxth	r2, r2
 800d868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d86a:	9208      	str	r2, [sp, #32]
 800d86c:	9a05      	ldr	r2, [sp, #20]
 800d86e:	fa0f f888 	sxth.w	r8, r8
 800d872:	440b      	add	r3, r1
 800d874:	b29b      	uxth	r3, r3
 800d876:	4590      	cmp	r8, r2
 800d878:	9309      	str	r3, [sp, #36]	; 0x24
 800d87a:	4643      	mov	r3, r8
 800d87c:	f6ff af74 	blt.w	800d768 <st_int8_avepool+0x270>
 800d880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d882:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d884:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d886:	440b      	add	r3, r1
 800d888:	3201      	adds	r2, #1
 800d88a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d88c:	b212      	sxth	r2, r2
 800d88e:	b29b      	uxth	r3, r3
 800d890:	4291      	cmp	r1, r2
 800d892:	930a      	str	r3, [sp, #40]	; 0x28
 800d894:	4613      	mov	r3, r2
 800d896:	f77f af04 	ble.w	800d6a2 <st_int8_avepool+0x1aa>
 800d89a:	9905      	ldr	r1, [sp, #20]
 800d89c:	2900      	cmp	r1, #0
 800d89e:	f47f af47 	bne.w	800d730 <st_int8_avepool+0x238>
 800d8a2:	b293      	uxth	r3, r2
 800d8a4:	930e      	str	r3, [sp, #56]	; 0x38
 800d8a6:	e7eb      	b.n	800d880 <st_int8_avepool+0x388>
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	b21b      	sxth	r3, r3
 800d8ac:	4298      	cmp	r0, r3
 800d8ae:	dcfb      	bgt.n	800d8a8 <st_int8_avepool+0x3b0>
 800d8b0:	428b      	cmp	r3, r1
 800d8b2:	db83      	blt.n	800d7bc <st_int8_avepool+0x2c4>
 800d8b4:	e794      	b.n	800d7e0 <st_int8_avepool+0x2e8>
 800d8b6:	2e00      	cmp	r6, #0
 800d8b8:	db10      	blt.n	800d8dc <st_int8_avepool+0x3e4>
 800d8ba:	eb06 0665 	add.w	r6, r6, r5, asr #1
 800d8be:	fbb6 f3f5 	udiv	r3, r6, r5
 800d8c2:	e7bb      	b.n	800d83c <st_int8_avepool+0x344>
 800d8c4:	eeb4 0a60 	vcmp.f32	s0, s1
 800d8c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8cc:	d103      	bne.n	800d8d6 <st_int8_avepool+0x3de>
 800d8ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	d00d      	beq.n	800d8f2 <st_int8_avepool+0x3fa>
 800d8d6:	eef0 7a65 	vmov.f32	s15, s11
 800d8da:	e798      	b.n	800d80e <st_int8_avepool+0x316>
 800d8dc:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
 800d8e0:	eba6 0363 	sub.w	r3, r6, r3, asr #1
 800d8e4:	fb93 f3f5 	sdiv	r3, r3, r5
 800d8e8:	e7a8      	b.n	800d83c <st_int8_avepool+0x344>
 800d8ea:	fa1f f388 	uxth.w	r3, r8
 800d8ee:	930d      	str	r3, [sp, #52]	; 0x34
 800d8f0:	e7b3      	b.n	800d85a <st_int8_avepool+0x362>
 800d8f2:	deff      	udf	#255	; 0xff

0800d8f4 <arm_fill_q15>:
 800d8f4:	b510      	push	{r4, lr}
 800d8f6:	eac0 4400 	pkhbt	r4, r0, r0, lsl #16
 800d8fa:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 800d8fe:	d013      	beq.n	800d928 <arm_fill_q15+0x34>
 800d900:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 800d904:	2b09      	cmp	r3, #9
 800d906:	460b      	mov	r3, r1
 800d908:	d919      	bls.n	800d93e <arm_fill_q15+0x4a>
 800d90a:	f011 0f07 	tst.w	r1, #7
 800d90e:	d116      	bne.n	800d93e <arm_fill_q15+0x4a>
 800d910:	f04f 0c00 	mov.w	ip, #0
 800d914:	f10c 0c01 	add.w	ip, ip, #1
 800d918:	45e6      	cmp	lr, ip
 800d91a:	e9c3 4400 	strd	r4, r4, [r3]
 800d91e:	f103 0308 	add.w	r3, r3, #8
 800d922:	d1f7      	bne.n	800d914 <arm_fill_q15+0x20>
 800d924:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 800d928:	f012 0203 	ands.w	r2, r2, #3
 800d92c:	d006      	beq.n	800d93c <arm_fill_q15+0x48>
 800d92e:	3a01      	subs	r2, #1
 800d930:	8008      	strh	r0, [r1, #0]
 800d932:	d003      	beq.n	800d93c <arm_fill_q15+0x48>
 800d934:	2a01      	cmp	r2, #1
 800d936:	8048      	strh	r0, [r1, #2]
 800d938:	bf18      	it	ne
 800d93a:	8088      	strhne	r0, [r1, #4]
 800d93c:	bd10      	pop	{r4, pc}
 800d93e:	46f4      	mov	ip, lr
 800d940:	f1bc 0c01 	subs.w	ip, ip, #1
 800d944:	601c      	str	r4, [r3, #0]
 800d946:	605c      	str	r4, [r3, #4]
 800d948:	f103 0308 	add.w	r3, r3, #8
 800d94c:	d1f8      	bne.n	800d940 <arm_fill_q15+0x4c>
 800d94e:	e7e9      	b.n	800d924 <arm_fill_q15+0x30>

0800d950 <arm_float_to_q15>:
 800d950:	b530      	push	{r4, r5, lr}
 800d952:	0895      	lsrs	r5, r2, #2
 800d954:	d072      	beq.n	800da3c <arm_float_to_q15+0xec>
 800d956:	eddf 5a60 	vldr	s11, [pc, #384]	; 800dad8 <arm_float_to_q15+0x188>
 800d95a:	f100 0c10 	add.w	ip, r0, #16
 800d95e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d962:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 800d966:	f101 0e08 	add.w	lr, r1, #8
 800d96a:	462c      	mov	r4, r5
 800d96c:	ed5c 7a04 	vldr	s15, [ip, #-16]
 800d970:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800d974:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800d978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d97c:	bfd4      	ite	le
 800d97e:	eef0 7a45 	vmovle.f32	s15, s10
 800d982:	eef0 7a47 	vmovgt.f32	s15, s14
 800d986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d98a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d98e:	ee17 3a90 	vmov	r3, s15
 800d992:	f303 030f 	ssat	r3, #16, r3
 800d996:	f82e 3c08 	strh.w	r3, [lr, #-8]
 800d99a:	ed5c 7a03 	vldr	s15, [ip, #-12]
 800d99e:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800d9a2:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800d9a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9aa:	bfd4      	ite	le
 800d9ac:	eef0 7a45 	vmovle.f32	s15, s10
 800d9b0:	eef0 7a47 	vmovgt.f32	s15, s14
 800d9b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d9bc:	ee17 3a90 	vmov	r3, s15
 800d9c0:	f303 030f 	ssat	r3, #16, r3
 800d9c4:	f82e 3c06 	strh.w	r3, [lr, #-6]
 800d9c8:	ed5c 7a02 	vldr	s15, [ip, #-8]
 800d9cc:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800d9d0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800d9d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9d8:	bfd4      	ite	le
 800d9da:	eef0 7a45 	vmovle.f32	s15, s10
 800d9de:	eef0 7a47 	vmovgt.f32	s15, s14
 800d9e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d9ea:	ee17 3a90 	vmov	r3, s15
 800d9ee:	f303 030f 	ssat	r3, #16, r3
 800d9f2:	f82e 3c04 	strh.w	r3, [lr, #-4]
 800d9f6:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800d9fa:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d9fe:	ee77 6a87 	vadd.f32	s13, s15, s14
 800da02:	ee37 6ac7 	vsub.f32	s12, s15, s14
 800da06:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800da0a:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 800da0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800da12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da16:	bfcc      	ite	gt
 800da18:	ee16 3a90 	vmovgt	r3, s13
 800da1c:	ee16 3a10 	vmovle	r3, s12
 800da20:	f303 030f 	ssat	r3, #16, r3
 800da24:	3c01      	subs	r4, #1
 800da26:	f82e 3c02 	strh.w	r3, [lr, #-2]
 800da2a:	f10c 0c10 	add.w	ip, ip, #16
 800da2e:	f10e 0e08 	add.w	lr, lr, #8
 800da32:	d19b      	bne.n	800d96c <arm_float_to_q15+0x1c>
 800da34:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800da38:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800da3c:	f012 0203 	ands.w	r2, r2, #3
 800da40:	d049      	beq.n	800dad6 <arm_float_to_q15+0x186>
 800da42:	edd0 7a00 	vldr	s15, [r0]
 800da46:	eddf 5a24 	vldr	s11, [pc, #144]	; 800dad8 <arm_float_to_q15+0x188>
 800da4a:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800da4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800da52:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800da56:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 800da5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da5e:	bfd4      	ite	le
 800da60:	eef0 7a46 	vmovle.f32	s15, s12
 800da64:	eef0 7a47 	vmovgt.f32	s15, s14
 800da68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da70:	ee17 3a90 	vmov	r3, s15
 800da74:	f303 030f 	ssat	r3, #16, r3
 800da78:	3a01      	subs	r2, #1
 800da7a:	800b      	strh	r3, [r1, #0]
 800da7c:	d02b      	beq.n	800dad6 <arm_float_to_q15+0x186>
 800da7e:	edd0 7a01 	vldr	s15, [r0, #4]
 800da82:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800da86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800da8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da8e:	bfd4      	ite	le
 800da90:	eef0 6a46 	vmovle.f32	s13, s12
 800da94:	eef0 6a47 	vmovgt.f32	s13, s14
 800da98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800daa0:	ee17 3a90 	vmov	r3, s15
 800daa4:	f303 030f 	ssat	r3, #16, r3
 800daa8:	2a01      	cmp	r2, #1
 800daaa:	804b      	strh	r3, [r1, #2]
 800daac:	d013      	beq.n	800dad6 <arm_float_to_q15+0x186>
 800daae:	edd0 7a02 	vldr	s15, [r0, #8]
 800dab2:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800dab6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800daba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dabe:	bfd8      	it	le
 800dac0:	eeb0 7a46 	vmovle.f32	s14, s12
 800dac4:	ee37 7a25 	vadd.f32	s14, s14, s11
 800dac8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800dacc:	ee17 3a10 	vmov	r3, s14
 800dad0:	f303 030f 	ssat	r3, #16, r3
 800dad4:	808b      	strh	r3, [r1, #4]
 800dad6:	bd30      	pop	{r4, r5, pc}
 800dad8:	47000000 	.word	0x47000000

0800dadc <arm_float_to_q7>:
 800dadc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dade:	0895      	lsrs	r5, r2, #2
 800dae0:	d078      	beq.n	800dbd4 <arm_float_to_q7+0xf8>
 800dae2:	f101 0c04 	add.w	ip, r1, #4
 800dae6:	eddf 5a6b 	vldr	s11, [pc, #428]	; 800dc94 <arm_float_to_q7+0x1b8>
 800daea:	f100 0e10 	add.w	lr, r0, #16
 800daee:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800daf2:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 800daf6:	00ae      	lsls	r6, r5, #2
 800daf8:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 800dafc:	ed5e 7a04 	vldr	s15, [lr, #-16]
 800db00:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800db04:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800db08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db0c:	bfd4      	ite	le
 800db0e:	eef0 7a45 	vmovle.f32	s15, s10
 800db12:	eef0 7a46 	vmovgt.f32	s15, s12
 800db16:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db1e:	ee17 3a90 	vmov	r3, s15
 800db22:	b21b      	sxth	r3, r3
 800db24:	f303 0307 	ssat	r3, #8, r3
 800db28:	f80c 3c04 	strb.w	r3, [ip, #-4]
 800db2c:	ed5e 7a03 	vldr	s15, [lr, #-12]
 800db30:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800db34:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800db38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db3c:	bfd4      	ite	le
 800db3e:	eef0 7a45 	vmovle.f32	s15, s10
 800db42:	eef0 7a46 	vmovgt.f32	s15, s12
 800db46:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db4e:	ee17 3a90 	vmov	r3, s15
 800db52:	b21b      	sxth	r3, r3
 800db54:	f303 0307 	ssat	r3, #8, r3
 800db58:	f80c 3c03 	strb.w	r3, [ip, #-3]
 800db5c:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800db60:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800db64:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800db68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db6c:	bfd4      	ite	le
 800db6e:	eef0 7a45 	vmovle.f32	s15, s10
 800db72:	eef0 7a46 	vmovgt.f32	s15, s12
 800db76:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db7e:	ee17 3a90 	vmov	r3, s15
 800db82:	b21b      	sxth	r3, r3
 800db84:	f303 0307 	ssat	r3, #8, r3
 800db88:	f80c 3c02 	strb.w	r3, [ip, #-2]
 800db8c:	ed5e 6a01 	vldr	s13, [lr, #-4]
 800db90:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800db94:	ee76 7a86 	vadd.f32	s15, s13, s12
 800db98:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800db9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dba0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800dba4:	ee17 3a90 	vmov	r3, s15
 800dba8:	ee17 7a10 	vmov	r7, s14
 800dbac:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800dbb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbb4:	b21b      	sxth	r3, r3
 800dbb6:	b23f      	sxth	r7, r7
 800dbb8:	dd5f      	ble.n	800dc7a <arm_float_to_q7+0x19e>
 800dbba:	f303 0307 	ssat	r3, #8, r3
 800dbbe:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800dbc2:	f10c 0c04 	add.w	ip, ip, #4
 800dbc6:	4564      	cmp	r4, ip
 800dbc8:	f10e 0e10 	add.w	lr, lr, #16
 800dbcc:	d196      	bne.n	800dafc <arm_float_to_q7+0x20>
 800dbce:	4431      	add	r1, r6
 800dbd0:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800dbd4:	f012 0203 	ands.w	r2, r2, #3
 800dbd8:	d04e      	beq.n	800dc78 <arm_float_to_q7+0x19c>
 800dbda:	edd0 7a00 	vldr	s15, [r0]
 800dbde:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 800dc94 <arm_float_to_q7+0x1b8>
 800dbe2:	ee67 6a85 	vmul.f32	s13, s15, s10
 800dbe6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dbea:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800dbee:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 800dbf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbf6:	bfd4      	ite	le
 800dbf8:	eef0 7a65 	vmovle.f32	s15, s11
 800dbfc:	eef0 7a47 	vmovgt.f32	s15, s14
 800dc00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc08:	ee17 3a90 	vmov	r3, s15
 800dc0c:	b21b      	sxth	r3, r3
 800dc0e:	f303 0307 	ssat	r3, #8, r3
 800dc12:	3a01      	subs	r2, #1
 800dc14:	700b      	strb	r3, [r1, #0]
 800dc16:	d02f      	beq.n	800dc78 <arm_float_to_q7+0x19c>
 800dc18:	edd0 6a01 	vldr	s13, [r0, #4]
 800dc1c:	ee26 6a85 	vmul.f32	s12, s13, s10
 800dc20:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800dc24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc28:	bfd4      	ite	le
 800dc2a:	eef0 6a65 	vmovle.f32	s13, s11
 800dc2e:	eef0 6a47 	vmovgt.f32	s13, s14
 800dc32:	ee76 6a86 	vadd.f32	s13, s13, s12
 800dc36:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800dc3a:	ee16 3a90 	vmov	r3, s13
 800dc3e:	b21b      	sxth	r3, r3
 800dc40:	f303 0307 	ssat	r3, #8, r3
 800dc44:	2a01      	cmp	r2, #1
 800dc46:	704b      	strb	r3, [r1, #1]
 800dc48:	d016      	beq.n	800dc78 <arm_float_to_q7+0x19c>
 800dc4a:	edd0 7a02 	vldr	s15, [r0, #8]
 800dc4e:	ee27 5a85 	vmul.f32	s10, s15, s10
 800dc52:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 800dc56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc5a:	bfd4      	ite	le
 800dc5c:	eef0 7a65 	vmovle.f32	s15, s11
 800dc60:	eef0 7a47 	vmovgt.f32	s15, s14
 800dc64:	ee77 7a85 	vadd.f32	s15, s15, s10
 800dc68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc6c:	ee17 3a90 	vmov	r3, s15
 800dc70:	b21b      	sxth	r3, r3
 800dc72:	f303 0307 	ssat	r3, #8, r3
 800dc76:	708b      	strb	r3, [r1, #2]
 800dc78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc7a:	f307 0707 	ssat	r7, #8, r7
 800dc7e:	f80c 7c01 	strb.w	r7, [ip, #-1]
 800dc82:	f10c 0c04 	add.w	ip, ip, #4
 800dc86:	45a4      	cmp	ip, r4
 800dc88:	f10e 0e10 	add.w	lr, lr, #16
 800dc8c:	f47f af36 	bne.w	800dafc <arm_float_to_q7+0x20>
 800dc90:	e79d      	b.n	800dbce <arm_float_to_q7+0xf2>
 800dc92:	bf00      	nop
 800dc94:	43000000 	.word	0x43000000

0800dc98 <arm_q15_to_float>:
 800dc98:	b530      	push	{r4, r5, lr}
 800dc9a:	0894      	lsrs	r4, r2, #2
 800dc9c:	d038      	beq.n	800dd10 <arm_q15_to_float+0x78>
 800dc9e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800dd60 <arm_q15_to_float+0xc8>
 800dca2:	f100 0c08 	add.w	ip, r0, #8
 800dca6:	f101 0310 	add.w	r3, r1, #16
 800dcaa:	46a6      	mov	lr, r4
 800dcac:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 800dcb0:	ee07 5a90 	vmov	s15, r5
 800dcb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dcb8:	3310      	adds	r3, #16
 800dcba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dcbe:	f10c 0c08 	add.w	ip, ip, #8
 800dcc2:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 800dcc6:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 800dcca:	ee07 5a90 	vmov	s15, r5
 800dcce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dcd2:	f1be 0e01 	subs.w	lr, lr, #1
 800dcd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dcda:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 800dcde:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 800dce2:	ee07 5a90 	vmov	s15, r5
 800dce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dcea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dcee:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 800dcf2:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 800dcf6:	ee07 5a90 	vmov	s15, r5
 800dcfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dcfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd02:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800dd06:	d1d1      	bne.n	800dcac <arm_q15_to_float+0x14>
 800dd08:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800dd0c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800dd10:	f012 0203 	ands.w	r2, r2, #3
 800dd14:	d023      	beq.n	800dd5e <arm_q15_to_float+0xc6>
 800dd16:	f9b0 3000 	ldrsh.w	r3, [r0]
 800dd1a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800dd60 <arm_q15_to_float+0xc8>
 800dd1e:	ee07 3a90 	vmov	s15, r3
 800dd22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd26:	3a01      	subs	r2, #1
 800dd28:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd2c:	edc1 7a00 	vstr	s15, [r1]
 800dd30:	d015      	beq.n	800dd5e <arm_q15_to_float+0xc6>
 800dd32:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800dd36:	ee07 3a90 	vmov	s15, r3
 800dd3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd3e:	2a01      	cmp	r2, #1
 800dd40:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd44:	edc1 7a01 	vstr	s15, [r1, #4]
 800dd48:	d009      	beq.n	800dd5e <arm_q15_to_float+0xc6>
 800dd4a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800dd4e:	ee07 3a90 	vmov	s15, r3
 800dd52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd56:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd5a:	edc1 7a02 	vstr	s15, [r1, #8]
 800dd5e:	bd30      	pop	{r4, r5, pc}
 800dd60:	38000000 	.word	0x38000000

0800dd64 <arm_q7_to_float>:
 800dd64:	b530      	push	{r4, r5, lr}
 800dd66:	0894      	lsrs	r4, r2, #2
 800dd68:	d037      	beq.n	800ddda <arm_q7_to_float+0x76>
 800dd6a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800de2c <arm_q7_to_float+0xc8>
 800dd6e:	1d03      	adds	r3, r0, #4
 800dd70:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800dd74:	f101 0010 	add.w	r0, r1, #16
 800dd78:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 800dd7c:	ee07 ea90 	vmov	s15, lr
 800dd80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd84:	469e      	mov	lr, r3
 800dd86:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd8a:	3304      	adds	r3, #4
 800dd8c:	ed40 7a04 	vstr	s15, [r0, #-16]
 800dd90:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 800dd94:	ee07 5a90 	vmov	s15, r5
 800dd98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd9c:	45e6      	cmp	lr, ip
 800dd9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dda2:	f100 0010 	add.w	r0, r0, #16
 800dda6:	ed40 7a07 	vstr	s15, [r0, #-28]	; 0xffffffe4
 800ddaa:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 800ddae:	ee07 5a90 	vmov	s15, r5
 800ddb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ddb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ddba:	ed40 7a06 	vstr	s15, [r0, #-24]	; 0xffffffe8
 800ddbe:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 800ddc2:	ee07 5a90 	vmov	s15, r5
 800ddc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ddca:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ddce:	ed40 7a05 	vstr	s15, [r0, #-20]	; 0xffffffec
 800ddd2:	d1d1      	bne.n	800dd78 <arm_q7_to_float+0x14>
 800ddd4:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800ddd8:	4660      	mov	r0, ip
 800ddda:	f012 0203 	ands.w	r2, r2, #3
 800ddde:	d023      	beq.n	800de28 <arm_q7_to_float+0xc4>
 800dde0:	f990 3000 	ldrsb.w	r3, [r0]
 800dde4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800de2c <arm_q7_to_float+0xc8>
 800dde8:	ee07 3a90 	vmov	s15, r3
 800ddec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ddf0:	3a01      	subs	r2, #1
 800ddf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ddf6:	edc1 7a00 	vstr	s15, [r1]
 800ddfa:	d015      	beq.n	800de28 <arm_q7_to_float+0xc4>
 800ddfc:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800de00:	ee07 3a90 	vmov	s15, r3
 800de04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de08:	2a01      	cmp	r2, #1
 800de0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800de0e:	edc1 7a01 	vstr	s15, [r1, #4]
 800de12:	d009      	beq.n	800de28 <arm_q7_to_float+0xc4>
 800de14:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800de18:	ee07 3a90 	vmov	s15, r3
 800de1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de20:	ee67 7a87 	vmul.f32	s15, s15, s14
 800de24:	edc1 7a02 	vstr	s15, [r1, #8]
 800de28:	bd30      	pop	{r4, r5, pc}
 800de2a:	bf00      	nop
 800de2c:	3c000000 	.word	0x3c000000

0800de30 <ai_array_to_buffer_fmt>:
 800de30:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800de34:	2b02      	cmp	r3, #2
 800de36:	d050      	beq.n	800deda <ai_array_to_buffer_fmt+0xaa>
 800de38:	4b2a      	ldr	r3, [pc, #168]	; (800dee4 <ai_array_to_buffer_fmt+0xb4>)
 800de3a:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800de3e:	429a      	cmp	r2, r3
 800de40:	d00b      	beq.n	800de5a <ai_array_to_buffer_fmt+0x2a>
 800de42:	dc1c      	bgt.n	800de7e <ai_array_to_buffer_fmt+0x4e>
 800de44:	4b28      	ldr	r3, [pc, #160]	; (800dee8 <ai_array_to_buffer_fmt+0xb8>)
 800de46:	429a      	cmp	r2, r3
 800de48:	d007      	beq.n	800de5a <ai_array_to_buffer_fmt+0x2a>
 800de4a:	dd0b      	ble.n	800de64 <ai_array_to_buffer_fmt+0x34>
 800de4c:	4b27      	ldr	r3, [pc, #156]	; (800deec <ai_array_to_buffer_fmt+0xbc>)
 800de4e:	429a      	cmp	r2, r3
 800de50:	d003      	beq.n	800de5a <ai_array_to_buffer_fmt+0x2a>
 800de52:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800de56:	429a      	cmp	r2, r3
 800de58:	d131      	bne.n	800debe <ai_array_to_buffer_fmt+0x8e>
 800de5a:	4613      	mov	r3, r2
 800de5c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800de60:	4318      	orrs	r0, r3
 800de62:	4770      	bx	lr
 800de64:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800de68:	429a      	cmp	r2, r3
 800de6a:	d0f6      	beq.n	800de5a <ai_array_to_buffer_fmt+0x2a>
 800de6c:	dd2c      	ble.n	800dec8 <ai_array_to_buffer_fmt+0x98>
 800de6e:	4b20      	ldr	r3, [pc, #128]	; (800def0 <ai_array_to_buffer_fmt+0xc0>)
 800de70:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800de74:	429a      	cmp	r2, r3
 800de76:	bf18      	it	ne
 800de78:	2340      	movne	r3, #64	; 0x40
 800de7a:	4318      	orrs	r0, r3
 800de7c:	4770      	bx	lr
 800de7e:	4b1d      	ldr	r3, [pc, #116]	; (800def4 <ai_array_to_buffer_fmt+0xc4>)
 800de80:	429a      	cmp	r2, r3
 800de82:	d0ea      	beq.n	800de5a <ai_array_to_buffer_fmt+0x2a>
 800de84:	dd0e      	ble.n	800dea4 <ai_array_to_buffer_fmt+0x74>
 800de86:	4b1c      	ldr	r3, [pc, #112]	; (800def8 <ai_array_to_buffer_fmt+0xc8>)
 800de88:	429a      	cmp	r2, r3
 800de8a:	d0e6      	beq.n	800de5a <ai_array_to_buffer_fmt+0x2a>
 800de8c:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800de90:	429a      	cmp	r2, r3
 800de92:	d0e2      	beq.n	800de5a <ai_array_to_buffer_fmt+0x2a>
 800de94:	4b19      	ldr	r3, [pc, #100]	; (800defc <ai_array_to_buffer_fmt+0xcc>)
 800de96:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800de9a:	429a      	cmp	r2, r3
 800de9c:	bf18      	it	ne
 800de9e:	2340      	movne	r3, #64	; 0x40
 800dea0:	4318      	orrs	r0, r3
 800dea2:	4770      	bx	lr
 800dea4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d0d6      	beq.n	800de5a <ai_array_to_buffer_fmt+0x2a>
 800deac:	3307      	adds	r3, #7
 800deae:	429a      	cmp	r2, r3
 800deb0:	d0d3      	beq.n	800de5a <ai_array_to_buffer_fmt+0x2a>
 800deb2:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800deb6:	429a      	cmp	r2, r3
 800deb8:	bf18      	it	ne
 800deba:	2340      	movne	r3, #64	; 0x40
 800debc:	e7ce      	b.n	800de5c <ai_array_to_buffer_fmt+0x2c>
 800debe:	4b10      	ldr	r3, [pc, #64]	; (800df00 <ai_array_to_buffer_fmt+0xd0>)
 800dec0:	429a      	cmp	r2, r3
 800dec2:	bf18      	it	ne
 800dec4:	2340      	movne	r3, #64	; 0x40
 800dec6:	e7c9      	b.n	800de5c <ai_array_to_buffer_fmt+0x2c>
 800dec8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800decc:	429a      	cmp	r2, r3
 800dece:	d0c4      	beq.n	800de5a <ai_array_to_buffer_fmt+0x2a>
 800ded0:	3380      	adds	r3, #128	; 0x80
 800ded2:	429a      	cmp	r2, r3
 800ded4:	bf18      	it	ne
 800ded6:	2340      	movne	r3, #64	; 0x40
 800ded8:	e7c0      	b.n	800de5c <ai_array_to_buffer_fmt+0x2c>
 800deda:	4b0a      	ldr	r3, [pc, #40]	; (800df04 <ai_array_to_buffer_fmt+0xd4>)
 800dedc:	4003      	ands	r3, r0
 800dede:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800dee2:	e7bb      	b.n	800de5c <ai_array_to_buffer_fmt+0x2c>
 800dee4:	00840040 	.word	0x00840040
 800dee8:	00040840 	.word	0x00040840
 800deec:	00041040 	.word	0x00041040
 800def0:	00040447 	.word	0x00040447
 800def4:	00840840 	.word	0x00840840
 800def8:	00841040 	.word	0x00841040
 800defc:	0084084f 	.word	0x0084084f
 800df00:	0004084f 	.word	0x0004084f
 800df04:	00803fff 	.word	0x00803fff

0800df08 <ai_array_get_byte_size>:
 800df08:	b319      	cbz	r1, 800df52 <ai_array_get_byte_size+0x4a>
 800df0a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800df0e:	fb03 f101 	mul.w	r1, r3, r1
 800df12:	3107      	adds	r1, #7
 800df14:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800df18:	f021 0307 	bic.w	r3, r1, #7
 800df1c:	2a04      	cmp	r2, #4
 800df1e:	f3c0 5141 	ubfx	r1, r0, #21, #2
 800df22:	fa23 f101 	lsr.w	r1, r3, r1
 800df26:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800df2a:	d00b      	beq.n	800df44 <ai_array_get_byte_size+0x3c>
 800df2c:	2a08      	cmp	r2, #8
 800df2e:	d002      	beq.n	800df36 <ai_array_get_byte_size+0x2e>
 800df30:	3107      	adds	r1, #7
 800df32:	08c8      	lsrs	r0, r1, #3
 800df34:	4770      	bx	lr
 800df36:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800df3a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800df3e:	3107      	adds	r1, #7
 800df40:	08c8      	lsrs	r0, r1, #3
 800df42:	4770      	bx	lr
 800df44:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800df48:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800df4c:	3107      	adds	r1, #7
 800df4e:	08c8      	lsrs	r0, r1, #3
 800df50:	4770      	bx	lr
 800df52:	4608      	mov	r0, r1
 800df54:	4770      	bx	lr
 800df56:	bf00      	nop

0800df58 <ai_array_get_data_byte_size>:
 800df58:	b169      	cbz	r1, 800df76 <ai_array_get_data_byte_size+0x1e>
 800df5a:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800df5e:	fb02 f101 	mul.w	r1, r2, r1
 800df62:	1dcb      	adds	r3, r1, #7
 800df64:	f023 0307 	bic.w	r3, r3, #7
 800df68:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800df6c:	fa23 f000 	lsr.w	r0, r3, r0
 800df70:	3007      	adds	r0, #7
 800df72:	08c0      	lsrs	r0, r0, #3
 800df74:	4770      	bx	lr
 800df76:	4608      	mov	r0, r1
 800df78:	4770      	bx	lr
 800df7a:	bf00      	nop

0800df7c <ai_version_get>:
 800df7c:	0212      	lsls	r2, r2, #8
 800df7e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800df82:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800df86:	4770      	bx	lr

0800df88 <get_tensor_byte_size>:
 800df88:	b410      	push	{r4}
 800df8a:	6983      	ldr	r3, [r0, #24]
 800df8c:	68c4      	ldr	r4, [r0, #12]
 800df8e:	6941      	ldr	r1, [r0, #20]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	68e0      	ldr	r0, [r4, #12]
 800df94:	4a07      	ldr	r2, [pc, #28]	; (800dfb4 <get_tensor_byte_size+0x2c>)
 800df96:	68c9      	ldr	r1, [r1, #12]
 800df98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df9c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800dfa0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800dfa4:	fb01 f000 	mul.w	r0, r1, r0
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	bf04      	itt	eq
 800dfac:	3007      	addeq	r0, #7
 800dfae:	08c0      	lsreq	r0, r0, #3
 800dfb0:	4770      	bx	lr
 800dfb2:	bf00      	nop
 800dfb4:	000400c0 	.word	0x000400c0

0800dfb8 <core_tensor_clone>:
 800dfb8:	680b      	ldr	r3, [r1, #0]
 800dfba:	6003      	str	r3, [r0, #0]
 800dfbc:	684b      	ldr	r3, [r1, #4]
 800dfbe:	6043      	str	r3, [r0, #4]
 800dfc0:	698b      	ldr	r3, [r1, #24]
 800dfc2:	6183      	str	r3, [r0, #24]
 800dfc4:	688b      	ldr	r3, [r1, #8]
 800dfc6:	6882      	ldr	r2, [r0, #8]
 800dfc8:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800dfcc:	f363 221f 	bfi	r2, r3, #8, #24
 800dfd0:	b410      	push	{r4}
 800dfd2:	6082      	str	r2, [r0, #8]
 800dfd4:	b15b      	cbz	r3, 800dfee <core_tensor_clone+0x36>
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	68cc      	ldr	r4, [r1, #12]
 800dfda:	68c2      	ldr	r2, [r0, #12]
 800dfdc:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800dfe0:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800dfe4:	6882      	ldr	r2, [r0, #8]
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 800dfec:	d3f4      	bcc.n	800dfd8 <core_tensor_clone+0x20>
 800dfee:	690b      	ldr	r3, [r1, #16]
 800dff0:	6902      	ldr	r2, [r0, #16]
 800dff2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800dff6:	f363 221f 	bfi	r2, r3, #8, #24
 800dffa:	6102      	str	r2, [r0, #16]
 800dffc:	b15b      	cbz	r3, 800e016 <core_tensor_clone+0x5e>
 800dffe:	2300      	movs	r3, #0
 800e000:	694c      	ldr	r4, [r1, #20]
 800e002:	6942      	ldr	r2, [r0, #20]
 800e004:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800e008:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800e00c:	6902      	ldr	r2, [r0, #16]
 800e00e:	3301      	adds	r3, #1
 800e010:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 800e014:	d3f4      	bcc.n	800e000 <core_tensor_clone+0x48>
 800e016:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e01a:	4770      	bx	lr

0800e01c <core_array_clone>:
 800e01c:	4684      	mov	ip, r0
 800e01e:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800e020:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800e024:	4770      	bx	lr
 800e026:	bf00      	nop

0800e028 <sbrk_aligned>:
 800e028:	b570      	push	{r4, r5, r6, lr}
 800e02a:	4e0e      	ldr	r6, [pc, #56]	; (800e064 <sbrk_aligned+0x3c>)
 800e02c:	460c      	mov	r4, r1
 800e02e:	6831      	ldr	r1, [r6, #0]
 800e030:	4605      	mov	r5, r0
 800e032:	b911      	cbnz	r1, 800e03a <sbrk_aligned+0x12>
 800e034:	f000 f916 	bl	800e264 <_sbrk_r>
 800e038:	6030      	str	r0, [r6, #0]
 800e03a:	4621      	mov	r1, r4
 800e03c:	4628      	mov	r0, r5
 800e03e:	f000 f911 	bl	800e264 <_sbrk_r>
 800e042:	1c43      	adds	r3, r0, #1
 800e044:	d00a      	beq.n	800e05c <sbrk_aligned+0x34>
 800e046:	1cc4      	adds	r4, r0, #3
 800e048:	f024 0403 	bic.w	r4, r4, #3
 800e04c:	42a0      	cmp	r0, r4
 800e04e:	d007      	beq.n	800e060 <sbrk_aligned+0x38>
 800e050:	1a21      	subs	r1, r4, r0
 800e052:	4628      	mov	r0, r5
 800e054:	f000 f906 	bl	800e264 <_sbrk_r>
 800e058:	3001      	adds	r0, #1
 800e05a:	d101      	bne.n	800e060 <sbrk_aligned+0x38>
 800e05c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e060:	4620      	mov	r0, r4
 800e062:	bd70      	pop	{r4, r5, r6, pc}
 800e064:	200027e8 	.word	0x200027e8

0800e068 <_malloc_r>:
 800e068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e06c:	1ccd      	adds	r5, r1, #3
 800e06e:	f025 0503 	bic.w	r5, r5, #3
 800e072:	3508      	adds	r5, #8
 800e074:	2d0c      	cmp	r5, #12
 800e076:	bf38      	it	cc
 800e078:	250c      	movcc	r5, #12
 800e07a:	2d00      	cmp	r5, #0
 800e07c:	4607      	mov	r7, r0
 800e07e:	db01      	blt.n	800e084 <_malloc_r+0x1c>
 800e080:	42a9      	cmp	r1, r5
 800e082:	d905      	bls.n	800e090 <_malloc_r+0x28>
 800e084:	230c      	movs	r3, #12
 800e086:	603b      	str	r3, [r7, #0]
 800e088:	2600      	movs	r6, #0
 800e08a:	4630      	mov	r0, r6
 800e08c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e090:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e164 <_malloc_r+0xfc>
 800e094:	f000 f868 	bl	800e168 <__malloc_lock>
 800e098:	f8d8 3000 	ldr.w	r3, [r8]
 800e09c:	461c      	mov	r4, r3
 800e09e:	bb5c      	cbnz	r4, 800e0f8 <_malloc_r+0x90>
 800e0a0:	4629      	mov	r1, r5
 800e0a2:	4638      	mov	r0, r7
 800e0a4:	f7ff ffc0 	bl	800e028 <sbrk_aligned>
 800e0a8:	1c43      	adds	r3, r0, #1
 800e0aa:	4604      	mov	r4, r0
 800e0ac:	d155      	bne.n	800e15a <_malloc_r+0xf2>
 800e0ae:	f8d8 4000 	ldr.w	r4, [r8]
 800e0b2:	4626      	mov	r6, r4
 800e0b4:	2e00      	cmp	r6, #0
 800e0b6:	d145      	bne.n	800e144 <_malloc_r+0xdc>
 800e0b8:	2c00      	cmp	r4, #0
 800e0ba:	d048      	beq.n	800e14e <_malloc_r+0xe6>
 800e0bc:	6823      	ldr	r3, [r4, #0]
 800e0be:	4631      	mov	r1, r6
 800e0c0:	4638      	mov	r0, r7
 800e0c2:	eb04 0903 	add.w	r9, r4, r3
 800e0c6:	f000 f8cd 	bl	800e264 <_sbrk_r>
 800e0ca:	4581      	cmp	r9, r0
 800e0cc:	d13f      	bne.n	800e14e <_malloc_r+0xe6>
 800e0ce:	6821      	ldr	r1, [r4, #0]
 800e0d0:	1a6d      	subs	r5, r5, r1
 800e0d2:	4629      	mov	r1, r5
 800e0d4:	4638      	mov	r0, r7
 800e0d6:	f7ff ffa7 	bl	800e028 <sbrk_aligned>
 800e0da:	3001      	adds	r0, #1
 800e0dc:	d037      	beq.n	800e14e <_malloc_r+0xe6>
 800e0de:	6823      	ldr	r3, [r4, #0]
 800e0e0:	442b      	add	r3, r5
 800e0e2:	6023      	str	r3, [r4, #0]
 800e0e4:	f8d8 3000 	ldr.w	r3, [r8]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d038      	beq.n	800e15e <_malloc_r+0xf6>
 800e0ec:	685a      	ldr	r2, [r3, #4]
 800e0ee:	42a2      	cmp	r2, r4
 800e0f0:	d12b      	bne.n	800e14a <_malloc_r+0xe2>
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	605a      	str	r2, [r3, #4]
 800e0f6:	e00f      	b.n	800e118 <_malloc_r+0xb0>
 800e0f8:	6822      	ldr	r2, [r4, #0]
 800e0fa:	1b52      	subs	r2, r2, r5
 800e0fc:	d41f      	bmi.n	800e13e <_malloc_r+0xd6>
 800e0fe:	2a0b      	cmp	r2, #11
 800e100:	d917      	bls.n	800e132 <_malloc_r+0xca>
 800e102:	1961      	adds	r1, r4, r5
 800e104:	42a3      	cmp	r3, r4
 800e106:	6025      	str	r5, [r4, #0]
 800e108:	bf18      	it	ne
 800e10a:	6059      	strne	r1, [r3, #4]
 800e10c:	6863      	ldr	r3, [r4, #4]
 800e10e:	bf08      	it	eq
 800e110:	f8c8 1000 	streq.w	r1, [r8]
 800e114:	5162      	str	r2, [r4, r5]
 800e116:	604b      	str	r3, [r1, #4]
 800e118:	4638      	mov	r0, r7
 800e11a:	f104 060b 	add.w	r6, r4, #11
 800e11e:	f000 f829 	bl	800e174 <__malloc_unlock>
 800e122:	f026 0607 	bic.w	r6, r6, #7
 800e126:	1d23      	adds	r3, r4, #4
 800e128:	1af2      	subs	r2, r6, r3
 800e12a:	d0ae      	beq.n	800e08a <_malloc_r+0x22>
 800e12c:	1b9b      	subs	r3, r3, r6
 800e12e:	50a3      	str	r3, [r4, r2]
 800e130:	e7ab      	b.n	800e08a <_malloc_r+0x22>
 800e132:	42a3      	cmp	r3, r4
 800e134:	6862      	ldr	r2, [r4, #4]
 800e136:	d1dd      	bne.n	800e0f4 <_malloc_r+0x8c>
 800e138:	f8c8 2000 	str.w	r2, [r8]
 800e13c:	e7ec      	b.n	800e118 <_malloc_r+0xb0>
 800e13e:	4623      	mov	r3, r4
 800e140:	6864      	ldr	r4, [r4, #4]
 800e142:	e7ac      	b.n	800e09e <_malloc_r+0x36>
 800e144:	4634      	mov	r4, r6
 800e146:	6876      	ldr	r6, [r6, #4]
 800e148:	e7b4      	b.n	800e0b4 <_malloc_r+0x4c>
 800e14a:	4613      	mov	r3, r2
 800e14c:	e7cc      	b.n	800e0e8 <_malloc_r+0x80>
 800e14e:	230c      	movs	r3, #12
 800e150:	603b      	str	r3, [r7, #0]
 800e152:	4638      	mov	r0, r7
 800e154:	f000 f80e 	bl	800e174 <__malloc_unlock>
 800e158:	e797      	b.n	800e08a <_malloc_r+0x22>
 800e15a:	6025      	str	r5, [r4, #0]
 800e15c:	e7dc      	b.n	800e118 <_malloc_r+0xb0>
 800e15e:	605b      	str	r3, [r3, #4]
 800e160:	deff      	udf	#255	; 0xff
 800e162:	bf00      	nop
 800e164:	200027e4 	.word	0x200027e4

0800e168 <__malloc_lock>:
 800e168:	4801      	ldr	r0, [pc, #4]	; (800e170 <__malloc_lock+0x8>)
 800e16a:	f000 b8b5 	b.w	800e2d8 <__retarget_lock_acquire_recursive>
 800e16e:	bf00      	nop
 800e170:	20002928 	.word	0x20002928

0800e174 <__malloc_unlock>:
 800e174:	4801      	ldr	r0, [pc, #4]	; (800e17c <__malloc_unlock+0x8>)
 800e176:	f000 b8b0 	b.w	800e2da <__retarget_lock_release_recursive>
 800e17a:	bf00      	nop
 800e17c:	20002928 	.word	0x20002928

0800e180 <_realloc_r>:
 800e180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e184:	4680      	mov	r8, r0
 800e186:	4614      	mov	r4, r2
 800e188:	460e      	mov	r6, r1
 800e18a:	b921      	cbnz	r1, 800e196 <_realloc_r+0x16>
 800e18c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e190:	4611      	mov	r1, r2
 800e192:	f7ff bf69 	b.w	800e068 <_malloc_r>
 800e196:	b92a      	cbnz	r2, 800e1a4 <_realloc_r+0x24>
 800e198:	f000 f8ae 	bl	800e2f8 <_free_r>
 800e19c:	4625      	mov	r5, r4
 800e19e:	4628      	mov	r0, r5
 800e1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1a4:	f000 f8f4 	bl	800e390 <_malloc_usable_size_r>
 800e1a8:	4284      	cmp	r4, r0
 800e1aa:	4607      	mov	r7, r0
 800e1ac:	d802      	bhi.n	800e1b4 <_realloc_r+0x34>
 800e1ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e1b2:	d812      	bhi.n	800e1da <_realloc_r+0x5a>
 800e1b4:	4621      	mov	r1, r4
 800e1b6:	4640      	mov	r0, r8
 800e1b8:	f7ff ff56 	bl	800e068 <_malloc_r>
 800e1bc:	4605      	mov	r5, r0
 800e1be:	2800      	cmp	r0, #0
 800e1c0:	d0ed      	beq.n	800e19e <_realloc_r+0x1e>
 800e1c2:	42bc      	cmp	r4, r7
 800e1c4:	4622      	mov	r2, r4
 800e1c6:	4631      	mov	r1, r6
 800e1c8:	bf28      	it	cs
 800e1ca:	463a      	movcs	r2, r7
 800e1cc:	f000 f886 	bl	800e2dc <memcpy>
 800e1d0:	4631      	mov	r1, r6
 800e1d2:	4640      	mov	r0, r8
 800e1d4:	f000 f890 	bl	800e2f8 <_free_r>
 800e1d8:	e7e1      	b.n	800e19e <_realloc_r+0x1e>
 800e1da:	4635      	mov	r5, r6
 800e1dc:	e7df      	b.n	800e19e <_realloc_r+0x1e>
	...

0800e1e0 <siprintf>:
 800e1e0:	b40e      	push	{r1, r2, r3}
 800e1e2:	b500      	push	{lr}
 800e1e4:	b09c      	sub	sp, #112	; 0x70
 800e1e6:	ab1d      	add	r3, sp, #116	; 0x74
 800e1e8:	9002      	str	r0, [sp, #8]
 800e1ea:	9006      	str	r0, [sp, #24]
 800e1ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e1f0:	4809      	ldr	r0, [pc, #36]	; (800e218 <siprintf+0x38>)
 800e1f2:	9107      	str	r1, [sp, #28]
 800e1f4:	9104      	str	r1, [sp, #16]
 800e1f6:	4909      	ldr	r1, [pc, #36]	; (800e21c <siprintf+0x3c>)
 800e1f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1fc:	9105      	str	r1, [sp, #20]
 800e1fe:	6800      	ldr	r0, [r0, #0]
 800e200:	9301      	str	r3, [sp, #4]
 800e202:	a902      	add	r1, sp, #8
 800e204:	f000 f926 	bl	800e454 <_svfiprintf_r>
 800e208:	9b02      	ldr	r3, [sp, #8]
 800e20a:	2200      	movs	r2, #0
 800e20c:	701a      	strb	r2, [r3, #0]
 800e20e:	b01c      	add	sp, #112	; 0x70
 800e210:	f85d eb04 	ldr.w	lr, [sp], #4
 800e214:	b003      	add	sp, #12
 800e216:	4770      	bx	lr
 800e218:	200025d0 	.word	0x200025d0
 800e21c:	ffff0208 	.word	0xffff0208

0800e220 <memmove>:
 800e220:	4288      	cmp	r0, r1
 800e222:	b510      	push	{r4, lr}
 800e224:	eb01 0402 	add.w	r4, r1, r2
 800e228:	d902      	bls.n	800e230 <memmove+0x10>
 800e22a:	4284      	cmp	r4, r0
 800e22c:	4623      	mov	r3, r4
 800e22e:	d807      	bhi.n	800e240 <memmove+0x20>
 800e230:	1e43      	subs	r3, r0, #1
 800e232:	42a1      	cmp	r1, r4
 800e234:	d008      	beq.n	800e248 <memmove+0x28>
 800e236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e23a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e23e:	e7f8      	b.n	800e232 <memmove+0x12>
 800e240:	4402      	add	r2, r0
 800e242:	4601      	mov	r1, r0
 800e244:	428a      	cmp	r2, r1
 800e246:	d100      	bne.n	800e24a <memmove+0x2a>
 800e248:	bd10      	pop	{r4, pc}
 800e24a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e24e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e252:	e7f7      	b.n	800e244 <memmove+0x24>

0800e254 <memset>:
 800e254:	4402      	add	r2, r0
 800e256:	4603      	mov	r3, r0
 800e258:	4293      	cmp	r3, r2
 800e25a:	d100      	bne.n	800e25e <memset+0xa>
 800e25c:	4770      	bx	lr
 800e25e:	f803 1b01 	strb.w	r1, [r3], #1
 800e262:	e7f9      	b.n	800e258 <memset+0x4>

0800e264 <_sbrk_r>:
 800e264:	b538      	push	{r3, r4, r5, lr}
 800e266:	4d06      	ldr	r5, [pc, #24]	; (800e280 <_sbrk_r+0x1c>)
 800e268:	2300      	movs	r3, #0
 800e26a:	4604      	mov	r4, r0
 800e26c:	4608      	mov	r0, r1
 800e26e:	602b      	str	r3, [r5, #0]
 800e270:	f7f3 f8b0 	bl	80013d4 <_sbrk>
 800e274:	1c43      	adds	r3, r0, #1
 800e276:	d102      	bne.n	800e27e <_sbrk_r+0x1a>
 800e278:	682b      	ldr	r3, [r5, #0]
 800e27a:	b103      	cbz	r3, 800e27e <_sbrk_r+0x1a>
 800e27c:	6023      	str	r3, [r4, #0]
 800e27e:	bd38      	pop	{r3, r4, r5, pc}
 800e280:	20002924 	.word	0x20002924

0800e284 <__errno>:
 800e284:	4b01      	ldr	r3, [pc, #4]	; (800e28c <__errno+0x8>)
 800e286:	6818      	ldr	r0, [r3, #0]
 800e288:	4770      	bx	lr
 800e28a:	bf00      	nop
 800e28c:	200025d0 	.word	0x200025d0

0800e290 <__libc_init_array>:
 800e290:	b570      	push	{r4, r5, r6, lr}
 800e292:	4d0d      	ldr	r5, [pc, #52]	; (800e2c8 <__libc_init_array+0x38>)
 800e294:	4c0d      	ldr	r4, [pc, #52]	; (800e2cc <__libc_init_array+0x3c>)
 800e296:	1b64      	subs	r4, r4, r5
 800e298:	10a4      	asrs	r4, r4, #2
 800e29a:	2600      	movs	r6, #0
 800e29c:	42a6      	cmp	r6, r4
 800e29e:	d109      	bne.n	800e2b4 <__libc_init_array+0x24>
 800e2a0:	4d0b      	ldr	r5, [pc, #44]	; (800e2d0 <__libc_init_array+0x40>)
 800e2a2:	4c0c      	ldr	r4, [pc, #48]	; (800e2d4 <__libc_init_array+0x44>)
 800e2a4:	f000 ff26 	bl	800f0f4 <_init>
 800e2a8:	1b64      	subs	r4, r4, r5
 800e2aa:	10a4      	asrs	r4, r4, #2
 800e2ac:	2600      	movs	r6, #0
 800e2ae:	42a6      	cmp	r6, r4
 800e2b0:	d105      	bne.n	800e2be <__libc_init_array+0x2e>
 800e2b2:	bd70      	pop	{r4, r5, r6, pc}
 800e2b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2b8:	4798      	blx	r3
 800e2ba:	3601      	adds	r6, #1
 800e2bc:	e7ee      	b.n	800e29c <__libc_init_array+0xc>
 800e2be:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2c2:	4798      	blx	r3
 800e2c4:	3601      	adds	r6, #1
 800e2c6:	e7f2      	b.n	800e2ae <__libc_init_array+0x1e>
 800e2c8:	080155cc 	.word	0x080155cc
 800e2cc:	080155cc 	.word	0x080155cc
 800e2d0:	080155cc 	.word	0x080155cc
 800e2d4:	080155d0 	.word	0x080155d0

0800e2d8 <__retarget_lock_acquire_recursive>:
 800e2d8:	4770      	bx	lr

0800e2da <__retarget_lock_release_recursive>:
 800e2da:	4770      	bx	lr

0800e2dc <memcpy>:
 800e2dc:	440a      	add	r2, r1
 800e2de:	4291      	cmp	r1, r2
 800e2e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e2e4:	d100      	bne.n	800e2e8 <memcpy+0xc>
 800e2e6:	4770      	bx	lr
 800e2e8:	b510      	push	{r4, lr}
 800e2ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e2f2:	4291      	cmp	r1, r2
 800e2f4:	d1f9      	bne.n	800e2ea <memcpy+0xe>
 800e2f6:	bd10      	pop	{r4, pc}

0800e2f8 <_free_r>:
 800e2f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e2fa:	2900      	cmp	r1, #0
 800e2fc:	d044      	beq.n	800e388 <_free_r+0x90>
 800e2fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e302:	9001      	str	r0, [sp, #4]
 800e304:	2b00      	cmp	r3, #0
 800e306:	f1a1 0404 	sub.w	r4, r1, #4
 800e30a:	bfb8      	it	lt
 800e30c:	18e4      	addlt	r4, r4, r3
 800e30e:	f7ff ff2b 	bl	800e168 <__malloc_lock>
 800e312:	4a1e      	ldr	r2, [pc, #120]	; (800e38c <_free_r+0x94>)
 800e314:	9801      	ldr	r0, [sp, #4]
 800e316:	6813      	ldr	r3, [r2, #0]
 800e318:	b933      	cbnz	r3, 800e328 <_free_r+0x30>
 800e31a:	6063      	str	r3, [r4, #4]
 800e31c:	6014      	str	r4, [r2, #0]
 800e31e:	b003      	add	sp, #12
 800e320:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e324:	f7ff bf26 	b.w	800e174 <__malloc_unlock>
 800e328:	42a3      	cmp	r3, r4
 800e32a:	d908      	bls.n	800e33e <_free_r+0x46>
 800e32c:	6825      	ldr	r5, [r4, #0]
 800e32e:	1961      	adds	r1, r4, r5
 800e330:	428b      	cmp	r3, r1
 800e332:	bf01      	itttt	eq
 800e334:	6819      	ldreq	r1, [r3, #0]
 800e336:	685b      	ldreq	r3, [r3, #4]
 800e338:	1949      	addeq	r1, r1, r5
 800e33a:	6021      	streq	r1, [r4, #0]
 800e33c:	e7ed      	b.n	800e31a <_free_r+0x22>
 800e33e:	461a      	mov	r2, r3
 800e340:	685b      	ldr	r3, [r3, #4]
 800e342:	b10b      	cbz	r3, 800e348 <_free_r+0x50>
 800e344:	42a3      	cmp	r3, r4
 800e346:	d9fa      	bls.n	800e33e <_free_r+0x46>
 800e348:	6811      	ldr	r1, [r2, #0]
 800e34a:	1855      	adds	r5, r2, r1
 800e34c:	42a5      	cmp	r5, r4
 800e34e:	d10b      	bne.n	800e368 <_free_r+0x70>
 800e350:	6824      	ldr	r4, [r4, #0]
 800e352:	4421      	add	r1, r4
 800e354:	1854      	adds	r4, r2, r1
 800e356:	42a3      	cmp	r3, r4
 800e358:	6011      	str	r1, [r2, #0]
 800e35a:	d1e0      	bne.n	800e31e <_free_r+0x26>
 800e35c:	681c      	ldr	r4, [r3, #0]
 800e35e:	685b      	ldr	r3, [r3, #4]
 800e360:	6053      	str	r3, [r2, #4]
 800e362:	440c      	add	r4, r1
 800e364:	6014      	str	r4, [r2, #0]
 800e366:	e7da      	b.n	800e31e <_free_r+0x26>
 800e368:	d902      	bls.n	800e370 <_free_r+0x78>
 800e36a:	230c      	movs	r3, #12
 800e36c:	6003      	str	r3, [r0, #0]
 800e36e:	e7d6      	b.n	800e31e <_free_r+0x26>
 800e370:	6825      	ldr	r5, [r4, #0]
 800e372:	1961      	adds	r1, r4, r5
 800e374:	428b      	cmp	r3, r1
 800e376:	bf04      	itt	eq
 800e378:	6819      	ldreq	r1, [r3, #0]
 800e37a:	685b      	ldreq	r3, [r3, #4]
 800e37c:	6063      	str	r3, [r4, #4]
 800e37e:	bf04      	itt	eq
 800e380:	1949      	addeq	r1, r1, r5
 800e382:	6021      	streq	r1, [r4, #0]
 800e384:	6054      	str	r4, [r2, #4]
 800e386:	e7ca      	b.n	800e31e <_free_r+0x26>
 800e388:	b003      	add	sp, #12
 800e38a:	bd30      	pop	{r4, r5, pc}
 800e38c:	200027e4 	.word	0x200027e4

0800e390 <_malloc_usable_size_r>:
 800e390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e394:	1f18      	subs	r0, r3, #4
 800e396:	2b00      	cmp	r3, #0
 800e398:	bfbc      	itt	lt
 800e39a:	580b      	ldrlt	r3, [r1, r0]
 800e39c:	18c0      	addlt	r0, r0, r3
 800e39e:	4770      	bx	lr

0800e3a0 <__ssputs_r>:
 800e3a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3a4:	688e      	ldr	r6, [r1, #8]
 800e3a6:	461f      	mov	r7, r3
 800e3a8:	42be      	cmp	r6, r7
 800e3aa:	680b      	ldr	r3, [r1, #0]
 800e3ac:	4682      	mov	sl, r0
 800e3ae:	460c      	mov	r4, r1
 800e3b0:	4690      	mov	r8, r2
 800e3b2:	d82c      	bhi.n	800e40e <__ssputs_r+0x6e>
 800e3b4:	898a      	ldrh	r2, [r1, #12]
 800e3b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e3ba:	d026      	beq.n	800e40a <__ssputs_r+0x6a>
 800e3bc:	6965      	ldr	r5, [r4, #20]
 800e3be:	6909      	ldr	r1, [r1, #16]
 800e3c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e3c4:	eba3 0901 	sub.w	r9, r3, r1
 800e3c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e3cc:	1c7b      	adds	r3, r7, #1
 800e3ce:	444b      	add	r3, r9
 800e3d0:	106d      	asrs	r5, r5, #1
 800e3d2:	429d      	cmp	r5, r3
 800e3d4:	bf38      	it	cc
 800e3d6:	461d      	movcc	r5, r3
 800e3d8:	0553      	lsls	r3, r2, #21
 800e3da:	d527      	bpl.n	800e42c <__ssputs_r+0x8c>
 800e3dc:	4629      	mov	r1, r5
 800e3de:	f7ff fe43 	bl	800e068 <_malloc_r>
 800e3e2:	4606      	mov	r6, r0
 800e3e4:	b360      	cbz	r0, 800e440 <__ssputs_r+0xa0>
 800e3e6:	6921      	ldr	r1, [r4, #16]
 800e3e8:	464a      	mov	r2, r9
 800e3ea:	f7ff ff77 	bl	800e2dc <memcpy>
 800e3ee:	89a3      	ldrh	r3, [r4, #12]
 800e3f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e3f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3f8:	81a3      	strh	r3, [r4, #12]
 800e3fa:	6126      	str	r6, [r4, #16]
 800e3fc:	6165      	str	r5, [r4, #20]
 800e3fe:	444e      	add	r6, r9
 800e400:	eba5 0509 	sub.w	r5, r5, r9
 800e404:	6026      	str	r6, [r4, #0]
 800e406:	60a5      	str	r5, [r4, #8]
 800e408:	463e      	mov	r6, r7
 800e40a:	42be      	cmp	r6, r7
 800e40c:	d900      	bls.n	800e410 <__ssputs_r+0x70>
 800e40e:	463e      	mov	r6, r7
 800e410:	6820      	ldr	r0, [r4, #0]
 800e412:	4632      	mov	r2, r6
 800e414:	4641      	mov	r1, r8
 800e416:	f7ff ff03 	bl	800e220 <memmove>
 800e41a:	68a3      	ldr	r3, [r4, #8]
 800e41c:	1b9b      	subs	r3, r3, r6
 800e41e:	60a3      	str	r3, [r4, #8]
 800e420:	6823      	ldr	r3, [r4, #0]
 800e422:	4433      	add	r3, r6
 800e424:	6023      	str	r3, [r4, #0]
 800e426:	2000      	movs	r0, #0
 800e428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e42c:	462a      	mov	r2, r5
 800e42e:	f7ff fea7 	bl	800e180 <_realloc_r>
 800e432:	4606      	mov	r6, r0
 800e434:	2800      	cmp	r0, #0
 800e436:	d1e0      	bne.n	800e3fa <__ssputs_r+0x5a>
 800e438:	6921      	ldr	r1, [r4, #16]
 800e43a:	4650      	mov	r0, sl
 800e43c:	f7ff ff5c 	bl	800e2f8 <_free_r>
 800e440:	230c      	movs	r3, #12
 800e442:	f8ca 3000 	str.w	r3, [sl]
 800e446:	89a3      	ldrh	r3, [r4, #12]
 800e448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e44c:	81a3      	strh	r3, [r4, #12]
 800e44e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e452:	e7e9      	b.n	800e428 <__ssputs_r+0x88>

0800e454 <_svfiprintf_r>:
 800e454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e458:	4698      	mov	r8, r3
 800e45a:	898b      	ldrh	r3, [r1, #12]
 800e45c:	061b      	lsls	r3, r3, #24
 800e45e:	b09d      	sub	sp, #116	; 0x74
 800e460:	4607      	mov	r7, r0
 800e462:	460d      	mov	r5, r1
 800e464:	4614      	mov	r4, r2
 800e466:	d50e      	bpl.n	800e486 <_svfiprintf_r+0x32>
 800e468:	690b      	ldr	r3, [r1, #16]
 800e46a:	b963      	cbnz	r3, 800e486 <_svfiprintf_r+0x32>
 800e46c:	2140      	movs	r1, #64	; 0x40
 800e46e:	f7ff fdfb 	bl	800e068 <_malloc_r>
 800e472:	6028      	str	r0, [r5, #0]
 800e474:	6128      	str	r0, [r5, #16]
 800e476:	b920      	cbnz	r0, 800e482 <_svfiprintf_r+0x2e>
 800e478:	230c      	movs	r3, #12
 800e47a:	603b      	str	r3, [r7, #0]
 800e47c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e480:	e0d0      	b.n	800e624 <_svfiprintf_r+0x1d0>
 800e482:	2340      	movs	r3, #64	; 0x40
 800e484:	616b      	str	r3, [r5, #20]
 800e486:	2300      	movs	r3, #0
 800e488:	9309      	str	r3, [sp, #36]	; 0x24
 800e48a:	2320      	movs	r3, #32
 800e48c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e490:	f8cd 800c 	str.w	r8, [sp, #12]
 800e494:	2330      	movs	r3, #48	; 0x30
 800e496:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e63c <_svfiprintf_r+0x1e8>
 800e49a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e49e:	f04f 0901 	mov.w	r9, #1
 800e4a2:	4623      	mov	r3, r4
 800e4a4:	469a      	mov	sl, r3
 800e4a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4aa:	b10a      	cbz	r2, 800e4b0 <_svfiprintf_r+0x5c>
 800e4ac:	2a25      	cmp	r2, #37	; 0x25
 800e4ae:	d1f9      	bne.n	800e4a4 <_svfiprintf_r+0x50>
 800e4b0:	ebba 0b04 	subs.w	fp, sl, r4
 800e4b4:	d00b      	beq.n	800e4ce <_svfiprintf_r+0x7a>
 800e4b6:	465b      	mov	r3, fp
 800e4b8:	4622      	mov	r2, r4
 800e4ba:	4629      	mov	r1, r5
 800e4bc:	4638      	mov	r0, r7
 800e4be:	f7ff ff6f 	bl	800e3a0 <__ssputs_r>
 800e4c2:	3001      	adds	r0, #1
 800e4c4:	f000 80a9 	beq.w	800e61a <_svfiprintf_r+0x1c6>
 800e4c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4ca:	445a      	add	r2, fp
 800e4cc:	9209      	str	r2, [sp, #36]	; 0x24
 800e4ce:	f89a 3000 	ldrb.w	r3, [sl]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	f000 80a1 	beq.w	800e61a <_svfiprintf_r+0x1c6>
 800e4d8:	2300      	movs	r3, #0
 800e4da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e4de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4e2:	f10a 0a01 	add.w	sl, sl, #1
 800e4e6:	9304      	str	r3, [sp, #16]
 800e4e8:	9307      	str	r3, [sp, #28]
 800e4ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e4ee:	931a      	str	r3, [sp, #104]	; 0x68
 800e4f0:	4654      	mov	r4, sl
 800e4f2:	2205      	movs	r2, #5
 800e4f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4f8:	4850      	ldr	r0, [pc, #320]	; (800e63c <_svfiprintf_r+0x1e8>)
 800e4fa:	f7f1 fe69 	bl	80001d0 <memchr>
 800e4fe:	9a04      	ldr	r2, [sp, #16]
 800e500:	b9d8      	cbnz	r0, 800e53a <_svfiprintf_r+0xe6>
 800e502:	06d0      	lsls	r0, r2, #27
 800e504:	bf44      	itt	mi
 800e506:	2320      	movmi	r3, #32
 800e508:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e50c:	0711      	lsls	r1, r2, #28
 800e50e:	bf44      	itt	mi
 800e510:	232b      	movmi	r3, #43	; 0x2b
 800e512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e516:	f89a 3000 	ldrb.w	r3, [sl]
 800e51a:	2b2a      	cmp	r3, #42	; 0x2a
 800e51c:	d015      	beq.n	800e54a <_svfiprintf_r+0xf6>
 800e51e:	9a07      	ldr	r2, [sp, #28]
 800e520:	4654      	mov	r4, sl
 800e522:	2000      	movs	r0, #0
 800e524:	f04f 0c0a 	mov.w	ip, #10
 800e528:	4621      	mov	r1, r4
 800e52a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e52e:	3b30      	subs	r3, #48	; 0x30
 800e530:	2b09      	cmp	r3, #9
 800e532:	d94d      	bls.n	800e5d0 <_svfiprintf_r+0x17c>
 800e534:	b1b0      	cbz	r0, 800e564 <_svfiprintf_r+0x110>
 800e536:	9207      	str	r2, [sp, #28]
 800e538:	e014      	b.n	800e564 <_svfiprintf_r+0x110>
 800e53a:	eba0 0308 	sub.w	r3, r0, r8
 800e53e:	fa09 f303 	lsl.w	r3, r9, r3
 800e542:	4313      	orrs	r3, r2
 800e544:	9304      	str	r3, [sp, #16]
 800e546:	46a2      	mov	sl, r4
 800e548:	e7d2      	b.n	800e4f0 <_svfiprintf_r+0x9c>
 800e54a:	9b03      	ldr	r3, [sp, #12]
 800e54c:	1d19      	adds	r1, r3, #4
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	9103      	str	r1, [sp, #12]
 800e552:	2b00      	cmp	r3, #0
 800e554:	bfbb      	ittet	lt
 800e556:	425b      	neglt	r3, r3
 800e558:	f042 0202 	orrlt.w	r2, r2, #2
 800e55c:	9307      	strge	r3, [sp, #28]
 800e55e:	9307      	strlt	r3, [sp, #28]
 800e560:	bfb8      	it	lt
 800e562:	9204      	strlt	r2, [sp, #16]
 800e564:	7823      	ldrb	r3, [r4, #0]
 800e566:	2b2e      	cmp	r3, #46	; 0x2e
 800e568:	d10c      	bne.n	800e584 <_svfiprintf_r+0x130>
 800e56a:	7863      	ldrb	r3, [r4, #1]
 800e56c:	2b2a      	cmp	r3, #42	; 0x2a
 800e56e:	d134      	bne.n	800e5da <_svfiprintf_r+0x186>
 800e570:	9b03      	ldr	r3, [sp, #12]
 800e572:	1d1a      	adds	r2, r3, #4
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	9203      	str	r2, [sp, #12]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	bfb8      	it	lt
 800e57c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e580:	3402      	adds	r4, #2
 800e582:	9305      	str	r3, [sp, #20]
 800e584:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e64c <_svfiprintf_r+0x1f8>
 800e588:	7821      	ldrb	r1, [r4, #0]
 800e58a:	2203      	movs	r2, #3
 800e58c:	4650      	mov	r0, sl
 800e58e:	f7f1 fe1f 	bl	80001d0 <memchr>
 800e592:	b138      	cbz	r0, 800e5a4 <_svfiprintf_r+0x150>
 800e594:	9b04      	ldr	r3, [sp, #16]
 800e596:	eba0 000a 	sub.w	r0, r0, sl
 800e59a:	2240      	movs	r2, #64	; 0x40
 800e59c:	4082      	lsls	r2, r0
 800e59e:	4313      	orrs	r3, r2
 800e5a0:	3401      	adds	r4, #1
 800e5a2:	9304      	str	r3, [sp, #16]
 800e5a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5a8:	4825      	ldr	r0, [pc, #148]	; (800e640 <_svfiprintf_r+0x1ec>)
 800e5aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e5ae:	2206      	movs	r2, #6
 800e5b0:	f7f1 fe0e 	bl	80001d0 <memchr>
 800e5b4:	2800      	cmp	r0, #0
 800e5b6:	d038      	beq.n	800e62a <_svfiprintf_r+0x1d6>
 800e5b8:	4b22      	ldr	r3, [pc, #136]	; (800e644 <_svfiprintf_r+0x1f0>)
 800e5ba:	bb1b      	cbnz	r3, 800e604 <_svfiprintf_r+0x1b0>
 800e5bc:	9b03      	ldr	r3, [sp, #12]
 800e5be:	3307      	adds	r3, #7
 800e5c0:	f023 0307 	bic.w	r3, r3, #7
 800e5c4:	3308      	adds	r3, #8
 800e5c6:	9303      	str	r3, [sp, #12]
 800e5c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5ca:	4433      	add	r3, r6
 800e5cc:	9309      	str	r3, [sp, #36]	; 0x24
 800e5ce:	e768      	b.n	800e4a2 <_svfiprintf_r+0x4e>
 800e5d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5d4:	460c      	mov	r4, r1
 800e5d6:	2001      	movs	r0, #1
 800e5d8:	e7a6      	b.n	800e528 <_svfiprintf_r+0xd4>
 800e5da:	2300      	movs	r3, #0
 800e5dc:	3401      	adds	r4, #1
 800e5de:	9305      	str	r3, [sp, #20]
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	f04f 0c0a 	mov.w	ip, #10
 800e5e6:	4620      	mov	r0, r4
 800e5e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5ec:	3a30      	subs	r2, #48	; 0x30
 800e5ee:	2a09      	cmp	r2, #9
 800e5f0:	d903      	bls.n	800e5fa <_svfiprintf_r+0x1a6>
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d0c6      	beq.n	800e584 <_svfiprintf_r+0x130>
 800e5f6:	9105      	str	r1, [sp, #20]
 800e5f8:	e7c4      	b.n	800e584 <_svfiprintf_r+0x130>
 800e5fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5fe:	4604      	mov	r4, r0
 800e600:	2301      	movs	r3, #1
 800e602:	e7f0      	b.n	800e5e6 <_svfiprintf_r+0x192>
 800e604:	ab03      	add	r3, sp, #12
 800e606:	9300      	str	r3, [sp, #0]
 800e608:	462a      	mov	r2, r5
 800e60a:	4b0f      	ldr	r3, [pc, #60]	; (800e648 <_svfiprintf_r+0x1f4>)
 800e60c:	a904      	add	r1, sp, #16
 800e60e:	4638      	mov	r0, r7
 800e610:	f3af 8000 	nop.w
 800e614:	1c42      	adds	r2, r0, #1
 800e616:	4606      	mov	r6, r0
 800e618:	d1d6      	bne.n	800e5c8 <_svfiprintf_r+0x174>
 800e61a:	89ab      	ldrh	r3, [r5, #12]
 800e61c:	065b      	lsls	r3, r3, #25
 800e61e:	f53f af2d 	bmi.w	800e47c <_svfiprintf_r+0x28>
 800e622:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e624:	b01d      	add	sp, #116	; 0x74
 800e626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e62a:	ab03      	add	r3, sp, #12
 800e62c:	9300      	str	r3, [sp, #0]
 800e62e:	462a      	mov	r2, r5
 800e630:	4b05      	ldr	r3, [pc, #20]	; (800e648 <_svfiprintf_r+0x1f4>)
 800e632:	a904      	add	r1, sp, #16
 800e634:	4638      	mov	r0, r7
 800e636:	f000 f879 	bl	800e72c <_printf_i>
 800e63a:	e7eb      	b.n	800e614 <_svfiprintf_r+0x1c0>
 800e63c:	08015578 	.word	0x08015578
 800e640:	08015582 	.word	0x08015582
 800e644:	00000000 	.word	0x00000000
 800e648:	0800e3a1 	.word	0x0800e3a1
 800e64c:	0801557e 	.word	0x0801557e

0800e650 <_printf_common>:
 800e650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e654:	4616      	mov	r6, r2
 800e656:	4699      	mov	r9, r3
 800e658:	688a      	ldr	r2, [r1, #8]
 800e65a:	690b      	ldr	r3, [r1, #16]
 800e65c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e660:	4293      	cmp	r3, r2
 800e662:	bfb8      	it	lt
 800e664:	4613      	movlt	r3, r2
 800e666:	6033      	str	r3, [r6, #0]
 800e668:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e66c:	4607      	mov	r7, r0
 800e66e:	460c      	mov	r4, r1
 800e670:	b10a      	cbz	r2, 800e676 <_printf_common+0x26>
 800e672:	3301      	adds	r3, #1
 800e674:	6033      	str	r3, [r6, #0]
 800e676:	6823      	ldr	r3, [r4, #0]
 800e678:	0699      	lsls	r1, r3, #26
 800e67a:	bf42      	ittt	mi
 800e67c:	6833      	ldrmi	r3, [r6, #0]
 800e67e:	3302      	addmi	r3, #2
 800e680:	6033      	strmi	r3, [r6, #0]
 800e682:	6825      	ldr	r5, [r4, #0]
 800e684:	f015 0506 	ands.w	r5, r5, #6
 800e688:	d106      	bne.n	800e698 <_printf_common+0x48>
 800e68a:	f104 0a19 	add.w	sl, r4, #25
 800e68e:	68e3      	ldr	r3, [r4, #12]
 800e690:	6832      	ldr	r2, [r6, #0]
 800e692:	1a9b      	subs	r3, r3, r2
 800e694:	42ab      	cmp	r3, r5
 800e696:	dc26      	bgt.n	800e6e6 <_printf_common+0x96>
 800e698:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e69c:	1e13      	subs	r3, r2, #0
 800e69e:	6822      	ldr	r2, [r4, #0]
 800e6a0:	bf18      	it	ne
 800e6a2:	2301      	movne	r3, #1
 800e6a4:	0692      	lsls	r2, r2, #26
 800e6a6:	d42b      	bmi.n	800e700 <_printf_common+0xb0>
 800e6a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e6ac:	4649      	mov	r1, r9
 800e6ae:	4638      	mov	r0, r7
 800e6b0:	47c0      	blx	r8
 800e6b2:	3001      	adds	r0, #1
 800e6b4:	d01e      	beq.n	800e6f4 <_printf_common+0xa4>
 800e6b6:	6823      	ldr	r3, [r4, #0]
 800e6b8:	6922      	ldr	r2, [r4, #16]
 800e6ba:	f003 0306 	and.w	r3, r3, #6
 800e6be:	2b04      	cmp	r3, #4
 800e6c0:	bf02      	ittt	eq
 800e6c2:	68e5      	ldreq	r5, [r4, #12]
 800e6c4:	6833      	ldreq	r3, [r6, #0]
 800e6c6:	1aed      	subeq	r5, r5, r3
 800e6c8:	68a3      	ldr	r3, [r4, #8]
 800e6ca:	bf0c      	ite	eq
 800e6cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e6d0:	2500      	movne	r5, #0
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	bfc4      	itt	gt
 800e6d6:	1a9b      	subgt	r3, r3, r2
 800e6d8:	18ed      	addgt	r5, r5, r3
 800e6da:	2600      	movs	r6, #0
 800e6dc:	341a      	adds	r4, #26
 800e6de:	42b5      	cmp	r5, r6
 800e6e0:	d11a      	bne.n	800e718 <_printf_common+0xc8>
 800e6e2:	2000      	movs	r0, #0
 800e6e4:	e008      	b.n	800e6f8 <_printf_common+0xa8>
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	4652      	mov	r2, sl
 800e6ea:	4649      	mov	r1, r9
 800e6ec:	4638      	mov	r0, r7
 800e6ee:	47c0      	blx	r8
 800e6f0:	3001      	adds	r0, #1
 800e6f2:	d103      	bne.n	800e6fc <_printf_common+0xac>
 800e6f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e6f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6fc:	3501      	adds	r5, #1
 800e6fe:	e7c6      	b.n	800e68e <_printf_common+0x3e>
 800e700:	18e1      	adds	r1, r4, r3
 800e702:	1c5a      	adds	r2, r3, #1
 800e704:	2030      	movs	r0, #48	; 0x30
 800e706:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e70a:	4422      	add	r2, r4
 800e70c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e710:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e714:	3302      	adds	r3, #2
 800e716:	e7c7      	b.n	800e6a8 <_printf_common+0x58>
 800e718:	2301      	movs	r3, #1
 800e71a:	4622      	mov	r2, r4
 800e71c:	4649      	mov	r1, r9
 800e71e:	4638      	mov	r0, r7
 800e720:	47c0      	blx	r8
 800e722:	3001      	adds	r0, #1
 800e724:	d0e6      	beq.n	800e6f4 <_printf_common+0xa4>
 800e726:	3601      	adds	r6, #1
 800e728:	e7d9      	b.n	800e6de <_printf_common+0x8e>
	...

0800e72c <_printf_i>:
 800e72c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e730:	7e0f      	ldrb	r7, [r1, #24]
 800e732:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e734:	2f78      	cmp	r7, #120	; 0x78
 800e736:	4691      	mov	r9, r2
 800e738:	4680      	mov	r8, r0
 800e73a:	460c      	mov	r4, r1
 800e73c:	469a      	mov	sl, r3
 800e73e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e742:	d807      	bhi.n	800e754 <_printf_i+0x28>
 800e744:	2f62      	cmp	r7, #98	; 0x62
 800e746:	d80a      	bhi.n	800e75e <_printf_i+0x32>
 800e748:	2f00      	cmp	r7, #0
 800e74a:	f000 80d4 	beq.w	800e8f6 <_printf_i+0x1ca>
 800e74e:	2f58      	cmp	r7, #88	; 0x58
 800e750:	f000 80c0 	beq.w	800e8d4 <_printf_i+0x1a8>
 800e754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e758:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e75c:	e03a      	b.n	800e7d4 <_printf_i+0xa8>
 800e75e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e762:	2b15      	cmp	r3, #21
 800e764:	d8f6      	bhi.n	800e754 <_printf_i+0x28>
 800e766:	a101      	add	r1, pc, #4	; (adr r1, 800e76c <_printf_i+0x40>)
 800e768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e76c:	0800e7c5 	.word	0x0800e7c5
 800e770:	0800e7d9 	.word	0x0800e7d9
 800e774:	0800e755 	.word	0x0800e755
 800e778:	0800e755 	.word	0x0800e755
 800e77c:	0800e755 	.word	0x0800e755
 800e780:	0800e755 	.word	0x0800e755
 800e784:	0800e7d9 	.word	0x0800e7d9
 800e788:	0800e755 	.word	0x0800e755
 800e78c:	0800e755 	.word	0x0800e755
 800e790:	0800e755 	.word	0x0800e755
 800e794:	0800e755 	.word	0x0800e755
 800e798:	0800e8dd 	.word	0x0800e8dd
 800e79c:	0800e805 	.word	0x0800e805
 800e7a0:	0800e897 	.word	0x0800e897
 800e7a4:	0800e755 	.word	0x0800e755
 800e7a8:	0800e755 	.word	0x0800e755
 800e7ac:	0800e8ff 	.word	0x0800e8ff
 800e7b0:	0800e755 	.word	0x0800e755
 800e7b4:	0800e805 	.word	0x0800e805
 800e7b8:	0800e755 	.word	0x0800e755
 800e7bc:	0800e755 	.word	0x0800e755
 800e7c0:	0800e89f 	.word	0x0800e89f
 800e7c4:	682b      	ldr	r3, [r5, #0]
 800e7c6:	1d1a      	adds	r2, r3, #4
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	602a      	str	r2, [r5, #0]
 800e7cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e7d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	e09f      	b.n	800e918 <_printf_i+0x1ec>
 800e7d8:	6820      	ldr	r0, [r4, #0]
 800e7da:	682b      	ldr	r3, [r5, #0]
 800e7dc:	0607      	lsls	r7, r0, #24
 800e7de:	f103 0104 	add.w	r1, r3, #4
 800e7e2:	6029      	str	r1, [r5, #0]
 800e7e4:	d501      	bpl.n	800e7ea <_printf_i+0xbe>
 800e7e6:	681e      	ldr	r6, [r3, #0]
 800e7e8:	e003      	b.n	800e7f2 <_printf_i+0xc6>
 800e7ea:	0646      	lsls	r6, r0, #25
 800e7ec:	d5fb      	bpl.n	800e7e6 <_printf_i+0xba>
 800e7ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e7f2:	2e00      	cmp	r6, #0
 800e7f4:	da03      	bge.n	800e7fe <_printf_i+0xd2>
 800e7f6:	232d      	movs	r3, #45	; 0x2d
 800e7f8:	4276      	negs	r6, r6
 800e7fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7fe:	485a      	ldr	r0, [pc, #360]	; (800e968 <_printf_i+0x23c>)
 800e800:	230a      	movs	r3, #10
 800e802:	e012      	b.n	800e82a <_printf_i+0xfe>
 800e804:	682b      	ldr	r3, [r5, #0]
 800e806:	6820      	ldr	r0, [r4, #0]
 800e808:	1d19      	adds	r1, r3, #4
 800e80a:	6029      	str	r1, [r5, #0]
 800e80c:	0605      	lsls	r5, r0, #24
 800e80e:	d501      	bpl.n	800e814 <_printf_i+0xe8>
 800e810:	681e      	ldr	r6, [r3, #0]
 800e812:	e002      	b.n	800e81a <_printf_i+0xee>
 800e814:	0641      	lsls	r1, r0, #25
 800e816:	d5fb      	bpl.n	800e810 <_printf_i+0xe4>
 800e818:	881e      	ldrh	r6, [r3, #0]
 800e81a:	4853      	ldr	r0, [pc, #332]	; (800e968 <_printf_i+0x23c>)
 800e81c:	2f6f      	cmp	r7, #111	; 0x6f
 800e81e:	bf0c      	ite	eq
 800e820:	2308      	moveq	r3, #8
 800e822:	230a      	movne	r3, #10
 800e824:	2100      	movs	r1, #0
 800e826:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e82a:	6865      	ldr	r5, [r4, #4]
 800e82c:	60a5      	str	r5, [r4, #8]
 800e82e:	2d00      	cmp	r5, #0
 800e830:	bfa2      	ittt	ge
 800e832:	6821      	ldrge	r1, [r4, #0]
 800e834:	f021 0104 	bicge.w	r1, r1, #4
 800e838:	6021      	strge	r1, [r4, #0]
 800e83a:	b90e      	cbnz	r6, 800e840 <_printf_i+0x114>
 800e83c:	2d00      	cmp	r5, #0
 800e83e:	d04b      	beq.n	800e8d8 <_printf_i+0x1ac>
 800e840:	4615      	mov	r5, r2
 800e842:	fbb6 f1f3 	udiv	r1, r6, r3
 800e846:	fb03 6711 	mls	r7, r3, r1, r6
 800e84a:	5dc7      	ldrb	r7, [r0, r7]
 800e84c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e850:	4637      	mov	r7, r6
 800e852:	42bb      	cmp	r3, r7
 800e854:	460e      	mov	r6, r1
 800e856:	d9f4      	bls.n	800e842 <_printf_i+0x116>
 800e858:	2b08      	cmp	r3, #8
 800e85a:	d10b      	bne.n	800e874 <_printf_i+0x148>
 800e85c:	6823      	ldr	r3, [r4, #0]
 800e85e:	07de      	lsls	r6, r3, #31
 800e860:	d508      	bpl.n	800e874 <_printf_i+0x148>
 800e862:	6923      	ldr	r3, [r4, #16]
 800e864:	6861      	ldr	r1, [r4, #4]
 800e866:	4299      	cmp	r1, r3
 800e868:	bfde      	ittt	le
 800e86a:	2330      	movle	r3, #48	; 0x30
 800e86c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e870:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e874:	1b52      	subs	r2, r2, r5
 800e876:	6122      	str	r2, [r4, #16]
 800e878:	f8cd a000 	str.w	sl, [sp]
 800e87c:	464b      	mov	r3, r9
 800e87e:	aa03      	add	r2, sp, #12
 800e880:	4621      	mov	r1, r4
 800e882:	4640      	mov	r0, r8
 800e884:	f7ff fee4 	bl	800e650 <_printf_common>
 800e888:	3001      	adds	r0, #1
 800e88a:	d14a      	bne.n	800e922 <_printf_i+0x1f6>
 800e88c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e890:	b004      	add	sp, #16
 800e892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e896:	6823      	ldr	r3, [r4, #0]
 800e898:	f043 0320 	orr.w	r3, r3, #32
 800e89c:	6023      	str	r3, [r4, #0]
 800e89e:	4833      	ldr	r0, [pc, #204]	; (800e96c <_printf_i+0x240>)
 800e8a0:	2778      	movs	r7, #120	; 0x78
 800e8a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e8a6:	6823      	ldr	r3, [r4, #0]
 800e8a8:	6829      	ldr	r1, [r5, #0]
 800e8aa:	061f      	lsls	r7, r3, #24
 800e8ac:	f851 6b04 	ldr.w	r6, [r1], #4
 800e8b0:	d402      	bmi.n	800e8b8 <_printf_i+0x18c>
 800e8b2:	065f      	lsls	r7, r3, #25
 800e8b4:	bf48      	it	mi
 800e8b6:	b2b6      	uxthmi	r6, r6
 800e8b8:	07df      	lsls	r7, r3, #31
 800e8ba:	bf48      	it	mi
 800e8bc:	f043 0320 	orrmi.w	r3, r3, #32
 800e8c0:	6029      	str	r1, [r5, #0]
 800e8c2:	bf48      	it	mi
 800e8c4:	6023      	strmi	r3, [r4, #0]
 800e8c6:	b91e      	cbnz	r6, 800e8d0 <_printf_i+0x1a4>
 800e8c8:	6823      	ldr	r3, [r4, #0]
 800e8ca:	f023 0320 	bic.w	r3, r3, #32
 800e8ce:	6023      	str	r3, [r4, #0]
 800e8d0:	2310      	movs	r3, #16
 800e8d2:	e7a7      	b.n	800e824 <_printf_i+0xf8>
 800e8d4:	4824      	ldr	r0, [pc, #144]	; (800e968 <_printf_i+0x23c>)
 800e8d6:	e7e4      	b.n	800e8a2 <_printf_i+0x176>
 800e8d8:	4615      	mov	r5, r2
 800e8da:	e7bd      	b.n	800e858 <_printf_i+0x12c>
 800e8dc:	682b      	ldr	r3, [r5, #0]
 800e8de:	6826      	ldr	r6, [r4, #0]
 800e8e0:	6961      	ldr	r1, [r4, #20]
 800e8e2:	1d18      	adds	r0, r3, #4
 800e8e4:	6028      	str	r0, [r5, #0]
 800e8e6:	0635      	lsls	r5, r6, #24
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	d501      	bpl.n	800e8f0 <_printf_i+0x1c4>
 800e8ec:	6019      	str	r1, [r3, #0]
 800e8ee:	e002      	b.n	800e8f6 <_printf_i+0x1ca>
 800e8f0:	0670      	lsls	r0, r6, #25
 800e8f2:	d5fb      	bpl.n	800e8ec <_printf_i+0x1c0>
 800e8f4:	8019      	strh	r1, [r3, #0]
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	6123      	str	r3, [r4, #16]
 800e8fa:	4615      	mov	r5, r2
 800e8fc:	e7bc      	b.n	800e878 <_printf_i+0x14c>
 800e8fe:	682b      	ldr	r3, [r5, #0]
 800e900:	1d1a      	adds	r2, r3, #4
 800e902:	602a      	str	r2, [r5, #0]
 800e904:	681d      	ldr	r5, [r3, #0]
 800e906:	6862      	ldr	r2, [r4, #4]
 800e908:	2100      	movs	r1, #0
 800e90a:	4628      	mov	r0, r5
 800e90c:	f7f1 fc60 	bl	80001d0 <memchr>
 800e910:	b108      	cbz	r0, 800e916 <_printf_i+0x1ea>
 800e912:	1b40      	subs	r0, r0, r5
 800e914:	6060      	str	r0, [r4, #4]
 800e916:	6863      	ldr	r3, [r4, #4]
 800e918:	6123      	str	r3, [r4, #16]
 800e91a:	2300      	movs	r3, #0
 800e91c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e920:	e7aa      	b.n	800e878 <_printf_i+0x14c>
 800e922:	6923      	ldr	r3, [r4, #16]
 800e924:	462a      	mov	r2, r5
 800e926:	4649      	mov	r1, r9
 800e928:	4640      	mov	r0, r8
 800e92a:	47d0      	blx	sl
 800e92c:	3001      	adds	r0, #1
 800e92e:	d0ad      	beq.n	800e88c <_printf_i+0x160>
 800e930:	6823      	ldr	r3, [r4, #0]
 800e932:	079b      	lsls	r3, r3, #30
 800e934:	d413      	bmi.n	800e95e <_printf_i+0x232>
 800e936:	68e0      	ldr	r0, [r4, #12]
 800e938:	9b03      	ldr	r3, [sp, #12]
 800e93a:	4298      	cmp	r0, r3
 800e93c:	bfb8      	it	lt
 800e93e:	4618      	movlt	r0, r3
 800e940:	e7a6      	b.n	800e890 <_printf_i+0x164>
 800e942:	2301      	movs	r3, #1
 800e944:	4632      	mov	r2, r6
 800e946:	4649      	mov	r1, r9
 800e948:	4640      	mov	r0, r8
 800e94a:	47d0      	blx	sl
 800e94c:	3001      	adds	r0, #1
 800e94e:	d09d      	beq.n	800e88c <_printf_i+0x160>
 800e950:	3501      	adds	r5, #1
 800e952:	68e3      	ldr	r3, [r4, #12]
 800e954:	9903      	ldr	r1, [sp, #12]
 800e956:	1a5b      	subs	r3, r3, r1
 800e958:	42ab      	cmp	r3, r5
 800e95a:	dcf2      	bgt.n	800e942 <_printf_i+0x216>
 800e95c:	e7eb      	b.n	800e936 <_printf_i+0x20a>
 800e95e:	2500      	movs	r5, #0
 800e960:	f104 0619 	add.w	r6, r4, #25
 800e964:	e7f5      	b.n	800e952 <_printf_i+0x226>
 800e966:	bf00      	nop
 800e968:	08015589 	.word	0x08015589
 800e96c:	0801559a 	.word	0x0801559a

0800e970 <powf>:
 800e970:	b508      	push	{r3, lr}
 800e972:	ed2d 8b04 	vpush	{d8-d9}
 800e976:	eeb0 8a60 	vmov.f32	s16, s1
 800e97a:	eeb0 9a40 	vmov.f32	s18, s0
 800e97e:	f000 f885 	bl	800ea8c <__ieee754_powf>
 800e982:	eeb4 8a48 	vcmp.f32	s16, s16
 800e986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e98a:	eef0 8a40 	vmov.f32	s17, s0
 800e98e:	d63e      	bvs.n	800ea0e <powf+0x9e>
 800e990:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800e994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e998:	d112      	bne.n	800e9c0 <powf+0x50>
 800e99a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9a2:	d039      	beq.n	800ea18 <powf+0xa8>
 800e9a4:	eeb0 0a48 	vmov.f32	s0, s16
 800e9a8:	f000 f840 	bl	800ea2c <finitef>
 800e9ac:	b378      	cbz	r0, 800ea0e <powf+0x9e>
 800e9ae:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e9b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9b6:	d52a      	bpl.n	800ea0e <powf+0x9e>
 800e9b8:	f7ff fc64 	bl	800e284 <__errno>
 800e9bc:	2322      	movs	r3, #34	; 0x22
 800e9be:	e014      	b.n	800e9ea <powf+0x7a>
 800e9c0:	f000 f834 	bl	800ea2c <finitef>
 800e9c4:	b998      	cbnz	r0, 800e9ee <powf+0x7e>
 800e9c6:	eeb0 0a49 	vmov.f32	s0, s18
 800e9ca:	f000 f82f 	bl	800ea2c <finitef>
 800e9ce:	b170      	cbz	r0, 800e9ee <powf+0x7e>
 800e9d0:	eeb0 0a48 	vmov.f32	s0, s16
 800e9d4:	f000 f82a 	bl	800ea2c <finitef>
 800e9d8:	b148      	cbz	r0, 800e9ee <powf+0x7e>
 800e9da:	eef4 8a68 	vcmp.f32	s17, s17
 800e9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9e2:	d7e9      	bvc.n	800e9b8 <powf+0x48>
 800e9e4:	f7ff fc4e 	bl	800e284 <__errno>
 800e9e8:	2321      	movs	r3, #33	; 0x21
 800e9ea:	6003      	str	r3, [r0, #0]
 800e9ec:	e00f      	b.n	800ea0e <powf+0x9e>
 800e9ee:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e9f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9f6:	d10a      	bne.n	800ea0e <powf+0x9e>
 800e9f8:	eeb0 0a49 	vmov.f32	s0, s18
 800e9fc:	f000 f816 	bl	800ea2c <finitef>
 800ea00:	b128      	cbz	r0, 800ea0e <powf+0x9e>
 800ea02:	eeb0 0a48 	vmov.f32	s0, s16
 800ea06:	f000 f811 	bl	800ea2c <finitef>
 800ea0a:	2800      	cmp	r0, #0
 800ea0c:	d1d4      	bne.n	800e9b8 <powf+0x48>
 800ea0e:	eeb0 0a68 	vmov.f32	s0, s17
 800ea12:	ecbd 8b04 	vpop	{d8-d9}
 800ea16:	bd08      	pop	{r3, pc}
 800ea18:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800ea1c:	e7f7      	b.n	800ea0e <powf+0x9e>

0800ea1e <fabsf>:
 800ea1e:	ee10 3a10 	vmov	r3, s0
 800ea22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ea26:	ee00 3a10 	vmov	s0, r3
 800ea2a:	4770      	bx	lr

0800ea2c <finitef>:
 800ea2c:	b082      	sub	sp, #8
 800ea2e:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ea32:	9801      	ldr	r0, [sp, #4]
 800ea34:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ea38:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ea3c:	bfac      	ite	ge
 800ea3e:	2000      	movge	r0, #0
 800ea40:	2001      	movlt	r0, #1
 800ea42:	b002      	add	sp, #8
 800ea44:	4770      	bx	lr

0800ea46 <with_errnof>:
 800ea46:	b513      	push	{r0, r1, r4, lr}
 800ea48:	4604      	mov	r4, r0
 800ea4a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ea4e:	f7ff fc19 	bl	800e284 <__errno>
 800ea52:	ed9d 0a01 	vldr	s0, [sp, #4]
 800ea56:	6004      	str	r4, [r0, #0]
 800ea58:	b002      	add	sp, #8
 800ea5a:	bd10      	pop	{r4, pc}

0800ea5c <xflowf>:
 800ea5c:	b130      	cbz	r0, 800ea6c <xflowf+0x10>
 800ea5e:	eef1 7a40 	vneg.f32	s15, s0
 800ea62:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ea66:	2022      	movs	r0, #34	; 0x22
 800ea68:	f7ff bfed 	b.w	800ea46 <with_errnof>
 800ea6c:	eef0 7a40 	vmov.f32	s15, s0
 800ea70:	e7f7      	b.n	800ea62 <xflowf+0x6>
	...

0800ea74 <__math_uflowf>:
 800ea74:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ea7c <__math_uflowf+0x8>
 800ea78:	f7ff bff0 	b.w	800ea5c <xflowf>
 800ea7c:	10000000 	.word	0x10000000

0800ea80 <__math_oflowf>:
 800ea80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ea88 <__math_oflowf+0x8>
 800ea84:	f7ff bfea 	b.w	800ea5c <xflowf>
 800ea88:	70000000 	.word	0x70000000

0800ea8c <__ieee754_powf>:
 800ea8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea90:	ee10 4a90 	vmov	r4, s1
 800ea94:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800ea98:	ed2d 8b02 	vpush	{d8}
 800ea9c:	ee10 7a10 	vmov	r7, s0
 800eaa0:	eeb0 8a40 	vmov.f32	s16, s0
 800eaa4:	eef0 8a60 	vmov.f32	s17, s1
 800eaa8:	d10c      	bne.n	800eac4 <__ieee754_powf+0x38>
 800eaaa:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 800eaae:	007f      	lsls	r7, r7, #1
 800eab0:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 800eab4:	f240 8292 	bls.w	800efdc <__ieee754_powf+0x550>
 800eab8:	ee38 0a28 	vadd.f32	s0, s16, s17
 800eabc:	ecbd 8b02 	vpop	{d8}
 800eac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eac4:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 800eac8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800eacc:	dcf4      	bgt.n	800eab8 <__ieee754_powf+0x2c>
 800eace:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800ead2:	dd08      	ble.n	800eae6 <__ieee754_powf+0x5a>
 800ead4:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800ead8:	d1ee      	bne.n	800eab8 <__ieee754_powf+0x2c>
 800eada:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800eade:	0064      	lsls	r4, r4, #1
 800eae0:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800eae4:	e7e6      	b.n	800eab4 <__ieee754_powf+0x28>
 800eae6:	2f00      	cmp	r7, #0
 800eae8:	da20      	bge.n	800eb2c <__ieee754_powf+0xa0>
 800eaea:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800eaee:	da2d      	bge.n	800eb4c <__ieee754_powf+0xc0>
 800eaf0:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800eaf4:	f2c0 827b 	blt.w	800efee <__ieee754_powf+0x562>
 800eaf8:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800eafc:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800eb00:	fa48 f603 	asr.w	r6, r8, r3
 800eb04:	fa06 f303 	lsl.w	r3, r6, r3
 800eb08:	4543      	cmp	r3, r8
 800eb0a:	f040 8270 	bne.w	800efee <__ieee754_powf+0x562>
 800eb0e:	f006 0601 	and.w	r6, r6, #1
 800eb12:	f1c6 0602 	rsb	r6, r6, #2
 800eb16:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800eb1a:	d11f      	bne.n	800eb5c <__ieee754_powf+0xd0>
 800eb1c:	2c00      	cmp	r4, #0
 800eb1e:	f280 8263 	bge.w	800efe8 <__ieee754_powf+0x55c>
 800eb22:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eb26:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800eb2a:	e7c7      	b.n	800eabc <__ieee754_powf+0x30>
 800eb2c:	2600      	movs	r6, #0
 800eb2e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800eb32:	d1f0      	bne.n	800eb16 <__ieee754_powf+0x8a>
 800eb34:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800eb38:	f000 8250 	beq.w	800efdc <__ieee754_powf+0x550>
 800eb3c:	dd08      	ble.n	800eb50 <__ieee754_powf+0xc4>
 800eb3e:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800ee44 <__ieee754_powf+0x3b8>
 800eb42:	2c00      	cmp	r4, #0
 800eb44:	bfa8      	it	ge
 800eb46:	eeb0 0a68 	vmovge.f32	s0, s17
 800eb4a:	e7b7      	b.n	800eabc <__ieee754_powf+0x30>
 800eb4c:	2602      	movs	r6, #2
 800eb4e:	e7ee      	b.n	800eb2e <__ieee754_powf+0xa2>
 800eb50:	2c00      	cmp	r4, #0
 800eb52:	f280 8246 	bge.w	800efe2 <__ieee754_powf+0x556>
 800eb56:	eeb1 0a68 	vneg.f32	s0, s17
 800eb5a:	e7af      	b.n	800eabc <__ieee754_powf+0x30>
 800eb5c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800eb60:	d102      	bne.n	800eb68 <__ieee754_powf+0xdc>
 800eb62:	ee28 0a08 	vmul.f32	s0, s16, s16
 800eb66:	e7a9      	b.n	800eabc <__ieee754_powf+0x30>
 800eb68:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800eb6c:	eeb0 0a48 	vmov.f32	s0, s16
 800eb70:	d107      	bne.n	800eb82 <__ieee754_powf+0xf6>
 800eb72:	2f00      	cmp	r7, #0
 800eb74:	db05      	blt.n	800eb82 <__ieee754_powf+0xf6>
 800eb76:	ecbd 8b02 	vpop	{d8}
 800eb7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb7e:	f000 bab5 	b.w	800f0ec <__ieee754_sqrtf>
 800eb82:	f7ff ff4c 	bl	800ea1e <fabsf>
 800eb86:	b125      	cbz	r5, 800eb92 <__ieee754_powf+0x106>
 800eb88:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 800eb8c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800eb90:	d115      	bne.n	800ebbe <__ieee754_powf+0x132>
 800eb92:	2c00      	cmp	r4, #0
 800eb94:	bfbc      	itt	lt
 800eb96:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800eb9a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800eb9e:	2f00      	cmp	r7, #0
 800eba0:	da8c      	bge.n	800eabc <__ieee754_powf+0x30>
 800eba2:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800eba6:	4335      	orrs	r5, r6
 800eba8:	d104      	bne.n	800ebb4 <__ieee754_powf+0x128>
 800ebaa:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ebae:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ebb2:	e783      	b.n	800eabc <__ieee754_powf+0x30>
 800ebb4:	2e01      	cmp	r6, #1
 800ebb6:	d181      	bne.n	800eabc <__ieee754_powf+0x30>
 800ebb8:	eeb1 0a40 	vneg.f32	s0, s0
 800ebbc:	e77e      	b.n	800eabc <__ieee754_powf+0x30>
 800ebbe:	0ff8      	lsrs	r0, r7, #31
 800ebc0:	3801      	subs	r0, #1
 800ebc2:	ea56 0300 	orrs.w	r3, r6, r0
 800ebc6:	d104      	bne.n	800ebd2 <__ieee754_powf+0x146>
 800ebc8:	ee38 8a48 	vsub.f32	s16, s16, s16
 800ebcc:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800ebd0:	e774      	b.n	800eabc <__ieee754_powf+0x30>
 800ebd2:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800ebd6:	dd73      	ble.n	800ecc0 <__ieee754_powf+0x234>
 800ebd8:	4b9b      	ldr	r3, [pc, #620]	; (800ee48 <__ieee754_powf+0x3bc>)
 800ebda:	429d      	cmp	r5, r3
 800ebdc:	dc08      	bgt.n	800ebf0 <__ieee754_powf+0x164>
 800ebde:	2c00      	cmp	r4, #0
 800ebe0:	da0b      	bge.n	800ebfa <__ieee754_powf+0x16e>
 800ebe2:	2000      	movs	r0, #0
 800ebe4:	ecbd 8b02 	vpop	{d8}
 800ebe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebec:	f7ff bf48 	b.w	800ea80 <__math_oflowf>
 800ebf0:	4b96      	ldr	r3, [pc, #600]	; (800ee4c <__ieee754_powf+0x3c0>)
 800ebf2:	429d      	cmp	r5, r3
 800ebf4:	dd08      	ble.n	800ec08 <__ieee754_powf+0x17c>
 800ebf6:	2c00      	cmp	r4, #0
 800ebf8:	dcf3      	bgt.n	800ebe2 <__ieee754_powf+0x156>
 800ebfa:	2000      	movs	r0, #0
 800ebfc:	ecbd 8b02 	vpop	{d8}
 800ec00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec04:	f7ff bf36 	b.w	800ea74 <__math_uflowf>
 800ec08:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ec0c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ec10:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800ee50 <__ieee754_powf+0x3c4>
 800ec14:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800ec18:	eee0 6a67 	vfms.f32	s13, s0, s15
 800ec1c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ec20:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800ec24:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ec28:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ec2c:	eddf 7a89 	vldr	s15, [pc, #548]	; 800ee54 <__ieee754_powf+0x3c8>
 800ec30:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800ec34:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800ee58 <__ieee754_powf+0x3cc>
 800ec38:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ec3c:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800ee5c <__ieee754_powf+0x3d0>
 800ec40:	eef0 6a67 	vmov.f32	s13, s15
 800ec44:	eee0 6a07 	vfma.f32	s13, s0, s14
 800ec48:	ee16 3a90 	vmov	r3, s13
 800ec4c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ec50:	f023 030f 	bic.w	r3, r3, #15
 800ec54:	ee06 3a90 	vmov	s13, r3
 800ec58:	eee0 6a47 	vfms.f32	s13, s0, s14
 800ec5c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ec60:	3e01      	subs	r6, #1
 800ec62:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800ec66:	4306      	orrs	r6, r0
 800ec68:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ec6c:	f024 040f 	bic.w	r4, r4, #15
 800ec70:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800ec74:	bf08      	it	eq
 800ec76:	eeb0 8a47 	vmoveq.f32	s16, s14
 800ec7a:	ee07 4a10 	vmov	s14, r4
 800ec7e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800ec82:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800ec86:	ee07 3a90 	vmov	s15, r3
 800ec8a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800ec8e:	ee07 4a10 	vmov	s14, r4
 800ec92:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec96:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800ec9a:	ee17 1a10 	vmov	r1, s14
 800ec9e:	2900      	cmp	r1, #0
 800eca0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eca4:	f340 817c 	ble.w	800efa0 <__ieee754_powf+0x514>
 800eca8:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800ecac:	f340 80f8 	ble.w	800eea0 <__ieee754_powf+0x414>
 800ecb0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ecb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecb8:	bf4c      	ite	mi
 800ecba:	2001      	movmi	r0, #1
 800ecbc:	2000      	movpl	r0, #0
 800ecbe:	e791      	b.n	800ebe4 <__ieee754_powf+0x158>
 800ecc0:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 800ecc4:	bf01      	itttt	eq
 800ecc6:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800ee60 <__ieee754_powf+0x3d4>
 800ecca:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800ecce:	f06f 0317 	mvneq.w	r3, #23
 800ecd2:	ee17 5a90 	vmoveq	r5, s15
 800ecd6:	ea4f 52e5 	mov.w	r2, r5, asr #23
 800ecda:	bf18      	it	ne
 800ecdc:	2300      	movne	r3, #0
 800ecde:	3a7f      	subs	r2, #127	; 0x7f
 800ece0:	441a      	add	r2, r3
 800ece2:	4b60      	ldr	r3, [pc, #384]	; (800ee64 <__ieee754_powf+0x3d8>)
 800ece4:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800ece8:	429d      	cmp	r5, r3
 800ecea:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800ecee:	dd06      	ble.n	800ecfe <__ieee754_powf+0x272>
 800ecf0:	4b5d      	ldr	r3, [pc, #372]	; (800ee68 <__ieee754_powf+0x3dc>)
 800ecf2:	429d      	cmp	r5, r3
 800ecf4:	f340 80a4 	ble.w	800ee40 <__ieee754_powf+0x3b4>
 800ecf8:	3201      	adds	r2, #1
 800ecfa:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800ecfe:	2500      	movs	r5, #0
 800ed00:	4b5a      	ldr	r3, [pc, #360]	; (800ee6c <__ieee754_powf+0x3e0>)
 800ed02:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800ed06:	ee07 1a10 	vmov	s14, r1
 800ed0a:	edd3 5a00 	vldr	s11, [r3]
 800ed0e:	4b58      	ldr	r3, [pc, #352]	; (800ee70 <__ieee754_powf+0x3e4>)
 800ed10:	ee75 7a87 	vadd.f32	s15, s11, s14
 800ed14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ed18:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800ed1c:	1049      	asrs	r1, r1, #1
 800ed1e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800ed22:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800ed26:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800ed2a:	ee37 6a65 	vsub.f32	s12, s14, s11
 800ed2e:	ee07 1a90 	vmov	s15, r1
 800ed32:	ee26 5a24 	vmul.f32	s10, s12, s9
 800ed36:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800ed3a:	ee15 7a10 	vmov	r7, s10
 800ed3e:	401f      	ands	r7, r3
 800ed40:	ee06 7a90 	vmov	s13, r7
 800ed44:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800ed48:	ee37 7a65 	vsub.f32	s14, s14, s11
 800ed4c:	ee65 7a05 	vmul.f32	s15, s10, s10
 800ed50:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800ed54:	eddf 5a47 	vldr	s11, [pc, #284]	; 800ee74 <__ieee754_powf+0x3e8>
 800ed58:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800ee78 <__ieee754_powf+0x3ec>
 800ed5c:	eee7 5a87 	vfma.f32	s11, s15, s14
 800ed60:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800ee7c <__ieee754_powf+0x3f0>
 800ed64:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ed68:	eddf 5a39 	vldr	s11, [pc, #228]	; 800ee50 <__ieee754_powf+0x3c4>
 800ed6c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ed70:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800ee80 <__ieee754_powf+0x3f4>
 800ed74:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ed78:	eddf 5a42 	vldr	s11, [pc, #264]	; 800ee84 <__ieee754_powf+0x3f8>
 800ed7c:	ee26 6a24 	vmul.f32	s12, s12, s9
 800ed80:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ed84:	ee35 7a26 	vadd.f32	s14, s10, s13
 800ed88:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800ed8c:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ed90:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800ed94:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800ed98:	eef0 5a67 	vmov.f32	s11, s15
 800ed9c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800eda0:	ee75 5a87 	vadd.f32	s11, s11, s14
 800eda4:	ee15 1a90 	vmov	r1, s11
 800eda8:	4019      	ands	r1, r3
 800edaa:	ee05 1a90 	vmov	s11, r1
 800edae:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800edb2:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800edb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800edba:	ee67 7a85 	vmul.f32	s15, s15, s10
 800edbe:	eee6 7a25 	vfma.f32	s15, s12, s11
 800edc2:	eeb0 6a67 	vmov.f32	s12, s15
 800edc6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800edca:	ee16 1a10 	vmov	r1, s12
 800edce:	4019      	ands	r1, r3
 800edd0:	ee07 1a10 	vmov	s14, r1
 800edd4:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800edd8:	ee06 1a10 	vmov	s12, r1
 800eddc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ede0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800ee88 <__ieee754_powf+0x3fc>
 800ede4:	4929      	ldr	r1, [pc, #164]	; (800ee8c <__ieee754_powf+0x400>)
 800ede6:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800ee90 <__ieee754_powf+0x404>
 800edea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800edee:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800ee94 <__ieee754_powf+0x408>
 800edf2:	eee6 7a07 	vfma.f32	s15, s12, s14
 800edf6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800edfa:	ed91 7a00 	vldr	s14, [r1]
 800edfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ee02:	ee07 2a10 	vmov	s14, r2
 800ee06:	eef0 6a67 	vmov.f32	s13, s15
 800ee0a:	4a23      	ldr	r2, [pc, #140]	; (800ee98 <__ieee754_powf+0x40c>)
 800ee0c:	eee6 6a25 	vfma.f32	s13, s12, s11
 800ee10:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800ee14:	ed92 5a00 	vldr	s10, [r2]
 800ee18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ee1c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800ee20:	ee76 6a87 	vadd.f32	s13, s13, s14
 800ee24:	ee16 2a90 	vmov	r2, s13
 800ee28:	4013      	ands	r3, r2
 800ee2a:	ee06 3a90 	vmov	s13, r3
 800ee2e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ee32:	ee37 7a45 	vsub.f32	s14, s14, s10
 800ee36:	eea6 7a65 	vfms.f32	s14, s12, s11
 800ee3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ee3e:	e70f      	b.n	800ec60 <__ieee754_powf+0x1d4>
 800ee40:	2501      	movs	r5, #1
 800ee42:	e75d      	b.n	800ed00 <__ieee754_powf+0x274>
 800ee44:	00000000 	.word	0x00000000
 800ee48:	3f7ffff3 	.word	0x3f7ffff3
 800ee4c:	3f800007 	.word	0x3f800007
 800ee50:	3eaaaaab 	.word	0x3eaaaaab
 800ee54:	3fb8aa3b 	.word	0x3fb8aa3b
 800ee58:	36eca570 	.word	0x36eca570
 800ee5c:	3fb8aa00 	.word	0x3fb8aa00
 800ee60:	4b800000 	.word	0x4b800000
 800ee64:	001cc471 	.word	0x001cc471
 800ee68:	005db3d6 	.word	0x005db3d6
 800ee6c:	080155ac 	.word	0x080155ac
 800ee70:	fffff000 	.word	0xfffff000
 800ee74:	3e6c3255 	.word	0x3e6c3255
 800ee78:	3e53f142 	.word	0x3e53f142
 800ee7c:	3e8ba305 	.word	0x3e8ba305
 800ee80:	3edb6db7 	.word	0x3edb6db7
 800ee84:	3f19999a 	.word	0x3f19999a
 800ee88:	3f76384f 	.word	0x3f76384f
 800ee8c:	080155bc 	.word	0x080155bc
 800ee90:	3f763800 	.word	0x3f763800
 800ee94:	369dc3a0 	.word	0x369dc3a0
 800ee98:	080155b4 	.word	0x080155b4
 800ee9c:	3338aa3c 	.word	0x3338aa3c
 800eea0:	f040 8093 	bne.w	800efca <__ieee754_powf+0x53e>
 800eea4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800ee9c <__ieee754_powf+0x410>
 800eea8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800eeac:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800eeb0:	eef4 6ac7 	vcmpe.f32	s13, s14
 800eeb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeb8:	f73f aefa 	bgt.w	800ecb0 <__ieee754_powf+0x224>
 800eebc:	15db      	asrs	r3, r3, #23
 800eebe:	3b7e      	subs	r3, #126	; 0x7e
 800eec0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800eec4:	4118      	asrs	r0, r3
 800eec6:	4408      	add	r0, r1
 800eec8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800eecc:	4a49      	ldr	r2, [pc, #292]	; (800eff4 <__ieee754_powf+0x568>)
 800eece:	3b7f      	subs	r3, #127	; 0x7f
 800eed0:	411a      	asrs	r2, r3
 800eed2:	4002      	ands	r2, r0
 800eed4:	ee07 2a10 	vmov	s14, r2
 800eed8:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800eedc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800eee0:	f1c3 0317 	rsb	r3, r3, #23
 800eee4:	4118      	asrs	r0, r3
 800eee6:	2900      	cmp	r1, #0
 800eee8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eeec:	bfb8      	it	lt
 800eeee:	4240      	neglt	r0, r0
 800eef0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800eef4:	eddf 6a40 	vldr	s13, [pc, #256]	; 800eff8 <__ieee754_powf+0x56c>
 800eef8:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800effc <__ieee754_powf+0x570>
 800eefc:	ee17 3a10 	vmov	r3, s14
 800ef00:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ef04:	f023 030f 	bic.w	r3, r3, #15
 800ef08:	ee07 3a10 	vmov	s14, r3
 800ef0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef10:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ef14:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ef18:	eddf 7a39 	vldr	s15, [pc, #228]	; 800f000 <__ieee754_powf+0x574>
 800ef1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef20:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800ef24:	eef0 6a67 	vmov.f32	s13, s15
 800ef28:	eee7 6a06 	vfma.f32	s13, s14, s12
 800ef2c:	eef0 5a66 	vmov.f32	s11, s13
 800ef30:	eee7 5a46 	vfms.f32	s11, s14, s12
 800ef34:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ef38:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ef3c:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800f004 <__ieee754_powf+0x578>
 800ef40:	eddf 5a31 	vldr	s11, [pc, #196]	; 800f008 <__ieee754_powf+0x57c>
 800ef44:	eea7 6a25 	vfma.f32	s12, s14, s11
 800ef48:	eddf 5a30 	vldr	s11, [pc, #192]	; 800f00c <__ieee754_powf+0x580>
 800ef4c:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ef50:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800f010 <__ieee754_powf+0x584>
 800ef54:	eea5 6a87 	vfma.f32	s12, s11, s14
 800ef58:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800f014 <__ieee754_powf+0x588>
 800ef5c:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ef60:	eeb0 6a66 	vmov.f32	s12, s13
 800ef64:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800ef68:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ef6c:	ee66 5a86 	vmul.f32	s11, s13, s12
 800ef70:	ee36 6a47 	vsub.f32	s12, s12, s14
 800ef74:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800ef78:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800ef7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef80:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ef84:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ef88:	ee10 3a10 	vmov	r3, s0
 800ef8c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ef90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ef94:	da1f      	bge.n	800efd6 <__ieee754_powf+0x54a>
 800ef96:	f000 f843 	bl	800f020 <scalbnf>
 800ef9a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ef9e:	e58d      	b.n	800eabc <__ieee754_powf+0x30>
 800efa0:	4a1d      	ldr	r2, [pc, #116]	; (800f018 <__ieee754_powf+0x58c>)
 800efa2:	4293      	cmp	r3, r2
 800efa4:	dd07      	ble.n	800efb6 <__ieee754_powf+0x52a>
 800efa6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800efaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efae:	bf4c      	ite	mi
 800efb0:	2001      	movmi	r0, #1
 800efb2:	2000      	movpl	r0, #0
 800efb4:	e622      	b.n	800ebfc <__ieee754_powf+0x170>
 800efb6:	d108      	bne.n	800efca <__ieee754_powf+0x53e>
 800efb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800efbc:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800efc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efc4:	f6ff af7a 	blt.w	800eebc <__ieee754_powf+0x430>
 800efc8:	e7ed      	b.n	800efa6 <__ieee754_powf+0x51a>
 800efca:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800efce:	f73f af75 	bgt.w	800eebc <__ieee754_powf+0x430>
 800efd2:	2000      	movs	r0, #0
 800efd4:	e78c      	b.n	800eef0 <__ieee754_powf+0x464>
 800efd6:	ee00 3a10 	vmov	s0, r3
 800efda:	e7de      	b.n	800ef9a <__ieee754_powf+0x50e>
 800efdc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800efe0:	e56c      	b.n	800eabc <__ieee754_powf+0x30>
 800efe2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800f01c <__ieee754_powf+0x590>
 800efe6:	e569      	b.n	800eabc <__ieee754_powf+0x30>
 800efe8:	eeb0 0a48 	vmov.f32	s0, s16
 800efec:	e566      	b.n	800eabc <__ieee754_powf+0x30>
 800efee:	2600      	movs	r6, #0
 800eff0:	e591      	b.n	800eb16 <__ieee754_powf+0x8a>
 800eff2:	bf00      	nop
 800eff4:	ff800000 	.word	0xff800000
 800eff8:	3f317218 	.word	0x3f317218
 800effc:	3f317200 	.word	0x3f317200
 800f000:	35bfbe8c 	.word	0x35bfbe8c
 800f004:	b5ddea0e 	.word	0xb5ddea0e
 800f008:	3331bb4c 	.word	0x3331bb4c
 800f00c:	388ab355 	.word	0x388ab355
 800f010:	bb360b61 	.word	0xbb360b61
 800f014:	3e2aaaab 	.word	0x3e2aaaab
 800f018:	43160000 	.word	0x43160000
 800f01c:	00000000 	.word	0x00000000

0800f020 <scalbnf>:
 800f020:	ee10 3a10 	vmov	r3, s0
 800f024:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800f028:	d02b      	beq.n	800f082 <scalbnf+0x62>
 800f02a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f02e:	d302      	bcc.n	800f036 <scalbnf+0x16>
 800f030:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f034:	4770      	bx	lr
 800f036:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800f03a:	d123      	bne.n	800f084 <scalbnf+0x64>
 800f03c:	4b24      	ldr	r3, [pc, #144]	; (800f0d0 <scalbnf+0xb0>)
 800f03e:	eddf 7a25 	vldr	s15, [pc, #148]	; 800f0d4 <scalbnf+0xb4>
 800f042:	4298      	cmp	r0, r3
 800f044:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f048:	db17      	blt.n	800f07a <scalbnf+0x5a>
 800f04a:	ee10 3a10 	vmov	r3, s0
 800f04e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f052:	3a19      	subs	r2, #25
 800f054:	f24c 3150 	movw	r1, #50000	; 0xc350
 800f058:	4288      	cmp	r0, r1
 800f05a:	dd15      	ble.n	800f088 <scalbnf+0x68>
 800f05c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800f0d8 <scalbnf+0xb8>
 800f060:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800f0dc <scalbnf+0xbc>
 800f064:	ee10 3a10 	vmov	r3, s0
 800f068:	eeb0 7a67 	vmov.f32	s14, s15
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	bfb8      	it	lt
 800f070:	eef0 7a66 	vmovlt.f32	s15, s13
 800f074:	ee27 0a87 	vmul.f32	s0, s15, s14
 800f078:	4770      	bx	lr
 800f07a:	eddf 7a19 	vldr	s15, [pc, #100]	; 800f0e0 <scalbnf+0xc0>
 800f07e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f082:	4770      	bx	lr
 800f084:	0dd2      	lsrs	r2, r2, #23
 800f086:	e7e5      	b.n	800f054 <scalbnf+0x34>
 800f088:	4410      	add	r0, r2
 800f08a:	28fe      	cmp	r0, #254	; 0xfe
 800f08c:	dce6      	bgt.n	800f05c <scalbnf+0x3c>
 800f08e:	2800      	cmp	r0, #0
 800f090:	dd06      	ble.n	800f0a0 <scalbnf+0x80>
 800f092:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f096:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f09a:	ee00 3a10 	vmov	s0, r3
 800f09e:	4770      	bx	lr
 800f0a0:	f110 0f16 	cmn.w	r0, #22
 800f0a4:	da09      	bge.n	800f0ba <scalbnf+0x9a>
 800f0a6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800f0e0 <scalbnf+0xc0>
 800f0aa:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800f0e4 <scalbnf+0xc4>
 800f0ae:	ee10 3a10 	vmov	r3, s0
 800f0b2:	eeb0 7a67 	vmov.f32	s14, s15
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	e7d9      	b.n	800f06e <scalbnf+0x4e>
 800f0ba:	3019      	adds	r0, #25
 800f0bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f0c0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f0c4:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800f0e8 <scalbnf+0xc8>
 800f0c8:	ee07 3a90 	vmov	s15, r3
 800f0cc:	e7d7      	b.n	800f07e <scalbnf+0x5e>
 800f0ce:	bf00      	nop
 800f0d0:	ffff3cb0 	.word	0xffff3cb0
 800f0d4:	4c000000 	.word	0x4c000000
 800f0d8:	7149f2ca 	.word	0x7149f2ca
 800f0dc:	f149f2ca 	.word	0xf149f2ca
 800f0e0:	0da24260 	.word	0x0da24260
 800f0e4:	8da24260 	.word	0x8da24260
 800f0e8:	33000000 	.word	0x33000000

0800f0ec <__ieee754_sqrtf>:
 800f0ec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f0f0:	4770      	bx	lr
	...

0800f0f4 <_init>:
 800f0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0f6:	bf00      	nop
 800f0f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0fa:	bc08      	pop	{r3}
 800f0fc:	469e      	mov	lr, r3
 800f0fe:	4770      	bx	lr

0800f100 <_fini>:
 800f100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f102:	bf00      	nop
 800f104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f106:	bc08      	pop	{r3}
 800f108:	469e      	mov	lr, r3
 800f10a:	4770      	bx	lr
