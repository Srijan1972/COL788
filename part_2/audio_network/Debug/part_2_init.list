
part_2_init.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bb18  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006524  0801bce0  0801bce0  0002bce0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022204  08022204  00043ed4  2**0
                  CONTENTS
  4 .ARM          00000008  08022204  08022204  00032204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802220c  0802220c  00043ed4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802220c  0802220c  0003220c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022210  08022210  00032210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003ed4  20000000  08022214  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000241c  20003ed4  080260e8  00043ed4  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  200062f0  080260e8  000462f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00043ed4  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  00043f04  2**0
                  CONTENTS, READONLY
 13 .debug_info   00032d26  00000000  00000000  00043f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000068d6  00000000  00000000  00076cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002950  00000000  00000000  0007d598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001fd1  00000000  00000000  0007fee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003dadb  00000000  00000000  00081eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000355ed  00000000  00000000  000bf994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0015f7f4  00000000  00000000  000f4f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000b754  00000000  00000000  00254778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0025fecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20003ed4 	.word	0x20003ed4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801bcc0 	.word	0x0801bcc0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20003ed8 	.word	0x20003ed8
 80001fc:	0801bcc0 	.word	0x0801bcc0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 bace 	b.w	8000854 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f83a 	bl	8000338 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_f2lz>:
 80002d0:	ee07 0a90 	vmov	s15, r0
 80002d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80002d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002dc:	d401      	bmi.n	80002e2 <__aeabi_f2lz+0x12>
 80002de:	f000 b80b 	b.w	80002f8 <__aeabi_f2ulz>
 80002e2:	eef1 7a67 	vneg.f32	s15, s15
 80002e6:	b508      	push	{r3, lr}
 80002e8:	ee17 0a90 	vmov	r0, s15
 80002ec:	f000 f804 	bl	80002f8 <__aeabi_f2ulz>
 80002f0:	4240      	negs	r0, r0
 80002f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f6:	bd08      	pop	{r3, pc}

080002f8 <__aeabi_f2ulz>:
 80002f8:	b5d0      	push	{r4, r6, r7, lr}
 80002fa:	f000 fc11 	bl	8000b20 <__aeabi_f2d>
 80002fe:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <__aeabi_f2ulz+0x38>)
 8000300:	2200      	movs	r2, #0
 8000302:	4606      	mov	r6, r0
 8000304:	460f      	mov	r7, r1
 8000306:	f000 f97b 	bl	8000600 <__aeabi_dmul>
 800030a:	f000 fc61 	bl	8000bd0 <__aeabi_d2uiz>
 800030e:	4604      	mov	r4, r0
 8000310:	f000 fbe4 	bl	8000adc <__aeabi_ui2d>
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <__aeabi_f2ulz+0x3c>)
 8000316:	2200      	movs	r2, #0
 8000318:	f000 f972 	bl	8000600 <__aeabi_dmul>
 800031c:	4602      	mov	r2, r0
 800031e:	460b      	mov	r3, r1
 8000320:	4630      	mov	r0, r6
 8000322:	4639      	mov	r1, r7
 8000324:	f000 fa9c 	bl	8000860 <__aeabi_dsub>
 8000328:	f000 fc52 	bl	8000bd0 <__aeabi_d2uiz>
 800032c:	4621      	mov	r1, r4
 800032e:	bdd0      	pop	{r4, r6, r7, pc}
 8000330:	3df00000 	.word	0x3df00000
 8000334:	41f00000 	.word	0x41f00000

08000338 <__udivmoddi4>:
 8000338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800033c:	9e08      	ldr	r6, [sp, #32]
 800033e:	460d      	mov	r5, r1
 8000340:	4604      	mov	r4, r0
 8000342:	460f      	mov	r7, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14a      	bne.n	80003de <__udivmoddi4+0xa6>
 8000348:	428a      	cmp	r2, r1
 800034a:	4694      	mov	ip, r2
 800034c:	d965      	bls.n	800041a <__udivmoddi4+0xe2>
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	b143      	cbz	r3, 8000366 <__udivmoddi4+0x2e>
 8000354:	fa02 fc03 	lsl.w	ip, r2, r3
 8000358:	f1c3 0220 	rsb	r2, r3, #32
 800035c:	409f      	lsls	r7, r3
 800035e:	fa20 f202 	lsr.w	r2, r0, r2
 8000362:	4317      	orrs	r7, r2
 8000364:	409c      	lsls	r4, r3
 8000366:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036a:	fa1f f58c 	uxth.w	r5, ip
 800036e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000372:	0c22      	lsrs	r2, r4, #16
 8000374:	fb0e 7711 	mls	r7, lr, r1, r7
 8000378:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800037c:	fb01 f005 	mul.w	r0, r1, r5
 8000380:	4290      	cmp	r0, r2
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x62>
 8000384:	eb1c 0202 	adds.w	r2, ip, r2
 8000388:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800038c:	f080 811c 	bcs.w	80005c8 <__udivmoddi4+0x290>
 8000390:	4290      	cmp	r0, r2
 8000392:	f240 8119 	bls.w	80005c8 <__udivmoddi4+0x290>
 8000396:	3902      	subs	r1, #2
 8000398:	4462      	add	r2, ip
 800039a:	1a12      	subs	r2, r2, r0
 800039c:	b2a4      	uxth	r4, r4
 800039e:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80003a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003aa:	fb00 f505 	mul.w	r5, r0, r5
 80003ae:	42a5      	cmp	r5, r4
 80003b0:	d90a      	bls.n	80003c8 <__udivmoddi4+0x90>
 80003b2:	eb1c 0404 	adds.w	r4, ip, r4
 80003b6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003ba:	f080 8107 	bcs.w	80005cc <__udivmoddi4+0x294>
 80003be:	42a5      	cmp	r5, r4
 80003c0:	f240 8104 	bls.w	80005cc <__udivmoddi4+0x294>
 80003c4:	4464      	add	r4, ip
 80003c6:	3802      	subs	r0, #2
 80003c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	2100      	movs	r1, #0
 80003d0:	b11e      	cbz	r6, 80003da <__udivmoddi4+0xa2>
 80003d2:	40dc      	lsrs	r4, r3
 80003d4:	2300      	movs	r3, #0
 80003d6:	e9c6 4300 	strd	r4, r3, [r6]
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	428b      	cmp	r3, r1
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0xbc>
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	f000 80ed 	beq.w	80005c2 <__udivmoddi4+0x28a>
 80003e8:	2100      	movs	r1, #0
 80003ea:	e9c6 0500 	strd	r0, r5, [r6]
 80003ee:	4608      	mov	r0, r1
 80003f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f4:	fab3 f183 	clz	r1, r3
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d149      	bne.n	8000490 <__udivmoddi4+0x158>
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	d302      	bcc.n	8000406 <__udivmoddi4+0xce>
 8000400:	4282      	cmp	r2, r0
 8000402:	f200 80f8 	bhi.w	80005f6 <__udivmoddi4+0x2be>
 8000406:	1a84      	subs	r4, r0, r2
 8000408:	eb65 0203 	sbc.w	r2, r5, r3
 800040c:	2001      	movs	r0, #1
 800040e:	4617      	mov	r7, r2
 8000410:	2e00      	cmp	r6, #0
 8000412:	d0e2      	beq.n	80003da <__udivmoddi4+0xa2>
 8000414:	e9c6 4700 	strd	r4, r7, [r6]
 8000418:	e7df      	b.n	80003da <__udivmoddi4+0xa2>
 800041a:	b902      	cbnz	r2, 800041e <__udivmoddi4+0xe6>
 800041c:	deff      	udf	#255	; 0xff
 800041e:	fab2 f382 	clz	r3, r2
 8000422:	2b00      	cmp	r3, #0
 8000424:	f040 8090 	bne.w	8000548 <__udivmoddi4+0x210>
 8000428:	1a8a      	subs	r2, r1, r2
 800042a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042e:	fa1f fe8c 	uxth.w	lr, ip
 8000432:	2101      	movs	r1, #1
 8000434:	fbb2 f5f7 	udiv	r5, r2, r7
 8000438:	fb07 2015 	mls	r0, r7, r5, r2
 800043c:	0c22      	lsrs	r2, r4, #16
 800043e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000442:	fb0e f005 	mul.w	r0, lr, r5
 8000446:	4290      	cmp	r0, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x124>
 800044a:	eb1c 0202 	adds.w	r2, ip, r2
 800044e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x122>
 8000454:	4290      	cmp	r0, r2
 8000456:	f200 80cb 	bhi.w	80005f0 <__udivmoddi4+0x2b8>
 800045a:	4645      	mov	r5, r8
 800045c:	1a12      	subs	r2, r2, r0
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb2 f0f7 	udiv	r0, r2, r7
 8000464:	fb07 2210 	mls	r2, r7, r0, r2
 8000468:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800046c:	fb0e fe00 	mul.w	lr, lr, r0
 8000470:	45a6      	cmp	lr, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x14e>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800047c:	d202      	bcs.n	8000484 <__udivmoddi4+0x14c>
 800047e:	45a6      	cmp	lr, r4
 8000480:	f200 80bb 	bhi.w	80005fa <__udivmoddi4+0x2c2>
 8000484:	4610      	mov	r0, r2
 8000486:	eba4 040e 	sub.w	r4, r4, lr
 800048a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800048e:	e79f      	b.n	80003d0 <__udivmoddi4+0x98>
 8000490:	f1c1 0720 	rsb	r7, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 fc07 	lsr.w	ip, r2, r7
 800049a:	ea4c 0c03 	orr.w	ip, ip, r3
 800049e:	fa05 f401 	lsl.w	r4, r5, r1
 80004a2:	fa20 f307 	lsr.w	r3, r0, r7
 80004a6:	40fd      	lsrs	r5, r7
 80004a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ac:	4323      	orrs	r3, r4
 80004ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80004b2:	fa1f fe8c 	uxth.w	lr, ip
 80004b6:	fb09 5518 	mls	r5, r9, r8, r5
 80004ba:	0c1c      	lsrs	r4, r3, #16
 80004bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c0:	fb08 f50e 	mul.w	r5, r8, lr
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	fa00 f001 	lsl.w	r0, r0, r1
 80004ce:	d90b      	bls.n	80004e8 <__udivmoddi4+0x1b0>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004d8:	f080 8088 	bcs.w	80005ec <__udivmoddi4+0x2b4>
 80004dc:	42a5      	cmp	r5, r4
 80004de:	f240 8085 	bls.w	80005ec <__udivmoddi4+0x2b4>
 80004e2:	f1a8 0802 	sub.w	r8, r8, #2
 80004e6:	4464      	add	r4, ip
 80004e8:	1b64      	subs	r4, r4, r5
 80004ea:	b29d      	uxth	r5, r3
 80004ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f0:	fb09 4413 	mls	r4, r9, r3, r4
 80004f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004fc:	45a6      	cmp	lr, r4
 80004fe:	d908      	bls.n	8000512 <__udivmoddi4+0x1da>
 8000500:	eb1c 0404 	adds.w	r4, ip, r4
 8000504:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000508:	d26c      	bcs.n	80005e4 <__udivmoddi4+0x2ac>
 800050a:	45a6      	cmp	lr, r4
 800050c:	d96a      	bls.n	80005e4 <__udivmoddi4+0x2ac>
 800050e:	3b02      	subs	r3, #2
 8000510:	4464      	add	r4, ip
 8000512:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000516:	fba3 9502 	umull	r9, r5, r3, r2
 800051a:	eba4 040e 	sub.w	r4, r4, lr
 800051e:	42ac      	cmp	r4, r5
 8000520:	46c8      	mov	r8, r9
 8000522:	46ae      	mov	lr, r5
 8000524:	d356      	bcc.n	80005d4 <__udivmoddi4+0x29c>
 8000526:	d053      	beq.n	80005d0 <__udivmoddi4+0x298>
 8000528:	b156      	cbz	r6, 8000540 <__udivmoddi4+0x208>
 800052a:	ebb0 0208 	subs.w	r2, r0, r8
 800052e:	eb64 040e 	sbc.w	r4, r4, lr
 8000532:	fa04 f707 	lsl.w	r7, r4, r7
 8000536:	40ca      	lsrs	r2, r1
 8000538:	40cc      	lsrs	r4, r1
 800053a:	4317      	orrs	r7, r2
 800053c:	e9c6 7400 	strd	r7, r4, [r6]
 8000540:	4618      	mov	r0, r3
 8000542:	2100      	movs	r1, #0
 8000544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000548:	f1c3 0120 	rsb	r1, r3, #32
 800054c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000550:	fa20 f201 	lsr.w	r2, r0, r1
 8000554:	fa25 f101 	lsr.w	r1, r5, r1
 8000558:	409d      	lsls	r5, r3
 800055a:	432a      	orrs	r2, r5
 800055c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000560:	fa1f fe8c 	uxth.w	lr, ip
 8000564:	fbb1 f0f7 	udiv	r0, r1, r7
 8000568:	fb07 1510 	mls	r5, r7, r0, r1
 800056c:	0c11      	lsrs	r1, r2, #16
 800056e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000572:	fb00 f50e 	mul.w	r5, r0, lr
 8000576:	428d      	cmp	r5, r1
 8000578:	fa04 f403 	lsl.w	r4, r4, r3
 800057c:	d908      	bls.n	8000590 <__udivmoddi4+0x258>
 800057e:	eb1c 0101 	adds.w	r1, ip, r1
 8000582:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000586:	d22f      	bcs.n	80005e8 <__udivmoddi4+0x2b0>
 8000588:	428d      	cmp	r5, r1
 800058a:	d92d      	bls.n	80005e8 <__udivmoddi4+0x2b0>
 800058c:	3802      	subs	r0, #2
 800058e:	4461      	add	r1, ip
 8000590:	1b49      	subs	r1, r1, r5
 8000592:	b292      	uxth	r2, r2
 8000594:	fbb1 f5f7 	udiv	r5, r1, r7
 8000598:	fb07 1115 	mls	r1, r7, r5, r1
 800059c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a0:	fb05 f10e 	mul.w	r1, r5, lr
 80005a4:	4291      	cmp	r1, r2
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x282>
 80005a8:	eb1c 0202 	adds.w	r2, ip, r2
 80005ac:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005b0:	d216      	bcs.n	80005e0 <__udivmoddi4+0x2a8>
 80005b2:	4291      	cmp	r1, r2
 80005b4:	d914      	bls.n	80005e0 <__udivmoddi4+0x2a8>
 80005b6:	3d02      	subs	r5, #2
 80005b8:	4462      	add	r2, ip
 80005ba:	1a52      	subs	r2, r2, r1
 80005bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c0:	e738      	b.n	8000434 <__udivmoddi4+0xfc>
 80005c2:	4631      	mov	r1, r6
 80005c4:	4630      	mov	r0, r6
 80005c6:	e708      	b.n	80003da <__udivmoddi4+0xa2>
 80005c8:	4639      	mov	r1, r7
 80005ca:	e6e6      	b.n	800039a <__udivmoddi4+0x62>
 80005cc:	4610      	mov	r0, r2
 80005ce:	e6fb      	b.n	80003c8 <__udivmoddi4+0x90>
 80005d0:	4548      	cmp	r0, r9
 80005d2:	d2a9      	bcs.n	8000528 <__udivmoddi4+0x1f0>
 80005d4:	ebb9 0802 	subs.w	r8, r9, r2
 80005d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005dc:	3b01      	subs	r3, #1
 80005de:	e7a3      	b.n	8000528 <__udivmoddi4+0x1f0>
 80005e0:	4645      	mov	r5, r8
 80005e2:	e7ea      	b.n	80005ba <__udivmoddi4+0x282>
 80005e4:	462b      	mov	r3, r5
 80005e6:	e794      	b.n	8000512 <__udivmoddi4+0x1da>
 80005e8:	4640      	mov	r0, r8
 80005ea:	e7d1      	b.n	8000590 <__udivmoddi4+0x258>
 80005ec:	46d0      	mov	r8, sl
 80005ee:	e77b      	b.n	80004e8 <__udivmoddi4+0x1b0>
 80005f0:	3d02      	subs	r5, #2
 80005f2:	4462      	add	r2, ip
 80005f4:	e732      	b.n	800045c <__udivmoddi4+0x124>
 80005f6:	4608      	mov	r0, r1
 80005f8:	e70a      	b.n	8000410 <__udivmoddi4+0xd8>
 80005fa:	4464      	add	r4, ip
 80005fc:	3802      	subs	r0, #2
 80005fe:	e742      	b.n	8000486 <__udivmoddi4+0x14e>

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_idiv0>:
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop

08000858 <__aeabi_drsub>:
 8000858:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800085c:	e002      	b.n	8000864 <__adddf3>
 800085e:	bf00      	nop

08000860 <__aeabi_dsub>:
 8000860:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000864 <__adddf3>:
 8000864:	b530      	push	{r4, r5, lr}
 8000866:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800086a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800086e:	ea94 0f05 	teq	r4, r5
 8000872:	bf08      	it	eq
 8000874:	ea90 0f02 	teqeq	r0, r2
 8000878:	bf1f      	itttt	ne
 800087a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800087e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000882:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000886:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800088a:	f000 80e2 	beq.w	8000a52 <__adddf3+0x1ee>
 800088e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000892:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000896:	bfb8      	it	lt
 8000898:	426d      	neglt	r5, r5
 800089a:	dd0c      	ble.n	80008b6 <__adddf3+0x52>
 800089c:	442c      	add	r4, r5
 800089e:	ea80 0202 	eor.w	r2, r0, r2
 80008a2:	ea81 0303 	eor.w	r3, r1, r3
 80008a6:	ea82 0000 	eor.w	r0, r2, r0
 80008aa:	ea83 0101 	eor.w	r1, r3, r1
 80008ae:	ea80 0202 	eor.w	r2, r0, r2
 80008b2:	ea81 0303 	eor.w	r3, r1, r3
 80008b6:	2d36      	cmp	r5, #54	; 0x36
 80008b8:	bf88      	it	hi
 80008ba:	bd30      	pophi	{r4, r5, pc}
 80008bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80008c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80008cc:	d002      	beq.n	80008d4 <__adddf3+0x70>
 80008ce:	4240      	negs	r0, r0
 80008d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80008e0:	d002      	beq.n	80008e8 <__adddf3+0x84>
 80008e2:	4252      	negs	r2, r2
 80008e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008e8:	ea94 0f05 	teq	r4, r5
 80008ec:	f000 80a7 	beq.w	8000a3e <__adddf3+0x1da>
 80008f0:	f1a4 0401 	sub.w	r4, r4, #1
 80008f4:	f1d5 0e20 	rsbs	lr, r5, #32
 80008f8:	db0d      	blt.n	8000916 <__adddf3+0xb2>
 80008fa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80008fe:	fa22 f205 	lsr.w	r2, r2, r5
 8000902:	1880      	adds	r0, r0, r2
 8000904:	f141 0100 	adc.w	r1, r1, #0
 8000908:	fa03 f20e 	lsl.w	r2, r3, lr
 800090c:	1880      	adds	r0, r0, r2
 800090e:	fa43 f305 	asr.w	r3, r3, r5
 8000912:	4159      	adcs	r1, r3
 8000914:	e00e      	b.n	8000934 <__adddf3+0xd0>
 8000916:	f1a5 0520 	sub.w	r5, r5, #32
 800091a:	f10e 0e20 	add.w	lr, lr, #32
 800091e:	2a01      	cmp	r2, #1
 8000920:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000924:	bf28      	it	cs
 8000926:	f04c 0c02 	orrcs.w	ip, ip, #2
 800092a:	fa43 f305 	asr.w	r3, r3, r5
 800092e:	18c0      	adds	r0, r0, r3
 8000930:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000934:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000938:	d507      	bpl.n	800094a <__adddf3+0xe6>
 800093a:	f04f 0e00 	mov.w	lr, #0
 800093e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000942:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000946:	eb6e 0101 	sbc.w	r1, lr, r1
 800094a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800094e:	d31b      	bcc.n	8000988 <__adddf3+0x124>
 8000950:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000954:	d30c      	bcc.n	8000970 <__adddf3+0x10c>
 8000956:	0849      	lsrs	r1, r1, #1
 8000958:	ea5f 0030 	movs.w	r0, r0, rrx
 800095c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000960:	f104 0401 	add.w	r4, r4, #1
 8000964:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000968:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800096c:	f080 809a 	bcs.w	8000aa4 <__adddf3+0x240>
 8000970:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000974:	bf08      	it	eq
 8000976:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097a:	f150 0000 	adcs.w	r0, r0, #0
 800097e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000982:	ea41 0105 	orr.w	r1, r1, r5
 8000986:	bd30      	pop	{r4, r5, pc}
 8000988:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800098c:	4140      	adcs	r0, r0
 800098e:	eb41 0101 	adc.w	r1, r1, r1
 8000992:	3c01      	subs	r4, #1
 8000994:	bf28      	it	cs
 8000996:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800099a:	d2e9      	bcs.n	8000970 <__adddf3+0x10c>
 800099c:	f091 0f00 	teq	r1, #0
 80009a0:	bf04      	itt	eq
 80009a2:	4601      	moveq	r1, r0
 80009a4:	2000      	moveq	r0, #0
 80009a6:	fab1 f381 	clz	r3, r1
 80009aa:	bf08      	it	eq
 80009ac:	3320      	addeq	r3, #32
 80009ae:	f1a3 030b 	sub.w	r3, r3, #11
 80009b2:	f1b3 0220 	subs.w	r2, r3, #32
 80009b6:	da0c      	bge.n	80009d2 <__adddf3+0x16e>
 80009b8:	320c      	adds	r2, #12
 80009ba:	dd08      	ble.n	80009ce <__adddf3+0x16a>
 80009bc:	f102 0c14 	add.w	ip, r2, #20
 80009c0:	f1c2 020c 	rsb	r2, r2, #12
 80009c4:	fa01 f00c 	lsl.w	r0, r1, ip
 80009c8:	fa21 f102 	lsr.w	r1, r1, r2
 80009cc:	e00c      	b.n	80009e8 <__adddf3+0x184>
 80009ce:	f102 0214 	add.w	r2, r2, #20
 80009d2:	bfd8      	it	le
 80009d4:	f1c2 0c20 	rsble	ip, r2, #32
 80009d8:	fa01 f102 	lsl.w	r1, r1, r2
 80009dc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80009e0:	bfdc      	itt	le
 80009e2:	ea41 010c 	orrle.w	r1, r1, ip
 80009e6:	4090      	lslle	r0, r2
 80009e8:	1ae4      	subs	r4, r4, r3
 80009ea:	bfa2      	ittt	ge
 80009ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80009f0:	4329      	orrge	r1, r5
 80009f2:	bd30      	popge	{r4, r5, pc}
 80009f4:	ea6f 0404 	mvn.w	r4, r4
 80009f8:	3c1f      	subs	r4, #31
 80009fa:	da1c      	bge.n	8000a36 <__adddf3+0x1d2>
 80009fc:	340c      	adds	r4, #12
 80009fe:	dc0e      	bgt.n	8000a1e <__adddf3+0x1ba>
 8000a00:	f104 0414 	add.w	r4, r4, #20
 8000a04:	f1c4 0220 	rsb	r2, r4, #32
 8000a08:	fa20 f004 	lsr.w	r0, r0, r4
 8000a0c:	fa01 f302 	lsl.w	r3, r1, r2
 8000a10:	ea40 0003 	orr.w	r0, r0, r3
 8000a14:	fa21 f304 	lsr.w	r3, r1, r4
 8000a18:	ea45 0103 	orr.w	r1, r5, r3
 8000a1c:	bd30      	pop	{r4, r5, pc}
 8000a1e:	f1c4 040c 	rsb	r4, r4, #12
 8000a22:	f1c4 0220 	rsb	r2, r4, #32
 8000a26:	fa20 f002 	lsr.w	r0, r0, r2
 8000a2a:	fa01 f304 	lsl.w	r3, r1, r4
 8000a2e:	ea40 0003 	orr.w	r0, r0, r3
 8000a32:	4629      	mov	r1, r5
 8000a34:	bd30      	pop	{r4, r5, pc}
 8000a36:	fa21 f004 	lsr.w	r0, r1, r4
 8000a3a:	4629      	mov	r1, r5
 8000a3c:	bd30      	pop	{r4, r5, pc}
 8000a3e:	f094 0f00 	teq	r4, #0
 8000a42:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000a46:	bf06      	itte	eq
 8000a48:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000a4c:	3401      	addeq	r4, #1
 8000a4e:	3d01      	subne	r5, #1
 8000a50:	e74e      	b.n	80008f0 <__adddf3+0x8c>
 8000a52:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000a56:	bf18      	it	ne
 8000a58:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000a5c:	d029      	beq.n	8000ab2 <__adddf3+0x24e>
 8000a5e:	ea94 0f05 	teq	r4, r5
 8000a62:	bf08      	it	eq
 8000a64:	ea90 0f02 	teqeq	r0, r2
 8000a68:	d005      	beq.n	8000a76 <__adddf3+0x212>
 8000a6a:	ea54 0c00 	orrs.w	ip, r4, r0
 8000a6e:	bf04      	itt	eq
 8000a70:	4619      	moveq	r1, r3
 8000a72:	4610      	moveq	r0, r2
 8000a74:	bd30      	pop	{r4, r5, pc}
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf1e      	ittt	ne
 8000a7c:	2100      	movne	r1, #0
 8000a7e:	2000      	movne	r0, #0
 8000a80:	bd30      	popne	{r4, r5, pc}
 8000a82:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000a86:	d105      	bne.n	8000a94 <__adddf3+0x230>
 8000a88:	0040      	lsls	r0, r0, #1
 8000a8a:	4149      	adcs	r1, r1
 8000a8c:	bf28      	it	cs
 8000a8e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000a92:	bd30      	pop	{r4, r5, pc}
 8000a94:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000a98:	bf3c      	itt	cc
 8000a9a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000a9e:	bd30      	popcc	{r4, r5, pc}
 8000aa0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000aa4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000aa8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	bd30      	pop	{r4, r5, pc}
 8000ab2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000ab6:	bf1a      	itte	ne
 8000ab8:	4619      	movne	r1, r3
 8000aba:	4610      	movne	r0, r2
 8000abc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000ac0:	bf1c      	itt	ne
 8000ac2:	460b      	movne	r3, r1
 8000ac4:	4602      	movne	r2, r0
 8000ac6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000aca:	bf06      	itte	eq
 8000acc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000ad0:	ea91 0f03 	teqeq	r1, r3
 8000ad4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000ad8:	bd30      	pop	{r4, r5, pc}
 8000ada:	bf00      	nop

08000adc <__aeabi_ui2d>:
 8000adc:	f090 0f00 	teq	r0, #0
 8000ae0:	bf04      	itt	eq
 8000ae2:	2100      	moveq	r1, #0
 8000ae4:	4770      	bxeq	lr
 8000ae6:	b530      	push	{r4, r5, lr}
 8000ae8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000aec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000af0:	f04f 0500 	mov.w	r5, #0
 8000af4:	f04f 0100 	mov.w	r1, #0
 8000af8:	e750      	b.n	800099c <__adddf3+0x138>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2d>:
 8000afc:	f090 0f00 	teq	r0, #0
 8000b00:	bf04      	itt	eq
 8000b02:	2100      	moveq	r1, #0
 8000b04:	4770      	bxeq	lr
 8000b06:	b530      	push	{r4, r5, lr}
 8000b08:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000b0c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000b10:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000b14:	bf48      	it	mi
 8000b16:	4240      	negmi	r0, r0
 8000b18:	f04f 0100 	mov.w	r1, #0
 8000b1c:	e73e      	b.n	800099c <__adddf3+0x138>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_f2d>:
 8000b20:	0042      	lsls	r2, r0, #1
 8000b22:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000b26:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b2a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000b2e:	bf1f      	itttt	ne
 8000b30:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000b34:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000b38:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000b3c:	4770      	bxne	lr
 8000b3e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000b42:	bf08      	it	eq
 8000b44:	4770      	bxeq	lr
 8000b46:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000b4a:	bf04      	itt	eq
 8000b4c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000b50:	4770      	bxeq	lr
 8000b52:	b530      	push	{r4, r5, lr}
 8000b54:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000b58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000b5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000b60:	e71c      	b.n	800099c <__adddf3+0x138>
 8000b62:	bf00      	nop

08000b64 <__aeabi_ul2d>:
 8000b64:	ea50 0201 	orrs.w	r2, r0, r1
 8000b68:	bf08      	it	eq
 8000b6a:	4770      	bxeq	lr
 8000b6c:	b530      	push	{r4, r5, lr}
 8000b6e:	f04f 0500 	mov.w	r5, #0
 8000b72:	e00a      	b.n	8000b8a <__aeabi_l2d+0x16>

08000b74 <__aeabi_l2d>:
 8000b74:	ea50 0201 	orrs.w	r2, r0, r1
 8000b78:	bf08      	it	eq
 8000b7a:	4770      	bxeq	lr
 8000b7c:	b530      	push	{r4, r5, lr}
 8000b7e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000b82:	d502      	bpl.n	8000b8a <__aeabi_l2d+0x16>
 8000b84:	4240      	negs	r0, r0
 8000b86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000b8e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000b92:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000b96:	f43f aed8 	beq.w	800094a <__adddf3+0xe6>
 8000b9a:	f04f 0203 	mov.w	r2, #3
 8000b9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000ba2:	bf18      	it	ne
 8000ba4:	3203      	addne	r2, #3
 8000ba6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000baa:	bf18      	it	ne
 8000bac:	3203      	addne	r2, #3
 8000bae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000bb2:	f1c2 0320 	rsb	r3, r2, #32
 8000bb6:	fa00 fc03 	lsl.w	ip, r0, r3
 8000bba:	fa20 f002 	lsr.w	r0, r0, r2
 8000bbe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000bc2:	ea40 000e 	orr.w	r0, r0, lr
 8000bc6:	fa21 f102 	lsr.w	r1, r1, r2
 8000bca:	4414      	add	r4, r2
 8000bcc:	e6bd      	b.n	800094a <__adddf3+0xe6>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2uiz>:
 8000bd0:	004a      	lsls	r2, r1, #1
 8000bd2:	d211      	bcs.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd8:	d211      	bcs.n	8000bfe <__aeabi_d2uiz+0x2e>
 8000bda:	d50d      	bpl.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d40e      	bmi.n	8000c04 <__aeabi_d2uiz+0x34>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_d2uiz+0x3a>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	f5ad 4d2a 	sub.w	sp, sp, #43520	; 0xaa00
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char buf[50];
	int buf_len = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000c20:	f102 02f0 	add.w	r2, r2, #240	; 0xf0
 8000c24:	6013      	str	r3, [r2, #0]
	int flag = 1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	f507 422a 	add.w	r2, r7, #43520	; 0xaa00
 8000c2c:	f102 0204 	add.w	r2, r2, #4
 8000c30:	6013      	str	r3, [r2, #0]
	// Buffers used to store input and output tensors
	AI_ALIGNED(4) ai_i8 in_data[AI_NETWORK_IN_1_SIZE_BYTES];
	AI_ALIGNED(4) ai_float out_data[AI_NETWORK_OUT_1_SIZE];

	// Pointer to our model
	ai_handle network = AI_HANDLE_NULL;
 8000c32:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8000c36:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
	ai_buffer* ai_input;
	ai_buffer* ai_output;

	// Set working memory and get weights/biases from model
	ai_network_params ai_params = {
	  AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8000c3e:	f010 fb4f 	bl	80112e0 <ai_network_data_weights_get>
 8000c42:	4602      	mov	r2, r0
 8000c44:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8000c48:	f6a3 2304 	subw	r3, r3, #2564	; 0xa04
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f010 fb12 	bl	8011278 <ai_network_data_weights_buffer_get>
	  AI_NETWORK_DATA_ACTIVATIONS(activations)
 8000c54:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8000c58:	f6a3 2304 	subw	r3, r3, #2564	; 0xa04
 8000c5c:	f103 021c 	add.w	r2, r3, #28
 8000c60:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000c64:	f103 0308 	add.w	r3, r3, #8
 8000c68:	3ba0      	subs	r3, #160	; 0xa0
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	f010 facf 	bl	8011210 <ai_network_data_activations_buffer_get>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c72:	f001 fd2a 	bl	80026ca <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c76:	f000 fa01 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c7a:	f000 fe33 	bl	80018e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c7e:	f000 fe07 	bl	8001890 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c82:	f000 fa59 	bl	8001138 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000c86:	f000 fae1 	bl	800124c <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000c8a:	f000 fb43 	bl	8001314 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000c8e:	f000 fb81 	bl	8001394 <MX_I2C3_Init>
  MX_RTC_Init();
 8000c92:	f000 fbbf 	bl	8001414 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000c96:	f000 fc19 	bl	80014cc <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000c9a:	f000 fc39 	bl	8001510 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000c9e:	f000 fc75 	bl	800158c <MX_SPI2_Init>
  MX_SPI3_Init();
 8000ca2:	f000 fcb1 	bl	8001608 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000ca6:	f000 fced 	bl	8001684 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000caa:	f000 fd39 	bl	8001720 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000cae:	f000 fd6d 	bl	800178c <MX_TIM7_Init>
  MX_FATFS_Init();
 8000cb2:	f00c ff6f 	bl	800db94 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000cb6:	f00f fa03 	bl	80100c0 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8000cba:	f000 faa5 	bl	8001208 <MX_CRC_Init>
  MX_USART3_UART_Init();
 8000cbe:	f000 fd9b 	bl	80017f8 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000cc2:	f00f f9fd 	bl	80100c0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  ai_err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8000cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000cca:	3bcc      	subs	r3, #204	; 0xcc
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f010 fa08 	bl	80110e4 <ai_network_create>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000cda:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 8000cde:	6013      	str	r3, [r2, #0]
  if (ai_err.type != AI_ERROR_NONE){
 8000ce0:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000ce4:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d019      	beq.n	8000d22 <main+0x112>
      buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8000cee:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000cf2:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 8000cf6:	49c3      	ldr	r1, [pc, #780]	; (8001004 <main+0x3f4>)
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f01a f857 	bl	801adac <siprintf>
 8000cfe:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000d02:	f103 03f0 	add.w	r3, r3, #240	; 0xf0
 8000d06:	6018      	str	r0, [r3, #0]
//      HAL_UART_Transmit(&huart3, (uint8_t*)buf, buf_len, 100);
      CDC_Transmit_FS(buf, buf_len);
 8000d08:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000d0c:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 8000d10:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000d14:	f102 02f0 	add.w	r2, r2, #240	; 0xf0
 8000d18:	6811      	ldr	r1, [r2, #0]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f00f fa8e 	bl	801023c <CDC_Transmit_FS>
      while(1);
 8000d20:	e7fe      	b.n	8000d20 <main+0x110>
    }

  ai_input = ai_network_inputs_get(network,NULL);
 8000d22:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8000d26:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f010 f9ee 	bl	8011110 <ai_network_inputs_get>
 8000d34:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000d38:	f103 03ec 	add.w	r3, r3, #236	; 0xec
 8000d3c:	6018      	str	r0, [r3, #0]
   ai_output = ai_network_outputs_get(network,NULL);
 8000d3e:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8000d42:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f010 f9fa 	bl	8011144 <ai_network_outputs_get>
 8000d50:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000d54:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8000d58:	6018      	str	r0, [r3, #0]

    // Initialize neural network
    if (!ai_network_init(network, &ai_params)){
 8000d5a:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8000d5e:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	f107 0308 	add.w	r3, r7, #8
 8000d68:	3b04      	subs	r3, #4
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4610      	mov	r0, r2
 8000d6e:	f010 fa03 	bl	8011178 <ai_network_init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	f083 0301 	eor.w	r3, r3, #1
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d019      	beq.n	8000db2 <main+0x1a2>
      buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8000d7e:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000d82:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 8000d86:	49a0      	ldr	r1, [pc, #640]	; (8001008 <main+0x3f8>)
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f01a f80f 	bl	801adac <siprintf>
 8000d8e:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000d92:	f103 03f0 	add.w	r3, r3, #240	; 0xf0
 8000d96:	6018      	str	r0, [r3, #0]
//      HAL_UART_Transmit(&huart3, (uint8_t*)buf, buf_len, 100);
      CDC_Transmit_FS(buf, buf_len);
 8000d98:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000d9c:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 8000da0:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000da4:	f102 02f0 	add.w	r2, r2, #240	; 0xf0
 8000da8:	6811      	ldr	r1, [r2, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f00f fa46 	bl	801023c <CDC_Transmit_FS>
      while(1);
 8000db0:	e7fe      	b.n	8000db0 <main+0x1a0>
    }

    ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000db2:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000db6:	f103 03ec 	add.w	r3, r3, #236	; 0xec
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000dc0:	3ba0      	subs	r3, #160	; 0xa0
 8000dc2:	6053      	str	r3, [r2, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000dc4:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000dc8:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000dd2:	3bc8      	subs	r3, #200	; 0xc8
 8000dd4:	6053      	str	r3, [r2, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (uint32_t i = 0; i < AI_NETWORK_IN_1_SIZE; i++){
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000ddc:	f102 02f8 	add.w	r2, r2, #248	; 0xf8
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	e038      	b.n	8000e56 <main+0x246>
		  if(flag) ((ai_i8*)in_data)[i] = inp1[i];
 8000de4:	f507 432a 	add.w	r3, r7, #43520	; 0xaa00
 8000de8:	f103 0304 	add.w	r3, r3, #4
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d013      	beq.n	8000e1a <main+0x20a>
 8000df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000df6:	3ba0      	subs	r3, #160	; 0xa0
 8000df8:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000dfc:	f102 02f8 	add.w	r2, r2, #248	; 0xf8
 8000e00:	6812      	ldr	r2, [r2, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4981      	ldr	r1, [pc, #516]	; (800100c <main+0x3fc>)
 8000e06:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000e0a:	f102 02f8 	add.w	r2, r2, #248	; 0xf8
 8000e0e:	6812      	ldr	r2, [r2, #0]
 8000e10:	440a      	add	r2, r1
 8000e12:	f992 2000 	ldrsb.w	r2, [r2]
 8000e16:	701a      	strb	r2, [r3, #0]
 8000e18:	e012      	b.n	8000e40 <main+0x230>
		  else ((ai_i8*)in_data)[i] = inp2[i];
 8000e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e1e:	3ba0      	subs	r3, #160	; 0xa0
 8000e20:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000e24:	f102 02f8 	add.w	r2, r2, #248	; 0xf8
 8000e28:	6812      	ldr	r2, [r2, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4978      	ldr	r1, [pc, #480]	; (8001010 <main+0x400>)
 8000e2e:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000e32:	f102 02f8 	add.w	r2, r2, #248	; 0xf8
 8000e36:	6812      	ldr	r2, [r2, #0]
 8000e38:	440a      	add	r2, r1
 8000e3a:	f992 2000 	ldrsb.w	r2, [r2]
 8000e3e:	701a      	strb	r2, [r3, #0]
	  for (uint32_t i = 0; i < AI_NETWORK_IN_1_SIZE; i++){
 8000e40:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000e44:	f103 03f8 	add.w	r3, r3, #248	; 0xf8
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000e50:	f102 02f8 	add.w	r2, r2, #248	; 0xf8
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000e5a:	f103 03f8 	add.w	r3, r3, #248	; 0xf8
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8000e64:	d3be      	bcc.n	8000de4 <main+0x1d4>
//		  ((ai_i8*)in_data)[i] = inp1[i];
	  }
	  flag = 1 - flag;
 8000e66:	f507 432a 	add.w	r3, r7, #43520	; 0xaa00
 8000e6a:	f103 0304 	add.w	r3, r3, #4
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f1c3 0301 	rsb	r3, r3, #1
 8000e74:	f507 422a 	add.w	r2, r7, #43520	; 0xaa00
 8000e78:	f102 0204 	add.w	r2, r2, #4
 8000e7c:	6013      	str	r3, [r2, #0]

  // Perform inference
//	    buf_len = sprintf(buf, "Start time: %u\r\n", (unsigned int)(HAL_GetTick()));
//	   CDC_Transmit_FS(buf, buf_len);
	  timestamp = HAL_GetTick();
 8000e7e:	f001 fc8d 	bl	800279c <HAL_GetTick>
 8000e82:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000e86:	f103 03e4 	add.w	r3, r3, #228	; 0xe4
 8000e8a:	6018      	str	r0, [r3, #0]
  nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8000e8c:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8000e90:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000e9a:	f102 02e8 	add.w	r2, r2, #232	; 0xe8
 8000e9e:	6812      	ldr	r2, [r2, #0]
 8000ea0:	f507 4129 	add.w	r1, r7, #43264	; 0xa900
 8000ea4:	f101 01ec 	add.w	r1, r1, #236	; 0xec
 8000ea8:	6809      	ldr	r1, [r1, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f010 f9a0 	bl	80111f0 <ai_network_run>
 8000eb0:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000eb4:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
 8000eb8:	6018      	str	r0, [r3, #0]
  if (nbatch != 1) {
 8000eba:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000ebe:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d019      	beq.n	8000efc <main+0x2ec>
	buf_len = sprintf(buf, "Error: could not run inference\r\n");
 8000ec8:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000ecc:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 8000ed0:	4950      	ldr	r1, [pc, #320]	; (8001014 <main+0x404>)
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f019 ff6a 	bl	801adac <siprintf>
 8000ed8:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000edc:	f103 03f0 	add.w	r3, r3, #240	; 0xf0
 8000ee0:	6018      	str	r0, [r3, #0]
	CDC_Transmit_FS(buf, buf_len);
 8000ee2:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000ee6:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 8000eea:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000eee:	f102 02f0 	add.w	r2, r2, #240	; 0xf0
 8000ef2:	6811      	ldr	r1, [r2, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f00f f9a1 	bl	801023c <CDC_Transmit_FS>
	while(1);
 8000efa:	e7fe      	b.n	8000efa <main+0x2ea>
  }

  inf = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f507 422a 	add.w	r2, r7, #43520	; 0xaa00
 8000f02:	f102 0203 	add.w	r2, r2, #3
 8000f06:	7013      	strb	r3, [r2, #0]
  maxVal = 0.0f;
 8000f08:	f04f 0300 	mov.w	r3, #0
 8000f0c:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000f10:	f102 02fc 	add.w	r2, r2, #252	; 0xfc
 8000f14:	6013      	str	r3, [r2, #0]
  for(ai_u8 i = 0; i < AI_NETWORK_OUT_1_SIZE; i++){
 8000f16:	2300      	movs	r3, #0
 8000f18:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000f1c:	f102 02f7 	add.w	r2, r2, #247	; 0xf7
 8000f20:	7013      	strb	r3, [r2, #0]
 8000f22:	e03d      	b.n	8000fa0 <main+0x390>
	if(out_data[i]>maxVal){
 8000f24:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000f28:	f103 03f7 	add.w	r3, r3, #247	; 0xf7
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	f607 2208 	addw	r2, r7, #2568	; 0xa08
 8000f32:	f6a2 12c8 	subw	r2, r2, #2504	; 0x9c8
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	4413      	add	r3, r2
 8000f3a:	edd3 7a00 	vldr	s15, [r3]
 8000f3e:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000f42:	f103 03fc 	add.w	r3, r3, #252	; 0xfc
 8000f46:	ed93 7a00 	vldr	s14, [r3]
 8000f4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f52:	d51a      	bpl.n	8000f8a <main+0x37a>
	  inf = i;
 8000f54:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000f58:	f103 03f7 	add.w	r3, r3, #247	; 0xf7
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	f507 422a 	add.w	r2, r7, #43520	; 0xaa00
 8000f62:	f102 0203 	add.w	r2, r2, #3
 8000f66:	7013      	strb	r3, [r2, #0]
	  maxVal = out_data[i];
 8000f68:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000f6c:	f103 03f7 	add.w	r3, r3, #247	; 0xf7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	f607 2208 	addw	r2, r7, #2568	; 0xa08
 8000f76:	f6a2 12c8 	subw	r2, r2, #2504	; 0x9c8
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000f84:	f102 02fc 	add.w	r2, r2, #252	; 0xfc
 8000f88:	6013      	str	r3, [r2, #0]
  for(ai_u8 i = 0; i < AI_NETWORK_OUT_1_SIZE; i++){
 8000f8a:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000f8e:	f103 03f7 	add.w	r3, r3, #247	; 0xf7
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	3301      	adds	r3, #1
 8000f96:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000f9a:	f102 02f7 	add.w	r2, r2, #247	; 0xf7
 8000f9e:	7013      	strb	r3, [r2, #0]
 8000fa0:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000fa4:	f103 03f7 	add.w	r3, r3, #247	; 0xf7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b09      	cmp	r3, #9
 8000fac:	d9ba      	bls.n	8000f24 <main+0x314>
	}
  }

  if(inf == 3){
 8000fae:	f507 432a 	add.w	r3, r7, #43520	; 0xaa00
 8000fb2:	f103 0303 	add.w	r3, r3, #3
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	d12f      	bne.n	800101c <main+0x40c>
	buf_len = sprintf(buf, "Car Horn | Latency: %u ms\r\n", (unsigned int)(HAL_GetTick()-timestamp));
 8000fbc:	f001 fbee 	bl	800279c <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000fc6:	f103 03e4 	add.w	r3, r3, #228	; 0xe4
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	1ad2      	subs	r2, r2, r3
 8000fce:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000fd2:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 8000fd6:	4910      	ldr	r1, [pc, #64]	; (8001018 <main+0x408>)
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f019 fee7 	bl	801adac <siprintf>
 8000fde:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000fe2:	f103 03f0 	add.w	r3, r3, #240	; 0xf0
 8000fe6:	6018      	str	r0, [r3, #0]
	CDC_Transmit_FS(buf, buf_len);
 8000fe8:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8000fec:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 8000ff0:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8000ff4:	f102 02f0 	add.w	r2, r2, #240	; 0xf0
 8000ff8:	6811      	ldr	r1, [r2, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f00f f91e 	bl	801023c <CDC_Transmit_FS>
 8001000:	e02e      	b.n	8001060 <main+0x450>
 8001002:	bf00      	nop
 8001004:	0801bce0 	.word	0x0801bce0
 8001008:	0801bd08 	.word	0x0801bd08
 800100c:	20000000 	.word	0x20000000
 8001010:	20001800 	.word	0x20001800
 8001014:	0801bd2c 	.word	0x0801bd2c
 8001018:	0801bd50 	.word	0x0801bd50
  }
  else{
	buf_len = sprintf(buf, "Noise | Latency: %u ms\r\n", (unsigned int)(HAL_GetTick()-timestamp));
 800101c:	f001 fbbe 	bl	800279c <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8001026:	f103 03e4 	add.w	r3, r3, #228	; 0xe4
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	1ad2      	subs	r2, r2, r3
 800102e:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8001032:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 8001036:	490f      	ldr	r1, [pc, #60]	; (8001074 <main+0x464>)
 8001038:	4618      	mov	r0, r3
 800103a:	f019 feb7 	bl	801adac <siprintf>
 800103e:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 8001042:	f103 03f0 	add.w	r3, r3, #240	; 0xf0
 8001046:	6018      	str	r0, [r3, #0]
	CDC_Transmit_FS(buf, buf_len);
 8001048:	f507 4329 	add.w	r3, r7, #43264	; 0xa900
 800104c:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 8001050:	f507 4229 	add.w	r2, r7, #43264	; 0xa900
 8001054:	f102 02f0 	add.w	r2, r2, #240	; 0xf0
 8001058:	6811      	ldr	r1, [r2, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f00f f8ee 	bl	801023c <CDC_Transmit_FS>
  }
    HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_2);
 8001060:	2104      	movs	r1, #4
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <main+0x468>)
 8001064:	f003 fa58 	bl	8004518 <HAL_GPIO_TogglePin>

  // Wait before doing it again
  HAL_Delay(500);
 8001068:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800106c:	f001 fba2 	bl	80027b4 <HAL_Delay>
	  for (uint32_t i = 0; i < AI_NETWORK_IN_1_SIZE; i++){
 8001070:	e6b1      	b.n	8000dd6 <main+0x1c6>
 8001072:	bf00      	nop
 8001074:	0801bd6c 	.word	0x0801bd6c
 8001078:	48001400 	.word	0x48001400

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b096      	sub	sp, #88	; 0x58
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	2244      	movs	r2, #68	; 0x44
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f019 fec8 	bl	801ae20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	463b      	mov	r3, r7
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800109e:	2000      	movs	r0, #0
 80010a0:	f004 fd5e 	bl	8005b60 <HAL_PWREx_ControlVoltageScaling>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0x32>
  {
    Error_Handler();
 80010aa:	f000 fd87 	bl	8001bbc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010ae:	f004 fd27 	bl	8005b00 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010b2:	4b20      	ldr	r3, [pc, #128]	; (8001134 <SystemClock_Config+0xb8>)
 80010b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010b8:	4a1e      	ldr	r2, [pc, #120]	; (8001134 <SystemClock_Config+0xb8>)
 80010ba:	f023 0318 	bic.w	r3, r3, #24
 80010be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 80010c2:	2325      	movs	r3, #37	; 0x25
 80010c4:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010cc:	2301      	movs	r3, #1
 80010ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010d0:	2301      	movs	r3, #1
 80010d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d4:	2302      	movs	r3, #2
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d8:	2303      	movs	r3, #3
 80010da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010dc:	2304      	movs	r3, #4
 80010de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80010e0:	233c      	movs	r3, #60	; 0x3c
 80010e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 80010e4:	2305      	movs	r3, #5
 80010e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4618      	mov	r0, r3
 80010f6:	f004 fdf7 	bl	8005ce8 <HAL_RCC_OscConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001100:	f000 fd5c 	bl	8001bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001104:	230f      	movs	r3, #15
 8001106:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001108:	2303      	movs	r3, #3
 800110a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001118:	463b      	mov	r3, r7
 800111a:	2105      	movs	r1, #5
 800111c:	4618      	mov	r0, r3
 800111e:	f005 f9fd 	bl	800651c <HAL_RCC_ClockConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001128:	f000 fd48 	bl	8001bbc <Error_Handler>
  }
}
 800112c:	bf00      	nop
 800112e:	3758      	adds	r7, #88	; 0x58
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40021000 	.word	0x40021000

08001138 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800113e:	463b      	mov	r3, r7
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
 800114c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800114e:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <MX_ADC1_Init+0xc4>)
 8001150:	4a2b      	ldr	r2, [pc, #172]	; (8001200 <MX_ADC1_Init+0xc8>)
 8001152:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001154:	4b29      	ldr	r3, [pc, #164]	; (80011fc <MX_ADC1_Init+0xc4>)
 8001156:	2200      	movs	r2, #0
 8001158:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800115a:	4b28      	ldr	r3, [pc, #160]	; (80011fc <MX_ADC1_Init+0xc4>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001160:	4b26      	ldr	r3, [pc, #152]	; (80011fc <MX_ADC1_Init+0xc4>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001166:	4b25      	ldr	r3, [pc, #148]	; (80011fc <MX_ADC1_Init+0xc4>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800116c:	4b23      	ldr	r3, [pc, #140]	; (80011fc <MX_ADC1_Init+0xc4>)
 800116e:	2204      	movs	r2, #4
 8001170:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001172:	4b22      	ldr	r3, [pc, #136]	; (80011fc <MX_ADC1_Init+0xc4>)
 8001174:	2200      	movs	r2, #0
 8001176:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001178:	4b20      	ldr	r3, [pc, #128]	; (80011fc <MX_ADC1_Init+0xc4>)
 800117a:	2201      	movs	r2, #1
 800117c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800117e:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <MX_ADC1_Init+0xc4>)
 8001180:	2201      	movs	r2, #1
 8001182:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001184:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <MX_ADC1_Init+0xc4>)
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <MX_ADC1_Init+0xc4>)
 800118e:	2200      	movs	r2, #0
 8001190:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001192:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <MX_ADC1_Init+0xc4>)
 8001194:	2200      	movs	r2, #0
 8001196:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <MX_ADC1_Init+0xc4>)
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_ADC1_Init+0xc4>)
 80011a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011a6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <MX_ADC1_Init+0xc4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_DISABLE;
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <MX_ADC1_Init+0xc4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011b6:	4811      	ldr	r0, [pc, #68]	; (80011fc <MX_ADC1_Init+0xc4>)
 80011b8:	f001 fcc0 	bl	8002b3c <HAL_ADC_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011c2:	f000 fcfb 	bl	8001bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <MX_ADC1_Init+0xcc>)
 80011c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ca:	2306      	movs	r3, #6
 80011cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80011ce:	2302      	movs	r3, #2
 80011d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011d2:	237f      	movs	r3, #127	; 0x7f
 80011d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011d6:	2304      	movs	r3, #4
 80011d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011de:	463b      	mov	r3, r7
 80011e0:	4619      	mov	r1, r3
 80011e2:	4806      	ldr	r0, [pc, #24]	; (80011fc <MX_ADC1_Init+0xc4>)
 80011e4:	f001 fdf0 	bl	8002dc8 <HAL_ADC_ConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80011ee:	f000 fce5 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20003ef0 	.word	0x20003ef0
 8001200:	50040000 	.word	0x50040000
 8001204:	21800100 	.word	0x21800100

08001208 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800120c:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <MX_CRC_Init+0x3c>)
 800120e:	4a0e      	ldr	r2, [pc, #56]	; (8001248 <MX_CRC_Init+0x40>)
 8001210:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_CRC_Init+0x3c>)
 8001214:	2200      	movs	r2, #0
 8001216:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <MX_CRC_Init+0x3c>)
 800121a:	2200      	movs	r2, #0
 800121c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_CRC_Init+0x3c>)
 8001220:	2200      	movs	r2, #0
 8001222:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <MX_CRC_Init+0x3c>)
 8001226:	2200      	movs	r2, #0
 8001228:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_CRC_Init+0x3c>)
 800122c:	2201      	movs	r2, #1
 800122e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001230:	4804      	ldr	r0, [pc, #16]	; (8001244 <MX_CRC_Init+0x3c>)
 8001232:	f002 fad7 	bl	80037e4 <HAL_CRC_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800123c:	f000 fcbe 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20003f58 	.word	0x20003f58
 8001248:	40023000 	.word	0x40023000

0800124c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8001250:	4b2c      	ldr	r3, [pc, #176]	; (8001304 <MX_DFSDM1_Init+0xb8>)
 8001252:	4a2d      	ldr	r2, [pc, #180]	; (8001308 <MX_DFSDM1_Init+0xbc>)
 8001254:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001256:	4b2b      	ldr	r3, [pc, #172]	; (8001304 <MX_DFSDM1_Init+0xb8>)
 8001258:	2200      	movs	r2, #0
 800125a:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800125c:	4b29      	ldr	r3, [pc, #164]	; (8001304 <MX_DFSDM1_Init+0xb8>)
 800125e:	2201      	movs	r2, #1
 8001260:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8001262:	4b28      	ldr	r3, [pc, #160]	; (8001304 <MX_DFSDM1_Init+0xb8>)
 8001264:	2201      	movs	r2, #1
 8001266:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC2_ORDER;
 8001268:	4b26      	ldr	r3, [pc, #152]	; (8001304 <MX_DFSDM1_Init+0xb8>)
 800126a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800126e:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 192;
 8001270:	4b24      	ldr	r3, [pc, #144]	; (8001304 <MX_DFSDM1_Init+0xb8>)
 8001272:	22c0      	movs	r2, #192	; 0xc0
 8001274:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8001276:	4b23      	ldr	r3, [pc, #140]	; (8001304 <MX_DFSDM1_Init+0xb8>)
 8001278:	2201      	movs	r2, #1
 800127a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 800127c:	4821      	ldr	r0, [pc, #132]	; (8001304 <MX_DFSDM1_Init+0xb8>)
 800127e:	f002 fc63 	bl	8003b48 <HAL_DFSDM_FilterInit>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8001288:	f000 fc98 	bl	8001bbc <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <MX_DFSDM1_Init+0xc0>)
 800128e:	4a20      	ldr	r2, [pc, #128]	; (8001310 <MX_DFSDM1_Init+0xc4>)
 8001290:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 8001292:	4b1e      	ldr	r3, [pc, #120]	; (800130c <MX_DFSDM1_Init+0xc0>)
 8001294:	2200      	movs	r2, #0
 8001296:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001298:	4b1c      	ldr	r3, [pc, #112]	; (800130c <MX_DFSDM1_Init+0xc0>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <MX_DFSDM1_Init+0xc0>)
 80012a0:	2202      	movs	r2, #2
 80012a2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_ADC_OUTPUT;
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <MX_DFSDM1_Init+0xc0>)
 80012a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012aa:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80012ac:	4b17      	ldr	r3, [pc, #92]	; (800130c <MX_DFSDM1_Init+0xc0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80012b2:	4b16      	ldr	r3, [pc, #88]	; (800130c <MX_DFSDM1_Init+0xc0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <MX_DFSDM1_Init+0xc0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <MX_DFSDM1_Init+0xc0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_DFSDM1_Init+0xc0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_DFSDM1_Init+0xc0>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_DFSDM1_Init+0xc0>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 7;
 80012d6:	4b0d      	ldr	r3, [pc, #52]	; (800130c <MX_DFSDM1_Init+0xc0>)
 80012d8:	2207      	movs	r2, #7
 80012da:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 80012dc:	480b      	ldr	r0, [pc, #44]	; (800130c <MX_DFSDM1_Init+0xc0>)
 80012de:	f002 fb73 	bl	80039c8 <HAL_DFSDM_ChannelInit>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 80012e8:	f000 fc68 	bl	8001bbc <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80012ec:	2201      	movs	r2, #1
 80012ee:	2101      	movs	r1, #1
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_DFSDM1_Init+0xb8>)
 80012f2:	f002 fd03 	bl	8003cfc <HAL_DFSDM_FilterConfigRegChannel>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 80012fc:	f000 fc5e 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20003f7c 	.word	0x20003f7c
 8001308:	40016100 	.word	0x40016100
 800130c:	20003fd0 	.word	0x20003fd0
 8001310:	40016000 	.word	0x40016000

08001314 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <MX_I2C1_Init+0x74>)
 800131a:	4a1c      	ldr	r2, [pc, #112]	; (800138c <MX_I2C1_Init+0x78>)
 800131c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <MX_I2C1_Init+0x74>)
 8001320:	4a1b      	ldr	r2, [pc, #108]	; (8001390 <MX_I2C1_Init+0x7c>)
 8001322:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <MX_I2C1_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_I2C1_Init+0x74>)
 800132c:	2201      	movs	r2, #1
 800132e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <MX_I2C1_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001336:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MX_I2C1_Init+0x74>)
 8001338:	2200      	movs	r2, #0
 800133a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <MX_I2C1_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_I2C1_Init+0x74>)
 8001344:	2200      	movs	r2, #0
 8001346:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_I2C1_Init+0x74>)
 800134a:	2200      	movs	r2, #0
 800134c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800134e:	480e      	ldr	r0, [pc, #56]	; (8001388 <MX_I2C1_Init+0x74>)
 8001350:	f003 f8fc 	bl	800454c <HAL_I2C_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800135a:	f000 fc2f 	bl	8001bbc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800135e:	2100      	movs	r1, #0
 8001360:	4809      	ldr	r0, [pc, #36]	; (8001388 <MX_I2C1_Init+0x74>)
 8001362:	f003 f98e 	bl	8004682 <HAL_I2CEx_ConfigAnalogFilter>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800136c:	f000 fc26 	bl	8001bbc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001370:	2100      	movs	r1, #0
 8001372:	4805      	ldr	r0, [pc, #20]	; (8001388 <MX_I2C1_Init+0x74>)
 8001374:	f003 f9d0 	bl	8004718 <HAL_I2CEx_ConfigDigitalFilter>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800137e:	f000 fc1d 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20004068 	.word	0x20004068
 800138c:	40005400 	.word	0x40005400
 8001390:	00b03fdb 	.word	0x00b03fdb

08001394 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <MX_I2C3_Init+0x74>)
 800139a:	4a1c      	ldr	r2, [pc, #112]	; (800140c <MX_I2C3_Init+0x78>)
 800139c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B03FDB;
 800139e:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <MX_I2C3_Init+0x74>)
 80013a0:	4a1b      	ldr	r2, [pc, #108]	; (8001410 <MX_I2C3_Init+0x7c>)
 80013a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80013a4:	4b18      	ldr	r3, [pc, #96]	; (8001408 <MX_I2C3_Init+0x74>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013aa:	4b17      	ldr	r3, [pc, #92]	; (8001408 <MX_I2C3_Init+0x74>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b0:	4b15      	ldr	r3, [pc, #84]	; (8001408 <MX_I2C3_Init+0x74>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80013b6:	4b14      	ldr	r3, [pc, #80]	; (8001408 <MX_I2C3_Init+0x74>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013bc:	4b12      	ldr	r3, [pc, #72]	; (8001408 <MX_I2C3_Init+0x74>)
 80013be:	2200      	movs	r2, #0
 80013c0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <MX_I2C3_Init+0x74>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <MX_I2C3_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80013ce:	480e      	ldr	r0, [pc, #56]	; (8001408 <MX_I2C3_Init+0x74>)
 80013d0:	f003 f8bc 	bl	800454c <HAL_I2C_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80013da:	f000 fbef 	bl	8001bbc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013de:	2100      	movs	r1, #0
 80013e0:	4809      	ldr	r0, [pc, #36]	; (8001408 <MX_I2C3_Init+0x74>)
 80013e2:	f003 f94e 	bl	8004682 <HAL_I2CEx_ConfigAnalogFilter>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80013ec:	f000 fbe6 	bl	8001bbc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80013f0:	2100      	movs	r1, #0
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_I2C3_Init+0x74>)
 80013f4:	f003 f990 	bl	8004718 <HAL_I2CEx_ConfigDigitalFilter>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80013fe:	f000 fbdd 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200040bc 	.word	0x200040bc
 800140c:	40005c00 	.word	0x40005c00
 8001410:	00b03fdb 	.word	0x00b03fdb

08001414 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001428:	2300      	movs	r3, #0
 800142a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800142c:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <MX_RTC_Init+0xb0>)
 800142e:	4a26      	ldr	r2, [pc, #152]	; (80014c8 <MX_RTC_Init+0xb4>)
 8001430:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001432:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <MX_RTC_Init+0xb0>)
 8001434:	2200      	movs	r2, #0
 8001436:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <MX_RTC_Init+0xb0>)
 800143a:	227f      	movs	r2, #127	; 0x7f
 800143c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <MX_RTC_Init+0xb0>)
 8001440:	22ff      	movs	r2, #255	; 0xff
 8001442:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001444:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <MX_RTC_Init+0xb0>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800144a:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <MX_RTC_Init+0xb0>)
 800144c:	2200      	movs	r2, #0
 800144e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001450:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <MX_RTC_Init+0xb0>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <MX_RTC_Init+0xb0>)
 8001458:	2200      	movs	r2, #0
 800145a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800145c:	4819      	ldr	r0, [pc, #100]	; (80014c4 <MX_RTC_Init+0xb0>)
 800145e:	f007 f8c1 	bl	80085e4 <HAL_RTC_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001468:	f000 fba8 	bl	8001bbc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001478:	2300      	movs	r3, #0
 800147a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2200      	movs	r2, #0
 8001484:	4619      	mov	r1, r3
 8001486:	480f      	ldr	r0, [pc, #60]	; (80014c4 <MX_RTC_Init+0xb0>)
 8001488:	f007 f934 	bl	80086f4 <HAL_RTC_SetTime>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001492:	f000 fb93 	bl	8001bbc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001496:	2302      	movs	r3, #2
 8001498:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 800149a:	2304      	movs	r3, #4
 800149c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 3;
 800149e:	2303      	movs	r3, #3
 80014a0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 20;
 80014a2:	2314      	movs	r3, #20
 80014a4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80014a6:	463b      	mov	r3, r7
 80014a8:	2200      	movs	r2, #0
 80014aa:	4619      	mov	r1, r3
 80014ac:	4805      	ldr	r0, [pc, #20]	; (80014c4 <MX_RTC_Init+0xb0>)
 80014ae:	f007 f9be 	bl	800882e <HAL_RTC_SetDate>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80014b8:	f000 fb80 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20004110 	.word	0x20004110
 80014c8:	40002800 	.word	0x40002800

080014cc <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80014d0:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <MX_SDMMC1_SD_Init+0x3c>)
 80014d2:	4a0e      	ldr	r2, [pc, #56]	; (800150c <MX_SDMMC1_SD_Init+0x40>)
 80014d4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <MX_SDMMC1_SD_Init+0x3c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <MX_SDMMC1_SD_Init+0x3c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <MX_SDMMC1_SD_Init+0x3c>)
 80014e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014e8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80014ea:	4b07      	ldr	r3, [pc, #28]	; (8001508 <MX_SDMMC1_SD_Init+0x3c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <MX_SDMMC1_SD_Init+0x3c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_ENABLE;
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <MX_SDMMC1_SD_Init+0x3c>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20004134 	.word	0x20004134
 800150c:	50062400 	.word	0x50062400

08001510 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <MX_SPI1_Init+0x74>)
 8001516:	4a1c      	ldr	r2, [pc, #112]	; (8001588 <MX_SPI1_Init+0x78>)
 8001518:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <MX_SPI1_Init+0x74>)
 800151c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001520:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <MX_SPI1_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <MX_SPI1_Init+0x74>)
 800152a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800152e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <MX_SPI1_Init+0x74>)
 8001532:	2202      	movs	r2, #2
 8001534:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <MX_SPI1_Init+0x74>)
 8001538:	2201      	movs	r2, #1
 800153a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <MX_SPI1_Init+0x74>)
 800153e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001542:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <MX_SPI1_Init+0x74>)
 8001546:	2218      	movs	r2, #24
 8001548:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <MX_SPI1_Init+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <MX_SPI1_Init+0x74>)
 8001552:	2200      	movs	r2, #0
 8001554:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <MX_SPI1_Init+0x74>)
 8001558:	2200      	movs	r2, #0
 800155a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <MX_SPI1_Init+0x74>)
 800155e:	2207      	movs	r2, #7
 8001560:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <MX_SPI1_Init+0x74>)
 8001564:	2200      	movs	r2, #0
 8001566:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <MX_SPI1_Init+0x74>)
 800156a:	2200      	movs	r2, #0
 800156c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_SPI1_Init+0x74>)
 8001570:	f008 ff8f 	bl	800a492 <HAL_SPI_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800157a:	f000 fb1f 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200041b4 	.word	0x200041b4
 8001588:	40013000 	.word	0x40013000

0800158c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <MX_SPI2_Init+0x74>)
 8001592:	4a1c      	ldr	r2, [pc, #112]	; (8001604 <MX_SPI2_Init+0x78>)
 8001594:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <MX_SPI2_Init+0x74>)
 8001598:	f44f 7282 	mov.w	r2, #260	; 0x104
 800159c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <MX_SPI2_Init+0x74>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <MX_SPI2_Init+0x74>)
 80015a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015aa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <MX_SPI2_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80015b2:	4b13      	ldr	r3, [pc, #76]	; (8001600 <MX_SPI2_Init+0x74>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <MX_SPI2_Init+0x74>)
 80015ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015be:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <MX_SPI2_Init+0x74>)
 80015c2:	2230      	movs	r2, #48	; 0x30
 80015c4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <MX_SPI2_Init+0x74>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <MX_SPI2_Init+0x74>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <MX_SPI2_Init+0x74>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <MX_SPI2_Init+0x74>)
 80015da:	2207      	movs	r2, #7
 80015dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <MX_SPI2_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <MX_SPI2_Init+0x74>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_SPI2_Init+0x74>)
 80015ec:	f008 ff51 	bl	800a492 <HAL_SPI_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80015f6:	f000 fae1 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20004218 	.word	0x20004218
 8001604:	40003800 	.word	0x40003800

08001608 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <MX_SPI3_Init+0x74>)
 800160e:	4a1c      	ldr	r2, [pc, #112]	; (8001680 <MX_SPI3_Init+0x78>)
 8001610:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001612:	4b1a      	ldr	r3, [pc, #104]	; (800167c <MX_SPI3_Init+0x74>)
 8001614:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001618:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <MX_SPI3_Init+0x74>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001620:	4b16      	ldr	r3, [pc, #88]	; (800167c <MX_SPI3_Init+0x74>)
 8001622:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001626:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <MX_SPI3_Init+0x74>)
 800162a:	2202      	movs	r2, #2
 800162c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800162e:	4b13      	ldr	r3, [pc, #76]	; (800167c <MX_SPI3_Init+0x74>)
 8001630:	2201      	movs	r2, #1
 8001632:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_SPI3_Init+0x74>)
 8001636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800163a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_SPI3_Init+0x74>)
 800163e:	2218      	movs	r2, #24
 8001640:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_SPI3_Init+0x74>)
 8001644:	2200      	movs	r2, #0
 8001646:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_SPI3_Init+0x74>)
 800164a:	2200      	movs	r2, #0
 800164c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <MX_SPI3_Init+0x74>)
 8001650:	2200      	movs	r2, #0
 8001652:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_SPI3_Init+0x74>)
 8001656:	2207      	movs	r2, #7
 8001658:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <MX_SPI3_Init+0x74>)
 800165c:	2200      	movs	r2, #0
 800165e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_SPI3_Init+0x74>)
 8001662:	2200      	movs	r2, #0
 8001664:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_SPI3_Init+0x74>)
 8001668:	f008 ff13 	bl	800a492 <HAL_SPI_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001672:	f000 faa3 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	2000427c 	.word	0x2000427c
 8001680:	40003c00 	.word	0x40003c00

08001684 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800168a:	f107 0310 	add.w	r3, r7, #16
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016a2:	4b1e      	ldr	r3, [pc, #120]	; (800171c <MX_TIM2_Init+0x98>)
 80016a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 80016aa:	4b1c      	ldr	r3, [pc, #112]	; (800171c <MX_TIM2_Init+0x98>)
 80016ac:	2277      	movs	r2, #119	; 0x77
 80016ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <MX_TIM2_Init+0x98>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 80016b6:	4b19      	ldr	r3, [pc, #100]	; (800171c <MX_TIM2_Init+0x98>)
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016be:	4b17      	ldr	r3, [pc, #92]	; (800171c <MX_TIM2_Init+0x98>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c4:	4b15      	ldr	r3, [pc, #84]	; (800171c <MX_TIM2_Init+0x98>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ca:	4814      	ldr	r0, [pc, #80]	; (800171c <MX_TIM2_Init+0x98>)
 80016cc:	f008 ff84 	bl	800a5d8 <HAL_TIM_Base_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016d6:	f000 fa71 	bl	8001bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	4619      	mov	r1, r3
 80016e6:	480d      	ldr	r0, [pc, #52]	; (800171c <MX_TIM2_Init+0x98>)
 80016e8:	f009 f8cf 	bl	800a88a <HAL_TIM_ConfigClockSource>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80016f2:	f000 fa63 	bl	8001bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	4619      	mov	r1, r3
 8001702:	4806      	ldr	r0, [pc, #24]	; (800171c <MX_TIM2_Init+0x98>)
 8001704:	f009 faf0 	bl	800ace8 <HAL_TIMEx_MasterConfigSynchronization>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800170e:	f000 fa55 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001712:	bf00      	nop
 8001714:	3720      	adds	r7, #32
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200042e0 	.word	0x200042e0

08001720 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <MX_TIM6_Init+0x64>)
 8001732:	4a15      	ldr	r2, [pc, #84]	; (8001788 <MX_TIM6_Init+0x68>)
 8001734:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 119;
 8001736:	4b13      	ldr	r3, [pc, #76]	; (8001784 <MX_TIM6_Init+0x64>)
 8001738:	2277      	movs	r2, #119	; 0x77
 800173a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_TIM6_Init+0x64>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <MX_TIM6_Init+0x64>)
 8001744:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001748:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_TIM6_Init+0x64>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001750:	480c      	ldr	r0, [pc, #48]	; (8001784 <MX_TIM6_Init+0x64>)
 8001752:	f008 ff41 	bl	800a5d8 <HAL_TIM_Base_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800175c:	f000 fa2e 	bl	8001bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001760:	2300      	movs	r3, #0
 8001762:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	4619      	mov	r1, r3
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_TIM6_Init+0x64>)
 800176e:	f009 fabb 	bl	800ace8 <HAL_TIMEx_MasterConfigSynchronization>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001778:	f000 fa20 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	2000432c 	.word	0x2000432c
 8001788:	40001000 	.word	0x40001000

0800178c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_TIM7_Init+0x64>)
 800179e:	4a15      	ldr	r2, [pc, #84]	; (80017f4 <MX_TIM7_Init+0x68>)
 80017a0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 119;
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <MX_TIM7_Init+0x64>)
 80017a4:	2277      	movs	r2, #119	; 0x77
 80017a6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_TIM7_Init+0x64>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0xFFFF;
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <MX_TIM7_Init+0x64>)
 80017b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017b4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_TIM7_Init+0x64>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80017bc:	480c      	ldr	r0, [pc, #48]	; (80017f0 <MX_TIM7_Init+0x64>)
 80017be:	f008 ff0b 	bl	800a5d8 <HAL_TIM_Base_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80017c8:	f000 f9f8 	bl	8001bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017cc:	2300      	movs	r3, #0
 80017ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	4619      	mov	r1, r3
 80017d8:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_TIM7_Init+0x64>)
 80017da:	f009 fa85 	bl	800ace8 <HAL_TIMEx_MasterConfigSynchronization>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80017e4:	f000 f9ea 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20004378 	.word	0x20004378
 80017f4:	40001400 	.word	0x40001400

080017f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017fc:	4b22      	ldr	r3, [pc, #136]	; (8001888 <MX_USART3_UART_Init+0x90>)
 80017fe:	4a23      	ldr	r2, [pc, #140]	; (800188c <MX_USART3_UART_Init+0x94>)
 8001800:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001802:	4b21      	ldr	r3, [pc, #132]	; (8001888 <MX_USART3_UART_Init+0x90>)
 8001804:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001808:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800180a:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <MX_USART3_UART_Init+0x90>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001810:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <MX_USART3_UART_Init+0x90>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001816:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <MX_USART3_UART_Init+0x90>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800181c:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <MX_USART3_UART_Init+0x90>)
 800181e:	220c      	movs	r2, #12
 8001820:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001822:	4b19      	ldr	r3, [pc, #100]	; (8001888 <MX_USART3_UART_Init+0x90>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001828:	4b17      	ldr	r3, [pc, #92]	; (8001888 <MX_USART3_UART_Init+0x90>)
 800182a:	2200      	movs	r2, #0
 800182c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800182e:	4b16      	ldr	r3, [pc, #88]	; (8001888 <MX_USART3_UART_Init+0x90>)
 8001830:	2200      	movs	r2, #0
 8001832:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001834:	4b14      	ldr	r3, [pc, #80]	; (8001888 <MX_USART3_UART_Init+0x90>)
 8001836:	2200      	movs	r2, #0
 8001838:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <MX_USART3_UART_Init+0x90>)
 800183c:	2200      	movs	r2, #0
 800183e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001840:	4811      	ldr	r0, [pc, #68]	; (8001888 <MX_USART3_UART_Init+0x90>)
 8001842:	f009 faf7 	bl	800ae34 <HAL_UART_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800184c:	f000 f9b6 	bl	8001bbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001850:	2100      	movs	r1, #0
 8001852:	480d      	ldr	r0, [pc, #52]	; (8001888 <MX_USART3_UART_Init+0x90>)
 8001854:	f00a f88c 	bl	800b970 <HAL_UARTEx_SetTxFifoThreshold>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800185e:	f000 f9ad 	bl	8001bbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001862:	2100      	movs	r1, #0
 8001864:	4808      	ldr	r0, [pc, #32]	; (8001888 <MX_USART3_UART_Init+0x90>)
 8001866:	f00a f8c1 	bl	800b9ec <HAL_UARTEx_SetRxFifoThreshold>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001870:	f000 f9a4 	bl	8001bbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001874:	4804      	ldr	r0, [pc, #16]	; (8001888 <MX_USART3_UART_Init+0x90>)
 8001876:	f00a f842 	bl	800b8fe <HAL_UARTEx_DisableFifoMode>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001880:	f000 f99c 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}
 8001888:	200043c4 	.word	0x200043c4
 800188c:	40004800 	.word	0x40004800

08001890 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <MX_DMA_Init+0x50>)
 8001898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800189a:	4a11      	ldr	r2, [pc, #68]	; (80018e0 <MX_DMA_Init+0x50>)
 800189c:	f043 0304 	orr.w	r3, r3, #4
 80018a0:	6493      	str	r3, [r2, #72]	; 0x48
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MX_DMA_Init+0x50>)
 80018a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018ae:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_DMA_Init+0x50>)
 80018b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b2:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <MX_DMA_Init+0x50>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6493      	str	r3, [r2, #72]	; 0x48
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_DMA_Init+0x50>)
 80018bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	200e      	movs	r0, #14
 80018cc:	f001 ff53 	bl	8003776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80018d0:	200e      	movs	r0, #14
 80018d2:	f001 ff6c 	bl	80037ae <HAL_NVIC_EnableIRQ>

}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000

080018e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08e      	sub	sp, #56	; 0x38
 80018e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fa:	4ba9      	ldr	r3, [pc, #676]	; (8001ba0 <MX_GPIO_Init+0x2bc>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	4aa8      	ldr	r2, [pc, #672]	; (8001ba0 <MX_GPIO_Init+0x2bc>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001906:	4ba6      	ldr	r3, [pc, #664]	; (8001ba0 <MX_GPIO_Init+0x2bc>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	623b      	str	r3, [r7, #32]
 8001910:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001912:	4ba3      	ldr	r3, [pc, #652]	; (8001ba0 <MX_GPIO_Init+0x2bc>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	4aa2      	ldr	r2, [pc, #648]	; (8001ba0 <MX_GPIO_Init+0x2bc>)
 8001918:	f043 0308 	orr.w	r3, r3, #8
 800191c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191e:	4ba0      	ldr	r3, [pc, #640]	; (8001ba0 <MX_GPIO_Init+0x2bc>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	61fb      	str	r3, [r7, #28]
 8001928:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192a:	4b9d      	ldr	r3, [pc, #628]	; (8001ba0 <MX_GPIO_Init+0x2bc>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	4a9c      	ldr	r2, [pc, #624]	; (8001ba0 <MX_GPIO_Init+0x2bc>)
 8001930:	f043 0304 	orr.w	r3, r3, #4
 8001934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001936:	4b9a      	ldr	r3, [pc, #616]	; (8001ba0 <MX_GPIO_Init+0x2bc>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	61bb      	str	r3, [r7, #24]
 8001940:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001942:	4b97      	ldr	r3, [pc, #604]	; (8001ba0 <MX_GPIO_Init+0x2bc>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	4a96      	ldr	r2, [pc, #600]	; (8001ba0 <MX_GPIO_Init+0x2bc>)
 8001948:	f043 0310 	orr.w	r3, r3, #16
 800194c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194e:	4b94      	ldr	r3, [pc, #592]	; (8001ba0 <MX_GPIO_Init+0x2bc>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	4b91      	ldr	r3, [pc, #580]	; (8001ba0 <MX_GPIO_Init+0x2bc>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	4a90      	ldr	r2, [pc, #576]	; (8001ba0 <MX_GPIO_Init+0x2bc>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001966:	4b8e      	ldr	r3, [pc, #568]	; (8001ba0 <MX_GPIO_Init+0x2bc>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001972:	4b8b      	ldr	r3, [pc, #556]	; (8001ba0 <MX_GPIO_Init+0x2bc>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001976:	4a8a      	ldr	r2, [pc, #552]	; (8001ba0 <MX_GPIO_Init+0x2bc>)
 8001978:	f043 0320 	orr.w	r3, r3, #32
 800197c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197e:	4b88      	ldr	r3, [pc, #544]	; (8001ba0 <MX_GPIO_Init+0x2bc>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001982:	f003 0320 	and.w	r3, r3, #32
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800198a:	4b85      	ldr	r3, [pc, #532]	; (8001ba0 <MX_GPIO_Init+0x2bc>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198e:	4a84      	ldr	r2, [pc, #528]	; (8001ba0 <MX_GPIO_Init+0x2bc>)
 8001990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001996:	4b82      	ldr	r3, [pc, #520]	; (8001ba0 <MX_GPIO_Init+0x2bc>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 80019a2:	f004 f991 	bl	8005cc8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019a6:	4b7e      	ldr	r3, [pc, #504]	; (8001ba0 <MX_GPIO_Init+0x2bc>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	4a7d      	ldr	r2, [pc, #500]	; (8001ba0 <MX_GPIO_Init+0x2bc>)
 80019ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b2:	4b7b      	ldr	r3, [pc, #492]	; (8001ba0 <MX_GPIO_Init+0x2bc>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_LIS2MDL_GPIO_Port, CS_LIS2MDL_Pin, GPIO_PIN_SET);
 80019be:	2201      	movs	r2, #1
 80019c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c8:	f002 fd8e 	bl	80044e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SD_SEL_Pin|SD_EN_Pin|CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin
 80019cc:	2201      	movs	r2, #1
 80019ce:	f641 4130 	movw	r1, #7216	; 0x1c30
 80019d2:	4874      	ldr	r0, [pc, #464]	; (8001ba4 <MX_GPIO_Init+0x2c0>)
 80019d4:	f002 fd88 	bl	80044e8 <HAL_GPIO_WritePin>
                          |CS_LSM6DSOX_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, USER_LED_Pin|BB_MODE_Pin, GPIO_PIN_RESET);
 80019d8:	2200      	movs	r2, #0
 80019da:	2105      	movs	r1, #5
 80019dc:	4872      	ldr	r0, [pc, #456]	; (8001ba8 <MX_GPIO_Init+0x2c4>)
 80019de:	f002 fd83 	bl	80044e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHG_LED2_GPIO_Port, CHG_LED2_Pin, GPIO_PIN_SET);
 80019e2:	2201      	movs	r2, #1
 80019e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019e8:	4870      	ldr	r0, [pc, #448]	; (8001bac <MX_GPIO_Init+0x2c8>)
 80019ea:	f002 fd7d 	bl	80044e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDO_2V7_EN_GPIO_Port, LDO_2V7_EN_Pin, GPIO_PIN_SET);
 80019ee:	2201      	movs	r2, #1
 80019f0:	2180      	movs	r1, #128	; 0x80
 80019f2:	486d      	ldr	r0, [pc, #436]	; (8001ba8 <MX_GPIO_Init+0x2c4>)
 80019f4:	f002 fd78 	bl	80044e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SW_SEL_GPIO_Port, SW_SEL_Pin, GPIO_PIN_RESET);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2110      	movs	r1, #16
 80019fc:	486b      	ldr	r0, [pc, #428]	; (8001bac <MX_GPIO_Init+0x2c8>)
 80019fe:	f002 fd73 	bl	80044e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CPU_LED_GPIO_Port, CPU_LED_Pin, GPIO_PIN_RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a08:	4869      	ldr	r0, [pc, #420]	; (8001bb0 <MX_GPIO_Init+0x2cc>)
 8001a0a:	f002 fd6d 	bl	80044e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT2_LSM6DSOX_Pin INT2_IIS3DHHC_Pin */
  GPIO_InitStruct.Pin = INT2_LSM6DSOX_Pin|INT2_IIS3DHHC_Pin;
 8001a0e:	2348      	movs	r3, #72	; 0x48
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a20:	4619      	mov	r1, r3
 8001a22:	4860      	ldr	r0, [pc, #384]	; (8001ba4 <MX_GPIO_Init+0x2c0>)
 8001a24:	f002 fbb6 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART2_RX_Pin USART2_TX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 8001a28:	2360      	movs	r3, #96	; 0x60
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a34:	2303      	movs	r3, #3
 8001a36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a38:	2307      	movs	r3, #7
 8001a3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a40:	4619      	mov	r1, r3
 8001a42:	485c      	ldr	r0, [pc, #368]	; (8001bb4 <MX_GPIO_Init+0x2d0>)
 8001a44:	f002 fba6 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_LIS2MDL_Pin */
  GPIO_InitStruct.Pin = CS_LIS2MDL_Pin;
 8001a48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a4e:	2311      	movs	r3, #17
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a56:	2303      	movs	r3, #3
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS_LIS2MDL_GPIO_Port, &GPIO_InitStruct);
 8001a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a64:	f002 fb96 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_SEL_Pin SD_EN_Pin */
  GPIO_InitStruct.Pin = SD_SEL_Pin|SD_EN_Pin;
 8001a68:	2330      	movs	r3, #48	; 0x30
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a74:	2300      	movs	r3, #0
 8001a76:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4849      	ldr	r0, [pc, #292]	; (8001ba4 <MX_GPIO_Init+0x2c0>)
 8001a80:	f002 fb88 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_Pin BB_MODE_Pin LDO_2V7_EN_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|BB_MODE_Pin|LDO_2V7_EN_Pin;
 8001a84:	2385      	movs	r3, #133	; 0x85
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4843      	ldr	r0, [pc, #268]	; (8001ba8 <MX_GPIO_Init+0x2c4>)
 8001a9c:	f002 fb7a 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_LED2_Pin SW_SEL_Pin */
  GPIO_InitStruct.Pin = CHG_LED2_Pin|SW_SEL_Pin;
 8001aa0:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	483c      	ldr	r0, [pc, #240]	; (8001bac <MX_GPIO_Init+0x2c8>)
 8001aba:	f002 fb6b 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_LED_Pin */
  GPIO_InitStruct.Pin = CHG_LED_Pin;
 8001abe:	2308      	movs	r3, #8
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHG_LED_GPIO_Port, &GPIO_InitStruct);
 8001aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4836      	ldr	r0, [pc, #216]	; (8001bac <MX_GPIO_Init+0x2c8>)
 8001ad2:	f002 fb5f 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_LPS22HH_Pin INT2_LIS2DW12_Pin INT_HTS221_Pin */
  GPIO_InitStruct.Pin = INT_LPS22HH_Pin|INT2_LIS2DW12_Pin|INT_HTS221_Pin;
 8001ad6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001adc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aea:	4619      	mov	r1, r3
 8001aec:	4831      	ldr	r0, [pc, #196]	; (8001bb4 <MX_GPIO_Init+0x2d0>)
 8001aee:	f002 fb51 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_LIS2DW12_Pin CS_IIS3DHHC_Pin CS_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin|CS_LSM6DSOX_Pin;
 8001af2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001af8:	2311      	movs	r3, #17
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b00:	2303      	movs	r3, #3
 8001b02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4826      	ldr	r0, [pc, #152]	; (8001ba4 <MX_GPIO_Init+0x2c0>)
 8001b0c:	f002 fb42 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pin : CPU_LED_Pin */
  GPIO_InitStruct.Pin = CPU_LED_Pin;
 8001b10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b16:	2301      	movs	r3, #1
 8001b18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CPU_LED_GPIO_Port, &GPIO_InitStruct);
 8001b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b26:	4619      	mov	r1, r3
 8001b28:	4821      	ldr	r0, [pc, #132]	; (8001bb0 <MX_GPIO_Init+0x2cc>)
 8001b2a:	f002 fb33 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LIS2DW12_Pin */
  GPIO_InitStruct.Pin = INT1_LIS2DW12_Pin;
 8001b2e:	2320      	movs	r3, #32
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LIS2DW12_GPIO_Port, &GPIO_InitStruct);
 8001b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b40:	4619      	mov	r1, r3
 8001b42:	481d      	ldr	r0, [pc, #116]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 8001b44:	f002 fb26 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = INT1_LSM6DSOX_Pin;
 8001b48:	2304      	movs	r3, #4
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b4c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LSM6DSOX_GPIO_Port, &GPIO_InitStruct);
 8001b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b60:	f002 fb18 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8001b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b76:	4619      	mov	r1, r3
 8001b78:	480d      	ldr	r0, [pc, #52]	; (8001bb0 <MX_GPIO_Init+0x2cc>)
 8001b7a:	f002 fb0b 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_PB1_Pin */
  GPIO_InitStruct.Pin = USER_PB1_Pin;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b82:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_PB1_GPIO_Port, &GPIO_InitStruct);
 8001b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b90:	4619      	mov	r1, r3
 8001b92:	4806      	ldr	r0, [pc, #24]	; (8001bac <MX_GPIO_Init+0x2c8>)
 8001b94:	f002 fafe 	bl	8004194 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b98:	bf00      	nop
 8001b9a:	3738      	adds	r7, #56	; 0x38
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	48001000 	.word	0x48001000
 8001ba8:	48001400 	.word	0x48001400
 8001bac:	48001800 	.word	0x48001800
 8001bb0:	48000400 	.word	0x48000400
 8001bb4:	48000c00 	.word	0x48000c00
 8001bb8:	48000800 	.word	0x48000800

08001bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc0:	b672      	cpsid	i
}
 8001bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <Error_Handler+0x8>
	...

08001bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <HAL_MspInit+0x44>)
 8001bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd2:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <HAL_MspInit+0x44>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6613      	str	r3, [r2, #96]	; 0x60
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <HAL_MspInit+0x44>)
 8001bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <HAL_MspInit+0x44>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	4a08      	ldr	r2, [pc, #32]	; (8001c0c <HAL_MspInit+0x44>)
 8001bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_MspInit+0x44>)
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000

08001c10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b0b2      	sub	sp, #200	; 0xc8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c28:	f107 0318 	add.w	r3, r7, #24
 8001c2c:	229c      	movs	r2, #156	; 0x9c
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f019 f8f5 	bl	801ae20 <memset>
  if(hadc->Instance==ADC1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a35      	ldr	r2, [pc, #212]	; (8001d10 <HAL_ADC_MspInit+0x100>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d162      	bne.n	8001d06 <HAL_ADC_MspInit+0xf6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c44:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001c46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8001c52:	2305      	movs	r3, #5
 8001c54:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 8001c56:	2360      	movs	r3, #96	; 0x60
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8001c5e:	2304      	movs	r3, #4
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8001c62:	2304      	movs	r3, #4
 8001c64:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001c66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c6a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c6c:	f107 0318 	add.w	r3, r7, #24
 8001c70:	4618      	mov	r0, r3
 8001c72:	f004 ff0d 	bl	8006a90 <HAL_RCCEx_PeriphCLKConfig>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001c7c:	f7ff ff9e 	bl	8001bbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c80:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <HAL_ADC_MspInit+0x104>)
 8001c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c84:	4a23      	ldr	r2, [pc, #140]	; (8001d14 <HAL_ADC_MspInit+0x104>)
 8001c86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c8c:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <HAL_ADC_MspInit+0x104>)
 8001c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c98:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <HAL_ADC_MspInit+0x104>)
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9c:	4a1d      	ldr	r2, [pc, #116]	; (8001d14 <HAL_ADC_MspInit+0x104>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <HAL_ADC_MspInit+0x104>)
 8001ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb0:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <HAL_ADC_MspInit+0x104>)
 8001cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb4:	4a17      	ldr	r2, [pc, #92]	; (8001d14 <HAL_ADC_MspInit+0x104>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cbc:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <HAL_ADC_MspInit+0x104>)
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = AN_VBATT_Pin;
 8001cc8:	2310      	movs	r3, #16
 8001cca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001cce:	230b      	movs	r3, #11
 8001cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(AN_VBATT_GPIO_Port, &GPIO_InitStruct);
 8001cda:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cde:	4619      	mov	r1, r3
 8001ce0:	480d      	ldr	r0, [pc, #52]	; (8001d18 <HAL_ADC_MspInit+0x108>)
 8001ce2:	f002 fa57 	bl	8004194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN8_Pin;
 8001ce6:	2308      	movs	r3, #8
 8001ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001cec:	230b      	movs	r3, #11
 8001cee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(ADC1_IN8_GPIO_Port, &GPIO_InitStruct);
 8001cf8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d02:	f002 fa47 	bl	8004194 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d06:	bf00      	nop
 8001d08:	37c8      	adds	r7, #200	; 0xc8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	50040000 	.word	0x50040000
 8001d14:	40021000 	.word	0x40021000
 8001d18:	48000800 	.word	0x48000800

08001d1c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <HAL_CRC_MspInit+0x38>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d10b      	bne.n	8001d46 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <HAL_CRC_MspInit+0x3c>)
 8001d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d32:	4a09      	ldr	r2, [pc, #36]	; (8001d58 <HAL_CRC_MspInit+0x3c>)
 8001d34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d38:	6493      	str	r3, [r2, #72]	; 0x48
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <HAL_CRC_MspInit+0x3c>)
 8001d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40023000 	.word	0x40023000
 8001d58:	40021000 	.word	0x40021000

08001d5c <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b0aa      	sub	sp, #168	; 0xa8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d64:	f107 030c 	add.w	r3, r7, #12
 8001d68:	229c      	movs	r2, #156	; 0x9c
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f019 f857 	bl	801ae20 <memset>
  if(DFSDM1_Init == 0)
 8001d72:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <HAL_DFSDM_FilterMspInit+0xe8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d129      	bne.n	8001dce <HAL_DFSDM_FilterMspInit+0x72>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001d7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d7e:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d86:	f107 030c 	add.w	r3, r7, #12
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f004 fe80 	bl	8006a90 <HAL_RCCEx_PeriphCLKConfig>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_DFSDM_FilterMspInit+0x3e>
    {
      Error_Handler();
 8001d96:	f7ff ff11 	bl	8001bbc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001d9a:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <HAL_DFSDM_FilterMspInit+0xec>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	4a29      	ldr	r2, [pc, #164]	; (8001e48 <HAL_DFSDM_FilterMspInit+0xec>)
 8001da2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001da4:	4b28      	ldr	r3, [pc, #160]	; (8001e48 <HAL_DFSDM_FilterMspInit+0xec>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d10b      	bne.n	8001dc4 <HAL_DFSDM_FilterMspInit+0x68>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001dac:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <HAL_DFSDM_FilterMspInit+0xf0>)
 8001dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db0:	4a26      	ldr	r2, [pc, #152]	; (8001e4c <HAL_DFSDM_FilterMspInit+0xf0>)
 8001db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001db6:	6613      	str	r3, [r2, #96]	; 0x60
 8001db8:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <HAL_DFSDM_FilterMspInit+0xf0>)
 8001dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <HAL_DFSDM_FilterMspInit+0xe8>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	4a1e      	ldr	r2, [pc, #120]	; (8001e44 <HAL_DFSDM_FilterMspInit+0xe8>)
 8001dcc:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1f      	ldr	r2, [pc, #124]	; (8001e50 <HAL_DFSDM_FilterMspInit+0xf4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d131      	bne.n	8001e3c <HAL_DFSDM_FilterMspInit+0xe0>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8001dd8:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001dda:	4a1f      	ldr	r2, [pc, #124]	; (8001e58 <HAL_DFSDM_FilterMspInit+0xfc>)
 8001ddc:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8001dde:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001de0:	2256      	movs	r2, #86	; 0x56
 8001de2:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dea:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001df0:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001df2:	2280      	movs	r2, #128	; 0x80
 8001df4:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001df6:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dfc:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e04:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001e06:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001e08:	2220      	movs	r2, #32
 8001e0a:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001e0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001e14:	480f      	ldr	r0, [pc, #60]	; (8001e54 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001e16:	f002 f803 	bl	8003e20 <HAL_DMA_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_DFSDM_FilterMspInit+0xc8>
    {
      Error_Handler();
 8001e20:	f7ff fecc 	bl	8001bbc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a0b      	ldr	r2, [pc, #44]	; (8001e54 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001e28:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	; (8001e54 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a08      	ldr	r2, [pc, #32]	; (8001e54 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001e34:	629a      	str	r2, [r3, #40]	; 0x28
 8001e36:	4a07      	ldr	r2, [pc, #28]	; (8001e54 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8001e3c:	bf00      	nop
 8001e3e:	37a8      	adds	r7, #168	; 0xa8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	2000445c 	.word	0x2000445c
 8001e48:	20004458 	.word	0x20004458
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40016100 	.word	0x40016100
 8001e54:	20004008 	.word	0x20004008
 8001e58:	40020044 	.word	0x40020044

08001e5c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b0aa      	sub	sp, #168	; 0xa8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e64:	f107 030c 	add.w	r3, r7, #12
 8001e68:	229c      	movs	r2, #156	; 0x9c
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f018 ffd7 	bl	801ae20 <memset>
  if(DFSDM1_Init == 0)
 8001e72:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d129      	bne.n	8001ece <HAL_DFSDM_ChannelMspInit+0x72>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001e7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e7e:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f004 fe00 	bl	8006a90 <HAL_RCCEx_PeriphCLKConfig>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_DFSDM_ChannelMspInit+0x3e>
    {
      Error_Handler();
 8001e96:	f7ff fe91 	bl	8001bbc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <HAL_DFSDM_ChannelMspInit+0x80>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <HAL_DFSDM_ChannelMspInit+0x80>)
 8001ea2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <HAL_DFSDM_ChannelMspInit+0x80>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d10b      	bne.n	8001ec4 <HAL_DFSDM_ChannelMspInit+0x68>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb0:	4a0b      	ldr	r2, [pc, #44]	; (8001ee0 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eb6:	6613      	str	r3, [r2, #96]	; 0x60
 8001eb8:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	4a03      	ldr	r2, [pc, #12]	; (8001ed8 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8001ecc:	6013      	str	r3, [r2, #0]
  }

}
 8001ece:	bf00      	nop
 8001ed0:	37a8      	adds	r7, #168	; 0xa8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	2000445c 	.word	0x2000445c
 8001edc:	20004458 	.word	0x20004458
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b0b2      	sub	sp, #200	; 0xc8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001efc:	f107 0318 	add.w	r3, r7, #24
 8001f00:	229c      	movs	r2, #156	; 0x9c
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f018 ff8b 	bl	801ae20 <memset>
  if(hi2c->Instance==I2C1)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a43      	ldr	r2, [pc, #268]	; (800201c <HAL_I2C_MspInit+0x138>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d13b      	bne.n	8001f8c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f14:	2340      	movs	r3, #64	; 0x40
 8001f16:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f1c:	f107 0318 	add.w	r3, r7, #24
 8001f20:	4618      	mov	r0, r3
 8001f22:	f004 fdb5 	bl	8006a90 <HAL_RCCEx_PeriphCLKConfig>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f2c:	f7ff fe46 	bl	8001bbc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f30:	4b3b      	ldr	r3, [pc, #236]	; (8002020 <HAL_I2C_MspInit+0x13c>)
 8001f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f34:	4a3a      	ldr	r2, [pc, #232]	; (8002020 <HAL_I2C_MspInit+0x13c>)
 8001f36:	f043 0302 	orr.w	r3, r3, #2
 8001f3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f3c:	4b38      	ldr	r3, [pc, #224]	; (8002020 <HAL_I2C_MspInit+0x13c>)
 8001f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 8001f48:	23c0      	movs	r3, #192	; 0xc0
 8001f4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f4e:	2312      	movs	r3, #18
 8001f50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f54:	2301      	movs	r3, #1
 8001f56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f60:	2304      	movs	r3, #4
 8001f62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f66:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	482d      	ldr	r0, [pc, #180]	; (8002024 <HAL_I2C_MspInit+0x140>)
 8001f6e:	f002 f911 	bl	8004194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f72:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <HAL_I2C_MspInit+0x13c>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	4a2a      	ldr	r2, [pc, #168]	; (8002020 <HAL_I2C_MspInit+0x13c>)
 8001f78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7e:	4b28      	ldr	r3, [pc, #160]	; (8002020 <HAL_I2C_MspInit+0x13c>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001f8a:	e043      	b.n	8002014 <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C3)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a25      	ldr	r2, [pc, #148]	; (8002028 <HAL_I2C_MspInit+0x144>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d13e      	bne.n	8002014 <HAL_I2C_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f9a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fa0:	f107 0318 	add.w	r3, r7, #24
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f004 fd73 	bl	8006a90 <HAL_RCCEx_PeriphCLKConfig>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001fb0:	f7ff fe04 	bl	8001bbc <Error_Handler>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fb4:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <HAL_I2C_MspInit+0x13c>)
 8001fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb8:	4a19      	ldr	r2, [pc, #100]	; (8002020 <HAL_I2C_MspInit+0x13c>)
 8001fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc0:	4b17      	ldr	r3, [pc, #92]	; (8002020 <HAL_I2C_MspInit+0x13c>)
 8001fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8001fcc:	f003 fe7c 	bl	8005cc8 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 8001fd0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fd8:	2312      	movs	r3, #18
 8001fda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fea:	2304      	movs	r3, #4
 8001fec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ff0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	480d      	ldr	r0, [pc, #52]	; (800202c <HAL_I2C_MspInit+0x148>)
 8001ff8:	f002 f8cc 	bl	8004194 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <HAL_I2C_MspInit+0x13c>)
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002000:	4a07      	ldr	r2, [pc, #28]	; (8002020 <HAL_I2C_MspInit+0x13c>)
 8002002:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002006:	6593      	str	r3, [r2, #88]	; 0x58
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_I2C_MspInit+0x13c>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
}
 8002014:	bf00      	nop
 8002016:	37c8      	adds	r7, #200	; 0xc8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40005400 	.word	0x40005400
 8002020:	40021000 	.word	0x40021000
 8002024:	48000400 	.word	0x48000400
 8002028:	40005c00 	.word	0x40005c00
 800202c:	48001800 	.word	0x48001800

08002030 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b0aa      	sub	sp, #168	; 0xa8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	229c      	movs	r2, #156	; 0x9c
 800203e:	2100      	movs	r1, #0
 8002040:	4618      	mov	r0, r3
 8002042:	f018 feed 	bl	801ae20 <memset>
  if(hrtc->Instance==RTC)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a10      	ldr	r2, [pc, #64]	; (800208c <HAL_RTC_MspInit+0x5c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d118      	bne.n	8002082 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002050:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002054:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002056:	f44f 7380 	mov.w	r3, #256	; 0x100
 800205a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800205e:	f107 030c 	add.w	r3, r7, #12
 8002062:	4618      	mov	r0, r3
 8002064:	f004 fd14 	bl	8006a90 <HAL_RCCEx_PeriphCLKConfig>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800206e:	f7ff fda5 	bl	8001bbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <HAL_RTC_MspInit+0x60>)
 8002074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002078:	4a05      	ldr	r2, [pc, #20]	; (8002090 <HAL_RTC_MspInit+0x60>)
 800207a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800207e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002082:	bf00      	nop
 8002084:	37a8      	adds	r7, #168	; 0xa8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40002800 	.word	0x40002800
 8002090:	40021000 	.word	0x40021000

08002094 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b0b2      	sub	sp, #200	; 0xc8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020ac:	f107 0318 	add.w	r3, r7, #24
 80020b0:	229c      	movs	r2, #156	; 0x9c
 80020b2:	2100      	movs	r1, #0
 80020b4:	4618      	mov	r0, r3
 80020b6:	f018 feb3 	bl	801ae20 <memset>
  if(hsd->Instance==SDMMC1)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a53      	ldr	r2, [pc, #332]	; (800220c <HAL_SD_MspInit+0x178>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	f040 809f 	bne.w	8002204 <HAL_SD_MspInit+0x170>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80020c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80020ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 80020cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020d4:	f107 0318 	add.w	r3, r7, #24
 80020d8:	4618      	mov	r0, r3
 80020da:	f004 fcd9 	bl	8006a90 <HAL_RCCEx_PeriphCLKConfig>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80020e4:	f7ff fd6a 	bl	8001bbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80020e8:	4b49      	ldr	r3, [pc, #292]	; (8002210 <HAL_SD_MspInit+0x17c>)
 80020ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ec:	4a48      	ldr	r2, [pc, #288]	; (8002210 <HAL_SD_MspInit+0x17c>)
 80020ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020f4:	4b46      	ldr	r3, [pc, #280]	; (8002210 <HAL_SD_MspInit+0x17c>)
 80020f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002100:	4b43      	ldr	r3, [pc, #268]	; (8002210 <HAL_SD_MspInit+0x17c>)
 8002102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002104:	4a42      	ldr	r2, [pc, #264]	; (8002210 <HAL_SD_MspInit+0x17c>)
 8002106:	f043 0302 	orr.w	r3, r3, #2
 800210a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800210c:	4b40      	ldr	r3, [pc, #256]	; (8002210 <HAL_SD_MspInit+0x17c>)
 800210e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002118:	4b3d      	ldr	r3, [pc, #244]	; (8002210 <HAL_SD_MspInit+0x17c>)
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211c:	4a3c      	ldr	r2, [pc, #240]	; (8002210 <HAL_SD_MspInit+0x17c>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002124:	4b3a      	ldr	r3, [pc, #232]	; (8002210 <HAL_SD_MspInit+0x17c>)
 8002126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002130:	4b37      	ldr	r3, [pc, #220]	; (8002210 <HAL_SD_MspInit+0x17c>)
 8002132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002134:	4a36      	ldr	r2, [pc, #216]	; (8002210 <HAL_SD_MspInit+0x17c>)
 8002136:	f043 0308 	orr.w	r3, r3, #8
 800213a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800213c:	4b34      	ldr	r3, [pc, #208]	; (8002210 <HAL_SD_MspInit+0x17c>)
 800213e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> SDMMC1_CK
    PC6     ------> SDMMC1_D0DIR
    PC7     ------> SDMMC1_D123DIR
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC1_CDIR_Pin|SDMMC1_CKIN_Pin;
 8002148:	f44f 7340 	mov.w	r3, #768	; 0x300
 800214c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002150:	2302      	movs	r3, #2
 8002152:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215c:	2303      	movs	r3, #3
 800215e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8002162:	2308      	movs	r3, #8
 8002164:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002168:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800216c:	4619      	mov	r1, r3
 800216e:	4829      	ldr	r0, [pc, #164]	; (8002214 <HAL_SD_MspInit+0x180>)
 8002170:	f002 f810 	bl	8004194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D3_Pin|SDMMC1_D2_Pin|SDMMC1_D1_Pin|SDMMC1_CK_Pin
 8002174:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002178:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |SDMMC1_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002188:	2303      	movs	r3, #3
 800218a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800218e:	230c      	movs	r3, #12
 8002190:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002194:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002198:	4619      	mov	r1, r3
 800219a:	481f      	ldr	r0, [pc, #124]	; (8002218 <HAL_SD_MspInit+0x184>)
 800219c:	f001 fffa 	bl	8004194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_CMD_Pin;
 80021a0:	2304      	movs	r3, #4
 80021a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b2:	2303      	movs	r3, #3
 80021b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80021b8:	230c      	movs	r3, #12
 80021ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(SDMMC1_CMD_GPIO_Port, &GPIO_InitStruct);
 80021be:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021c2:	4619      	mov	r1, r3
 80021c4:	4815      	ldr	r0, [pc, #84]	; (800221c <HAL_SD_MspInit+0x188>)
 80021c6:	f001 ffe5 	bl	8004194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D0DIR_Pin|SDMMC1_D123DIR_Pin;
 80021ca:	23c0      	movs	r3, #192	; 0xc0
 80021cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021dc:	2303      	movs	r3, #3
 80021de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 80021e2:	2308      	movs	r3, #8
 80021e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021ec:	4619      	mov	r1, r3
 80021ee:	480a      	ldr	r0, [pc, #40]	; (8002218 <HAL_SD_MspInit+0x184>)
 80021f0:	f001 ffd0 	bl	8004194 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80021f4:	2200      	movs	r2, #0
 80021f6:	2100      	movs	r1, #0
 80021f8:	2031      	movs	r0, #49	; 0x31
 80021fa:	f001 fabc 	bl	8003776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80021fe:	2031      	movs	r0, #49	; 0x31
 8002200:	f001 fad5 	bl	80037ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002204:	bf00      	nop
 8002206:	37c8      	adds	r7, #200	; 0xc8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	50062400 	.word	0x50062400
 8002210:	40021000 	.word	0x40021000
 8002214:	48000400 	.word	0x48000400
 8002218:	48000800 	.word	0x48000800
 800221c:	48000c00 	.word	0x48000c00

08002220 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08e      	sub	sp, #56	; 0x38
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a64      	ldr	r2, [pc, #400]	; (80023d0 <HAL_SPI_MspInit+0x1b0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d13a      	bne.n	80022b8 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002242:	4b64      	ldr	r3, [pc, #400]	; (80023d4 <HAL_SPI_MspInit+0x1b4>)
 8002244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002246:	4a63      	ldr	r2, [pc, #396]	; (80023d4 <HAL_SPI_MspInit+0x1b4>)
 8002248:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800224c:	6613      	str	r3, [r2, #96]	; 0x60
 800224e:	4b61      	ldr	r3, [pc, #388]	; (80023d4 <HAL_SPI_MspInit+0x1b4>)
 8002250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002252:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002256:	623b      	str	r3, [r7, #32]
 8002258:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800225a:	4b5e      	ldr	r3, [pc, #376]	; (80023d4 <HAL_SPI_MspInit+0x1b4>)
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	4a5d      	ldr	r2, [pc, #372]	; (80023d4 <HAL_SPI_MspInit+0x1b4>)
 8002260:	f043 0310 	orr.w	r3, r3, #16
 8002264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002266:	4b5b      	ldr	r3, [pc, #364]	; (80023d4 <HAL_SPI_MspInit+0x1b4>)
 8002268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	61fb      	str	r3, [r7, #28]
 8002270:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE15     ------> SPI1_MOSI
    PE14     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI2_SCKE13_Pin;
 8002272:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002278:	2302      	movs	r3, #2
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800227c:	2301      	movs	r3, #1
 800227e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002280:	2303      	movs	r3, #3
 8002282:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002284:	2305      	movs	r3, #5
 8002286:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_SCKE13_GPIO_Port, &GPIO_InitStruct);
 8002288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228c:	4619      	mov	r1, r3
 800228e:	4852      	ldr	r0, [pc, #328]	; (80023d8 <HAL_SPI_MspInit+0x1b8>)
 8002290:	f001 ff80 	bl	8004194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin|GPIO_PIN_14;
 8002294:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a2:	2303      	movs	r3, #3
 80022a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022a6:	2305      	movs	r3, #5
 80022a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ae:	4619      	mov	r1, r3
 80022b0:	4849      	ldr	r0, [pc, #292]	; (80023d8 <HAL_SPI_MspInit+0x1b8>)
 80022b2:	f001 ff6f 	bl	8004194 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80022b6:	e086      	b.n	80023c6 <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a47      	ldr	r2, [pc, #284]	; (80023dc <HAL_SPI_MspInit+0x1bc>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d144      	bne.n	800234c <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022c2:	4b44      	ldr	r3, [pc, #272]	; (80023d4 <HAL_SPI_MspInit+0x1b4>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	4a43      	ldr	r2, [pc, #268]	; (80023d4 <HAL_SPI_MspInit+0x1b4>)
 80022c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022cc:	6593      	str	r3, [r2, #88]	; 0x58
 80022ce:	4b41      	ldr	r3, [pc, #260]	; (80023d4 <HAL_SPI_MspInit+0x1b4>)
 80022d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d6:	61bb      	str	r3, [r7, #24]
 80022d8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022da:	4b3e      	ldr	r3, [pc, #248]	; (80023d4 <HAL_SPI_MspInit+0x1b4>)
 80022dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022de:	4a3d      	ldr	r2, [pc, #244]	; (80023d4 <HAL_SPI_MspInit+0x1b4>)
 80022e0:	f043 0308 	orr.w	r3, r3, #8
 80022e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022e6:	4b3b      	ldr	r3, [pc, #236]	; (80023d4 <HAL_SPI_MspInit+0x1b4>)
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f2:	4b38      	ldr	r3, [pc, #224]	; (80023d4 <HAL_SPI_MspInit+0x1b4>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f6:	4a37      	ldr	r2, [pc, #220]	; (80023d4 <HAL_SPI_MspInit+0x1b4>)
 80022f8:	f043 0304 	orr.w	r3, r3, #4
 80022fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022fe:	4b35      	ldr	r3, [pc, #212]	; (80023d4 <HAL_SPI_MspInit+0x1b4>)
 8002300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_SCK_Pin;
 800230a:	230a      	movs	r3, #10
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002316:	2303      	movs	r3, #3
 8002318:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800231a:	2305      	movs	r3, #5
 800231c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800231e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002322:	4619      	mov	r1, r3
 8002324:	482e      	ldr	r0, [pc, #184]	; (80023e0 <HAL_SPI_MspInit+0x1c0>)
 8002326:	f001 ff35 	bl	8004194 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 800232a:	2308      	movs	r3, #8
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	2302      	movs	r3, #2
 8002330:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002336:	2303      	movs	r3, #3
 8002338:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800233a:	2305      	movs	r3, #5
 800233c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 800233e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002342:	4619      	mov	r1, r3
 8002344:	4827      	ldr	r0, [pc, #156]	; (80023e4 <HAL_SPI_MspInit+0x1c4>)
 8002346:	f001 ff25 	bl	8004194 <HAL_GPIO_Init>
}
 800234a:	e03c      	b.n	80023c6 <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI3)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a25      	ldr	r2, [pc, #148]	; (80023e8 <HAL_SPI_MspInit+0x1c8>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d137      	bne.n	80023c6 <HAL_SPI_MspInit+0x1a6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002356:	4b1f      	ldr	r3, [pc, #124]	; (80023d4 <HAL_SPI_MspInit+0x1b4>)
 8002358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235a:	4a1e      	ldr	r2, [pc, #120]	; (80023d4 <HAL_SPI_MspInit+0x1b4>)
 800235c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002360:	6593      	str	r3, [r2, #88]	; 0x58
 8002362:	4b1c      	ldr	r3, [pc, #112]	; (80023d4 <HAL_SPI_MspInit+0x1b4>)
 8002364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800236e:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <HAL_SPI_MspInit+0x1b4>)
 8002370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002372:	4a18      	ldr	r2, [pc, #96]	; (80023d4 <HAL_SPI_MspInit+0x1b4>)
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800237a:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <HAL_SPI_MspInit+0x1b4>)
 800237c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin;
 8002386:	2330      	movs	r3, #48	; 0x30
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238a:	2302      	movs	r3, #2
 800238c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002392:	2303      	movs	r3, #3
 8002394:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002396:	2306      	movs	r3, #6
 8002398:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800239e:	4619      	mov	r1, r3
 80023a0:	4812      	ldr	r0, [pc, #72]	; (80023ec <HAL_SPI_MspInit+0x1cc>)
 80023a2:	f001 fef7 	bl	8004194 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_SCK_Pin;
 80023a6:	2308      	movs	r3, #8
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ae:	2301      	movs	r3, #1
 80023b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b2:	2303      	movs	r3, #3
 80023b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80023b6:	2306      	movs	r3, #6
 80023b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 80023ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023be:	4619      	mov	r1, r3
 80023c0:	480a      	ldr	r0, [pc, #40]	; (80023ec <HAL_SPI_MspInit+0x1cc>)
 80023c2:	f001 fee7 	bl	8004194 <HAL_GPIO_Init>
}
 80023c6:	bf00      	nop
 80023c8:	3738      	adds	r7, #56	; 0x38
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40013000 	.word	0x40013000
 80023d4:	40021000 	.word	0x40021000
 80023d8:	48001000 	.word	0x48001000
 80023dc:	40003800 	.word	0x40003800
 80023e0:	48000c00 	.word	0x48000c00
 80023e4:	48000800 	.word	0x48000800
 80023e8:	40003c00 	.word	0x40003c00
 80023ec:	48000400 	.word	0x48000400

080023f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002400:	d10c      	bne.n	800241c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002402:	4b1e      	ldr	r3, [pc, #120]	; (800247c <HAL_TIM_Base_MspInit+0x8c>)
 8002404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002406:	4a1d      	ldr	r2, [pc, #116]	; (800247c <HAL_TIM_Base_MspInit+0x8c>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6593      	str	r3, [r2, #88]	; 0x58
 800240e:	4b1b      	ldr	r3, [pc, #108]	; (800247c <HAL_TIM_Base_MspInit+0x8c>)
 8002410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800241a:	e02a      	b.n	8002472 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a17      	ldr	r2, [pc, #92]	; (8002480 <HAL_TIM_Base_MspInit+0x90>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d114      	bne.n	8002450 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002426:	4b15      	ldr	r3, [pc, #84]	; (800247c <HAL_TIM_Base_MspInit+0x8c>)
 8002428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242a:	4a14      	ldr	r2, [pc, #80]	; (800247c <HAL_TIM_Base_MspInit+0x8c>)
 800242c:	f043 0310 	orr.w	r3, r3, #16
 8002430:	6593      	str	r3, [r2, #88]	; 0x58
 8002432:	4b12      	ldr	r3, [pc, #72]	; (800247c <HAL_TIM_Base_MspInit+0x8c>)
 8002434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800243e:	2200      	movs	r2, #0
 8002440:	2100      	movs	r1, #0
 8002442:	2036      	movs	r0, #54	; 0x36
 8002444:	f001 f997 	bl	8003776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002448:	2036      	movs	r0, #54	; 0x36
 800244a:	f001 f9b0 	bl	80037ae <HAL_NVIC_EnableIRQ>
}
 800244e:	e010      	b.n	8002472 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM7)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <HAL_TIM_Base_MspInit+0x94>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d10b      	bne.n	8002472 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800245a:	4b08      	ldr	r3, [pc, #32]	; (800247c <HAL_TIM_Base_MspInit+0x8c>)
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	4a07      	ldr	r2, [pc, #28]	; (800247c <HAL_TIM_Base_MspInit+0x8c>)
 8002460:	f043 0320 	orr.w	r3, r3, #32
 8002464:	6593      	str	r3, [r2, #88]	; 0x58
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_TIM_Base_MspInit+0x8c>)
 8002468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246a:	f003 0320 	and.w	r3, r3, #32
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
}
 8002472:	bf00      	nop
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40021000 	.word	0x40021000
 8002480:	40001000 	.word	0x40001000
 8002484:	40001400 	.word	0x40001400

08002488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b0b0      	sub	sp, #192	; 0xc0
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024a0:	f107 0310 	add.w	r3, r7, #16
 80024a4:	229c      	movs	r2, #156	; 0x9c
 80024a6:	2100      	movs	r1, #0
 80024a8:	4618      	mov	r0, r3
 80024aa:	f018 fcb9 	bl	801ae20 <memset>
  if(huart->Instance==USART3)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a21      	ldr	r2, [pc, #132]	; (8002538 <HAL_UART_MspInit+0xb0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d13b      	bne.n	8002530 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024b8:	2304      	movs	r3, #4
 80024ba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80024bc:	2300      	movs	r3, #0
 80024be:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024c0:	f107 0310 	add.w	r3, r7, #16
 80024c4:	4618      	mov	r0, r3
 80024c6:	f004 fae3 	bl	8006a90 <HAL_RCCEx_PeriphCLKConfig>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024d0:	f7ff fb74 	bl	8001bbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80024d4:	4b19      	ldr	r3, [pc, #100]	; (800253c <HAL_UART_MspInit+0xb4>)
 80024d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d8:	4a18      	ldr	r2, [pc, #96]	; (800253c <HAL_UART_MspInit+0xb4>)
 80024da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024de:	6593      	str	r3, [r2, #88]	; 0x58
 80024e0:	4b16      	ldr	r3, [pc, #88]	; (800253c <HAL_UART_MspInit+0xb4>)
 80024e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ec:	4b13      	ldr	r3, [pc, #76]	; (800253c <HAL_UART_MspInit+0xb4>)
 80024ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f0:	4a12      	ldr	r2, [pc, #72]	; (800253c <HAL_UART_MspInit+0xb4>)
 80024f2:	f043 0308 	orr.w	r3, r3, #8
 80024f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f8:	4b10      	ldr	r3, [pc, #64]	; (800253c <HAL_UART_MspInit+0xb4>)
 80024fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD9     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8002504:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002508:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250c:	2302      	movs	r3, #2
 800250e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002518:	2303      	movs	r3, #3
 800251a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800251e:	2307      	movs	r3, #7
 8002520:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002524:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002528:	4619      	mov	r1, r3
 800252a:	4805      	ldr	r0, [pc, #20]	; (8002540 <HAL_UART_MspInit+0xb8>)
 800252c:	f001 fe32 	bl	8004194 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002530:	bf00      	nop
 8002532:	37c0      	adds	r7, #192	; 0xc0
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40004800 	.word	0x40004800
 800253c:	40021000 	.word	0x40021000
 8002540:	48000c00 	.word	0x48000c00

08002544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002548:	e7fe      	b.n	8002548 <NMI_Handler+0x4>

0800254a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800254e:	e7fe      	b.n	800254e <HardFault_Handler+0x4>

08002550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002554:	e7fe      	b.n	8002554 <MemManage_Handler+0x4>

08002556 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800255a:	e7fe      	b.n	800255a <BusFault_Handler+0x4>

0800255c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002560:	e7fe      	b.n	8002560 <UsageFault_Handler+0x4>

08002562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002590:	f000 f8f0 	bl	8002774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}

08002598 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800259c:	4802      	ldr	r0, [pc, #8]	; (80025a8 <DMA1_Channel4_IRQHandler+0x10>)
 800259e:	f001 fce7 	bl	8003f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20004008 	.word	0x20004008

080025ac <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80025b0:	4802      	ldr	r0, [pc, #8]	; (80025bc <SDMMC1_IRQHandler+0x10>)
 80025b2:	f006 fcf1 	bl	8008f98 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20004134 	.word	0x20004134

080025c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025c4:	4802      	ldr	r0, [pc, #8]	; (80025d0 <TIM6_DAC_IRQHandler+0x10>)
 80025c6:	f008 f85e 	bl	800a686 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	2000432c 	.word	0x2000432c

080025d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80025d8:	4802      	ldr	r0, [pc, #8]	; (80025e4 <OTG_FS_IRQHandler+0x10>)
 80025da:	f002 fa3c 	bl	8004a56 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20005988 	.word	0x20005988

080025e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025f0:	4a14      	ldr	r2, [pc, #80]	; (8002644 <_sbrk+0x5c>)
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <_sbrk+0x60>)
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025fc:	4b13      	ldr	r3, [pc, #76]	; (800264c <_sbrk+0x64>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d102      	bne.n	800260a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <_sbrk+0x64>)
 8002606:	4a12      	ldr	r2, [pc, #72]	; (8002650 <_sbrk+0x68>)
 8002608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800260a:	4b10      	ldr	r3, [pc, #64]	; (800264c <_sbrk+0x64>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	429a      	cmp	r2, r3
 8002616:	d207      	bcs.n	8002628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002618:	f018 fc1a 	bl	801ae50 <__errno>
 800261c:	4603      	mov	r3, r0
 800261e:	220c      	movs	r2, #12
 8002620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002626:	e009      	b.n	800263c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002628:	4b08      	ldr	r3, [pc, #32]	; (800264c <_sbrk+0x64>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800262e:	4b07      	ldr	r3, [pc, #28]	; (800264c <_sbrk+0x64>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	4a05      	ldr	r2, [pc, #20]	; (800264c <_sbrk+0x64>)
 8002638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800263a:	68fb      	ldr	r3, [r7, #12]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	200a0000 	.word	0x200a0000
 8002648:	00000800 	.word	0x00000800
 800264c:	20004460 	.word	0x20004460
 8002650:	200062f0 	.word	0x200062f0

08002654 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <SystemInit+0x20>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265e:	4a05      	ldr	r2, [pc, #20]	; (8002674 <SystemInit+0x20>)
 8002660:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002664:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800267c:	f7ff ffea 	bl	8002654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002680:	480c      	ldr	r0, [pc, #48]	; (80026b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002682:	490d      	ldr	r1, [pc, #52]	; (80026b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002684:	4a0d      	ldr	r2, [pc, #52]	; (80026bc <LoopForever+0xe>)
  movs r3, #0
 8002686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002688:	e002      	b.n	8002690 <LoopCopyDataInit>

0800268a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800268a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800268c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800268e:	3304      	adds	r3, #4

08002690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002694:	d3f9      	bcc.n	800268a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002696:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002698:	4c0a      	ldr	r4, [pc, #40]	; (80026c4 <LoopForever+0x16>)
  movs r3, #0
 800269a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800269c:	e001      	b.n	80026a2 <LoopFillZerobss>

0800269e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800269e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a0:	3204      	adds	r2, #4

080026a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a4:	d3fb      	bcc.n	800269e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026a6:	f018 fbd9 	bl	801ae5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026aa:	f7fe fab1 	bl	8000c10 <main>

080026ae <LoopForever>:

LoopForever:
    b LoopForever
 80026ae:	e7fe      	b.n	80026ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80026b0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80026b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026b8:	20003ed4 	.word	0x20003ed4
  ldr r2, =_sidata
 80026bc:	08022214 	.word	0x08022214
  ldr r2, =_sbss
 80026c0:	20003ed4 	.word	0x20003ed4
  ldr r4, =_ebss
 80026c4:	200062f0 	.word	0x200062f0

080026c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026c8:	e7fe      	b.n	80026c8 <ADC1_IRQHandler>

080026ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d4:	2003      	movs	r0, #3
 80026d6:	f001 f843 	bl	8003760 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026da:	2000      	movs	r0, #0
 80026dc:	f000 f80e 	bl	80026fc <HAL_InitTick>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	71fb      	strb	r3, [r7, #7]
 80026ea:	e001      	b.n	80026f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026ec:	f7ff fa6c 	bl	8001bc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026f0:	79fb      	ldrb	r3, [r7, #7]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002708:	4b17      	ldr	r3, [pc, #92]	; (8002768 <HAL_InitTick+0x6c>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d023      	beq.n	8002758 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002710:	4b16      	ldr	r3, [pc, #88]	; (800276c <HAL_InitTick+0x70>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4b14      	ldr	r3, [pc, #80]	; (8002768 <HAL_InitTick+0x6c>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	4619      	mov	r1, r3
 800271a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800271e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002722:	fbb2 f3f3 	udiv	r3, r2, r3
 8002726:	4618      	mov	r0, r3
 8002728:	f001 f84f 	bl	80037ca <HAL_SYSTICK_Config>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10f      	bne.n	8002752 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b0f      	cmp	r3, #15
 8002736:	d809      	bhi.n	800274c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002738:	2200      	movs	r2, #0
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002740:	f001 f819 	bl	8003776 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002744:	4a0a      	ldr	r2, [pc, #40]	; (8002770 <HAL_InitTick+0x74>)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e007      	b.n	800275c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
 8002750:	e004      	b.n	800275c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	73fb      	strb	r3, [r7, #15]
 8002756:	e001      	b.n	800275c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800275c:	7bfb      	ldrb	r3, [r7, #15]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20003008 	.word	0x20003008
 800276c:	20003000 	.word	0x20003000
 8002770:	20003004 	.word	0x20003004

08002774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_IncTick+0x20>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_IncTick+0x24>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4413      	add	r3, r2
 8002784:	4a04      	ldr	r2, [pc, #16]	; (8002798 <HAL_IncTick+0x24>)
 8002786:	6013      	str	r3, [r2, #0]
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	20003008 	.word	0x20003008
 8002798:	20004464 	.word	0x20004464

0800279c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return uwTick;
 80027a0:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <HAL_GetTick+0x14>)
 80027a2:	681b      	ldr	r3, [r3, #0]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	20004464 	.word	0x20004464

080027b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027bc:	f7ff ffee 	bl	800279c <HAL_GetTick>
 80027c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027cc:	d005      	beq.n	80027da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <HAL_Delay+0x44>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4413      	add	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027da:	bf00      	nop
 80027dc:	f7ff ffde 	bl	800279c <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d8f7      	bhi.n	80027dc <HAL_Delay+0x28>
  {
  }
}
 80027ec:	bf00      	nop
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20003008 	.word	0x20003008

080027fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	609a      	str	r2, [r3, #8]
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	609a      	str	r2, [r3, #8]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
 8002870:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3360      	adds	r3, #96	; 0x60
 8002876:	461a      	mov	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <LL_ADC_SetOffset+0x44>)
 8002886:	4013      	ands	r3, r2
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	4313      	orrs	r3, r2
 8002894:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800289c:	bf00      	nop
 800289e:	371c      	adds	r7, #28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	03fff000 	.word	0x03fff000

080028ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3360      	adds	r3, #96	; 0x60
 80028ba:	461a      	mov	r2, r3
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80028d8:	b480      	push	{r7}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	3360      	adds	r3, #96	; 0x60
 80028e8:	461a      	mov	r2, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	431a      	orrs	r2, r3
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002902:	bf00      	nop
 8002904:	371c      	adds	r7, #28
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
 8002916:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	615a      	str	r2, [r3, #20]
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	3330      	adds	r3, #48	; 0x30
 8002944:	461a      	mov	r2, r3
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	0a1b      	lsrs	r3, r3, #8
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	f003 030c 	and.w	r3, r3, #12
 8002950:	4413      	add	r3, r2
 8002952:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	211f      	movs	r1, #31
 8002960:	fa01 f303 	lsl.w	r3, r1, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	401a      	ands	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	0e9b      	lsrs	r3, r3, #26
 800296c:	f003 011f 	and.w	r1, r3, #31
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f003 031f 	and.w	r3, r3, #31
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	431a      	orrs	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002980:	bf00      	nop
 8002982:	371c      	adds	r7, #28
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	3314      	adds	r3, #20
 800299c:	461a      	mov	r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	0e5b      	lsrs	r3, r3, #25
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	4413      	add	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	0d1b      	lsrs	r3, r3, #20
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	2107      	movs	r1, #7
 80029ba:	fa01 f303 	lsl.w	r3, r1, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	401a      	ands	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	0d1b      	lsrs	r3, r3, #20
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	fa01 f303 	lsl.w	r3, r1, r3
 80029d0:	431a      	orrs	r2, r3
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029d6:	bf00      	nop
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fc:	43db      	mvns	r3, r3
 80029fe:	401a      	ands	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f003 0318 	and.w	r3, r3, #24
 8002a06:	4908      	ldr	r1, [pc, #32]	; (8002a28 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a08:	40d9      	lsrs	r1, r3
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	400b      	ands	r3, r1
 8002a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a12:	431a      	orrs	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a1a:	bf00      	nop
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	0007ffff 	.word	0x0007ffff

08002a2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002a3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6093      	str	r3, [r2, #8]
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a64:	d101      	bne.n	8002a6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ab4:	d101      	bne.n	8002aba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <LL_ADC_IsEnabled+0x18>
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <LL_ADC_IsEnabled+0x1a>
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d101      	bne.n	8002b06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d101      	bne.n	8002b2c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e129      	b.n	8002daa <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d109      	bne.n	8002b78 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff f853 	bl	8001c10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff67 	bl	8002a50 <LL_ADC_IsDeepPowerDownEnabled>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d004      	beq.n	8002b92 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff ff4d 	bl	8002a2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff ff82 	bl	8002aa0 <LL_ADC_IsInternalRegulatorEnabled>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d115      	bne.n	8002bce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff ff66 	bl	8002a78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bac:	4b81      	ldr	r3, [pc, #516]	; (8002db4 <HAL_ADC_Init+0x278>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	099b      	lsrs	r3, r3, #6
 8002bb2:	4a81      	ldr	r2, [pc, #516]	; (8002db8 <HAL_ADC_Init+0x27c>)
 8002bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb8:	099b      	lsrs	r3, r3, #6
 8002bba:	3301      	adds	r3, #1
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bc0:	e002      	b.n	8002bc8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f9      	bne.n	8002bc2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff ff64 	bl	8002aa0 <LL_ADC_IsInternalRegulatorEnabled>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10d      	bne.n	8002bfa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be2:	f043 0210 	orr.w	r2, r3, #16
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bee:	f043 0201 	orr.w	r2, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff ff75 	bl	8002aee <LL_ADC_REG_IsConversionOngoing>
 8002c04:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f040 80c2 	bne.w	8002d98 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f040 80be 	bne.w	8002d98 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c20:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c24:	f043 0202 	orr.w	r2, r3, #2
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff ff49 	bl	8002ac8 <LL_ADC_IsEnabled>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10b      	bne.n	8002c54 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c3c:	485f      	ldr	r0, [pc, #380]	; (8002dbc <HAL_ADC_Init+0x280>)
 8002c3e:	f7ff ff43 	bl	8002ac8 <LL_ADC_IsEnabled>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d105      	bne.n	8002c54 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	485c      	ldr	r0, [pc, #368]	; (8002dc0 <HAL_ADC_Init+0x284>)
 8002c50:	f7ff fdd4 	bl	80027fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	7e5b      	ldrb	r3, [r3, #25]
 8002c58:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c5e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002c64:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002c6a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c72:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d106      	bne.n	8002c90 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	3b01      	subs	r3, #1
 8002c88:	045b      	lsls	r3, r3, #17
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d009      	beq.n	8002cac <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	4b44      	ldr	r3, [pc, #272]	; (8002dc4 <HAL_ADC_Init+0x288>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	69b9      	ldr	r1, [r7, #24]
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ff25 	bl	8002b14 <LL_ADC_INJ_IsConversionOngoing>
 8002cca:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d140      	bne.n	8002d54 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d13d      	bne.n	8002d54 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	7e1b      	ldrb	r3, [r3, #24]
 8002ce0:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ce2:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cea:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cfa:	f023 0306 	bic.w	r3, r3, #6
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	69b9      	ldr	r1, [r7, #24]
 8002d04:	430b      	orrs	r3, r1
 8002d06:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d118      	bne.n	8002d44 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002d1c:	f023 0304 	bic.w	r3, r3, #4
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d28:	4311      	orrs	r1, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d2e:	4311      	orrs	r1, r2
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d34:	430a      	orrs	r2, r1
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f042 0201 	orr.w	r2, r2, #1
 8002d40:	611a      	str	r2, [r3, #16]
 8002d42:	e007      	b.n	8002d54 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691a      	ldr	r2, [r3, #16]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0201 	bic.w	r2, r2, #1
 8002d52:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d10c      	bne.n	8002d76 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f023 010f 	bic.w	r1, r3, #15
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	1e5a      	subs	r2, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	631a      	str	r2, [r3, #48]	; 0x30
 8002d74:	e007      	b.n	8002d86 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 020f 	bic.w	r2, r2, #15
 8002d84:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8a:	f023 0303 	bic.w	r3, r3, #3
 8002d8e:	f043 0201 	orr.w	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	659a      	str	r2, [r3, #88]	; 0x58
 8002d96:	e007      	b.n	8002da8 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	f043 0210 	orr.w	r2, r3, #16
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002da8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3720      	adds	r7, #32
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20003000 	.word	0x20003000
 8002db8:	053e2d63 	.word	0x053e2d63
 8002dbc:	50040000 	.word	0x50040000
 8002dc0:	50040300 	.word	0x50040300
 8002dc4:	fff0c007 	.word	0xfff0c007

08002dc8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b0b6      	sub	sp, #216	; 0xd8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x22>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e3d5      	b.n	8003596 <HAL_ADC_ConfigChannel+0x7ce>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fe79 	bl	8002aee <LL_ADC_REG_IsConversionOngoing>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f040 83ba 	bne.w	8003578 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b05      	cmp	r3, #5
 8002e12:	d824      	bhi.n	8002e5e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	3b02      	subs	r3, #2
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d81b      	bhi.n	8002e56 <HAL_ADC_ConfigChannel+0x8e>
 8002e1e:	a201      	add	r2, pc, #4	; (adr r2, 8002e24 <HAL_ADC_ConfigChannel+0x5c>)
 8002e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e24:	08002e35 	.word	0x08002e35
 8002e28:	08002e3d 	.word	0x08002e3d
 8002e2c:	08002e45 	.word	0x08002e45
 8002e30:	08002e4d 	.word	0x08002e4d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002e34:	230c      	movs	r3, #12
 8002e36:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e3a:	e010      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002e3c:	2312      	movs	r3, #18
 8002e3e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e42:	e00c      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002e44:	2318      	movs	r3, #24
 8002e46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e4a:	e008      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e54:	e003      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002e56:	2306      	movs	r3, #6
 8002e58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e5c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002e6c:	f7ff fd62 	bl	8002934 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fe3a 	bl	8002aee <LL_ADC_REG_IsConversionOngoing>
 8002e7a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff fe46 	bl	8002b14 <LL_ADC_INJ_IsConversionOngoing>
 8002e88:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f040 81bf 	bne.w	8003214 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f040 81ba 	bne.w	8003214 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ea8:	d10f      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f7ff fd69 	bl	800298c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fd23 	bl	800290e <LL_ADC_SetSamplingTimeCommonConfig>
 8002ec8:	e00e      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	6819      	ldr	r1, [r3, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f7ff fd58 	bl	800298c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff fd13 	bl	800290e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	695a      	ldr	r2, [r3, #20]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	08db      	lsrs	r3, r3, #3
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d00a      	beq.n	8002f20 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6919      	ldr	r1, [r3, #16]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f1a:	f7ff fca3 	bl	8002864 <LL_ADC_SetOffset>
 8002f1e:	e179      	b.n	8003214 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2100      	movs	r1, #0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fcc0 	bl	80028ac <LL_ADC_GetOffsetChannel>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10a      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x184>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff fcb5 	bl	80028ac <LL_ADC_GetOffsetChannel>
 8002f42:	4603      	mov	r3, r0
 8002f44:	0e9b      	lsrs	r3, r3, #26
 8002f46:	f003 021f 	and.w	r2, r3, #31
 8002f4a:	e01e      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x1c2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2100      	movs	r1, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fcaa 	bl	80028ac <LL_ADC_GetOffsetChannel>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f62:	fa93 f3a3 	rbit	r3, r3
 8002f66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002f7a:	2320      	movs	r3, #32
 8002f7c:	e004      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002f7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f82:	fab3 f383 	clz	r3, r3
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d105      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x1da>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	0e9b      	lsrs	r3, r3, #26
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	e018      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x20c>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002fb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002fbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002fc6:	2320      	movs	r3, #32
 8002fc8:	e004      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002fca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002fce:	fab3 f383 	clz	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d106      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff fc79 	bl	80028d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2101      	movs	r1, #1
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff fc5d 	bl	80028ac <LL_ADC_GetOffsetChannel>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10a      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x24a>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2101      	movs	r1, #1
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fc52 	bl	80028ac <LL_ADC_GetOffsetChannel>
 8003008:	4603      	mov	r3, r0
 800300a:	0e9b      	lsrs	r3, r3, #26
 800300c:	f003 021f 	and.w	r2, r3, #31
 8003010:	e01e      	b.n	8003050 <HAL_ADC_ConfigChannel+0x288>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2101      	movs	r1, #1
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff fc47 	bl	80028ac <LL_ADC_GetOffsetChannel>
 800301e:	4603      	mov	r3, r0
 8003020:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003030:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003034:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003038:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003040:	2320      	movs	r3, #32
 8003042:	e004      	b.n	800304e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8003044:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003048:	fab3 f383 	clz	r3, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003058:	2b00      	cmp	r3, #0
 800305a:	d105      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x2a0>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	0e9b      	lsrs	r3, r3, #26
 8003062:	f003 031f 	and.w	r3, r3, #31
 8003066:	e018      	b.n	800309a <HAL_ADC_ConfigChannel+0x2d2>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003074:	fa93 f3a3 	rbit	r3, r3
 8003078:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800307c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003084:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800308c:	2320      	movs	r3, #32
 800308e:	e004      	b.n	800309a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003090:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003094:	fab3 f383 	clz	r3, r3
 8003098:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800309a:	429a      	cmp	r2, r3
 800309c:	d106      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2200      	movs	r2, #0
 80030a4:	2101      	movs	r1, #1
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff fc16 	bl	80028d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2102      	movs	r1, #2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff fbfa 	bl	80028ac <LL_ADC_GetOffsetChannel>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10a      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x310>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2102      	movs	r1, #2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff fbef 	bl	80028ac <LL_ADC_GetOffsetChannel>
 80030ce:	4603      	mov	r3, r0
 80030d0:	0e9b      	lsrs	r3, r3, #26
 80030d2:	f003 021f 	and.w	r2, r3, #31
 80030d6:	e01e      	b.n	8003116 <HAL_ADC_ConfigChannel+0x34e>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2102      	movs	r1, #2
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff fbe4 	bl	80028ac <LL_ADC_GetOffsetChannel>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80030f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80030fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8003106:	2320      	movs	r3, #32
 8003108:	e004      	b.n	8003114 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800310a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800310e:	fab3 f383 	clz	r3, r3
 8003112:	b2db      	uxtb	r3, r3
 8003114:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311e:	2b00      	cmp	r3, #0
 8003120:	d105      	bne.n	800312e <HAL_ADC_ConfigChannel+0x366>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	0e9b      	lsrs	r3, r3, #26
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	e014      	b.n	8003158 <HAL_ADC_ConfigChannel+0x390>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003136:	fa93 f3a3 	rbit	r3, r3
 800313a:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800313c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800313e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003142:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800314a:	2320      	movs	r3, #32
 800314c:	e004      	b.n	8003158 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800314e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003152:	fab3 f383 	clz	r3, r3
 8003156:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003158:	429a      	cmp	r2, r3
 800315a:	d106      	bne.n	800316a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2200      	movs	r2, #0
 8003162:	2102      	movs	r1, #2
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff fbb7 	bl	80028d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2103      	movs	r1, #3
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff fb9b 	bl	80028ac <LL_ADC_GetOffsetChannel>
 8003176:	4603      	mov	r3, r0
 8003178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10a      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x3ce>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2103      	movs	r1, #3
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fb90 	bl	80028ac <LL_ADC_GetOffsetChannel>
 800318c:	4603      	mov	r3, r0
 800318e:	0e9b      	lsrs	r3, r3, #26
 8003190:	f003 021f 	and.w	r2, r3, #31
 8003194:	e017      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x3fe>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2103      	movs	r1, #3
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fb85 	bl	80028ac <LL_ADC_GetOffsetChannel>
 80031a2:	4603      	mov	r3, r0
 80031a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031a8:	fa93 f3a3 	rbit	r3, r3
 80031ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80031ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b0:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80031b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80031b8:	2320      	movs	r3, #32
 80031ba:	e003      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80031bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031be:	fab3 f383 	clz	r3, r3
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d105      	bne.n	80031de <HAL_ADC_ConfigChannel+0x416>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	0e9b      	lsrs	r3, r3, #26
 80031d8:	f003 031f 	and.w	r3, r3, #31
 80031dc:	e011      	b.n	8003202 <HAL_ADC_ConfigChannel+0x43a>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031e6:	fa93 f3a3 	rbit	r3, r3
 80031ea:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80031ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031ee:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80031f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80031f6:	2320      	movs	r3, #32
 80031f8:	e003      	b.n	8003202 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80031fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031fc:	fab3 f383 	clz	r3, r3
 8003200:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003202:	429a      	cmp	r2, r3
 8003204:	d106      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2200      	movs	r2, #0
 800320c:	2103      	movs	r1, #3
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff fb62 	bl	80028d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fc55 	bl	8002ac8 <LL_ADC_IsEnabled>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	f040 813f 	bne.w	80034a4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	6819      	ldr	r1, [r3, #0]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	461a      	mov	r2, r3
 8003234:	f7ff fbd6 	bl	80029e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4a8e      	ldr	r2, [pc, #568]	; (8003478 <HAL_ADC_ConfigChannel+0x6b0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	f040 8130 	bne.w	80034a4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10b      	bne.n	800326c <HAL_ADC_ConfigChannel+0x4a4>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	0e9b      	lsrs	r3, r3, #26
 800325a:	3301      	adds	r3, #1
 800325c:	f003 031f 	and.w	r3, r3, #31
 8003260:	2b09      	cmp	r3, #9
 8003262:	bf94      	ite	ls
 8003264:	2301      	movls	r3, #1
 8003266:	2300      	movhi	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	e019      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x4d8>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003274:	fa93 f3a3 	rbit	r3, r3
 8003278:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800327a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800327c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800327e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8003284:	2320      	movs	r3, #32
 8003286:	e003      	b.n	8003290 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800328a:	fab3 f383 	clz	r3, r3
 800328e:	b2db      	uxtb	r3, r3
 8003290:	3301      	adds	r3, #1
 8003292:	f003 031f 	and.w	r3, r3, #31
 8003296:	2b09      	cmp	r3, #9
 8003298:	bf94      	ite	ls
 800329a:	2301      	movls	r3, #1
 800329c:	2300      	movhi	r3, #0
 800329e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d079      	beq.n	8003398 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d107      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x4f8>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	0e9b      	lsrs	r3, r3, #26
 80032b6:	3301      	adds	r3, #1
 80032b8:	069b      	lsls	r3, r3, #26
 80032ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032be:	e015      	b.n	80032ec <HAL_ADC_ConfigChannel+0x524>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c8:	fa93 f3a3 	rbit	r3, r3
 80032cc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80032ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032d0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80032d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80032d8:	2320      	movs	r3, #32
 80032da:	e003      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80032dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032de:	fab3 f383 	clz	r3, r3
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	3301      	adds	r3, #1
 80032e6:	069b      	lsls	r3, r3, #26
 80032e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d109      	bne.n	800330c <HAL_ADC_ConfigChannel+0x544>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	0e9b      	lsrs	r3, r3, #26
 80032fe:	3301      	adds	r3, #1
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	2101      	movs	r1, #1
 8003306:	fa01 f303 	lsl.w	r3, r1, r3
 800330a:	e017      	b.n	800333c <HAL_ADC_ConfigChannel+0x574>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003314:	fa93 f3a3 	rbit	r3, r3
 8003318:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800331a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800331c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800331e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003324:	2320      	movs	r3, #32
 8003326:	e003      	b.n	8003330 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	3301      	adds	r3, #1
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	2101      	movs	r1, #1
 8003338:	fa01 f303 	lsl.w	r3, r1, r3
 800333c:	ea42 0103 	orr.w	r1, r2, r3
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10a      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x59a>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	0e9b      	lsrs	r3, r3, #26
 8003352:	3301      	adds	r3, #1
 8003354:	f003 021f 	and.w	r2, r3, #31
 8003358:	4613      	mov	r3, r2
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	4413      	add	r3, r2
 800335e:	051b      	lsls	r3, r3, #20
 8003360:	e018      	b.n	8003394 <HAL_ADC_ConfigChannel+0x5cc>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003372:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800337a:	2320      	movs	r3, #32
 800337c:	e003      	b.n	8003386 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	fab3 f383 	clz	r3, r3
 8003384:	b2db      	uxtb	r3, r3
 8003386:	3301      	adds	r3, #1
 8003388:	f003 021f 	and.w	r2, r3, #31
 800338c:	4613      	mov	r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	4413      	add	r3, r2
 8003392:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003394:	430b      	orrs	r3, r1
 8003396:	e080      	b.n	800349a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d107      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x5ec>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	0e9b      	lsrs	r3, r3, #26
 80033aa:	3301      	adds	r3, #1
 80033ac:	069b      	lsls	r3, r3, #26
 80033ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033b2:	e015      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x618>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80033c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80033cc:	2320      	movs	r3, #32
 80033ce:	e003      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80033d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d2:	fab3 f383 	clz	r3, r3
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	3301      	adds	r3, #1
 80033da:	069b      	lsls	r3, r3, #26
 80033dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d109      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x638>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	0e9b      	lsrs	r3, r3, #26
 80033f2:	3301      	adds	r3, #1
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	2101      	movs	r1, #1
 80033fa:	fa01 f303 	lsl.w	r3, r1, r3
 80033fe:	e017      	b.n	8003430 <HAL_ADC_ConfigChannel+0x668>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	fa93 f3a3 	rbit	r3, r3
 800340c:	61bb      	str	r3, [r7, #24]
  return result;
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003418:	2320      	movs	r3, #32
 800341a:	e003      	b.n	8003424 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	fab3 f383 	clz	r3, r3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	3301      	adds	r3, #1
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	2101      	movs	r1, #1
 800342c:	fa01 f303 	lsl.w	r3, r1, r3
 8003430:	ea42 0103 	orr.w	r1, r2, r3
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10d      	bne.n	800345c <HAL_ADC_ConfigChannel+0x694>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	0e9b      	lsrs	r3, r3, #26
 8003446:	3301      	adds	r3, #1
 8003448:	f003 021f 	and.w	r2, r3, #31
 800344c:	4613      	mov	r3, r2
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	4413      	add	r3, r2
 8003452:	3b1e      	subs	r3, #30
 8003454:	051b      	lsls	r3, r3, #20
 8003456:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800345a:	e01d      	b.n	8003498 <HAL_ADC_ConfigChannel+0x6d0>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	fa93 f3a3 	rbit	r3, r3
 8003468:	60fb      	str	r3, [r7, #12]
  return result;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d103      	bne.n	800347c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003474:	2320      	movs	r3, #32
 8003476:	e005      	b.n	8003484 <HAL_ADC_ConfigChannel+0x6bc>
 8003478:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	fab3 f383 	clz	r3, r3
 8003482:	b2db      	uxtb	r3, r3
 8003484:	3301      	adds	r3, #1
 8003486:	f003 021f 	and.w	r2, r3, #31
 800348a:	4613      	mov	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	4413      	add	r3, r2
 8003490:	3b1e      	subs	r3, #30
 8003492:	051b      	lsls	r3, r3, #20
 8003494:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003498:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800349e:	4619      	mov	r1, r3
 80034a0:	f7ff fa74 	bl	800298c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	4b3d      	ldr	r3, [pc, #244]	; (80035a0 <HAL_ADC_ConfigChannel+0x7d8>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d06c      	beq.n	800358a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034b0:	483c      	ldr	r0, [pc, #240]	; (80035a4 <HAL_ADC_ConfigChannel+0x7dc>)
 80034b2:	f7ff f9c9 	bl	8002848 <LL_ADC_GetCommonPathInternalCh>
 80034b6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a3a      	ldr	r2, [pc, #232]	; (80035a8 <HAL_ADC_ConfigChannel+0x7e0>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d127      	bne.n	8003514 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d121      	bne.n	8003514 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a35      	ldr	r2, [pc, #212]	; (80035ac <HAL_ADC_ConfigChannel+0x7e4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d157      	bne.n	800358a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034e2:	4619      	mov	r1, r3
 80034e4:	482f      	ldr	r0, [pc, #188]	; (80035a4 <HAL_ADC_ConfigChannel+0x7dc>)
 80034e6:	f7ff f99c 	bl	8002822 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034ea:	4b31      	ldr	r3, [pc, #196]	; (80035b0 <HAL_ADC_ConfigChannel+0x7e8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	099b      	lsrs	r3, r3, #6
 80034f0:	4a30      	ldr	r2, [pc, #192]	; (80035b4 <HAL_ADC_ConfigChannel+0x7ec>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	099b      	lsrs	r3, r3, #6
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	4613      	mov	r3, r2
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003504:	e002      	b.n	800350c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	3b01      	subs	r3, #1
 800350a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f9      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003512:	e03a      	b.n	800358a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a27      	ldr	r2, [pc, #156]	; (80035b8 <HAL_ADC_ConfigChannel+0x7f0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d113      	bne.n	8003546 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800351e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003522:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10d      	bne.n	8003546 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1f      	ldr	r2, [pc, #124]	; (80035ac <HAL_ADC_ConfigChannel+0x7e4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d12a      	bne.n	800358a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003534:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003538:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800353c:	4619      	mov	r1, r3
 800353e:	4819      	ldr	r0, [pc, #100]	; (80035a4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003540:	f7ff f96f 	bl	8002822 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003544:	e021      	b.n	800358a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a1c      	ldr	r2, [pc, #112]	; (80035bc <HAL_ADC_ConfigChannel+0x7f4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d11c      	bne.n	800358a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003550:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d116      	bne.n	800358a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a12      	ldr	r2, [pc, #72]	; (80035ac <HAL_ADC_ConfigChannel+0x7e4>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d111      	bne.n	800358a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003566:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800356a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800356e:	4619      	mov	r1, r3
 8003570:	480c      	ldr	r0, [pc, #48]	; (80035a4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003572:	f7ff f956 	bl	8002822 <LL_ADC_SetCommonPathInternalCh>
 8003576:	e008      	b.n	800358a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357c:	f043 0220 	orr.w	r2, r3, #32
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003592:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003596:	4618      	mov	r0, r3
 8003598:	37d8      	adds	r7, #216	; 0xd8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	80080000 	.word	0x80080000
 80035a4:	50040300 	.word	0x50040300
 80035a8:	c7520000 	.word	0xc7520000
 80035ac:	50040000 	.word	0x50040000
 80035b0:	20003000 	.word	0x20003000
 80035b4:	053e2d63 	.word	0x053e2d63
 80035b8:	cb840000 	.word	0xcb840000
 80035bc:	80000001 	.word	0x80000001

080035c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035d0:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <__NVIC_SetPriorityGrouping+0x44>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035dc:	4013      	ands	r3, r2
 80035de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035f2:	4a04      	ldr	r2, [pc, #16]	; (8003604 <__NVIC_SetPriorityGrouping+0x44>)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	60d3      	str	r3, [r2, #12]
}
 80035f8:	bf00      	nop
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	e000ed00 	.word	0xe000ed00

08003608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800360c:	4b04      	ldr	r3, [pc, #16]	; (8003620 <__NVIC_GetPriorityGrouping+0x18>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	0a1b      	lsrs	r3, r3, #8
 8003612:	f003 0307 	and.w	r3, r3, #7
}
 8003616:	4618      	mov	r0, r3
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	e000ed00 	.word	0xe000ed00

08003624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800362e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003632:	2b00      	cmp	r3, #0
 8003634:	db0b      	blt.n	800364e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	f003 021f 	and.w	r2, r3, #31
 800363c:	4907      	ldr	r1, [pc, #28]	; (800365c <__NVIC_EnableIRQ+0x38>)
 800363e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	2001      	movs	r0, #1
 8003646:	fa00 f202 	lsl.w	r2, r0, r2
 800364a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	e000e100 	.word	0xe000e100

08003660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	6039      	str	r1, [r7, #0]
 800366a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800366c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003670:	2b00      	cmp	r3, #0
 8003672:	db0a      	blt.n	800368a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	b2da      	uxtb	r2, r3
 8003678:	490c      	ldr	r1, [pc, #48]	; (80036ac <__NVIC_SetPriority+0x4c>)
 800367a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367e:	0112      	lsls	r2, r2, #4
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	440b      	add	r3, r1
 8003684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003688:	e00a      	b.n	80036a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	b2da      	uxtb	r2, r3
 800368e:	4908      	ldr	r1, [pc, #32]	; (80036b0 <__NVIC_SetPriority+0x50>)
 8003690:	79fb      	ldrb	r3, [r7, #7]
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	3b04      	subs	r3, #4
 8003698:	0112      	lsls	r2, r2, #4
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	440b      	add	r3, r1
 800369e:	761a      	strb	r2, [r3, #24]
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	e000e100 	.word	0xe000e100
 80036b0:	e000ed00 	.word	0xe000ed00

080036b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b089      	sub	sp, #36	; 0x24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f1c3 0307 	rsb	r3, r3, #7
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	bf28      	it	cs
 80036d2:	2304      	movcs	r3, #4
 80036d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	3304      	adds	r3, #4
 80036da:	2b06      	cmp	r3, #6
 80036dc:	d902      	bls.n	80036e4 <NVIC_EncodePriority+0x30>
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	3b03      	subs	r3, #3
 80036e2:	e000      	b.n	80036e6 <NVIC_EncodePriority+0x32>
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43da      	mvns	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	401a      	ands	r2, r3
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	fa01 f303 	lsl.w	r3, r1, r3
 8003706:	43d9      	mvns	r1, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800370c:	4313      	orrs	r3, r2
         );
}
 800370e:	4618      	mov	r0, r3
 8003710:	3724      	adds	r7, #36	; 0x24
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
	...

0800371c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3b01      	subs	r3, #1
 8003728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800372c:	d301      	bcc.n	8003732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800372e:	2301      	movs	r3, #1
 8003730:	e00f      	b.n	8003752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003732:	4a0a      	ldr	r2, [pc, #40]	; (800375c <SysTick_Config+0x40>)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3b01      	subs	r3, #1
 8003738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800373a:	210f      	movs	r1, #15
 800373c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003740:	f7ff ff8e 	bl	8003660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003744:	4b05      	ldr	r3, [pc, #20]	; (800375c <SysTick_Config+0x40>)
 8003746:	2200      	movs	r2, #0
 8003748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800374a:	4b04      	ldr	r3, [pc, #16]	; (800375c <SysTick_Config+0x40>)
 800374c:	2207      	movs	r2, #7
 800374e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	e000e010 	.word	0xe000e010

08003760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff ff29 	bl	80035c0 <__NVIC_SetPriorityGrouping>
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b086      	sub	sp, #24
 800377a:	af00      	add	r7, sp, #0
 800377c:	4603      	mov	r3, r0
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	607a      	str	r2, [r7, #4]
 8003782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003788:	f7ff ff3e 	bl	8003608 <__NVIC_GetPriorityGrouping>
 800378c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	68b9      	ldr	r1, [r7, #8]
 8003792:	6978      	ldr	r0, [r7, #20]
 8003794:	f7ff ff8e 	bl	80036b4 <NVIC_EncodePriority>
 8003798:	4602      	mov	r2, r0
 800379a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800379e:	4611      	mov	r1, r2
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff ff5d 	bl	8003660 <__NVIC_SetPriority>
}
 80037a6:	bf00      	nop
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b082      	sub	sp, #8
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	4603      	mov	r3, r0
 80037b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff ff31 	bl	8003624 <__NVIC_EnableIRQ>
}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b082      	sub	sp, #8
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7ff ffa2 	bl	800371c <SysTick_Config>
 80037d8:	4603      	mov	r3, r0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e054      	b.n	80038a0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	7f5b      	ldrb	r3, [r3, #29]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d105      	bne.n	800380c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7fe fa88 	bl	8001d1c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	791b      	ldrb	r3, [r3, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10c      	bne.n	8003834 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a22      	ldr	r2, [pc, #136]	; (80038a8 <HAL_CRC_Init+0xc4>)
 8003820:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0218 	bic.w	r2, r2, #24
 8003830:	609a      	str	r2, [r3, #8]
 8003832:	e00c      	b.n	800384e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6899      	ldr	r1, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	461a      	mov	r2, r3
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f834 	bl	80038ac <HAL_CRCEx_Polynomial_Set>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e028      	b.n	80038a0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	795b      	ldrb	r3, [r3, #5]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d105      	bne.n	8003862 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800385e:	611a      	str	r2, [r3, #16]
 8003860:	e004      	b.n	800386c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6912      	ldr	r2, [r2, #16]
 800386a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695a      	ldr	r2, [r3, #20]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699a      	ldr	r2, [r3, #24]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	04c11db7 	.word	0x04c11db7

080038ac <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80038bc:	231f      	movs	r3, #31
 80038be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d102      	bne.n	80038d0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	75fb      	strb	r3, [r7, #23]
 80038ce:	e063      	b.n	8003998 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80038d0:	bf00      	nop
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1e5a      	subs	r2, r3, #1
 80038d6:	613a      	str	r2, [r7, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d009      	beq.n	80038f0 <HAL_CRCEx_Polynomial_Set+0x44>
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f003 031f 	and.w	r3, r3, #31
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	fa22 f303 	lsr.w	r3, r2, r3
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0f0      	beq.n	80038d2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b18      	cmp	r3, #24
 80038f4:	d846      	bhi.n	8003984 <HAL_CRCEx_Polynomial_Set+0xd8>
 80038f6:	a201      	add	r2, pc, #4	; (adr r2, 80038fc <HAL_CRCEx_Polynomial_Set+0x50>)
 80038f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fc:	0800398b 	.word	0x0800398b
 8003900:	08003985 	.word	0x08003985
 8003904:	08003985 	.word	0x08003985
 8003908:	08003985 	.word	0x08003985
 800390c:	08003985 	.word	0x08003985
 8003910:	08003985 	.word	0x08003985
 8003914:	08003985 	.word	0x08003985
 8003918:	08003985 	.word	0x08003985
 800391c:	08003979 	.word	0x08003979
 8003920:	08003985 	.word	0x08003985
 8003924:	08003985 	.word	0x08003985
 8003928:	08003985 	.word	0x08003985
 800392c:	08003985 	.word	0x08003985
 8003930:	08003985 	.word	0x08003985
 8003934:	08003985 	.word	0x08003985
 8003938:	08003985 	.word	0x08003985
 800393c:	0800396d 	.word	0x0800396d
 8003940:	08003985 	.word	0x08003985
 8003944:	08003985 	.word	0x08003985
 8003948:	08003985 	.word	0x08003985
 800394c:	08003985 	.word	0x08003985
 8003950:	08003985 	.word	0x08003985
 8003954:	08003985 	.word	0x08003985
 8003958:	08003985 	.word	0x08003985
 800395c:	08003961 	.word	0x08003961
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	2b06      	cmp	r3, #6
 8003964:	d913      	bls.n	800398e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800396a:	e010      	b.n	800398e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	2b07      	cmp	r3, #7
 8003970:	d90f      	bls.n	8003992 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003976:	e00c      	b.n	8003992 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	2b0f      	cmp	r3, #15
 800397c:	d90b      	bls.n	8003996 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003982:	e008      	b.n	8003996 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	75fb      	strb	r3, [r7, #23]
        break;
 8003988:	e006      	b.n	8003998 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800398a:	bf00      	nop
 800398c:	e004      	b.n	8003998 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800398e:	bf00      	nop
 8003990:	e002      	b.n	8003998 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003992:	bf00      	nop
 8003994:	e000      	b.n	8003998 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003996:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003998:	7dfb      	ldrb	r3, [r7, #23]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10d      	bne.n	80039ba <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f023 0118 	bic.w	r1, r3, #24
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80039ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	371c      	adds	r7, #28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e0ac      	b.n	8003b34 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 f9d2 	bl	8003d88 <DFSDM_GetChannelFromInstance>
 80039e4:	4603      	mov	r3, r0
 80039e6:	4a55      	ldr	r2, [pc, #340]	; (8003b3c <HAL_DFSDM_ChannelInit+0x174>)
 80039e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e09f      	b.n	8003b34 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7fe fa31 	bl	8001e5c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80039fa:	4b51      	ldr	r3, [pc, #324]	; (8003b40 <HAL_DFSDM_ChannelInit+0x178>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3301      	adds	r3, #1
 8003a00:	4a4f      	ldr	r2, [pc, #316]	; (8003b40 <HAL_DFSDM_ChannelInit+0x178>)
 8003a02:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003a04:	4b4e      	ldr	r3, [pc, #312]	; (8003b40 <HAL_DFSDM_ChannelInit+0x178>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d125      	bne.n	8003a58 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003a0c:	4b4d      	ldr	r3, [pc, #308]	; (8003b44 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a4c      	ldr	r2, [pc, #304]	; (8003b44 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a16:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003a18:	4b4a      	ldr	r3, [pc, #296]	; (8003b44 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4948      	ldr	r1, [pc, #288]	; (8003b44 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003a26:	4b47      	ldr	r3, [pc, #284]	; (8003b44 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a46      	ldr	r2, [pc, #280]	; (8003b44 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a2c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003a30:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	791b      	ldrb	r3, [r3, #4]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d108      	bne.n	8003a4c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003a3a:	4b42      	ldr	r3, [pc, #264]	; (8003b44 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	041b      	lsls	r3, r3, #16
 8003a46:	493f      	ldr	r1, [pc, #252]	; (8003b44 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003a4c:	4b3d      	ldr	r3, [pc, #244]	; (8003b44 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a3c      	ldr	r2, [pc, #240]	; (8003b44 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a56:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003a66:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6819      	ldr	r1, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003a76:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003a7c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 020f 	bic.w	r2, r2, #15
 8003a94:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6819      	ldr	r1, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003abc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6899      	ldr	r1, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	3b01      	subs	r3, #1
 8003ace:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f002 0207 	and.w	r2, r2, #7
 8003ae8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6859      	ldr	r1, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b14:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 f930 	bl	8003d88 <DFSDM_GetChannelFromInstance>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	4904      	ldr	r1, [pc, #16]	; (8003b3c <HAL_DFSDM_ChannelInit+0x174>)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	2000446c 	.word	0x2000446c
 8003b40:	20004468 	.word	0x20004468
 8003b44:	40016000 	.word	0x40016000

08003b48 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e0ca      	b.n	8003cf0 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a66      	ldr	r2, [pc, #408]	; (8003cf8 <HAL_DFSDM_FilterInit+0x1b0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d109      	bne.n	8003b78 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d003      	beq.n	8003b74 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d101      	bne.n	8003b78 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e0bb      	b.n	8003cf0 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7fe f8e3 	bl	8001d5c <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003ba4:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	7a1b      	ldrb	r3, [r3, #8]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d108      	bne.n	8003bc0 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	e007      	b.n	8003bd0 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003bce:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	7a5b      	ldrb	r3, [r3, #9]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d108      	bne.n	8003bea <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	e007      	b.n	8003bfa <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003bf8:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c08:	f023 0308 	bic.w	r3, r3, #8
 8003c0c:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d108      	bne.n	8003c28 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6819      	ldr	r1, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	695a      	ldr	r2, [r3, #20]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	7c1b      	ldrb	r3, [r3, #16]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d108      	bne.n	8003c42 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0210 	orr.w	r2, r2, #16
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	e007      	b.n	8003c52 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0210 	bic.w	r2, r2, #16
 8003c50:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	7c5b      	ldrb	r3, [r3, #17]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d108      	bne.n	8003c6c <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0220 	orr.w	r2, r2, #32
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	e007      	b.n	8003c7c <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0220 	bic.w	r2, r2, #32
 8003c7a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6812      	ldr	r2, [r2, #0]
 8003c86:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8003c8a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8003c8e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6959      	ldr	r1, [r3, #20]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003ca2:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003caa:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	699a      	ldr	r2, [r3, #24]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	7c1a      	ldrb	r2, [r3, #16]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0201 	orr.w	r2, r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40016100 	.word	0x40016100

08003cfc <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d02e      	beq.n	8003d74 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003d1c:	2bff      	cmp	r3, #255	; 0xff
 8003d1e:	d029      	beq.n	8003d74 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	6812      	ldr	r2, [r2, #0]
 8003d2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d32:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d10d      	bne.n	8003d56 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	e00a      	b.n	8003d6c <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6819      	ldr	r1, [r3, #0]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	021b      	lsls	r3, r3, #8
 8003d60:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	631a      	str	r2, [r3, #48]	; 0x30
 8003d72:	e001      	b.n	8003d78 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	371c      	adds	r7, #28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
	...

08003d88 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a1c      	ldr	r2, [pc, #112]	; (8003e04 <DFSDM_GetChannelFromInstance+0x7c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d102      	bne.n	8003d9e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	e02b      	b.n	8003df6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a19      	ldr	r2, [pc, #100]	; (8003e08 <DFSDM_GetChannelFromInstance+0x80>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d102      	bne.n	8003dac <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003da6:	2301      	movs	r3, #1
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	e024      	b.n	8003df6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a17      	ldr	r2, [pc, #92]	; (8003e0c <DFSDM_GetChannelFromInstance+0x84>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d102      	bne.n	8003dba <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003db4:	2302      	movs	r3, #2
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	e01d      	b.n	8003df6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a14      	ldr	r2, [pc, #80]	; (8003e10 <DFSDM_GetChannelFromInstance+0x88>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d102      	bne.n	8003dc8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003dc2:	2304      	movs	r3, #4
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	e016      	b.n	8003df6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a12      	ldr	r2, [pc, #72]	; (8003e14 <DFSDM_GetChannelFromInstance+0x8c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d102      	bne.n	8003dd6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003dd0:	2305      	movs	r3, #5
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	e00f      	b.n	8003df6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a0f      	ldr	r2, [pc, #60]	; (8003e18 <DFSDM_GetChannelFromInstance+0x90>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d102      	bne.n	8003de4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003dde:	2306      	movs	r3, #6
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	e008      	b.n	8003df6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a0d      	ldr	r2, [pc, #52]	; (8003e1c <DFSDM_GetChannelFromInstance+0x94>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d102      	bne.n	8003df2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003dec:	2307      	movs	r3, #7
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	e001      	b.n	8003df6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003df2:	2303      	movs	r3, #3
 8003df4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003df6:	68fb      	ldr	r3, [r7, #12]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	40016000 	.word	0x40016000
 8003e08:	40016020 	.word	0x40016020
 8003e0c:	40016040 	.word	0x40016040
 8003e10:	40016080 	.word	0x40016080
 8003e14:	400160a0 	.word	0x400160a0
 8003e18:	400160c0 	.word	0x400160c0
 8003e1c:	400160e0 	.word	0x400160e0

08003e20 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e08d      	b.n	8003f4e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	461a      	mov	r2, r3
 8003e38:	4b47      	ldr	r3, [pc, #284]	; (8003f58 <HAL_DMA_Init+0x138>)
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d80f      	bhi.n	8003e5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	4b45      	ldr	r3, [pc, #276]	; (8003f5c <HAL_DMA_Init+0x13c>)
 8003e46:	4413      	add	r3, r2
 8003e48:	4a45      	ldr	r2, [pc, #276]	; (8003f60 <HAL_DMA_Init+0x140>)
 8003e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4e:	091b      	lsrs	r3, r3, #4
 8003e50:	009a      	lsls	r2, r3, #2
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a42      	ldr	r2, [pc, #264]	; (8003f64 <HAL_DMA_Init+0x144>)
 8003e5a:	641a      	str	r2, [r3, #64]	; 0x40
 8003e5c:	e00e      	b.n	8003e7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	4b40      	ldr	r3, [pc, #256]	; (8003f68 <HAL_DMA_Init+0x148>)
 8003e66:	4413      	add	r3, r2
 8003e68:	4a3d      	ldr	r2, [pc, #244]	; (8003f60 <HAL_DMA_Init+0x140>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	091b      	lsrs	r3, r3, #4
 8003e70:	009a      	lsls	r2, r3, #2
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a3c      	ldr	r2, [pc, #240]	; (8003f6c <HAL_DMA_Init+0x14c>)
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f8fe 	bl	80040d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003edc:	d102      	bne.n	8003ee4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ef8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d010      	beq.n	8003f24 <HAL_DMA_Init+0x104>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d80c      	bhi.n	8003f24 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f91e 	bl	800414c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f20:	605a      	str	r2, [r3, #4]
 8003f22:	e008      	b.n	8003f36 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	40020407 	.word	0x40020407
 8003f5c:	bffdfff8 	.word	0xbffdfff8
 8003f60:	cccccccd 	.word	0xcccccccd
 8003f64:	40020000 	.word	0x40020000
 8003f68:	bffdfbf8 	.word	0xbffdfbf8
 8003f6c:	40020400 	.word	0x40020400

08003f70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8c:	f003 031c 	and.w	r3, r3, #28
 8003f90:	2204      	movs	r2, #4
 8003f92:	409a      	lsls	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d026      	beq.n	8003fea <HAL_DMA_IRQHandler+0x7a>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d021      	beq.n	8003fea <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0320 	and.w	r3, r3, #32
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d107      	bne.n	8003fc4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0204 	bic.w	r2, r2, #4
 8003fc2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc8:	f003 021c 	and.w	r2, r3, #28
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	2104      	movs	r1, #4
 8003fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d071      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003fe8:	e06c      	b.n	80040c4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	f003 031c 	and.w	r3, r3, #28
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	409a      	lsls	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d02e      	beq.n	800405c <HAL_DMA_IRQHandler+0xec>
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d029      	beq.n	800405c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10b      	bne.n	800402e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 020a 	bic.w	r2, r2, #10
 8004024:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	f003 021c 	and.w	r2, r3, #28
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	2102      	movs	r1, #2
 800403c:	fa01 f202 	lsl.w	r2, r1, r2
 8004040:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404e:	2b00      	cmp	r3, #0
 8004050:	d038      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800405a:	e033      	b.n	80040c4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004060:	f003 031c 	and.w	r3, r3, #28
 8004064:	2208      	movs	r2, #8
 8004066:	409a      	lsls	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4013      	ands	r3, r2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d02a      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x156>
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b00      	cmp	r3, #0
 8004078:	d025      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 020e 	bic.w	r2, r2, #14
 8004088:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408e:	f003 021c 	and.w	r2, r3, #28
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	2101      	movs	r1, #1
 8004098:	fa01 f202 	lsl.w	r2, r1, r2
 800409c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d004      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop
}
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	4b17      	ldr	r3, [pc, #92]	; (800413c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d80a      	bhi.n	80040fa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e8:	089b      	lsrs	r3, r3, #2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040f0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6493      	str	r3, [r2, #72]	; 0x48
 80040f8:	e007      	b.n	800410a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fe:	089b      	lsrs	r3, r3, #2
 8004100:	009a      	lsls	r2, r3, #2
 8004102:	4b0f      	ldr	r3, [pc, #60]	; (8004140 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004104:	4413      	add	r3, r2
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	3b08      	subs	r3, #8
 8004112:	4a0c      	ldr	r2, [pc, #48]	; (8004144 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004114:	fba2 2303 	umull	r2, r3, r2, r3
 8004118:	091b      	lsrs	r3, r3, #4
 800411a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a0a      	ldr	r2, [pc, #40]	; (8004148 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004120:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f003 031f 	and.w	r3, r3, #31
 8004128:	2201      	movs	r2, #1
 800412a:	409a      	lsls	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004130:	bf00      	nop
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	40020407 	.word	0x40020407
 8004140:	4002081c 	.word	0x4002081c
 8004144:	cccccccd 	.word	0xcccccccd
 8004148:	40020880 	.word	0x40020880

0800414c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	b2db      	uxtb	r3, r3
 800415a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4b0b      	ldr	r3, [pc, #44]	; (800418c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004160:	4413      	add	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	461a      	mov	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a08      	ldr	r2, [pc, #32]	; (8004190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800416e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	3b01      	subs	r3, #1
 8004174:	f003 0303 	and.w	r3, r3, #3
 8004178:	2201      	movs	r2, #1
 800417a:	409a      	lsls	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004180:	bf00      	nop
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	1000823f 	.word	0x1000823f
 8004190:	40020940 	.word	0x40020940

08004194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041a2:	e166      	b.n	8004472 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	2101      	movs	r1, #1
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	fa01 f303 	lsl.w	r3, r1, r3
 80041b0:	4013      	ands	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 8158 	beq.w	800446c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 0303 	and.w	r3, r3, #3
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d005      	beq.n	80041d4 <HAL_GPIO_Init+0x40>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d130      	bne.n	8004236 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	2203      	movs	r2, #3
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	43db      	mvns	r3, r3
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4013      	ands	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800420a:	2201      	movs	r2, #1
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	43db      	mvns	r3, r3
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4013      	ands	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	091b      	lsrs	r3, r3, #4
 8004220:	f003 0201 	and.w	r2, r3, #1
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	2b03      	cmp	r3, #3
 8004240:	d017      	beq.n	8004272 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	2203      	movs	r2, #3
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	43db      	mvns	r3, r3
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	4013      	ands	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d123      	bne.n	80042c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	08da      	lsrs	r2, r3, #3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3208      	adds	r2, #8
 8004286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800428a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	220f      	movs	r2, #15
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	43db      	mvns	r3, r3
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4013      	ands	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	08da      	lsrs	r2, r3, #3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3208      	adds	r2, #8
 80042c0:	6939      	ldr	r1, [r7, #16]
 80042c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	2203      	movs	r2, #3
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	43db      	mvns	r3, r3
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4013      	ands	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f003 0203 	and.w	r2, r3, #3
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	fa02 f303 	lsl.w	r3, r2, r3
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 80b2 	beq.w	800446c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004308:	4b61      	ldr	r3, [pc, #388]	; (8004490 <HAL_GPIO_Init+0x2fc>)
 800430a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800430c:	4a60      	ldr	r2, [pc, #384]	; (8004490 <HAL_GPIO_Init+0x2fc>)
 800430e:	f043 0301 	orr.w	r3, r3, #1
 8004312:	6613      	str	r3, [r2, #96]	; 0x60
 8004314:	4b5e      	ldr	r3, [pc, #376]	; (8004490 <HAL_GPIO_Init+0x2fc>)
 8004316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004320:	4a5c      	ldr	r2, [pc, #368]	; (8004494 <HAL_GPIO_Init+0x300>)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	089b      	lsrs	r3, r3, #2
 8004326:	3302      	adds	r3, #2
 8004328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800432c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f003 0303 	and.w	r3, r3, #3
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	220f      	movs	r2, #15
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	43db      	mvns	r3, r3
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4013      	ands	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800434a:	d02b      	beq.n	80043a4 <HAL_GPIO_Init+0x210>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a52      	ldr	r2, [pc, #328]	; (8004498 <HAL_GPIO_Init+0x304>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d025      	beq.n	80043a0 <HAL_GPIO_Init+0x20c>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a51      	ldr	r2, [pc, #324]	; (800449c <HAL_GPIO_Init+0x308>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d01f      	beq.n	800439c <HAL_GPIO_Init+0x208>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a50      	ldr	r2, [pc, #320]	; (80044a0 <HAL_GPIO_Init+0x30c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d019      	beq.n	8004398 <HAL_GPIO_Init+0x204>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a4f      	ldr	r2, [pc, #316]	; (80044a4 <HAL_GPIO_Init+0x310>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d013      	beq.n	8004394 <HAL_GPIO_Init+0x200>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a4e      	ldr	r2, [pc, #312]	; (80044a8 <HAL_GPIO_Init+0x314>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00d      	beq.n	8004390 <HAL_GPIO_Init+0x1fc>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a4d      	ldr	r2, [pc, #308]	; (80044ac <HAL_GPIO_Init+0x318>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d007      	beq.n	800438c <HAL_GPIO_Init+0x1f8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a4c      	ldr	r2, [pc, #304]	; (80044b0 <HAL_GPIO_Init+0x31c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d101      	bne.n	8004388 <HAL_GPIO_Init+0x1f4>
 8004384:	2307      	movs	r3, #7
 8004386:	e00e      	b.n	80043a6 <HAL_GPIO_Init+0x212>
 8004388:	2308      	movs	r3, #8
 800438a:	e00c      	b.n	80043a6 <HAL_GPIO_Init+0x212>
 800438c:	2306      	movs	r3, #6
 800438e:	e00a      	b.n	80043a6 <HAL_GPIO_Init+0x212>
 8004390:	2305      	movs	r3, #5
 8004392:	e008      	b.n	80043a6 <HAL_GPIO_Init+0x212>
 8004394:	2304      	movs	r3, #4
 8004396:	e006      	b.n	80043a6 <HAL_GPIO_Init+0x212>
 8004398:	2303      	movs	r3, #3
 800439a:	e004      	b.n	80043a6 <HAL_GPIO_Init+0x212>
 800439c:	2302      	movs	r3, #2
 800439e:	e002      	b.n	80043a6 <HAL_GPIO_Init+0x212>
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <HAL_GPIO_Init+0x212>
 80043a4:	2300      	movs	r3, #0
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	f002 0203 	and.w	r2, r2, #3
 80043ac:	0092      	lsls	r2, r2, #2
 80043ae:	4093      	lsls	r3, r2
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80043b6:	4937      	ldr	r1, [pc, #220]	; (8004494 <HAL_GPIO_Init+0x300>)
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	089b      	lsrs	r3, r3, #2
 80043bc:	3302      	adds	r3, #2
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043c4:	4b3b      	ldr	r3, [pc, #236]	; (80044b4 <HAL_GPIO_Init+0x320>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	43db      	mvns	r3, r3
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4013      	ands	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80043e8:	4a32      	ldr	r2, [pc, #200]	; (80044b4 <HAL_GPIO_Init+0x320>)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80043ee:	4b31      	ldr	r3, [pc, #196]	; (80044b4 <HAL_GPIO_Init+0x320>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	43db      	mvns	r3, r3
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	4013      	ands	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004412:	4a28      	ldr	r2, [pc, #160]	; (80044b4 <HAL_GPIO_Init+0x320>)
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004418:	4b26      	ldr	r3, [pc, #152]	; (80044b4 <HAL_GPIO_Init+0x320>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	43db      	mvns	r3, r3
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4013      	ands	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4313      	orrs	r3, r2
 800443a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800443c:	4a1d      	ldr	r2, [pc, #116]	; (80044b4 <HAL_GPIO_Init+0x320>)
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004442:	4b1c      	ldr	r3, [pc, #112]	; (80044b4 <HAL_GPIO_Init+0x320>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	43db      	mvns	r3, r3
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4013      	ands	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004466:	4a13      	ldr	r2, [pc, #76]	; (80044b4 <HAL_GPIO_Init+0x320>)
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	3301      	adds	r3, #1
 8004470:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	fa22 f303 	lsr.w	r3, r2, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	f47f ae91 	bne.w	80041a4 <HAL_GPIO_Init+0x10>
  }
}
 8004482:	bf00      	nop
 8004484:	bf00      	nop
 8004486:	371c      	adds	r7, #28
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	40021000 	.word	0x40021000
 8004494:	40010000 	.word	0x40010000
 8004498:	48000400 	.word	0x48000400
 800449c:	48000800 	.word	0x48000800
 80044a0:	48000c00 	.word	0x48000c00
 80044a4:	48001000 	.word	0x48001000
 80044a8:	48001400 	.word	0x48001400
 80044ac:	48001800 	.word	0x48001800
 80044b0:	48001c00 	.word	0x48001c00
 80044b4:	40010400 	.word	0x40010400

080044b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691a      	ldr	r2, [r3, #16]
 80044c8:	887b      	ldrh	r3, [r7, #2]
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044d0:	2301      	movs	r3, #1
 80044d2:	73fb      	strb	r3, [r7, #15]
 80044d4:	e001      	b.n	80044da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044d6:	2300      	movs	r3, #0
 80044d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044da:	7bfb      	ldrb	r3, [r7, #15]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	807b      	strh	r3, [r7, #2]
 80044f4:	4613      	mov	r3, r2
 80044f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044f8:	787b      	ldrb	r3, [r7, #1]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044fe:	887a      	ldrh	r2, [r7, #2]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004504:	e002      	b.n	800450c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004506:	887a      	ldrh	r2, [r7, #2]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	460b      	mov	r3, r1
 8004522:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800452a:	887a      	ldrh	r2, [r7, #2]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4013      	ands	r3, r2
 8004530:	041a      	lsls	r2, r3, #16
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	43d9      	mvns	r1, r3
 8004536:	887b      	ldrh	r3, [r7, #2]
 8004538:	400b      	ands	r3, r1
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	619a      	str	r2, [r3, #24]
}
 8004540:	bf00      	nop
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e08d      	b.n	800467a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d106      	bne.n	8004578 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fd fcb6 	bl	8001ee4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2224      	movs	r2, #36	; 0x24
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0201 	bic.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800459c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d107      	bne.n	80045c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045c2:	609a      	str	r2, [r3, #8]
 80045c4:	e006      	b.n	80045d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80045d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d108      	bne.n	80045ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ea:	605a      	str	r2, [r3, #4]
 80045ec:	e007      	b.n	80045fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800460c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004610:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004620:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69d9      	ldr	r1, [r3, #28]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1a      	ldr	r2, [r3, #32]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b20      	cmp	r3, #32
 8004696:	d138      	bne.n	800470a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046a2:	2302      	movs	r3, #2
 80046a4:	e032      	b.n	800470c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2224      	movs	r2, #36	; 0x24
 80046b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0201 	bic.w	r2, r2, #1
 80046c4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046d4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6819      	ldr	r1, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0201 	orr.w	r2, r2, #1
 80046f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	e000      	b.n	800470c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800470a:	2302      	movs	r3, #2
  }
}
 800470c:	4618      	mov	r0, r3
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b20      	cmp	r3, #32
 800472c:	d139      	bne.n	80047a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004738:	2302      	movs	r3, #2
 800473a:	e033      	b.n	80047a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2224      	movs	r2, #36	; 0x24
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0201 	bic.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800476a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	021b      	lsls	r3, r3, #8
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0201 	orr.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2220      	movs	r2, #32
 8004792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	e000      	b.n	80047a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047a2:	2302      	movs	r3, #2
  }
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80047b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047b2:	b08f      	sub	sp, #60	; 0x3c
 80047b4:	af0a      	add	r7, sp, #40	; 0x28
 80047b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e116      	b.n	80049f0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d106      	bne.n	80047e2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f00b fe87 	bl	80104f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2203      	movs	r2, #3
 80047e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d102      	bne.n	80047fc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f008 f83e 	bl	800c882 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	687e      	ldr	r6, [r7, #4]
 800480e:	466d      	mov	r5, sp
 8004810:	f106 0410 	add.w	r4, r6, #16
 8004814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004816:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800481a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800481c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004820:	e885 0003 	stmia.w	r5, {r0, r1}
 8004824:	1d33      	adds	r3, r6, #4
 8004826:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004828:	6838      	ldr	r0, [r7, #0]
 800482a:	f007 ff51 	bl	800c6d0 <USB_CoreInit>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0d7      	b.n	80049f0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2100      	movs	r1, #0
 8004846:	4618      	mov	r0, r3
 8004848:	f008 f82c 	bl	800c8a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800484c:	2300      	movs	r3, #0
 800484e:	73fb      	strb	r3, [r7, #15]
 8004850:	e04a      	b.n	80048e8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004852:	7bfa      	ldrb	r2, [r7, #15]
 8004854:	6879      	ldr	r1, [r7, #4]
 8004856:	4613      	mov	r3, r2
 8004858:	00db      	lsls	r3, r3, #3
 800485a:	4413      	add	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	440b      	add	r3, r1
 8004860:	333d      	adds	r3, #61	; 0x3d
 8004862:	2201      	movs	r2, #1
 8004864:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004866:	7bfa      	ldrb	r2, [r7, #15]
 8004868:	6879      	ldr	r1, [r7, #4]
 800486a:	4613      	mov	r3, r2
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4413      	add	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	440b      	add	r3, r1
 8004874:	333c      	adds	r3, #60	; 0x3c
 8004876:	7bfa      	ldrb	r2, [r7, #15]
 8004878:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800487a:	7bfa      	ldrb	r2, [r7, #15]
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	b298      	uxth	r0, r3
 8004880:	6879      	ldr	r1, [r7, #4]
 8004882:	4613      	mov	r3, r2
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	4413      	add	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	440b      	add	r3, r1
 800488c:	3356      	adds	r3, #86	; 0x56
 800488e:	4602      	mov	r2, r0
 8004890:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004892:	7bfa      	ldrb	r2, [r7, #15]
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	4613      	mov	r3, r2
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	440b      	add	r3, r1
 80048a0:	3340      	adds	r3, #64	; 0x40
 80048a2:	2200      	movs	r2, #0
 80048a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80048a6:	7bfa      	ldrb	r2, [r7, #15]
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	4413      	add	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	440b      	add	r3, r1
 80048b4:	3344      	adds	r3, #68	; 0x44
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80048ba:	7bfa      	ldrb	r2, [r7, #15]
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	4613      	mov	r3, r2
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	4413      	add	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	3348      	adds	r3, #72	; 0x48
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80048ce:	7bfa      	ldrb	r2, [r7, #15]
 80048d0:	6879      	ldr	r1, [r7, #4]
 80048d2:	4613      	mov	r3, r2
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	4413      	add	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	440b      	add	r3, r1
 80048dc:	334c      	adds	r3, #76	; 0x4c
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048e2:	7bfb      	ldrb	r3, [r7, #15]
 80048e4:	3301      	adds	r3, #1
 80048e6:	73fb      	strb	r3, [r7, #15]
 80048e8:	7bfa      	ldrb	r2, [r7, #15]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d3af      	bcc.n	8004852 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048f2:	2300      	movs	r3, #0
 80048f4:	73fb      	strb	r3, [r7, #15]
 80048f6:	e044      	b.n	8004982 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80048f8:	7bfa      	ldrb	r2, [r7, #15]
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	4613      	mov	r3, r2
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	4413      	add	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800490a:	2200      	movs	r2, #0
 800490c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800490e:	7bfa      	ldrb	r2, [r7, #15]
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	4613      	mov	r3, r2
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	4413      	add	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	440b      	add	r3, r1
 800491c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004920:	7bfa      	ldrb	r2, [r7, #15]
 8004922:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004924:	7bfa      	ldrb	r2, [r7, #15]
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	4613      	mov	r3, r2
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	4413      	add	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	440b      	add	r3, r1
 8004932:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004936:	2200      	movs	r2, #0
 8004938:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800493a:	7bfa      	ldrb	r2, [r7, #15]
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	4613      	mov	r3, r2
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	4413      	add	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	440b      	add	r3, r1
 8004948:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004950:	7bfa      	ldrb	r2, [r7, #15]
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	4613      	mov	r3, r2
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	4413      	add	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	440b      	add	r3, r1
 800495e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004966:	7bfa      	ldrb	r2, [r7, #15]
 8004968:	6879      	ldr	r1, [r7, #4]
 800496a:	4613      	mov	r3, r2
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	4413      	add	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	440b      	add	r3, r1
 8004974:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800497c:	7bfb      	ldrb	r3, [r7, #15]
 800497e:	3301      	adds	r3, #1
 8004980:	73fb      	strb	r3, [r7, #15]
 8004982:	7bfa      	ldrb	r2, [r7, #15]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	429a      	cmp	r2, r3
 800498a:	d3b5      	bcc.n	80048f8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	603b      	str	r3, [r7, #0]
 8004992:	687e      	ldr	r6, [r7, #4]
 8004994:	466d      	mov	r5, sp
 8004996:	f106 0410 	add.w	r4, r6, #16
 800499a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800499c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800499e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80049aa:	1d33      	adds	r3, r6, #4
 80049ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049ae:	6838      	ldr	r0, [r7, #0]
 80049b0:	f007 ffc4 	bl	800c93c <USB_DevInit>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d005      	beq.n	80049c6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2202      	movs	r2, #2
 80049be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e014      	b.n	80049f0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d102      	bne.n	80049e4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f001 f86a 	bl	8005ab8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f008 ff72 	bl	800d8d2 <USB_DevDisconnect>

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_PCD_Start+0x1c>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e01c      	b.n	8004a4e <HAL_PCD_Start+0x56>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d105      	bne.n	8004a30 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a28:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f007 ff13 	bl	800c860 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f008 ff26 	bl	800d890 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004a56:	b590      	push	{r4, r7, lr}
 8004a58:	b08d      	sub	sp, #52	; 0x34
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f008 ffe4 	bl	800da3a <USB_GetMode>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f040 847e 	bne.w	8005376 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f008 ff48 	bl	800d914 <USB_ReadInterrupts>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 8474 	beq.w	8005374 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	0a1b      	lsrs	r3, r3, #8
 8004a96:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f008 ff35 	bl	800d914 <USB_ReadInterrupts>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d107      	bne.n	8004ac4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695a      	ldr	r2, [r3, #20]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f002 0202 	and.w	r2, r2, #2
 8004ac2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f008 ff23 	bl	800d914 <USB_ReadInterrupts>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f003 0310 	and.w	r3, r3, #16
 8004ad4:	2b10      	cmp	r3, #16
 8004ad6:	d161      	bne.n	8004b9c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0210 	bic.w	r2, r2, #16
 8004ae6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	f003 020f 	and.w	r2, r3, #15
 8004af4:	4613      	mov	r3, r2
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	4413      	add	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	4413      	add	r3, r2
 8004b04:	3304      	adds	r3, #4
 8004b06:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	0c5b      	lsrs	r3, r3, #17
 8004b0c:	f003 030f 	and.w	r3, r3, #15
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d124      	bne.n	8004b5e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d035      	beq.n	8004b8c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	091b      	lsrs	r3, r3, #4
 8004b28:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004b2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	461a      	mov	r2, r3
 8004b32:	6a38      	ldr	r0, [r7, #32]
 8004b34:	f008 fd5a 	bl	800d5ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	091b      	lsrs	r3, r3, #4
 8004b40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b44:	441a      	add	r2, r3
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	695a      	ldr	r2, [r3, #20]
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	091b      	lsrs	r3, r3, #4
 8004b52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b56:	441a      	add	r2, r3
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	615a      	str	r2, [r3, #20]
 8004b5c:	e016      	b.n	8004b8c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	0c5b      	lsrs	r3, r3, #17
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	2b06      	cmp	r3, #6
 8004b68:	d110      	bne.n	8004b8c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b70:	2208      	movs	r2, #8
 8004b72:	4619      	mov	r1, r3
 8004b74:	6a38      	ldr	r0, [r7, #32]
 8004b76:	f008 fd39 	bl	800d5ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	695a      	ldr	r2, [r3, #20]
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	091b      	lsrs	r3, r3, #4
 8004b82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b86:	441a      	add	r2, r3
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699a      	ldr	r2, [r3, #24]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0210 	orr.w	r2, r2, #16
 8004b9a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f008 feb7 	bl	800d914 <USB_ReadInterrupts>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004bb0:	f040 80a7 	bne.w	8004d02 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f008 febc 	bl	800d93a <USB_ReadDevAllOutEpInterrupt>
 8004bc2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004bc4:	e099      	b.n	8004cfa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 808e 	beq.w	8004cee <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	4611      	mov	r1, r2
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f008 fee0 	bl	800d9a2 <USB_ReadDevOutEPInterrupt>
 8004be2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00c      	beq.n	8004c08 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004c00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fe7e 	bl	8005904 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00c      	beq.n	8004c2c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1e:	461a      	mov	r2, r3
 8004c20:	2308      	movs	r3, #8
 8004c22:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004c24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 feba 	bl	80059a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f003 0310 	and.w	r3, r3, #16
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d008      	beq.n	8004c48 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	015a      	lsls	r2, r3, #5
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c42:	461a      	mov	r2, r3
 8004c44:	2310      	movs	r3, #16
 8004c46:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d030      	beq.n	8004cb4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004c52:	6a3b      	ldr	r3, [r7, #32]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5a:	2b80      	cmp	r3, #128	; 0x80
 8004c5c:	d109      	bne.n	8004c72 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	69fa      	ldr	r2, [r7, #28]
 8004c68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c70:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c74:	4613      	mov	r3, r2
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	4413      	add	r3, r2
 8004c84:	3304      	adds	r3, #4
 8004c86:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	78db      	ldrb	r3, [r3, #3]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d108      	bne.n	8004ca2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2200      	movs	r2, #0
 8004c94:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f00b fd6b 	bl	8010778 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cae:	461a      	mov	r2, r3
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f003 0320 	and.w	r3, r3, #32
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d008      	beq.n	8004cd0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cca:	461a      	mov	r2, r3
 8004ccc:	2320      	movs	r3, #32
 8004cce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d009      	beq.n	8004cee <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf6:	085b      	lsrs	r3, r3, #1
 8004cf8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f47f af62 	bne.w	8004bc6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f008 fe04 	bl	800d914 <USB_ReadInterrupts>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d16:	f040 80a4 	bne.w	8004e62 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f008 fe25 	bl	800d96e <USB_ReadDevAllInEpInterrupt>
 8004d24:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004d2a:	e096      	b.n	8004e5a <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 808b 	beq.w	8004e4e <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	4611      	mov	r1, r2
 8004d42:	4618      	mov	r0, r3
 8004d44:	f008 fe4b 	bl	800d9de <USB_ReadDevInEPInterrupt>
 8004d48:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d020      	beq.n	8004d96 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	69f9      	ldr	r1, [r7, #28]
 8004d70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d74:	4013      	ands	r3, r2
 8004d76:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d84:	461a      	mov	r2, r3
 8004d86:	2301      	movs	r3, #1
 8004d88:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	4619      	mov	r1, r3
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f00b fc5c 	bl	801064e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f003 0308 	and.w	r3, r3, #8
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d008      	beq.n	8004db2 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dac:	461a      	mov	r2, r3
 8004dae:	2308      	movs	r3, #8
 8004db0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f003 0310 	and.w	r3, r3, #16
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc8:	461a      	mov	r2, r3
 8004dca:	2310      	movs	r3, #16
 8004dcc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d008      	beq.n	8004dea <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de4:	461a      	mov	r2, r3
 8004de6:	2340      	movs	r3, #64	; 0x40
 8004de8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d023      	beq.n	8004e3c <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004df4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004df6:	6a38      	ldr	r0, [r7, #32]
 8004df8:	f007 fee2 	bl	800cbc0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dfe:	4613      	mov	r3, r2
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	3338      	adds	r3, #56	; 0x38
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	78db      	ldrb	r3, [r3, #3]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d108      	bne.n	8004e2a <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	4619      	mov	r1, r3
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f00b fcb9 	bl	801079c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e36:	461a      	mov	r2, r3
 8004e38:	2302      	movs	r3, #2
 8004e3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004e46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fcd2 	bl	80057f2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	3301      	adds	r3, #1
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e56:	085b      	lsrs	r3, r3, #1
 8004e58:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f47f af65 	bne.w	8004d2c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f008 fd54 	bl	800d914 <USB_ReadInterrupts>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e76:	d122      	bne.n	8004ebe <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	69fa      	ldr	r2, [r7, #28]
 8004e82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e86:	f023 0301 	bic.w	r3, r3, #1
 8004e8a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d108      	bne.n	8004ea8 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f00b feed 	bl	8010c80 <HAL_PCDEx_LPM_Callback>
 8004ea6:	e002      	b.n	8004eae <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f00b fc3d 	bl	8010728 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	695a      	ldr	r2, [r3, #20]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004ebc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f008 fd26 	bl	800d914 <USB_ReadInterrupts>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ed2:	d112      	bne.n	8004efa <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d102      	bne.n	8004eea <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f00b fbf9 	bl	80106dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695a      	ldr	r2, [r3, #20]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004ef8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f008 fd08 	bl	800d914 <USB_ReadInterrupts>
 8004f04:	4603      	mov	r3, r0
 8004f06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f0e:	d121      	bne.n	8004f54 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695a      	ldr	r2, [r3, #20]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004f1e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d111      	bne.n	8004f4e <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f38:	089b      	lsrs	r3, r3, #2
 8004f3a:	f003 020f 	and.w	r2, r3, #15
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004f44:	2101      	movs	r1, #1
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f00b fe9a 	bl	8010c80 <HAL_PCDEx_LPM_Callback>
 8004f4c:	e002      	b.n	8004f54 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f00b fbc4 	bl	80106dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f008 fcdb 	bl	800d914 <USB_ReadInterrupts>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f68:	f040 80b5 	bne.w	80050d6 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	69fa      	ldr	r2, [r7, #28]
 8004f76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f7a:	f023 0301 	bic.w	r3, r3, #1
 8004f7e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2110      	movs	r1, #16
 8004f86:	4618      	mov	r0, r3
 8004f88:	f007 fe1a 	bl	800cbc0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f90:	e046      	b.n	8005020 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fa4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fb6:	0151      	lsls	r1, r2, #5
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	440a      	add	r2, r1
 8004fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fc4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fd8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fea:	0151      	lsls	r1, r2, #5
 8004fec:	69fa      	ldr	r2, [r7, #28]
 8004fee:	440a      	add	r2, r1
 8004ff0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ff4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ff8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	4413      	add	r3, r2
 8005002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800500a:	0151      	lsls	r1, r2, #5
 800500c:	69fa      	ldr	r2, [r7, #28]
 800500e:	440a      	add	r2, r1
 8005010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005014:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005018:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800501a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501c:	3301      	adds	r3, #1
 800501e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005026:	429a      	cmp	r2, r3
 8005028:	d3b3      	bcc.n	8004f92 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005038:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800503c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005042:	2b00      	cmp	r3, #0
 8005044:	d016      	beq.n	8005074 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800504c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005050:	69fa      	ldr	r2, [r7, #28]
 8005052:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005056:	f043 030b 	orr.w	r3, r3, #11
 800505a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005066:	69fa      	ldr	r2, [r7, #28]
 8005068:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800506c:	f043 030b 	orr.w	r3, r3, #11
 8005070:	6453      	str	r3, [r2, #68]	; 0x44
 8005072:	e015      	b.n	80050a0 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	69fa      	ldr	r2, [r7, #28]
 800507e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005082:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005086:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800508a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	69fa      	ldr	r2, [r7, #28]
 8005096:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800509a:	f043 030b 	orr.w	r3, r3, #11
 800509e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	69fa      	ldr	r2, [r7, #28]
 80050aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80050b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80050be:	4619      	mov	r1, r3
 80050c0:	4610      	mov	r0, r2
 80050c2:	f008 fceb 	bl	800da9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	695a      	ldr	r2, [r3, #20]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80050d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4618      	mov	r0, r3
 80050dc:	f008 fc1a 	bl	800d914 <USB_ReadInterrupts>
 80050e0:	4603      	mov	r3, r0
 80050e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ea:	d124      	bne.n	8005136 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f008 fcb0 	bl	800da56 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f007 fddd 	bl	800ccba <USB_GetDevSpeed>
 8005100:	4603      	mov	r3, r0
 8005102:	461a      	mov	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681c      	ldr	r4, [r3, #0]
 800510c:	f001 fbca 	bl	80068a4 <HAL_RCC_GetHCLKFreq>
 8005110:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005116:	b2db      	uxtb	r3, r3
 8005118:	461a      	mov	r2, r3
 800511a:	4620      	mov	r0, r4
 800511c:	f007 fb04 	bl	800c728 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f00b fabc 	bl	801069e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695a      	ldr	r2, [r3, #20]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005134:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f008 fbea 	bl	800d914 <USB_ReadInterrupts>
 8005140:	4603      	mov	r3, r0
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b08      	cmp	r3, #8
 8005148:	d10a      	bne.n	8005160 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f00b fa99 	bl	8010682 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695a      	ldr	r2, [r3, #20]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f002 0208 	and.w	r2, r2, #8
 800515e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4618      	mov	r0, r3
 8005166:	f008 fbd5 	bl	800d914 <USB_ReadInterrupts>
 800516a:	4603      	mov	r3, r0
 800516c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005170:	2b80      	cmp	r3, #128	; 0x80
 8005172:	d122      	bne.n	80051ba <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005180:	2301      	movs	r3, #1
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
 8005184:	e014      	b.n	80051b0 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518a:	4613      	mov	r3, r2
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	4413      	add	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	440b      	add	r3, r1
 8005194:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d105      	bne.n	80051aa <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	4619      	mov	r1, r3
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 faf3 	bl	8005790 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	3301      	adds	r3, #1
 80051ae:	627b      	str	r3, [r7, #36]	; 0x24
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d3e5      	bcc.n	8005186 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f008 fba8 	bl	800d914 <USB_ReadInterrupts>
 80051c4:	4603      	mov	r3, r0
 80051c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ce:	d13b      	bne.n	8005248 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051d0:	2301      	movs	r3, #1
 80051d2:	627b      	str	r3, [r7, #36]	; 0x24
 80051d4:	e02b      	b.n	800522e <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ea:	4613      	mov	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	4413      	add	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	440b      	add	r3, r1
 80051f4:	3340      	adds	r3, #64	; 0x40
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d115      	bne.n	8005228 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80051fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80051fe:	2b00      	cmp	r3, #0
 8005200:	da12      	bge.n	8005228 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005206:	4613      	mov	r3, r2
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	4413      	add	r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	440b      	add	r3, r1
 8005210:	333f      	adds	r3, #63	; 0x3f
 8005212:	2201      	movs	r2, #1
 8005214:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	b2db      	uxtb	r3, r3
 800521a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800521e:	b2db      	uxtb	r3, r3
 8005220:	4619      	mov	r1, r3
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 fab4 	bl	8005790 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	3301      	adds	r3, #1
 800522c:	627b      	str	r3, [r7, #36]	; 0x24
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005234:	429a      	cmp	r2, r3
 8005236:	d3ce      	bcc.n	80051d6 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	695a      	ldr	r2, [r3, #20]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005246:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4618      	mov	r0, r3
 800524e:	f008 fb61 	bl	800d914 <USB_ReadInterrupts>
 8005252:	4603      	mov	r3, r0
 8005254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005258:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800525c:	d155      	bne.n	800530a <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800525e:	2301      	movs	r3, #1
 8005260:	627b      	str	r3, [r7, #36]	; 0x24
 8005262:	e045      	b.n	80052f0 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005278:	4613      	mov	r3, r2
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	4413      	add	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d12e      	bne.n	80052ea <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800528c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800528e:	2b00      	cmp	r3, #0
 8005290:	da2b      	bge.n	80052ea <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800529e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d121      	bne.n	80052ea <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052aa:	4613      	mov	r3, r2
 80052ac:	00db      	lsls	r3, r3, #3
 80052ae:	4413      	add	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	440b      	add	r3, r1
 80052b4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80052b8:	2201      	movs	r2, #1
 80052ba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10a      	bne.n	80052ea <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	69fa      	ldr	r2, [r7, #28]
 80052de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052e6:	6053      	str	r3, [r2, #4]
            break;
 80052e8:	e007      	b.n	80052fa <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	3301      	adds	r3, #1
 80052ee:	627b      	str	r3, [r7, #36]	; 0x24
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d3b4      	bcc.n	8005264 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	695a      	ldr	r2, [r3, #20]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005308:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4618      	mov	r0, r3
 8005310:	f008 fb00 	bl	800d914 <USB_ReadInterrupts>
 8005314:	4603      	mov	r3, r0
 8005316:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800531a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531e:	d10a      	bne.n	8005336 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f00b fa4d 	bl	80107c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	695a      	ldr	r2, [r3, #20]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005334:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f008 faea 	bl	800d914 <USB_ReadInterrupts>
 8005340:	4603      	mov	r3, r0
 8005342:	f003 0304 	and.w	r3, r3, #4
 8005346:	2b04      	cmp	r3, #4
 8005348:	d115      	bne.n	8005376 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f00b fa3d 	bl	80107dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6859      	ldr	r1, [r3, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	430a      	orrs	r2, r1
 8005370:	605a      	str	r2, [r3, #4]
 8005372:	e000      	b.n	8005376 <HAL_PCD_IRQHandler+0x920>
      return;
 8005374:	bf00      	nop
    }
  }
}
 8005376:	3734      	adds	r7, #52	; 0x34
 8005378:	46bd      	mov	sp, r7
 800537a:	bd90      	pop	{r4, r7, pc}

0800537c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800538e:	2b01      	cmp	r3, #1
 8005390:	d101      	bne.n	8005396 <HAL_PCD_SetAddress+0x1a>
 8005392:	2302      	movs	r3, #2
 8005394:	e013      	b.n	80053be <HAL_PCD_SetAddress+0x42>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	78fa      	ldrb	r2, [r7, #3]
 80053a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	78fa      	ldrb	r2, [r7, #3]
 80053ac:	4611      	mov	r1, r2
 80053ae:	4618      	mov	r0, r3
 80053b0:	f008 fa48 	bl	800d844 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b084      	sub	sp, #16
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
 80053ce:	4608      	mov	r0, r1
 80053d0:	4611      	mov	r1, r2
 80053d2:	461a      	mov	r2, r3
 80053d4:	4603      	mov	r3, r0
 80053d6:	70fb      	strb	r3, [r7, #3]
 80053d8:	460b      	mov	r3, r1
 80053da:	803b      	strh	r3, [r7, #0]
 80053dc:	4613      	mov	r3, r2
 80053de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80053e0:	2300      	movs	r3, #0
 80053e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80053e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	da0f      	bge.n	800540c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053ec:	78fb      	ldrb	r3, [r7, #3]
 80053ee:	f003 020f 	and.w	r2, r3, #15
 80053f2:	4613      	mov	r3, r2
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	4413      	add	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	3338      	adds	r3, #56	; 0x38
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	4413      	add	r3, r2
 8005400:	3304      	adds	r3, #4
 8005402:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2201      	movs	r2, #1
 8005408:	705a      	strb	r2, [r3, #1]
 800540a:	e00f      	b.n	800542c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	f003 020f 	and.w	r2, r3, #15
 8005412:	4613      	mov	r3, r2
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	4413      	add	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	4413      	add	r3, r2
 8005422:	3304      	adds	r3, #4
 8005424:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	f003 030f 	and.w	r3, r3, #15
 8005432:	b2da      	uxtb	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005438:	883a      	ldrh	r2, [r7, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	78ba      	ldrb	r2, [r7, #2]
 8005442:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	785b      	ldrb	r3, [r3, #1]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d004      	beq.n	8005456 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	b29a      	uxth	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005456:	78bb      	ldrb	r3, [r7, #2]
 8005458:	2b02      	cmp	r3, #2
 800545a:	d102      	bne.n	8005462 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_PCD_EP_Open+0xaa>
 800546c:	2302      	movs	r3, #2
 800546e:	e00e      	b.n	800548e <HAL_PCD_EP_Open+0xc8>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68f9      	ldr	r1, [r7, #12]
 800547e:	4618      	mov	r0, r3
 8005480:	f007 fc3a 	bl	800ccf8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800548c:	7afb      	ldrb	r3, [r7, #11]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b084      	sub	sp, #16
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	460b      	mov	r3, r1
 80054a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80054a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	da0f      	bge.n	80054ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054aa:	78fb      	ldrb	r3, [r7, #3]
 80054ac:	f003 020f 	and.w	r2, r3, #15
 80054b0:	4613      	mov	r3, r2
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	4413      	add	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	3338      	adds	r3, #56	; 0x38
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	4413      	add	r3, r2
 80054be:	3304      	adds	r3, #4
 80054c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	705a      	strb	r2, [r3, #1]
 80054c8:	e00f      	b.n	80054ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054ca:	78fb      	ldrb	r3, [r7, #3]
 80054cc:	f003 020f 	and.w	r2, r3, #15
 80054d0:	4613      	mov	r3, r2
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	4413      	add	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	4413      	add	r3, r2
 80054e0:	3304      	adds	r3, #4
 80054e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80054ea:	78fb      	ldrb	r3, [r7, #3]
 80054ec:	f003 030f 	and.w	r3, r3, #15
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d101      	bne.n	8005504 <HAL_PCD_EP_Close+0x6e>
 8005500:	2302      	movs	r3, #2
 8005502:	e00e      	b.n	8005522 <HAL_PCD_EP_Close+0x8c>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68f9      	ldr	r1, [r7, #12]
 8005512:	4618      	mov	r0, r3
 8005514:	f007 fc78 	bl	800ce08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b086      	sub	sp, #24
 800552e:	af00      	add	r7, sp, #0
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	607a      	str	r2, [r7, #4]
 8005534:	603b      	str	r3, [r7, #0]
 8005536:	460b      	mov	r3, r1
 8005538:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800553a:	7afb      	ldrb	r3, [r7, #11]
 800553c:	f003 020f 	and.w	r2, r3, #15
 8005540:	4613      	mov	r3, r2
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4413      	add	r3, r2
 8005550:	3304      	adds	r3, #4
 8005552:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2200      	movs	r2, #0
 8005564:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2200      	movs	r2, #0
 800556a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800556c:	7afb      	ldrb	r3, [r7, #11]
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	b2da      	uxtb	r2, r3
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6979      	ldr	r1, [r7, #20]
 800557e:	4618      	mov	r0, r3
 8005580:	f007 fd1e 	bl	800cfc0 <USB_EPStartXfer>

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3718      	adds	r7, #24
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800558e:	b480      	push	{r7}
 8005590:	b083      	sub	sp, #12
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	460b      	mov	r3, r1
 8005598:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800559a:	78fb      	ldrb	r3, [r7, #3]
 800559c:	f003 020f 	and.w	r2, r3, #15
 80055a0:	6879      	ldr	r1, [r7, #4]
 80055a2:	4613      	mov	r3, r2
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	4413      	add	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	440b      	add	r3, r1
 80055ac:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80055b0:	681b      	ldr	r3, [r3, #0]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b086      	sub	sp, #24
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	60f8      	str	r0, [r7, #12]
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	603b      	str	r3, [r7, #0]
 80055ca:	460b      	mov	r3, r1
 80055cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055ce:	7afb      	ldrb	r3, [r7, #11]
 80055d0:	f003 020f 	and.w	r2, r3, #15
 80055d4:	4613      	mov	r3, r2
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	4413      	add	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	3338      	adds	r3, #56	; 0x38
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4413      	add	r3, r2
 80055e2:	3304      	adds	r3, #4
 80055e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2200      	movs	r2, #0
 80055f6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2201      	movs	r2, #1
 80055fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055fe:	7afb      	ldrb	r3, [r7, #11]
 8005600:	f003 030f 	and.w	r3, r3, #15
 8005604:	b2da      	uxtb	r2, r3
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6979      	ldr	r1, [r7, #20]
 8005610:	4618      	mov	r0, r3
 8005612:	f007 fcd5 	bl	800cfc0 <USB_EPStartXfer>

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	460b      	mov	r3, r1
 800562a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800562c:	78fb      	ldrb	r3, [r7, #3]
 800562e:	f003 020f 	and.w	r2, r3, #15
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	429a      	cmp	r2, r3
 8005638:	d901      	bls.n	800563e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e04e      	b.n	80056dc <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800563e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005642:	2b00      	cmp	r3, #0
 8005644:	da0f      	bge.n	8005666 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005646:	78fb      	ldrb	r3, [r7, #3]
 8005648:	f003 020f 	and.w	r2, r3, #15
 800564c:	4613      	mov	r3, r2
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	3338      	adds	r3, #56	; 0x38
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	4413      	add	r3, r2
 800565a:	3304      	adds	r3, #4
 800565c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2201      	movs	r2, #1
 8005662:	705a      	strb	r2, [r3, #1]
 8005664:	e00d      	b.n	8005682 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005666:	78fa      	ldrb	r2, [r7, #3]
 8005668:	4613      	mov	r3, r2
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	4413      	add	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	4413      	add	r3, r2
 8005678:	3304      	adds	r3, #4
 800567a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2201      	movs	r2, #1
 8005686:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005688:	78fb      	ldrb	r3, [r7, #3]
 800568a:	f003 030f 	and.w	r3, r3, #15
 800568e:	b2da      	uxtb	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800569a:	2b01      	cmp	r3, #1
 800569c:	d101      	bne.n	80056a2 <HAL_PCD_EP_SetStall+0x82>
 800569e:	2302      	movs	r3, #2
 80056a0:	e01c      	b.n	80056dc <HAL_PCD_EP_SetStall+0xbc>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68f9      	ldr	r1, [r7, #12]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f007 fff3 	bl	800d69c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	f003 030f 	and.w	r3, r3, #15
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d108      	bne.n	80056d2 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80056ca:	4619      	mov	r1, r3
 80056cc:	4610      	mov	r0, r2
 80056ce:	f008 f9e5 	bl	800da9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	460b      	mov	r3, r1
 80056ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80056f0:	78fb      	ldrb	r3, [r7, #3]
 80056f2:	f003 020f 	and.w	r2, r3, #15
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d901      	bls.n	8005702 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e042      	b.n	8005788 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005702:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005706:	2b00      	cmp	r3, #0
 8005708:	da0f      	bge.n	800572a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800570a:	78fb      	ldrb	r3, [r7, #3]
 800570c:	f003 020f 	and.w	r2, r3, #15
 8005710:	4613      	mov	r3, r2
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	4413      	add	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	3338      	adds	r3, #56	; 0x38
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	4413      	add	r3, r2
 800571e:	3304      	adds	r3, #4
 8005720:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	705a      	strb	r2, [r3, #1]
 8005728:	e00f      	b.n	800574a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800572a:	78fb      	ldrb	r3, [r7, #3]
 800572c:	f003 020f 	and.w	r2, r3, #15
 8005730:	4613      	mov	r3, r2
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	4413      	add	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	4413      	add	r3, r2
 8005740:	3304      	adds	r3, #4
 8005742:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005750:	78fb      	ldrb	r3, [r7, #3]
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	b2da      	uxtb	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005762:	2b01      	cmp	r3, #1
 8005764:	d101      	bne.n	800576a <HAL_PCD_EP_ClrStall+0x86>
 8005766:	2302      	movs	r3, #2
 8005768:	e00e      	b.n	8005788 <HAL_PCD_EP_ClrStall+0xa4>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68f9      	ldr	r1, [r7, #12]
 8005778:	4618      	mov	r0, r3
 800577a:	f007 fffd 	bl	800d778 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	460b      	mov	r3, r1
 800579a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800579c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	da0c      	bge.n	80057be <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057a4:	78fb      	ldrb	r3, [r7, #3]
 80057a6:	f003 020f 	and.w	r2, r3, #15
 80057aa:	4613      	mov	r3, r2
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	4413      	add	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	3338      	adds	r3, #56	; 0x38
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	4413      	add	r3, r2
 80057b8:	3304      	adds	r3, #4
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	e00c      	b.n	80057d8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057be:	78fb      	ldrb	r3, [r7, #3]
 80057c0:	f003 020f 	and.w	r2, r3, #15
 80057c4:	4613      	mov	r3, r2
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	4413      	add	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	4413      	add	r3, r2
 80057d4:	3304      	adds	r3, #4
 80057d6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68f9      	ldr	r1, [r7, #12]
 80057de:	4618      	mov	r0, r3
 80057e0:	f007 fe20 	bl	800d424 <USB_EPStopXfer>
 80057e4:	4603      	mov	r3, r0
 80057e6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80057e8:	7afb      	ldrb	r3, [r7, #11]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b088      	sub	sp, #32
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	4613      	mov	r3, r2
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	4413      	add	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	3338      	adds	r3, #56	; 0x38
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	4413      	add	r3, r2
 8005816:	3304      	adds	r3, #4
 8005818:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	695a      	ldr	r2, [r3, #20]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	429a      	cmp	r2, r3
 8005824:	d901      	bls.n	800582a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e067      	b.n	80058fa <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	691a      	ldr	r2, [r3, #16]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	69fa      	ldr	r2, [r7, #28]
 800583c:	429a      	cmp	r2, r3
 800583e:	d902      	bls.n	8005846 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	3303      	adds	r3, #3
 800584a:	089b      	lsrs	r3, r3, #2
 800584c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800584e:	e026      	b.n	800589e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	69fa      	ldr	r2, [r7, #28]
 8005862:	429a      	cmp	r2, r3
 8005864:	d902      	bls.n	800586c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	3303      	adds	r3, #3
 8005870:	089b      	lsrs	r3, r3, #2
 8005872:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	68d9      	ldr	r1, [r3, #12]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	b2da      	uxtb	r2, r3
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	b29b      	uxth	r3, r3
 8005880:	6978      	ldr	r0, [r7, #20]
 8005882:	f007 fe79 	bl	800d578 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	441a      	add	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	695a      	ldr	r2, [r3, #20]
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	441a      	add	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d809      	bhi.n	80058c8 <PCD_WriteEmptyTxFifo+0xd6>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	695a      	ldr	r2, [r3, #20]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058bc:	429a      	cmp	r2, r3
 80058be:	d203      	bcs.n	80058c8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1c3      	bne.n	8005850 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	691a      	ldr	r2, [r3, #16]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d811      	bhi.n	80058f8 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	f003 030f 	and.w	r3, r3, #15
 80058da:	2201      	movs	r2, #1
 80058dc:	fa02 f303 	lsl.w	r3, r2, r3
 80058e0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	43db      	mvns	r3, r3
 80058ee:	6939      	ldr	r1, [r7, #16]
 80058f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058f4:	4013      	ands	r3, r2
 80058f6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3720      	adds	r7, #32
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	333c      	adds	r3, #60	; 0x3c
 800591c:	3304      	adds	r3, #4
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4a19      	ldr	r2, [pc, #100]	; (800599c <PCD_EP_OutXfrComplete_int+0x98>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d124      	bne.n	8005984 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00a      	beq.n	800595a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005950:	461a      	mov	r2, r3
 8005952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005956:	6093      	str	r3, [r2, #8]
 8005958:	e01a      	b.n	8005990 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	f003 0320 	and.w	r3, r3, #32
 8005960:	2b00      	cmp	r3, #0
 8005962:	d008      	beq.n	8005976 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005970:	461a      	mov	r2, r3
 8005972:	2320      	movs	r3, #32
 8005974:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	b2db      	uxtb	r3, r3
 800597a:	4619      	mov	r1, r3
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f00a fe4b 	bl	8010618 <HAL_PCD_DataOutStageCallback>
 8005982:	e005      	b.n	8005990 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	4619      	mov	r1, r3
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f00a fe44 	bl	8010618 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	4f54310a 	.word	0x4f54310a

080059a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	333c      	adds	r3, #60	; 0x3c
 80059b8:	3304      	adds	r3, #4
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4a0c      	ldr	r2, [pc, #48]	; (8005a04 <PCD_EP_OutSetupPacket_int+0x64>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d90e      	bls.n	80059f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d009      	beq.n	80059f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ec:	461a      	mov	r2, r3
 80059ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f00a fdfd 	bl	80105f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	4f54300a 	.word	0x4f54300a

08005a08 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	460b      	mov	r3, r1
 8005a12:	70fb      	strb	r3, [r7, #3]
 8005a14:	4613      	mov	r3, r2
 8005a16:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d107      	bne.n	8005a36 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005a26:	883b      	ldrh	r3, [r7, #0]
 8005a28:	0419      	lsls	r1, r3, #16
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	629a      	str	r2, [r3, #40]	; 0x28
 8005a34:	e028      	b.n	8005a88 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3c:	0c1b      	lsrs	r3, r3, #16
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	4413      	add	r3, r2
 8005a42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a44:	2300      	movs	r3, #0
 8005a46:	73fb      	strb	r3, [r7, #15]
 8005a48:	e00d      	b.n	8005a66 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
 8005a50:	3340      	adds	r3, #64	; 0x40
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	0c1b      	lsrs	r3, r3, #16
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
 8005a62:	3301      	adds	r3, #1
 8005a64:	73fb      	strb	r3, [r7, #15]
 8005a66:	7bfa      	ldrb	r2, [r7, #15]
 8005a68:	78fb      	ldrb	r3, [r7, #3]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d3ec      	bcc.n	8005a4a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005a70:	883b      	ldrh	r3, [r7, #0]
 8005a72:	0418      	lsls	r0, r3, #16
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6819      	ldr	r1, [r3, #0]
 8005a78:	78fb      	ldrb	r3, [r7, #3]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	4302      	orrs	r2, r0
 8005a80:	3340      	adds	r3, #64	; 0x40
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	440b      	add	r3, r1
 8005a86:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	887a      	ldrh	r2, [r7, #2]
 8005aa8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aea:	f043 0303 	orr.w	r3, r3, #3
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b04:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a04      	ldr	r2, [pc, #16]	; (8005b1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b0e:	6013      	str	r3, [r2, #0]
}
 8005b10:	bf00      	nop
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	40007000 	.word	0x40007000

08005b20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005b20:	b480      	push	{r7}
 8005b22:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b24:	4b0d      	ldr	r3, [pc, #52]	; (8005b5c <HAL_PWREx_GetVoltageRange+0x3c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b30:	d102      	bne.n	8005b38 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b36:	e00b      	b.n	8005b50 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005b38:	4b08      	ldr	r3, [pc, #32]	; (8005b5c <HAL_PWREx_GetVoltageRange+0x3c>)
 8005b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b46:	d102      	bne.n	8005b4e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005b48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b4c:	e000      	b.n	8005b50 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005b4e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40007000 	.word	0x40007000

08005b60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d141      	bne.n	8005bf2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b6e:	4b4b      	ldr	r3, [pc, #300]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b7a:	d131      	bne.n	8005be0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b7c:	4b47      	ldr	r3, [pc, #284]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b82:	4a46      	ldr	r2, [pc, #280]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b8c:	4b43      	ldr	r3, [pc, #268]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b94:	4a41      	ldr	r2, [pc, #260]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005b9c:	4b40      	ldr	r3, [pc, #256]	; (8005ca0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2232      	movs	r2, #50	; 0x32
 8005ba2:	fb02 f303 	mul.w	r3, r2, r3
 8005ba6:	4a3f      	ldr	r2, [pc, #252]	; (8005ca4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bac:	0c9b      	lsrs	r3, r3, #18
 8005bae:	3301      	adds	r3, #1
 8005bb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bb2:	e002      	b.n	8005bba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bba:	4b38      	ldr	r3, [pc, #224]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc6:	d102      	bne.n	8005bce <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1f2      	bne.n	8005bb4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005bce:	4b33      	ldr	r3, [pc, #204]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bda:	d158      	bne.n	8005c8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e057      	b.n	8005c90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005be0:	4b2e      	ldr	r3, [pc, #184]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005be6:	4a2d      	ldr	r2, [pc, #180]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005be8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005bf0:	e04d      	b.n	8005c8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bf8:	d141      	bne.n	8005c7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005bfa:	4b28      	ldr	r3, [pc, #160]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c06:	d131      	bne.n	8005c6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c08:	4b24      	ldr	r3, [pc, #144]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c0e:	4a23      	ldr	r2, [pc, #140]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c18:	4b20      	ldr	r3, [pc, #128]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c20:	4a1e      	ldr	r2, [pc, #120]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005c28:	4b1d      	ldr	r3, [pc, #116]	; (8005ca0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2232      	movs	r2, #50	; 0x32
 8005c2e:	fb02 f303 	mul.w	r3, r2, r3
 8005c32:	4a1c      	ldr	r2, [pc, #112]	; (8005ca4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c34:	fba2 2303 	umull	r2, r3, r2, r3
 8005c38:	0c9b      	lsrs	r3, r3, #18
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c3e:	e002      	b.n	8005c46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	3b01      	subs	r3, #1
 8005c44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c46:	4b15      	ldr	r3, [pc, #84]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c52:	d102      	bne.n	8005c5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1f2      	bne.n	8005c40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c5a:	4b10      	ldr	r3, [pc, #64]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c66:	d112      	bne.n	8005c8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e011      	b.n	8005c90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c6c:	4b0b      	ldr	r3, [pc, #44]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c72:	4a0a      	ldr	r2, [pc, #40]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005c7c:	e007      	b.n	8005c8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005c7e:	4b07      	ldr	r3, [pc, #28]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c86:	4a05      	ldr	r2, [pc, #20]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c8c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	40007000 	.word	0x40007000
 8005ca0:	20003000 	.word	0x20003000
 8005ca4:	431bde83 	.word	0x431bde83

08005ca8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005cac:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	4a04      	ldr	r2, [pc, #16]	; (8005cc4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cb6:	6053      	str	r3, [r2, #4]
}
 8005cb8:	bf00      	nop
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	40007000 	.word	0x40007000

08005cc8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005ccc:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	4a04      	ldr	r2, [pc, #16]	; (8005ce4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cd6:	6053      	str	r3, [r2, #4]
}
 8005cd8:	bf00      	nop
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	40007000 	.word	0x40007000

08005ce8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b088      	sub	sp, #32
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d102      	bne.n	8005cfc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	f000 bc08 	b.w	800650c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cfc:	4b96      	ldr	r3, [pc, #600]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f003 030c 	and.w	r3, r3, #12
 8005d04:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d06:	4b94      	ldr	r3, [pc, #592]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	f003 0303 	and.w	r3, r3, #3
 8005d0e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0310 	and.w	r3, r3, #16
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 80e4 	beq.w	8005ee6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d007      	beq.n	8005d34 <HAL_RCC_OscConfig+0x4c>
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	2b0c      	cmp	r3, #12
 8005d28:	f040 808b 	bne.w	8005e42 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	f040 8087 	bne.w	8005e42 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d34:	4b88      	ldr	r3, [pc, #544]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d005      	beq.n	8005d4c <HAL_RCC_OscConfig+0x64>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e3df      	b.n	800650c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a1a      	ldr	r2, [r3, #32]
 8005d50:	4b81      	ldr	r3, [pc, #516]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0308 	and.w	r3, r3, #8
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d004      	beq.n	8005d66 <HAL_RCC_OscConfig+0x7e>
 8005d5c:	4b7e      	ldr	r3, [pc, #504]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d64:	e005      	b.n	8005d72 <HAL_RCC_OscConfig+0x8a>
 8005d66:	4b7c      	ldr	r3, [pc, #496]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d6c:	091b      	lsrs	r3, r3, #4
 8005d6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d223      	bcs.n	8005dbe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 fdca 	bl	8006914 <RCC_SetFlashLatencyFromMSIRange>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e3c0      	b.n	800650c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d8a:	4b73      	ldr	r3, [pc, #460]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a72      	ldr	r2, [pc, #456]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005d90:	f043 0308 	orr.w	r3, r3, #8
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	4b70      	ldr	r3, [pc, #448]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	496d      	ldr	r1, [pc, #436]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005da8:	4b6b      	ldr	r3, [pc, #428]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	021b      	lsls	r3, r3, #8
 8005db6:	4968      	ldr	r1, [pc, #416]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	604b      	str	r3, [r1, #4]
 8005dbc:	e025      	b.n	8005e0a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005dbe:	4b66      	ldr	r3, [pc, #408]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a65      	ldr	r2, [pc, #404]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005dc4:	f043 0308 	orr.w	r3, r3, #8
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	4b63      	ldr	r3, [pc, #396]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	4960      	ldr	r1, [pc, #384]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ddc:	4b5e      	ldr	r3, [pc, #376]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	021b      	lsls	r3, r3, #8
 8005dea:	495b      	ldr	r1, [pc, #364]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d109      	bne.n	8005e0a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 fd8a 	bl	8006914 <RCC_SetFlashLatencyFromMSIRange>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e380      	b.n	800650c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e0a:	f000 fcc1 	bl	8006790 <HAL_RCC_GetSysClockFreq>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	4b51      	ldr	r3, [pc, #324]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	091b      	lsrs	r3, r3, #4
 8005e16:	f003 030f 	and.w	r3, r3, #15
 8005e1a:	4950      	ldr	r1, [pc, #320]	; (8005f5c <HAL_RCC_OscConfig+0x274>)
 8005e1c:	5ccb      	ldrb	r3, [r1, r3]
 8005e1e:	f003 031f 	and.w	r3, r3, #31
 8005e22:	fa22 f303 	lsr.w	r3, r2, r3
 8005e26:	4a4e      	ldr	r2, [pc, #312]	; (8005f60 <HAL_RCC_OscConfig+0x278>)
 8005e28:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005e2a:	4b4e      	ldr	r3, [pc, #312]	; (8005f64 <HAL_RCC_OscConfig+0x27c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fc fc64 	bl	80026fc <HAL_InitTick>
 8005e34:	4603      	mov	r3, r0
 8005e36:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d052      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005e3e:	7bfb      	ldrb	r3, [r7, #15]
 8005e40:	e364      	b.n	800650c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d032      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005e4a:	4b43      	ldr	r3, [pc, #268]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a42      	ldr	r2, [pc, #264]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005e50:	f043 0301 	orr.w	r3, r3, #1
 8005e54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005e56:	f7fc fca1 	bl	800279c <HAL_GetTick>
 8005e5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e5c:	e008      	b.n	8005e70 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e5e:	f7fc fc9d 	bl	800279c <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d901      	bls.n	8005e70 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e34d      	b.n	800650c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e70:	4b39      	ldr	r3, [pc, #228]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0302 	and.w	r3, r3, #2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0f0      	beq.n	8005e5e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e7c:	4b36      	ldr	r3, [pc, #216]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a35      	ldr	r2, [pc, #212]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005e82:	f043 0308 	orr.w	r3, r3, #8
 8005e86:	6013      	str	r3, [r2, #0]
 8005e88:	4b33      	ldr	r3, [pc, #204]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	4930      	ldr	r1, [pc, #192]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e9a:	4b2f      	ldr	r3, [pc, #188]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	021b      	lsls	r3, r3, #8
 8005ea8:	492b      	ldr	r1, [pc, #172]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	604b      	str	r3, [r1, #4]
 8005eae:	e01a      	b.n	8005ee6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005eb0:	4b29      	ldr	r3, [pc, #164]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a28      	ldr	r2, [pc, #160]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005eb6:	f023 0301 	bic.w	r3, r3, #1
 8005eba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ebc:	f7fc fc6e 	bl	800279c <HAL_GetTick>
 8005ec0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ec4:	f7fc fc6a 	bl	800279c <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e31a      	b.n	800650c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005ed6:	4b20      	ldr	r3, [pc, #128]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1f0      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x1dc>
 8005ee2:	e000      	b.n	8005ee6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ee4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d073      	beq.n	8005fda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	2b08      	cmp	r3, #8
 8005ef6:	d005      	beq.n	8005f04 <HAL_RCC_OscConfig+0x21c>
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	2b0c      	cmp	r3, #12
 8005efc:	d10e      	bne.n	8005f1c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2b03      	cmp	r3, #3
 8005f02:	d10b      	bne.n	8005f1c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f04:	4b14      	ldr	r3, [pc, #80]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d063      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x2f0>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d15f      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e2f7      	b.n	800650c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f24:	d106      	bne.n	8005f34 <HAL_RCC_OscConfig+0x24c>
 8005f26:	4b0c      	ldr	r3, [pc, #48]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a0b      	ldr	r2, [pc, #44]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	e025      	b.n	8005f80 <HAL_RCC_OscConfig+0x298>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f3c:	d114      	bne.n	8005f68 <HAL_RCC_OscConfig+0x280>
 8005f3e:	4b06      	ldr	r3, [pc, #24]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a05      	ldr	r2, [pc, #20]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f48:	6013      	str	r3, [r2, #0]
 8005f4a:	4b03      	ldr	r3, [pc, #12]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a02      	ldr	r2, [pc, #8]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f54:	6013      	str	r3, [r2, #0]
 8005f56:	e013      	b.n	8005f80 <HAL_RCC_OscConfig+0x298>
 8005f58:	40021000 	.word	0x40021000
 8005f5c:	0801be00 	.word	0x0801be00
 8005f60:	20003000 	.word	0x20003000
 8005f64:	20003004 	.word	0x20003004
 8005f68:	4ba0      	ldr	r3, [pc, #640]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a9f      	ldr	r2, [pc, #636]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 8005f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f72:	6013      	str	r3, [r2, #0]
 8005f74:	4b9d      	ldr	r3, [pc, #628]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a9c      	ldr	r2, [pc, #624]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 8005f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d013      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f88:	f7fc fc08 	bl	800279c <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f90:	f7fc fc04 	bl	800279c <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b64      	cmp	r3, #100	; 0x64
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e2b4      	b.n	800650c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fa2:	4b92      	ldr	r3, [pc, #584]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0f0      	beq.n	8005f90 <HAL_RCC_OscConfig+0x2a8>
 8005fae:	e014      	b.n	8005fda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb0:	f7fc fbf4 	bl	800279c <HAL_GetTick>
 8005fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fb8:	f7fc fbf0 	bl	800279c <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b64      	cmp	r3, #100	; 0x64
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e2a0      	b.n	800650c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005fca:	4b88      	ldr	r3, [pc, #544]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1f0      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x2d0>
 8005fd6:	e000      	b.n	8005fda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d060      	beq.n	80060a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	2b04      	cmp	r3, #4
 8005fea:	d005      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x310>
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	2b0c      	cmp	r3, #12
 8005ff0:	d119      	bne.n	8006026 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d116      	bne.n	8006026 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ff8:	4b7c      	ldr	r3, [pc, #496]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006000:	2b00      	cmp	r3, #0
 8006002:	d005      	beq.n	8006010 <HAL_RCC_OscConfig+0x328>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e27d      	b.n	800650c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006010:	4b76      	ldr	r3, [pc, #472]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	061b      	lsls	r3, r3, #24
 800601e:	4973      	ldr	r1, [pc, #460]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 8006020:	4313      	orrs	r3, r2
 8006022:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006024:	e040      	b.n	80060a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d023      	beq.n	8006076 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800602e:	4b6f      	ldr	r3, [pc, #444]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a6e      	ldr	r2, [pc, #440]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 8006034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603a:	f7fc fbaf 	bl	800279c <HAL_GetTick>
 800603e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006040:	e008      	b.n	8006054 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006042:	f7fc fbab 	bl	800279c <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	2b02      	cmp	r3, #2
 800604e:	d901      	bls.n	8006054 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e25b      	b.n	800650c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006054:	4b65      	ldr	r3, [pc, #404]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800605c:	2b00      	cmp	r3, #0
 800605e:	d0f0      	beq.n	8006042 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006060:	4b62      	ldr	r3, [pc, #392]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	061b      	lsls	r3, r3, #24
 800606e:	495f      	ldr	r1, [pc, #380]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 8006070:	4313      	orrs	r3, r2
 8006072:	604b      	str	r3, [r1, #4]
 8006074:	e018      	b.n	80060a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006076:	4b5d      	ldr	r3, [pc, #372]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a5c      	ldr	r2, [pc, #368]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 800607c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006082:	f7fc fb8b 	bl	800279c <HAL_GetTick>
 8006086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006088:	e008      	b.n	800609c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800608a:	f7fc fb87 	bl	800279c <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d901      	bls.n	800609c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e237      	b.n	800650c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800609c:	4b53      	ldr	r3, [pc, #332]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1f0      	bne.n	800608a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d03c      	beq.n	800612e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d01c      	beq.n	80060f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060bc:	4b4b      	ldr	r3, [pc, #300]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 80060be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060c2:	4a4a      	ldr	r2, [pc, #296]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 80060c4:	f043 0301 	orr.w	r3, r3, #1
 80060c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060cc:	f7fc fb66 	bl	800279c <HAL_GetTick>
 80060d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060d2:	e008      	b.n	80060e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060d4:	f7fc fb62 	bl	800279c <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d901      	bls.n	80060e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e212      	b.n	800650c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060e6:	4b41      	ldr	r3, [pc, #260]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 80060e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0ef      	beq.n	80060d4 <HAL_RCC_OscConfig+0x3ec>
 80060f4:	e01b      	b.n	800612e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060f6:	4b3d      	ldr	r3, [pc, #244]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 80060f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060fc:	4a3b      	ldr	r2, [pc, #236]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 80060fe:	f023 0301 	bic.w	r3, r3, #1
 8006102:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006106:	f7fc fb49 	bl	800279c <HAL_GetTick>
 800610a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800610c:	e008      	b.n	8006120 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800610e:	f7fc fb45 	bl	800279c <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	2b02      	cmp	r3, #2
 800611a:	d901      	bls.n	8006120 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e1f5      	b.n	800650c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006120:	4b32      	ldr	r3, [pc, #200]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 8006122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1ef      	bne.n	800610e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0304 	and.w	r3, r3, #4
 8006136:	2b00      	cmp	r3, #0
 8006138:	f000 80a6 	beq.w	8006288 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800613c:	2300      	movs	r3, #0
 800613e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006140:	4b2a      	ldr	r3, [pc, #168]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 8006142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10d      	bne.n	8006168 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800614c:	4b27      	ldr	r3, [pc, #156]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 800614e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006150:	4a26      	ldr	r2, [pc, #152]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 8006152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006156:	6593      	str	r3, [r2, #88]	; 0x58
 8006158:	4b24      	ldr	r3, [pc, #144]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 800615a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800615c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006160:	60bb      	str	r3, [r7, #8]
 8006162:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006164:	2301      	movs	r3, #1
 8006166:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006168:	4b21      	ldr	r3, [pc, #132]	; (80061f0 <HAL_RCC_OscConfig+0x508>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006170:	2b00      	cmp	r3, #0
 8006172:	d118      	bne.n	80061a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006174:	4b1e      	ldr	r3, [pc, #120]	; (80061f0 <HAL_RCC_OscConfig+0x508>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a1d      	ldr	r2, [pc, #116]	; (80061f0 <HAL_RCC_OscConfig+0x508>)
 800617a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800617e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006180:	f7fc fb0c 	bl	800279c <HAL_GetTick>
 8006184:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006186:	e008      	b.n	800619a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006188:	f7fc fb08 	bl	800279c <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e1b8      	b.n	800650c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800619a:	4b15      	ldr	r3, [pc, #84]	; (80061f0 <HAL_RCC_OscConfig+0x508>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0f0      	beq.n	8006188 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d108      	bne.n	80061c0 <HAL_RCC_OscConfig+0x4d8>
 80061ae:	4b0f      	ldr	r3, [pc, #60]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 80061b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b4:	4a0d      	ldr	r2, [pc, #52]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 80061b6:	f043 0301 	orr.w	r3, r3, #1
 80061ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061be:	e029      	b.n	8006214 <HAL_RCC_OscConfig+0x52c>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	2b05      	cmp	r3, #5
 80061c6:	d115      	bne.n	80061f4 <HAL_RCC_OscConfig+0x50c>
 80061c8:	4b08      	ldr	r3, [pc, #32]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 80061ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ce:	4a07      	ldr	r2, [pc, #28]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 80061d0:	f043 0304 	orr.w	r3, r3, #4
 80061d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061d8:	4b04      	ldr	r3, [pc, #16]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 80061da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061de:	4a03      	ldr	r2, [pc, #12]	; (80061ec <HAL_RCC_OscConfig+0x504>)
 80061e0:	f043 0301 	orr.w	r3, r3, #1
 80061e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061e8:	e014      	b.n	8006214 <HAL_RCC_OscConfig+0x52c>
 80061ea:	bf00      	nop
 80061ec:	40021000 	.word	0x40021000
 80061f0:	40007000 	.word	0x40007000
 80061f4:	4b9d      	ldr	r3, [pc, #628]	; (800646c <HAL_RCC_OscConfig+0x784>)
 80061f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fa:	4a9c      	ldr	r2, [pc, #624]	; (800646c <HAL_RCC_OscConfig+0x784>)
 80061fc:	f023 0301 	bic.w	r3, r3, #1
 8006200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006204:	4b99      	ldr	r3, [pc, #612]	; (800646c <HAL_RCC_OscConfig+0x784>)
 8006206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620a:	4a98      	ldr	r2, [pc, #608]	; (800646c <HAL_RCC_OscConfig+0x784>)
 800620c:	f023 0304 	bic.w	r3, r3, #4
 8006210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d016      	beq.n	800624a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800621c:	f7fc fabe 	bl	800279c <HAL_GetTick>
 8006220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006222:	e00a      	b.n	800623a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006224:	f7fc faba 	bl	800279c <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006232:	4293      	cmp	r3, r2
 8006234:	d901      	bls.n	800623a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e168      	b.n	800650c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800623a:	4b8c      	ldr	r3, [pc, #560]	; (800646c <HAL_RCC_OscConfig+0x784>)
 800623c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0ed      	beq.n	8006224 <HAL_RCC_OscConfig+0x53c>
 8006248:	e015      	b.n	8006276 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800624a:	f7fc faa7 	bl	800279c <HAL_GetTick>
 800624e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006250:	e00a      	b.n	8006268 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006252:	f7fc faa3 	bl	800279c <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006260:	4293      	cmp	r3, r2
 8006262:	d901      	bls.n	8006268 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e151      	b.n	800650c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006268:	4b80      	ldr	r3, [pc, #512]	; (800646c <HAL_RCC_OscConfig+0x784>)
 800626a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1ed      	bne.n	8006252 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006276:	7ffb      	ldrb	r3, [r7, #31]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d105      	bne.n	8006288 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800627c:	4b7b      	ldr	r3, [pc, #492]	; (800646c <HAL_RCC_OscConfig+0x784>)
 800627e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006280:	4a7a      	ldr	r2, [pc, #488]	; (800646c <HAL_RCC_OscConfig+0x784>)
 8006282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006286:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0320 	and.w	r3, r3, #32
 8006290:	2b00      	cmp	r3, #0
 8006292:	d03c      	beq.n	800630e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	2b00      	cmp	r3, #0
 800629a:	d01c      	beq.n	80062d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800629c:	4b73      	ldr	r3, [pc, #460]	; (800646c <HAL_RCC_OscConfig+0x784>)
 800629e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062a2:	4a72      	ldr	r2, [pc, #456]	; (800646c <HAL_RCC_OscConfig+0x784>)
 80062a4:	f043 0301 	orr.w	r3, r3, #1
 80062a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ac:	f7fc fa76 	bl	800279c <HAL_GetTick>
 80062b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062b4:	f7fc fa72 	bl	800279c <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e122      	b.n	800650c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80062c6:	4b69      	ldr	r3, [pc, #420]	; (800646c <HAL_RCC_OscConfig+0x784>)
 80062c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d0ef      	beq.n	80062b4 <HAL_RCC_OscConfig+0x5cc>
 80062d4:	e01b      	b.n	800630e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80062d6:	4b65      	ldr	r3, [pc, #404]	; (800646c <HAL_RCC_OscConfig+0x784>)
 80062d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062dc:	4a63      	ldr	r2, [pc, #396]	; (800646c <HAL_RCC_OscConfig+0x784>)
 80062de:	f023 0301 	bic.w	r3, r3, #1
 80062e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062e6:	f7fc fa59 	bl	800279c <HAL_GetTick>
 80062ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80062ec:	e008      	b.n	8006300 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062ee:	f7fc fa55 	bl	800279c <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d901      	bls.n	8006300 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e105      	b.n	800650c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006300:	4b5a      	ldr	r3, [pc, #360]	; (800646c <HAL_RCC_OscConfig+0x784>)
 8006302:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1ef      	bne.n	80062ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 80f9 	beq.w	800650a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631c:	2b02      	cmp	r3, #2
 800631e:	f040 80cf 	bne.w	80064c0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006322:	4b52      	ldr	r3, [pc, #328]	; (800646c <HAL_RCC_OscConfig+0x784>)
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f003 0203 	and.w	r2, r3, #3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006332:	429a      	cmp	r2, r3
 8006334:	d12c      	bne.n	8006390 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006340:	3b01      	subs	r3, #1
 8006342:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006344:	429a      	cmp	r2, r3
 8006346:	d123      	bne.n	8006390 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006352:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006354:	429a      	cmp	r2, r3
 8006356:	d11b      	bne.n	8006390 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006362:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006364:	429a      	cmp	r2, r3
 8006366:	d113      	bne.n	8006390 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006372:	085b      	lsrs	r3, r3, #1
 8006374:	3b01      	subs	r3, #1
 8006376:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006378:	429a      	cmp	r2, r3
 800637a:	d109      	bne.n	8006390 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	085b      	lsrs	r3, r3, #1
 8006388:	3b01      	subs	r3, #1
 800638a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800638c:	429a      	cmp	r2, r3
 800638e:	d071      	beq.n	8006474 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	2b0c      	cmp	r3, #12
 8006394:	d068      	beq.n	8006468 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006396:	4b35      	ldr	r3, [pc, #212]	; (800646c <HAL_RCC_OscConfig+0x784>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d105      	bne.n	80063ae <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80063a2:	4b32      	ldr	r3, [pc, #200]	; (800646c <HAL_RCC_OscConfig+0x784>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e0ac      	b.n	800650c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80063b2:	4b2e      	ldr	r3, [pc, #184]	; (800646c <HAL_RCC_OscConfig+0x784>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a2d      	ldr	r2, [pc, #180]	; (800646c <HAL_RCC_OscConfig+0x784>)
 80063b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063bc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80063be:	f7fc f9ed 	bl	800279c <HAL_GetTick>
 80063c2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063c4:	e008      	b.n	80063d8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063c6:	f7fc f9e9 	bl	800279c <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d901      	bls.n	80063d8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e099      	b.n	800650c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063d8:	4b24      	ldr	r3, [pc, #144]	; (800646c <HAL_RCC_OscConfig+0x784>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1f0      	bne.n	80063c6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063e4:	4b21      	ldr	r3, [pc, #132]	; (800646c <HAL_RCC_OscConfig+0x784>)
 80063e6:	68da      	ldr	r2, [r3, #12]
 80063e8:	4b21      	ldr	r3, [pc, #132]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 80063ea:	4013      	ands	r3, r2
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80063f4:	3a01      	subs	r2, #1
 80063f6:	0112      	lsls	r2, r2, #4
 80063f8:	4311      	orrs	r1, r2
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80063fe:	0212      	lsls	r2, r2, #8
 8006400:	4311      	orrs	r1, r2
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006406:	0852      	lsrs	r2, r2, #1
 8006408:	3a01      	subs	r2, #1
 800640a:	0552      	lsls	r2, r2, #21
 800640c:	4311      	orrs	r1, r2
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006412:	0852      	lsrs	r2, r2, #1
 8006414:	3a01      	subs	r2, #1
 8006416:	0652      	lsls	r2, r2, #25
 8006418:	4311      	orrs	r1, r2
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800641e:	06d2      	lsls	r2, r2, #27
 8006420:	430a      	orrs	r2, r1
 8006422:	4912      	ldr	r1, [pc, #72]	; (800646c <HAL_RCC_OscConfig+0x784>)
 8006424:	4313      	orrs	r3, r2
 8006426:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006428:	4b10      	ldr	r3, [pc, #64]	; (800646c <HAL_RCC_OscConfig+0x784>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a0f      	ldr	r2, [pc, #60]	; (800646c <HAL_RCC_OscConfig+0x784>)
 800642e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006432:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006434:	4b0d      	ldr	r3, [pc, #52]	; (800646c <HAL_RCC_OscConfig+0x784>)
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	4a0c      	ldr	r2, [pc, #48]	; (800646c <HAL_RCC_OscConfig+0x784>)
 800643a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800643e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006440:	f7fc f9ac 	bl	800279c <HAL_GetTick>
 8006444:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006446:	e008      	b.n	800645a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006448:	f7fc f9a8 	bl	800279c <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b02      	cmp	r3, #2
 8006454:	d901      	bls.n	800645a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e058      	b.n	800650c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800645a:	4b04      	ldr	r3, [pc, #16]	; (800646c <HAL_RCC_OscConfig+0x784>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d0f0      	beq.n	8006448 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006466:	e050      	b.n	800650a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e04f      	b.n	800650c <HAL_RCC_OscConfig+0x824>
 800646c:	40021000 	.word	0x40021000
 8006470:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006474:	4b27      	ldr	r3, [pc, #156]	; (8006514 <HAL_RCC_OscConfig+0x82c>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d144      	bne.n	800650a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006480:	4b24      	ldr	r3, [pc, #144]	; (8006514 <HAL_RCC_OscConfig+0x82c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a23      	ldr	r2, [pc, #140]	; (8006514 <HAL_RCC_OscConfig+0x82c>)
 8006486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800648a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800648c:	4b21      	ldr	r3, [pc, #132]	; (8006514 <HAL_RCC_OscConfig+0x82c>)
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	4a20      	ldr	r2, [pc, #128]	; (8006514 <HAL_RCC_OscConfig+0x82c>)
 8006492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006496:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006498:	f7fc f980 	bl	800279c <HAL_GetTick>
 800649c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800649e:	e008      	b.n	80064b2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064a0:	f7fc f97c 	bl	800279c <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e02c      	b.n	800650c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064b2:	4b18      	ldr	r3, [pc, #96]	; (8006514 <HAL_RCC_OscConfig+0x82c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d0f0      	beq.n	80064a0 <HAL_RCC_OscConfig+0x7b8>
 80064be:	e024      	b.n	800650a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	2b0c      	cmp	r3, #12
 80064c4:	d01f      	beq.n	8006506 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064c6:	4b13      	ldr	r3, [pc, #76]	; (8006514 <HAL_RCC_OscConfig+0x82c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a12      	ldr	r2, [pc, #72]	; (8006514 <HAL_RCC_OscConfig+0x82c>)
 80064cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d2:	f7fc f963 	bl	800279c <HAL_GetTick>
 80064d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064d8:	e008      	b.n	80064ec <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064da:	f7fc f95f 	bl	800279c <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d901      	bls.n	80064ec <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e00f      	b.n	800650c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064ec:	4b09      	ldr	r3, [pc, #36]	; (8006514 <HAL_RCC_OscConfig+0x82c>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1f0      	bne.n	80064da <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80064f8:	4b06      	ldr	r3, [pc, #24]	; (8006514 <HAL_RCC_OscConfig+0x82c>)
 80064fa:	68da      	ldr	r2, [r3, #12]
 80064fc:	4905      	ldr	r1, [pc, #20]	; (8006514 <HAL_RCC_OscConfig+0x82c>)
 80064fe:	4b06      	ldr	r3, [pc, #24]	; (8006518 <HAL_RCC_OscConfig+0x830>)
 8006500:	4013      	ands	r3, r2
 8006502:	60cb      	str	r3, [r1, #12]
 8006504:	e001      	b.n	800650a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e000      	b.n	800650c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3720      	adds	r7, #32
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	40021000 	.word	0x40021000
 8006518:	feeefffc 	.word	0xfeeefffc

0800651c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006526:	2300      	movs	r3, #0
 8006528:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e11d      	b.n	8006770 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006534:	4b90      	ldr	r3, [pc, #576]	; (8006778 <HAL_RCC_ClockConfig+0x25c>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 030f 	and.w	r3, r3, #15
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	429a      	cmp	r2, r3
 8006540:	d910      	bls.n	8006564 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006542:	4b8d      	ldr	r3, [pc, #564]	; (8006778 <HAL_RCC_ClockConfig+0x25c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f023 020f 	bic.w	r2, r3, #15
 800654a:	498b      	ldr	r1, [pc, #556]	; (8006778 <HAL_RCC_ClockConfig+0x25c>)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	4313      	orrs	r3, r2
 8006550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006552:	4b89      	ldr	r3, [pc, #548]	; (8006778 <HAL_RCC_ClockConfig+0x25c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 030f 	and.w	r3, r3, #15
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	429a      	cmp	r2, r3
 800655e:	d001      	beq.n	8006564 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e105      	b.n	8006770 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d010      	beq.n	8006592 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	689a      	ldr	r2, [r3, #8]
 8006574:	4b81      	ldr	r3, [pc, #516]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800657c:	429a      	cmp	r2, r3
 800657e:	d908      	bls.n	8006592 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006580:	4b7e      	ldr	r3, [pc, #504]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	497b      	ldr	r1, [pc, #492]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 800658e:	4313      	orrs	r3, r2
 8006590:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b00      	cmp	r3, #0
 800659c:	d079      	beq.n	8006692 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d11e      	bne.n	80065e4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065a6:	4b75      	ldr	r3, [pc, #468]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e0dc      	b.n	8006770 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80065b6:	f000 fa07 	bl	80069c8 <RCC_GetSysClockFreqFromPLLSource>
 80065ba:	4603      	mov	r3, r0
 80065bc:	4a70      	ldr	r2, [pc, #448]	; (8006780 <HAL_RCC_ClockConfig+0x264>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d946      	bls.n	8006650 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80065c2:	4b6e      	ldr	r3, [pc, #440]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d140      	bne.n	8006650 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80065ce:	4b6b      	ldr	r3, [pc, #428]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065d6:	4a69      	ldr	r2, [pc, #420]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 80065d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80065de:	2380      	movs	r3, #128	; 0x80
 80065e0:	617b      	str	r3, [r7, #20]
 80065e2:	e035      	b.n	8006650 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d107      	bne.n	80065fc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065ec:	4b63      	ldr	r3, [pc, #396]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d115      	bne.n	8006624 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e0b9      	b.n	8006770 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d107      	bne.n	8006614 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006604:	4b5d      	ldr	r3, [pc, #372]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d109      	bne.n	8006624 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e0ad      	b.n	8006770 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006614:	4b59      	ldr	r3, [pc, #356]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e0a5      	b.n	8006770 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006624:	f000 f8b4 	bl	8006790 <HAL_RCC_GetSysClockFreq>
 8006628:	4603      	mov	r3, r0
 800662a:	4a55      	ldr	r2, [pc, #340]	; (8006780 <HAL_RCC_ClockConfig+0x264>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d90f      	bls.n	8006650 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006630:	4b52      	ldr	r3, [pc, #328]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d109      	bne.n	8006650 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800663c:	4b4f      	ldr	r3, [pc, #316]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006644:	4a4d      	ldr	r2, [pc, #308]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 8006646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800664a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800664c:	2380      	movs	r3, #128	; 0x80
 800664e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006650:	4b4a      	ldr	r3, [pc, #296]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f023 0203 	bic.w	r2, r3, #3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	4947      	ldr	r1, [pc, #284]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 800665e:	4313      	orrs	r3, r2
 8006660:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006662:	f7fc f89b 	bl	800279c <HAL_GetTick>
 8006666:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006668:	e00a      	b.n	8006680 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800666a:	f7fc f897 	bl	800279c <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	f241 3288 	movw	r2, #5000	; 0x1388
 8006678:	4293      	cmp	r3, r2
 800667a:	d901      	bls.n	8006680 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e077      	b.n	8006770 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006680:	4b3e      	ldr	r3, [pc, #248]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f003 020c 	and.w	r2, r3, #12
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	429a      	cmp	r2, r3
 8006690:	d1eb      	bne.n	800666a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	2b80      	cmp	r3, #128	; 0x80
 8006696:	d105      	bne.n	80066a4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006698:	4b38      	ldr	r3, [pc, #224]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	4a37      	ldr	r2, [pc, #220]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 800669e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066a2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0302 	and.w	r3, r3, #2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d010      	beq.n	80066d2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	4b31      	ldr	r3, [pc, #196]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066bc:	429a      	cmp	r2, r3
 80066be:	d208      	bcs.n	80066d2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066c0:	4b2e      	ldr	r3, [pc, #184]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	492b      	ldr	r1, [pc, #172]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066d2:	4b29      	ldr	r3, [pc, #164]	; (8006778 <HAL_RCC_ClockConfig+0x25c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 030f 	and.w	r3, r3, #15
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d210      	bcs.n	8006702 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066e0:	4b25      	ldr	r3, [pc, #148]	; (8006778 <HAL_RCC_ClockConfig+0x25c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f023 020f 	bic.w	r2, r3, #15
 80066e8:	4923      	ldr	r1, [pc, #140]	; (8006778 <HAL_RCC_ClockConfig+0x25c>)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066f0:	4b21      	ldr	r3, [pc, #132]	; (8006778 <HAL_RCC_ClockConfig+0x25c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 030f 	and.w	r3, r3, #15
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d001      	beq.n	8006702 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e036      	b.n	8006770 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0304 	and.w	r3, r3, #4
 800670a:	2b00      	cmp	r3, #0
 800670c:	d008      	beq.n	8006720 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800670e:	4b1b      	ldr	r3, [pc, #108]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	4918      	ldr	r1, [pc, #96]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 800671c:	4313      	orrs	r3, r2
 800671e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0308 	and.w	r3, r3, #8
 8006728:	2b00      	cmp	r3, #0
 800672a:	d009      	beq.n	8006740 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800672c:	4b13      	ldr	r3, [pc, #76]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	00db      	lsls	r3, r3, #3
 800673a:	4910      	ldr	r1, [pc, #64]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 800673c:	4313      	orrs	r3, r2
 800673e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006740:	f000 f826 	bl	8006790 <HAL_RCC_GetSysClockFreq>
 8006744:	4602      	mov	r2, r0
 8006746:	4b0d      	ldr	r3, [pc, #52]	; (800677c <HAL_RCC_ClockConfig+0x260>)
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	091b      	lsrs	r3, r3, #4
 800674c:	f003 030f 	and.w	r3, r3, #15
 8006750:	490c      	ldr	r1, [pc, #48]	; (8006784 <HAL_RCC_ClockConfig+0x268>)
 8006752:	5ccb      	ldrb	r3, [r1, r3]
 8006754:	f003 031f 	and.w	r3, r3, #31
 8006758:	fa22 f303 	lsr.w	r3, r2, r3
 800675c:	4a0a      	ldr	r2, [pc, #40]	; (8006788 <HAL_RCC_ClockConfig+0x26c>)
 800675e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006760:	4b0a      	ldr	r3, [pc, #40]	; (800678c <HAL_RCC_ClockConfig+0x270>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4618      	mov	r0, r3
 8006766:	f7fb ffc9 	bl	80026fc <HAL_InitTick>
 800676a:	4603      	mov	r3, r0
 800676c:	73fb      	strb	r3, [r7, #15]

  return status;
 800676e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3718      	adds	r7, #24
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	40022000 	.word	0x40022000
 800677c:	40021000 	.word	0x40021000
 8006780:	04c4b400 	.word	0x04c4b400
 8006784:	0801be00 	.word	0x0801be00
 8006788:	20003000 	.word	0x20003000
 800678c:	20003004 	.word	0x20003004

08006790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006790:	b480      	push	{r7}
 8006792:	b089      	sub	sp, #36	; 0x24
 8006794:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006796:	2300      	movs	r3, #0
 8006798:	61fb      	str	r3, [r7, #28]
 800679a:	2300      	movs	r3, #0
 800679c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800679e:	4b3e      	ldr	r3, [pc, #248]	; (8006898 <HAL_RCC_GetSysClockFreq+0x108>)
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f003 030c 	and.w	r3, r3, #12
 80067a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067a8:	4b3b      	ldr	r3, [pc, #236]	; (8006898 <HAL_RCC_GetSysClockFreq+0x108>)
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f003 0303 	and.w	r3, r3, #3
 80067b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d005      	beq.n	80067c4 <HAL_RCC_GetSysClockFreq+0x34>
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	2b0c      	cmp	r3, #12
 80067bc:	d121      	bne.n	8006802 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d11e      	bne.n	8006802 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80067c4:	4b34      	ldr	r3, [pc, #208]	; (8006898 <HAL_RCC_GetSysClockFreq+0x108>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0308 	and.w	r3, r3, #8
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d107      	bne.n	80067e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80067d0:	4b31      	ldr	r3, [pc, #196]	; (8006898 <HAL_RCC_GetSysClockFreq+0x108>)
 80067d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067d6:	0a1b      	lsrs	r3, r3, #8
 80067d8:	f003 030f 	and.w	r3, r3, #15
 80067dc:	61fb      	str	r3, [r7, #28]
 80067de:	e005      	b.n	80067ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80067e0:	4b2d      	ldr	r3, [pc, #180]	; (8006898 <HAL_RCC_GetSysClockFreq+0x108>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	091b      	lsrs	r3, r3, #4
 80067e6:	f003 030f 	and.w	r3, r3, #15
 80067ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80067ec:	4a2b      	ldr	r2, [pc, #172]	; (800689c <HAL_RCC_GetSysClockFreq+0x10c>)
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10d      	bne.n	8006818 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006800:	e00a      	b.n	8006818 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	2b04      	cmp	r3, #4
 8006806:	d102      	bne.n	800680e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006808:	4b25      	ldr	r3, [pc, #148]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800680a:	61bb      	str	r3, [r7, #24]
 800680c:	e004      	b.n	8006818 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	2b08      	cmp	r3, #8
 8006812:	d101      	bne.n	8006818 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006814:	4b22      	ldr	r3, [pc, #136]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006816:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	2b0c      	cmp	r3, #12
 800681c:	d134      	bne.n	8006888 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800681e:	4b1e      	ldr	r3, [pc, #120]	; (8006898 <HAL_RCC_GetSysClockFreq+0x108>)
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f003 0303 	and.w	r3, r3, #3
 8006826:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2b02      	cmp	r3, #2
 800682c:	d003      	beq.n	8006836 <HAL_RCC_GetSysClockFreq+0xa6>
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2b03      	cmp	r3, #3
 8006832:	d003      	beq.n	800683c <HAL_RCC_GetSysClockFreq+0xac>
 8006834:	e005      	b.n	8006842 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006836:	4b1a      	ldr	r3, [pc, #104]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006838:	617b      	str	r3, [r7, #20]
      break;
 800683a:	e005      	b.n	8006848 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800683c:	4b18      	ldr	r3, [pc, #96]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800683e:	617b      	str	r3, [r7, #20]
      break;
 8006840:	e002      	b.n	8006848 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	617b      	str	r3, [r7, #20]
      break;
 8006846:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006848:	4b13      	ldr	r3, [pc, #76]	; (8006898 <HAL_RCC_GetSysClockFreq+0x108>)
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	091b      	lsrs	r3, r3, #4
 800684e:	f003 030f 	and.w	r3, r3, #15
 8006852:	3301      	adds	r3, #1
 8006854:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006856:	4b10      	ldr	r3, [pc, #64]	; (8006898 <HAL_RCC_GetSysClockFreq+0x108>)
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	0a1b      	lsrs	r3, r3, #8
 800685c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	fb03 f202 	mul.w	r2, r3, r2
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	fbb2 f3f3 	udiv	r3, r2, r3
 800686c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800686e:	4b0a      	ldr	r3, [pc, #40]	; (8006898 <HAL_RCC_GetSysClockFreq+0x108>)
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	0e5b      	lsrs	r3, r3, #25
 8006874:	f003 0303 	and.w	r3, r3, #3
 8006878:	3301      	adds	r3, #1
 800687a:	005b      	lsls	r3, r3, #1
 800687c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	fbb2 f3f3 	udiv	r3, r2, r3
 8006886:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006888:	69bb      	ldr	r3, [r7, #24]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3724      	adds	r7, #36	; 0x24
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	40021000 	.word	0x40021000
 800689c:	0801be18 	.word	0x0801be18
 80068a0:	00f42400 	.word	0x00f42400

080068a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068a4:	b480      	push	{r7}
 80068a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068a8:	4b03      	ldr	r3, [pc, #12]	; (80068b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80068aa:	681b      	ldr	r3, [r3, #0]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	20003000 	.word	0x20003000

080068bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80068c0:	f7ff fff0 	bl	80068a4 <HAL_RCC_GetHCLKFreq>
 80068c4:	4602      	mov	r2, r0
 80068c6:	4b06      	ldr	r3, [pc, #24]	; (80068e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	0a1b      	lsrs	r3, r3, #8
 80068cc:	f003 0307 	and.w	r3, r3, #7
 80068d0:	4904      	ldr	r1, [pc, #16]	; (80068e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80068d2:	5ccb      	ldrb	r3, [r1, r3]
 80068d4:	f003 031f 	and.w	r3, r3, #31
 80068d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068dc:	4618      	mov	r0, r3
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	40021000 	.word	0x40021000
 80068e4:	0801be10 	.word	0x0801be10

080068e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80068ec:	f7ff ffda 	bl	80068a4 <HAL_RCC_GetHCLKFreq>
 80068f0:	4602      	mov	r2, r0
 80068f2:	4b06      	ldr	r3, [pc, #24]	; (800690c <HAL_RCC_GetPCLK2Freq+0x24>)
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	0adb      	lsrs	r3, r3, #11
 80068f8:	f003 0307 	and.w	r3, r3, #7
 80068fc:	4904      	ldr	r1, [pc, #16]	; (8006910 <HAL_RCC_GetPCLK2Freq+0x28>)
 80068fe:	5ccb      	ldrb	r3, [r1, r3]
 8006900:	f003 031f 	and.w	r3, r3, #31
 8006904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006908:	4618      	mov	r0, r3
 800690a:	bd80      	pop	{r7, pc}
 800690c:	40021000 	.word	0x40021000
 8006910:	0801be10 	.word	0x0801be10

08006914 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b086      	sub	sp, #24
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800691c:	2300      	movs	r3, #0
 800691e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006920:	4b27      	ldr	r3, [pc, #156]	; (80069c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800692c:	f7ff f8f8 	bl	8005b20 <HAL_PWREx_GetVoltageRange>
 8006930:	6178      	str	r0, [r7, #20]
 8006932:	e014      	b.n	800695e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006934:	4b22      	ldr	r3, [pc, #136]	; (80069c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006938:	4a21      	ldr	r2, [pc, #132]	; (80069c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800693a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800693e:	6593      	str	r3, [r2, #88]	; 0x58
 8006940:	4b1f      	ldr	r3, [pc, #124]	; (80069c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006948:	60fb      	str	r3, [r7, #12]
 800694a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800694c:	f7ff f8e8 	bl	8005b20 <HAL_PWREx_GetVoltageRange>
 8006950:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006952:	4b1b      	ldr	r3, [pc, #108]	; (80069c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006956:	4a1a      	ldr	r2, [pc, #104]	; (80069c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800695c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006964:	d10b      	bne.n	800697e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b80      	cmp	r3, #128	; 0x80
 800696a:	d913      	bls.n	8006994 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2ba0      	cmp	r3, #160	; 0xa0
 8006970:	d902      	bls.n	8006978 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006972:	2302      	movs	r3, #2
 8006974:	613b      	str	r3, [r7, #16]
 8006976:	e00d      	b.n	8006994 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006978:	2301      	movs	r3, #1
 800697a:	613b      	str	r3, [r7, #16]
 800697c:	e00a      	b.n	8006994 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2b7f      	cmp	r3, #127	; 0x7f
 8006982:	d902      	bls.n	800698a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006984:	2302      	movs	r3, #2
 8006986:	613b      	str	r3, [r7, #16]
 8006988:	e004      	b.n	8006994 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2b70      	cmp	r3, #112	; 0x70
 800698e:	d101      	bne.n	8006994 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006990:	2301      	movs	r3, #1
 8006992:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006994:	4b0b      	ldr	r3, [pc, #44]	; (80069c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f023 020f 	bic.w	r2, r3, #15
 800699c:	4909      	ldr	r1, [pc, #36]	; (80069c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80069a4:	4b07      	ldr	r3, [pc, #28]	; (80069c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 030f 	and.w	r3, r3, #15
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d001      	beq.n	80069b6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e000      	b.n	80069b8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3718      	adds	r7, #24
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	40021000 	.word	0x40021000
 80069c4:	40022000 	.word	0x40022000

080069c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80069ce:	4b2d      	ldr	r3, [pc, #180]	; (8006a84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f003 0303 	and.w	r3, r3, #3
 80069d6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2b03      	cmp	r3, #3
 80069dc:	d00b      	beq.n	80069f6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2b03      	cmp	r3, #3
 80069e2:	d825      	bhi.n	8006a30 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d008      	beq.n	80069fc <RCC_GetSysClockFreqFromPLLSource+0x34>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d11f      	bne.n	8006a30 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80069f0:	4b25      	ldr	r3, [pc, #148]	; (8006a88 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80069f2:	613b      	str	r3, [r7, #16]
    break;
 80069f4:	e01f      	b.n	8006a36 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80069f6:	4b24      	ldr	r3, [pc, #144]	; (8006a88 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80069f8:	613b      	str	r3, [r7, #16]
    break;
 80069fa:	e01c      	b.n	8006a36 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80069fc:	4b21      	ldr	r3, [pc, #132]	; (8006a84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0308 	and.w	r3, r3, #8
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d107      	bne.n	8006a18 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006a08:	4b1e      	ldr	r3, [pc, #120]	; (8006a84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a0e:	0a1b      	lsrs	r3, r3, #8
 8006a10:	f003 030f 	and.w	r3, r3, #15
 8006a14:	617b      	str	r3, [r7, #20]
 8006a16:	e005      	b.n	8006a24 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006a18:	4b1a      	ldr	r3, [pc, #104]	; (8006a84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	091b      	lsrs	r3, r3, #4
 8006a1e:	f003 030f 	and.w	r3, r3, #15
 8006a22:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006a24:	4a19      	ldr	r2, [pc, #100]	; (8006a8c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a2c:	613b      	str	r3, [r7, #16]
    break;
 8006a2e:	e002      	b.n	8006a36 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006a30:	2300      	movs	r3, #0
 8006a32:	613b      	str	r3, [r7, #16]
    break;
 8006a34:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a36:	4b13      	ldr	r3, [pc, #76]	; (8006a84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	091b      	lsrs	r3, r3, #4
 8006a3c:	f003 030f 	and.w	r3, r3, #15
 8006a40:	3301      	adds	r3, #1
 8006a42:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006a44:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	0a1b      	lsrs	r3, r3, #8
 8006a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	fb03 f202 	mul.w	r2, r3, r2
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006a5c:	4b09      	ldr	r3, [pc, #36]	; (8006a84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	0e5b      	lsrs	r3, r3, #25
 8006a62:	f003 0303 	and.w	r3, r3, #3
 8006a66:	3301      	adds	r3, #1
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a74:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006a76:	683b      	ldr	r3, [r7, #0]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	371c      	adds	r7, #28
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	40021000 	.word	0x40021000
 8006a88:	00f42400 	.word	0x00f42400
 8006a8c:	0801be18 	.word	0x0801be18

08006a90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a98:	2300      	movs	r3, #0
 8006a9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d040      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ab0:	2b80      	cmp	r3, #128	; 0x80
 8006ab2:	d02a      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006ab4:	2b80      	cmp	r3, #128	; 0x80
 8006ab6:	d825      	bhi.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006ab8:	2b60      	cmp	r3, #96	; 0x60
 8006aba:	d026      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006abc:	2b60      	cmp	r3, #96	; 0x60
 8006abe:	d821      	bhi.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006ac0:	2b40      	cmp	r3, #64	; 0x40
 8006ac2:	d006      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006ac4:	2b40      	cmp	r3, #64	; 0x40
 8006ac6:	d81d      	bhi.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d009      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006acc:	2b20      	cmp	r3, #32
 8006ace:	d010      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006ad0:	e018      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006ad2:	4b89      	ldr	r3, [pc, #548]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	4a88      	ldr	r2, [pc, #544]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006adc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006ade:	e015      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f001 fa82 	bl	8007ff0 <RCCEx_PLLSAI1_Config>
 8006aec:	4603      	mov	r3, r0
 8006aee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006af0:	e00c      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	3320      	adds	r3, #32
 8006af6:	2100      	movs	r1, #0
 8006af8:	4618      	mov	r0, r3
 8006afa:	f001 fb6d 	bl	80081d8 <RCCEx_PLLSAI2_Config>
 8006afe:	4603      	mov	r3, r0
 8006b00:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006b02:	e003      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	74fb      	strb	r3, [r7, #19]
      break;
 8006b08:	e000      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006b0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b0c:	7cfb      	ldrb	r3, [r7, #19]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10b      	bne.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b12:	4b79      	ldr	r3, [pc, #484]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006b14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b18:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b20:	4975      	ldr	r1, [pc, #468]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006b28:	e001      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b2a:	7cfb      	ldrb	r3, [r7, #19]
 8006b2c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d047      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b42:	d030      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b48:	d82a      	bhi.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006b4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b4e:	d02a      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006b50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b54:	d824      	bhi.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b5a:	d008      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b60:	d81e      	bhi.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00a      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b6a:	d010      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006b6c:	e018      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006b6e:	4b62      	ldr	r3, [pc, #392]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	4a61      	ldr	r2, [pc, #388]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b78:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006b7a:	e015      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	3304      	adds	r3, #4
 8006b80:	2100      	movs	r1, #0
 8006b82:	4618      	mov	r0, r3
 8006b84:	f001 fa34 	bl	8007ff0 <RCCEx_PLLSAI1_Config>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006b8c:	e00c      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	3320      	adds	r3, #32
 8006b92:	2100      	movs	r1, #0
 8006b94:	4618      	mov	r0, r3
 8006b96:	f001 fb1f 	bl	80081d8 <RCCEx_PLLSAI2_Config>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006b9e:	e003      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	74fb      	strb	r3, [r7, #19]
      break;
 8006ba4:	e000      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8006ba6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ba8:	7cfb      	ldrb	r3, [r7, #19]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10b      	bne.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006bae:	4b52      	ldr	r3, [pc, #328]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006bb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bbc:	494e      	ldr	r1, [pc, #312]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006bc4:	e001      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc6:	7cfb      	ldrb	r3, [r7, #19]
 8006bc8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 809f 	beq.w	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006bdc:	4b46      	ldr	r3, [pc, #280]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006be8:	2301      	movs	r3, #1
 8006bea:	e000      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006bec:	2300      	movs	r3, #0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00d      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bf2:	4b41      	ldr	r3, [pc, #260]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf6:	4a40      	ldr	r2, [pc, #256]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8006bfe:	4b3e      	ldr	r3, [pc, #248]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c06:	60bb      	str	r3, [r7, #8]
 8006c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c0e:	4b3b      	ldr	r3, [pc, #236]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a3a      	ldr	r2, [pc, #232]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c1a:	f7fb fdbf 	bl	800279c <HAL_GetTick>
 8006c1e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006c20:	e009      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c22:	f7fb fdbb 	bl	800279c <HAL_GetTick>
 8006c26:	4602      	mov	r2, r0
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d902      	bls.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	74fb      	strb	r3, [r7, #19]
        break;
 8006c34:	e005      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006c36:	4b31      	ldr	r3, [pc, #196]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d0ef      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006c42:	7cfb      	ldrb	r3, [r7, #19]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d15b      	bne.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006c48:	4b2b      	ldr	r3, [pc, #172]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c52:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d01f      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d019      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006c66:	4b24      	ldr	r3, [pc, #144]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c70:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c72:	4b21      	ldr	r3, [pc, #132]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c78:	4a1f      	ldr	r2, [pc, #124]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c82:	4b1d      	ldr	r3, [pc, #116]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c88:	4a1b      	ldr	r2, [pc, #108]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006c92:	4a19      	ldr	r2, [pc, #100]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f003 0301 	and.w	r3, r3, #1
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d016      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca4:	f7fb fd7a 	bl	800279c <HAL_GetTick>
 8006ca8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006caa:	e00b      	b.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cac:	f7fb fd76 	bl	800279c <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d902      	bls.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	74fb      	strb	r3, [r7, #19]
            break;
 8006cc2:	e006      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cc4:	4b0c      	ldr	r3, [pc, #48]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d0ec      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006cd2:	7cfb      	ldrb	r3, [r7, #19]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10c      	bne.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cd8:	4b07      	ldr	r3, [pc, #28]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ce8:	4903      	ldr	r1, [pc, #12]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006cf0:	e008      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006cf2:	7cfb      	ldrb	r3, [r7, #19]
 8006cf4:	74bb      	strb	r3, [r7, #18]
 8006cf6:	e005      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006cf8:	40021000 	.word	0x40021000
 8006cfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d00:	7cfb      	ldrb	r3, [r7, #19]
 8006d02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d04:	7c7b      	ldrb	r3, [r7, #17]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d105      	bne.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d0a:	4ba0      	ldr	r3, [pc, #640]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d0e:	4a9f      	ldr	r2, [pc, #636]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00a      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d22:	4b9a      	ldr	r3, [pc, #616]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d28:	f023 0203 	bic.w	r2, r3, #3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d30:	4996      	ldr	r1, [pc, #600]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0302 	and.w	r3, r3, #2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00a      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d44:	4b91      	ldr	r3, [pc, #580]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d4a:	f023 020c 	bic.w	r2, r3, #12
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	498e      	ldr	r1, [pc, #568]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0304 	and.w	r3, r3, #4
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006d66:	4b89      	ldr	r3, [pc, #548]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d74:	4985      	ldr	r1, [pc, #532]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0308 	and.w	r3, r3, #8
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00a      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006d88:	4b80      	ldr	r3, [pc, #512]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d96:	497d      	ldr	r1, [pc, #500]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0310 	and.w	r3, r3, #16
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00a      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006daa:	4b78      	ldr	r3, [pc, #480]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db8:	4974      	ldr	r1, [pc, #464]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0320 	and.w	r3, r3, #32
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00a      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006dcc:	4b6f      	ldr	r3, [pc, #444]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dda:	496c      	ldr	r1, [pc, #432]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00a      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006dee:	4b67      	ldr	r3, [pc, #412]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006df4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dfc:	4963      	ldr	r1, [pc, #396]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00a      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e10:	4b5e      	ldr	r3, [pc, #376]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e1e:	495b      	ldr	r1, [pc, #364]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00a      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e32:	4b56      	ldr	r3, [pc, #344]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e40:	4952      	ldr	r1, [pc, #328]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00a      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e54:	4b4d      	ldr	r3, [pc, #308]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e5a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e62:	494a      	ldr	r1, [pc, #296]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00a      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006e76:	4b45      	ldr	r3, [pc, #276]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e84:	4941      	ldr	r1, [pc, #260]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00a      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e98:	4b3c      	ldr	r3, [pc, #240]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e9e:	f023 0203 	bic.w	r2, r3, #3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ea6:	4939      	ldr	r1, [pc, #228]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d028      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006eba:	4b34      	ldr	r3, [pc, #208]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ec0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ec8:	4930      	ldr	r1, [pc, #192]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ed4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ed8:	d106      	bne.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006eda:	4b2c      	ldr	r3, [pc, #176]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	4a2b      	ldr	r2, [pc, #172]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ee0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ee4:	60d3      	str	r3, [r2, #12]
 8006ee6:	e011      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ef0:	d10c      	bne.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f001 f879 	bl	8007ff0 <RCCEx_PLLSAI1_Config>
 8006efe:	4603      	mov	r3, r0
 8006f00:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006f02:	7cfb      	ldrb	r3, [r7, #19]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006f08:	7cfb      	ldrb	r3, [r7, #19]
 8006f0a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d04d      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f20:	d108      	bne.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006f22:	4b1a      	ldr	r3, [pc, #104]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f28:	4a18      	ldr	r2, [pc, #96]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f2e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006f32:	e012      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006f34:	4b15      	ldr	r3, [pc, #84]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f3a:	4a14      	ldr	r2, [pc, #80]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f40:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006f44:	4b11      	ldr	r3, [pc, #68]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f52:	490e      	ldr	r1, [pc, #56]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f54:	4313      	orrs	r3, r2
 8006f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f62:	d106      	bne.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f64:	4b09      	ldr	r3, [pc, #36]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	4a08      	ldr	r2, [pc, #32]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f6e:	60d3      	str	r3, [r2, #12]
 8006f70:	e020      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f7a:	d109      	bne.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006f7c:	4b03      	ldr	r3, [pc, #12]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	4a02      	ldr	r2, [pc, #8]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f86:	60d3      	str	r3, [r2, #12]
 8006f88:	e014      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006f8a:	bf00      	nop
 8006f8c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f98:	d10c      	bne.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	2101      	movs	r1, #1
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f001 f825 	bl	8007ff0 <RCCEx_PLLSAI1_Config>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006faa:	7cfb      	ldrb	r3, [r7, #19]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006fb0:	7cfb      	ldrb	r3, [r7, #19]
 8006fb2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d028      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006fc0:	4b7a      	ldr	r3, [pc, #488]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fce:	4977      	ldr	r1, [pc, #476]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fde:	d106      	bne.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fe0:	4b72      	ldr	r3, [pc, #456]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	4a71      	ldr	r2, [pc, #452]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006fe6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fea:	60d3      	str	r3, [r2, #12]
 8006fec:	e011      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ff2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ff6:	d10c      	bne.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 fff6 	bl	8007ff0 <RCCEx_PLLSAI1_Config>
 8007004:	4603      	mov	r3, r0
 8007006:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007008:	7cfb      	ldrb	r3, [r7, #19]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800700e:	7cfb      	ldrb	r3, [r7, #19]
 8007010:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d01e      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800701e:	4b63      	ldr	r3, [pc, #396]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007024:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800702e:	495f      	ldr	r1, [pc, #380]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007030:	4313      	orrs	r3, r2
 8007032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800703c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007040:	d10c      	bne.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	3304      	adds	r3, #4
 8007046:	2102      	movs	r1, #2
 8007048:	4618      	mov	r0, r3
 800704a:	f000 ffd1 	bl	8007ff0 <RCCEx_PLLSAI1_Config>
 800704e:	4603      	mov	r3, r0
 8007050:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007052:	7cfb      	ldrb	r3, [r7, #19]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8007058:	7cfb      	ldrb	r3, [r7, #19]
 800705a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00b      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007068:	4b50      	ldr	r3, [pc, #320]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800706a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800706e:	f023 0204 	bic.w	r2, r3, #4
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007078:	494c      	ldr	r1, [pc, #304]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800707a:	4313      	orrs	r3, r2
 800707c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00b      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800708c:	4b47      	ldr	r3, [pc, #284]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800708e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007092:	f023 0218 	bic.w	r2, r3, #24
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800709c:	4943      	ldr	r1, [pc, #268]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d035      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80070b0:	4b3e      	ldr	r3, [pc, #248]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a3d      	ldr	r2, [pc, #244]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80070b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070bc:	f7fb fb6e 	bl	800279c <HAL_GetTick>
 80070c0:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80070c2:	e009      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80070c4:	f7fb fb6a 	bl	800279c <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d902      	bls.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	74fb      	strb	r3, [r7, #19]
        break;
 80070d6:	e005      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80070d8:	4b34      	ldr	r3, [pc, #208]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1ef      	bne.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80070e4:	7cfb      	ldrb	r3, [r7, #19]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d113      	bne.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80070ea:	4b30      	ldr	r3, [pc, #192]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80070ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070fa:	492c      	ldr	r1, [pc, #176]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	3320      	adds	r3, #32
 8007106:	2102      	movs	r1, #2
 8007108:	4618      	mov	r0, r3
 800710a:	f001 f865 	bl	80081d8 <RCCEx_PLLSAI2_Config>
 800710e:	4603      	mov	r3, r0
 8007110:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8007112:	7cfb      	ldrb	r3, [r7, #19]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8007118:	7cfb      	ldrb	r3, [r7, #19]
 800711a:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d01e      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8007128:	4b20      	ldr	r3, [pc, #128]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800712a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800712e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007138:	491c      	ldr	r1, [pc, #112]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800713a:	4313      	orrs	r3, r2
 800713c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800714a:	d10c      	bne.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	3320      	adds	r3, #32
 8007150:	2101      	movs	r1, #1
 8007152:	4618      	mov	r0, r3
 8007154:	f001 f840 	bl	80081d8 <RCCEx_PLLSAI2_Config>
 8007158:	4603      	mov	r3, r0
 800715a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800715c:	7cfb      	ldrb	r3, [r7, #19]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8007162:	7cfb      	ldrb	r3, [r7, #19]
 8007164:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d017      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007172:	4b0e      	ldr	r3, [pc, #56]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007174:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007178:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007182:	490a      	ldr	r1, [pc, #40]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007184:	4313      	orrs	r3, r2
 8007186:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007190:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007194:	d105      	bne.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007196:	4b05      	ldr	r3, [pc, #20]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	4a04      	ldr	r2, [pc, #16]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800719c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071a0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80071a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3718      	adds	r7, #24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	40021000 	.word	0x40021000

080071b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b088      	sub	sp, #32
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80071b8:	2300      	movs	r3, #0
 80071ba:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071c2:	d13e      	bne.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80071c4:	4bb6      	ldr	r3, [pc, #728]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80071c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ce:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071d6:	d028      	beq.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071de:	f200 86f2 	bhi.w	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071e8:	d005      	beq.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071f0:	d00e      	beq.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80071f2:	f000 bee8 	b.w	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80071f6:	4baa      	ldr	r3, [pc, #680]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80071f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071fc:	f003 0302 	and.w	r3, r3, #2
 8007200:	2b02      	cmp	r3, #2
 8007202:	f040 86e2 	bne.w	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 8007206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800720a:	61fb      	str	r3, [r7, #28]
      break;
 800720c:	f000 bedd 	b.w	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007210:	4ba3      	ldr	r3, [pc, #652]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007216:	f003 0302 	and.w	r3, r3, #2
 800721a:	2b02      	cmp	r3, #2
 800721c:	f040 86d7 	bne.w	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8007220:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007224:	61fb      	str	r3, [r7, #28]
      break;
 8007226:	f000 bed2 	b.w	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800722a:	4b9d      	ldr	r3, [pc, #628]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007232:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007236:	f040 86cc 	bne.w	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 800723a:	4b9a      	ldr	r3, [pc, #616]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800723c:	61fb      	str	r3, [r7, #28]
      break;
 800723e:	f000 bec8 	b.w	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007242:	4b97      	ldr	r3, [pc, #604]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	f003 0303 	and.w	r3, r3, #3
 800724a:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	2b03      	cmp	r3, #3
 8007250:	d036      	beq.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	2b03      	cmp	r3, #3
 8007256:	d840      	bhi.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d003      	beq.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	2b02      	cmp	r3, #2
 8007262:	d020      	beq.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8007264:	e039      	b.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007266:	4b8e      	ldr	r3, [pc, #568]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b02      	cmp	r3, #2
 8007270:	d116      	bne.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007272:	4b8b      	ldr	r3, [pc, #556]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0308 	and.w	r3, r3, #8
 800727a:	2b00      	cmp	r3, #0
 800727c:	d005      	beq.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800727e:	4b88      	ldr	r3, [pc, #544]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	091b      	lsrs	r3, r3, #4
 8007284:	f003 030f 	and.w	r3, r3, #15
 8007288:	e005      	b.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800728a:	4b85      	ldr	r3, [pc, #532]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800728c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007290:	0a1b      	lsrs	r3, r3, #8
 8007292:	f003 030f 	and.w	r3, r3, #15
 8007296:	4a84      	ldr	r2, [pc, #528]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800729c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800729e:	e01f      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	61bb      	str	r3, [r7, #24]
      break;
 80072a4:	e01c      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80072a6:	4b7e      	ldr	r3, [pc, #504]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072b2:	d102      	bne.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80072b4:	4b7d      	ldr	r3, [pc, #500]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80072b6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80072b8:	e012      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	61bb      	str	r3, [r7, #24]
      break;
 80072be:	e00f      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80072c0:	4b77      	ldr	r3, [pc, #476]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072cc:	d102      	bne.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80072ce:	4b77      	ldr	r3, [pc, #476]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80072d0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80072d2:	e005      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80072d4:	2300      	movs	r3, #0
 80072d6:	61bb      	str	r3, [r7, #24]
      break;
 80072d8:	e002      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80072da:	2300      	movs	r3, #0
 80072dc:	61bb      	str	r3, [r7, #24]
      break;
 80072de:	bf00      	nop
    }

    switch(PeriphClk)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072e6:	f000 8604 	beq.w	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072f0:	f200 8671 	bhi.w	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072fa:	f000 8467 	beq.w	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007304:	f200 8667 	bhi.w	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800730e:	f000 852f 	beq.w	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007318:	f200 865d 	bhi.w	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007322:	f000 8185 	beq.w	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800732c:	f200 8653 	bhi.w	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007336:	f000 80cb 	beq.w	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007340:	f200 8649 	bhi.w	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800734a:	f000 842e 	beq.w	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007354:	f200 863f 	bhi.w	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800735e:	f000 83e2 	beq.w	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007368:	f200 8635 	bhi.w	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007372:	f000 80ad 	beq.w	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800737c:	f200 862b 	bhi.w	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007386:	f000 809b 	beq.w	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007390:	f200 8621 	bhi.w	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800739a:	f000 8089 	beq.w	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073a4:	f200 8617 	bhi.w	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073ae:	f000 8552 	beq.w	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073b8:	f200 860d 	bhi.w	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073c2:	f000 84fe 	beq.w	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073cc:	f200 8603 	bhi.w	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073d6:	f000 849f 	beq.w	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073e0:	f200 85f9 	bhi.w	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b80      	cmp	r3, #128	; 0x80
 80073e8:	f000 846a 	beq.w	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b80      	cmp	r3, #128	; 0x80
 80073f0:	f200 85f1 	bhi.w	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b20      	cmp	r3, #32
 80073f8:	d84c      	bhi.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 85ea 	beq.w	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	3b01      	subs	r3, #1
 8007406:	2b1f      	cmp	r3, #31
 8007408:	f200 85e5 	bhi.w	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800740c:	a201      	add	r2, pc, #4	; (adr r2, 8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800740e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007412:	bf00      	nop
 8007414:	08007825 	.word	0x08007825
 8007418:	08007893 	.word	0x08007893
 800741c:	08007fd7 	.word	0x08007fd7
 8007420:	08007927 	.word	0x08007927
 8007424:	08007fd7 	.word	0x08007fd7
 8007428:	08007fd7 	.word	0x08007fd7
 800742c:	08007fd7 	.word	0x08007fd7
 8007430:	0800799f 	.word	0x0800799f
 8007434:	08007fd7 	.word	0x08007fd7
 8007438:	08007fd7 	.word	0x08007fd7
 800743c:	08007fd7 	.word	0x08007fd7
 8007440:	08007fd7 	.word	0x08007fd7
 8007444:	08007fd7 	.word	0x08007fd7
 8007448:	08007fd7 	.word	0x08007fd7
 800744c:	08007fd7 	.word	0x08007fd7
 8007450:	08007a23 	.word	0x08007a23
 8007454:	08007fd7 	.word	0x08007fd7
 8007458:	08007fd7 	.word	0x08007fd7
 800745c:	08007fd7 	.word	0x08007fd7
 8007460:	08007fd7 	.word	0x08007fd7
 8007464:	08007fd7 	.word	0x08007fd7
 8007468:	08007fd7 	.word	0x08007fd7
 800746c:	08007fd7 	.word	0x08007fd7
 8007470:	08007fd7 	.word	0x08007fd7
 8007474:	08007fd7 	.word	0x08007fd7
 8007478:	08007fd7 	.word	0x08007fd7
 800747c:	08007fd7 	.word	0x08007fd7
 8007480:	08007fd7 	.word	0x08007fd7
 8007484:	08007fd7 	.word	0x08007fd7
 8007488:	08007fd7 	.word	0x08007fd7
 800748c:	08007fd7 	.word	0x08007fd7
 8007490:	08007aa5 	.word	0x08007aa5
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b40      	cmp	r3, #64	; 0x40
 8007498:	f000 83e6 	beq.w	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800749c:	f000 bd9b 	b.w	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80074a0:	40021000 	.word	0x40021000
 80074a4:	0007a120 	.word	0x0007a120
 80074a8:	0801be18 	.word	0x0801be18
 80074ac:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80074b0:	69b9      	ldr	r1, [r7, #24]
 80074b2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80074b6:	f000 ff83 	bl	80083c0 <RCCEx_GetSAIxPeriphCLKFreq>
 80074ba:	61f8      	str	r0, [r7, #28]
      break;
 80074bc:	f000 bd8e 	b.w	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80074c0:	69b9      	ldr	r1, [r7, #24]
 80074c2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80074c6:	f000 ff7b 	bl	80083c0 <RCCEx_GetSAIxPeriphCLKFreq>
 80074ca:	61f8      	str	r0, [r7, #28]
      break;
 80074cc:	f000 bd86 	b.w	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80074d0:	4b9a      	ldr	r3, [pc, #616]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80074d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80074da:	60fb      	str	r3, [r7, #12]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80074e2:	d015      	beq.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80074ea:	f200 8092 	bhi.w	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074f4:	d029      	beq.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074fc:	f200 8089 	bhi.w	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d07b      	beq.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800750c:	d04a      	beq.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 800750e:	e080      	b.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007510:	4b8a      	ldr	r3, [pc, #552]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0302 	and.w	r3, r3, #2
 8007518:	2b02      	cmp	r3, #2
 800751a:	d17d      	bne.n	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800751c:	4b87      	ldr	r3, [pc, #540]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 0308 	and.w	r3, r3, #8
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8007528:	4b84      	ldr	r3, [pc, #528]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	091b      	lsrs	r3, r3, #4
 800752e:	f003 030f 	and.w	r3, r3, #15
 8007532:	e005      	b.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8007534:	4b81      	ldr	r3, [pc, #516]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800753a:	0a1b      	lsrs	r3, r3, #8
 800753c:	f003 030f 	and.w	r3, r3, #15
 8007540:	4a7f      	ldr	r2, [pc, #508]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007546:	61fb      	str	r3, [r7, #28]
          break;
 8007548:	e066      	b.n	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800754a:	4b7c      	ldr	r3, [pc, #496]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007552:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007556:	d162      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007558:	4b78      	ldr	r3, [pc, #480]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007560:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007564:	d15b      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007566:	4b75      	ldr	r3, [pc, #468]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	0a1b      	lsrs	r3, r3, #8
 800756c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007570:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	fb03 f202 	mul.w	r2, r3, r2
 800757a:	4b70      	ldr	r3, [pc, #448]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	091b      	lsrs	r3, r3, #4
 8007580:	f003 030f 	and.w	r3, r3, #15
 8007584:	3301      	adds	r3, #1
 8007586:	fbb2 f3f3 	udiv	r3, r2, r3
 800758a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800758c:	4b6b      	ldr	r3, [pc, #428]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	0d5b      	lsrs	r3, r3, #21
 8007592:	f003 0303 	and.w	r3, r3, #3
 8007596:	3301      	adds	r3, #1
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	69ba      	ldr	r2, [r7, #24]
 800759c:	fbb2 f3f3 	udiv	r3, r2, r3
 80075a0:	61fb      	str	r3, [r7, #28]
          break;
 80075a2:	e03c      	b.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80075a4:	4b65      	ldr	r3, [pc, #404]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075b0:	d138      	bne.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80075b2:	4b62      	ldr	r3, [pc, #392]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075be:	d131      	bne.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80075c0:	4b5e      	ldr	r3, [pc, #376]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	0a1b      	lsrs	r3, r3, #8
 80075c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ca:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	fb03 f202 	mul.w	r2, r3, r2
 80075d4:	4b59      	ldr	r3, [pc, #356]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	091b      	lsrs	r3, r3, #4
 80075da:	f003 030f 	and.w	r3, r3, #15
 80075de:	3301      	adds	r3, #1
 80075e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075e4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80075e6:	4b55      	ldr	r3, [pc, #340]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	0d5b      	lsrs	r3, r3, #21
 80075ec:	f003 0303 	and.w	r3, r3, #3
 80075f0:	3301      	adds	r3, #1
 80075f2:	005b      	lsls	r3, r3, #1
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075fa:	61fb      	str	r3, [r7, #28]
          break;
 80075fc:	e012      	b.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80075fe:	4b4f      	ldr	r3, [pc, #316]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007600:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007604:	f003 0302 	and.w	r3, r3, #2
 8007608:	2b02      	cmp	r3, #2
 800760a:	d10e      	bne.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 800760c:	4b4d      	ldr	r3, [pc, #308]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800760e:	61fb      	str	r3, [r7, #28]
          break;
 8007610:	e00b      	b.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 8007612:	bf00      	nop
 8007614:	f000 bce2 	b.w	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007618:	bf00      	nop
 800761a:	f000 bcdf 	b.w	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800761e:	bf00      	nop
 8007620:	f000 bcdc 	b.w	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007624:	bf00      	nop
 8007626:	f000 bcd9 	b.w	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800762a:	bf00      	nop
        break;
 800762c:	f000 bcd6 	b.w	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8007630:	4b42      	ldr	r3, [pc, #264]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007632:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800763a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800763e:	d13d      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007640:	4b3e      	ldr	r3, [pc, #248]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007648:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800764c:	f040 84c5 	bne.w	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8007650:	4b3a      	ldr	r3, [pc, #232]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800765c:	f040 84bd 	bne.w	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007660:	4b36      	ldr	r3, [pc, #216]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	0a1b      	lsrs	r3, r3, #8
 8007666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800766a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	fb03 f202 	mul.w	r2, r3, r2
 8007674:	4b31      	ldr	r3, [pc, #196]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	091b      	lsrs	r3, r3, #4
 800767a:	f003 030f 	and.w	r3, r3, #15
 800767e:	3301      	adds	r3, #1
 8007680:	fbb2 f3f3 	udiv	r3, r2, r3
 8007684:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8007686:	4b2d      	ldr	r3, [pc, #180]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	0edb      	lsrs	r3, r3, #27
 800768c:	f003 031f 	and.w	r3, r3, #31
 8007690:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10a      	bne.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007698:	4b28      	ldr	r3, [pc, #160]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 80076a4:	2311      	movs	r3, #17
 80076a6:	617b      	str	r3, [r7, #20]
 80076a8:	e001      	b.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 80076aa:	2307      	movs	r3, #7
 80076ac:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b6:	61fb      	str	r3, [r7, #28]
      break;
 80076b8:	f000 bc8f 	b.w	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80076bc:	4b1f      	ldr	r3, [pc, #124]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80076be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076c2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80076c6:	60fb      	str	r3, [r7, #12]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80076ce:	d016      	beq.n	80076fe <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80076d6:	f200 809b 	bhi.w	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076e0:	d032      	beq.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076e8:	f200 8092 	bhi.w	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f000 8084 	beq.w	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076fa:	d052      	beq.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 80076fc:	e088      	b.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80076fe:	4b0f      	ldr	r3, [pc, #60]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0302 	and.w	r3, r3, #2
 8007706:	2b02      	cmp	r3, #2
 8007708:	f040 8084 	bne.w	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800770c:	4b0b      	ldr	r3, [pc, #44]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0308 	and.w	r3, r3, #8
 8007714:	2b00      	cmp	r3, #0
 8007716:	d005      	beq.n	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8007718:	4b08      	ldr	r3, [pc, #32]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	091b      	lsrs	r3, r3, #4
 800771e:	f003 030f 	and.w	r3, r3, #15
 8007722:	e005      	b.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8007724:	4b05      	ldr	r3, [pc, #20]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800772a:	0a1b      	lsrs	r3, r3, #8
 800772c:	f003 030f 	and.w	r3, r3, #15
 8007730:	4a03      	ldr	r2, [pc, #12]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007736:	61fb      	str	r3, [r7, #28]
          break;
 8007738:	e06c      	b.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800773a:	bf00      	nop
 800773c:	40021000 	.word	0x40021000
 8007740:	0801be18 	.word	0x0801be18
 8007744:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007748:	4ba5      	ldr	r3, [pc, #660]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007750:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007754:	d160      	bne.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007756:	4ba2      	ldr	r3, [pc, #648]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800775e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007762:	d159      	bne.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007764:	4b9e      	ldr	r3, [pc, #632]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	0a1b      	lsrs	r3, r3, #8
 800776a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800776e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	fb03 f202 	mul.w	r2, r3, r2
 8007778:	4b99      	ldr	r3, [pc, #612]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	091b      	lsrs	r3, r3, #4
 800777e:	f003 030f 	and.w	r3, r3, #15
 8007782:	3301      	adds	r3, #1
 8007784:	fbb2 f3f3 	udiv	r3, r2, r3
 8007788:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800778a:	4b95      	ldr	r3, [pc, #596]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	0d5b      	lsrs	r3, r3, #21
 8007790:	f003 0303 	and.w	r3, r3, #3
 8007794:	3301      	adds	r3, #1
 8007796:	005b      	lsls	r3, r3, #1
 8007798:	69ba      	ldr	r2, [r7, #24]
 800779a:	fbb2 f3f3 	udiv	r3, r2, r3
 800779e:	61fb      	str	r3, [r7, #28]
          break;
 80077a0:	e03a      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80077a2:	4b8f      	ldr	r3, [pc, #572]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077ae:	d135      	bne.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80077b0:	4b8b      	ldr	r3, [pc, #556]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077bc:	d12e      	bne.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80077be:	4b88      	ldr	r3, [pc, #544]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	0a1b      	lsrs	r3, r3, #8
 80077c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077c8:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	fb03 f202 	mul.w	r2, r3, r2
 80077d2:	4b83      	ldr	r3, [pc, #524]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	091b      	lsrs	r3, r3, #4
 80077d8:	f003 030f 	and.w	r3, r3, #15
 80077dc:	3301      	adds	r3, #1
 80077de:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80077e4:	4b7e      	ldr	r3, [pc, #504]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	0d5b      	lsrs	r3, r3, #21
 80077ea:	f003 0303 	and.w	r3, r3, #3
 80077ee:	3301      	adds	r3, #1
 80077f0:	005b      	lsls	r3, r3, #1
 80077f2:	69ba      	ldr	r2, [r7, #24]
 80077f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077f8:	61fb      	str	r3, [r7, #28]
          break;
 80077fa:	e00f      	b.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80077fc:	4b78      	ldr	r3, [pc, #480]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80077fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b02      	cmp	r3, #2
 8007808:	d10a      	bne.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 800780a:	4b76      	ldr	r3, [pc, #472]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800780c:	61fb      	str	r3, [r7, #28]
          break;
 800780e:	e007      	b.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8007810:	bf00      	nop
 8007812:	e3e2      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8007814:	bf00      	nop
 8007816:	e3e0      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8007818:	bf00      	nop
 800781a:	e3de      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 800781c:	bf00      	nop
 800781e:	e3dc      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8007820:	bf00      	nop
      break;
 8007822:	e3da      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007824:	4b6e      	ldr	r3, [pc, #440]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800782a:	f003 0303 	and.w	r3, r3, #3
 800782e:	60fb      	str	r3, [r7, #12]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2b03      	cmp	r3, #3
 8007834:	d827      	bhi.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8007836:	a201      	add	r2, pc, #4	; (adr r2, 800783c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8007838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783c:	0800784d 	.word	0x0800784d
 8007840:	08007855 	.word	0x08007855
 8007844:	0800785d 	.word	0x0800785d
 8007848:	08007871 	.word	0x08007871
          frequency = HAL_RCC_GetPCLK2Freq();
 800784c:	f7ff f84c 	bl	80068e8 <HAL_RCC_GetPCLK2Freq>
 8007850:	61f8      	str	r0, [r7, #28]
          break;
 8007852:	e01d      	b.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8007854:	f7fe ff9c 	bl	8006790 <HAL_RCC_GetSysClockFreq>
 8007858:	61f8      	str	r0, [r7, #28]
          break;
 800785a:	e019      	b.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800785c:	4b60      	ldr	r3, [pc, #384]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007868:	d10f      	bne.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 800786a:	4b5f      	ldr	r3, [pc, #380]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800786c:	61fb      	str	r3, [r7, #28]
          break;
 800786e:	e00c      	b.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007870:	4b5b      	ldr	r3, [pc, #364]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007876:	f003 0302 	and.w	r3, r3, #2
 800787a:	2b02      	cmp	r3, #2
 800787c:	d107      	bne.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 800787e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007882:	61fb      	str	r3, [r7, #28]
          break;
 8007884:	e003      	b.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8007886:	bf00      	nop
 8007888:	e3a8      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800788a:	bf00      	nop
 800788c:	e3a6      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800788e:	bf00      	nop
        break;
 8007890:	e3a4      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007892:	4b53      	ldr	r3, [pc, #332]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007898:	f003 030c 	and.w	r3, r3, #12
 800789c:	60fb      	str	r3, [r7, #12]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2b0c      	cmp	r3, #12
 80078a2:	d83a      	bhi.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 80078a4:	a201      	add	r2, pc, #4	; (adr r2, 80078ac <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 80078a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078aa:	bf00      	nop
 80078ac:	080078e1 	.word	0x080078e1
 80078b0:	0800791b 	.word	0x0800791b
 80078b4:	0800791b 	.word	0x0800791b
 80078b8:	0800791b 	.word	0x0800791b
 80078bc:	080078e9 	.word	0x080078e9
 80078c0:	0800791b 	.word	0x0800791b
 80078c4:	0800791b 	.word	0x0800791b
 80078c8:	0800791b 	.word	0x0800791b
 80078cc:	080078f1 	.word	0x080078f1
 80078d0:	0800791b 	.word	0x0800791b
 80078d4:	0800791b 	.word	0x0800791b
 80078d8:	0800791b 	.word	0x0800791b
 80078dc:	08007905 	.word	0x08007905
          frequency = HAL_RCC_GetPCLK1Freq();
 80078e0:	f7fe ffec 	bl	80068bc <HAL_RCC_GetPCLK1Freq>
 80078e4:	61f8      	str	r0, [r7, #28]
          break;
 80078e6:	e01d      	b.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 80078e8:	f7fe ff52 	bl	8006790 <HAL_RCC_GetSysClockFreq>
 80078ec:	61f8      	str	r0, [r7, #28]
          break;
 80078ee:	e019      	b.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80078f0:	4b3b      	ldr	r3, [pc, #236]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078fc:	d10f      	bne.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 80078fe:	4b3a      	ldr	r3, [pc, #232]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007900:	61fb      	str	r3, [r7, #28]
          break;
 8007902:	e00c      	b.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007904:	4b36      	ldr	r3, [pc, #216]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	2b02      	cmp	r3, #2
 8007910:	d107      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 8007912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007916:	61fb      	str	r3, [r7, #28]
          break;
 8007918:	e003      	b.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 800791a:	bf00      	nop
 800791c:	e35e      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800791e:	bf00      	nop
 8007920:	e35c      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007922:	bf00      	nop
        break;
 8007924:	e35a      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007926:	4b2e      	ldr	r3, [pc, #184]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800792c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007930:	60fb      	str	r3, [r7, #12]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2b30      	cmp	r3, #48	; 0x30
 8007936:	d021      	beq.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2b30      	cmp	r3, #48	; 0x30
 800793c:	d829      	bhi.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2b20      	cmp	r3, #32
 8007942:	d011      	beq.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2b20      	cmp	r3, #32
 8007948:	d823      	bhi.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d003      	beq.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2b10      	cmp	r3, #16
 8007954:	d004      	beq.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 8007956:	e01c      	b.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007958:	f7fe ffb0 	bl	80068bc <HAL_RCC_GetPCLK1Freq>
 800795c:	61f8      	str	r0, [r7, #28]
          break;
 800795e:	e01d      	b.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8007960:	f7fe ff16 	bl	8006790 <HAL_RCC_GetSysClockFreq>
 8007964:	61f8      	str	r0, [r7, #28]
          break;
 8007966:	e019      	b.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007968:	4b1d      	ldr	r3, [pc, #116]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007974:	d10f      	bne.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 8007976:	4b1c      	ldr	r3, [pc, #112]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007978:	61fb      	str	r3, [r7, #28]
          break;
 800797a:	e00c      	b.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800797c:	4b18      	ldr	r3, [pc, #96]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800797e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007982:	f003 0302 	and.w	r3, r3, #2
 8007986:	2b02      	cmp	r3, #2
 8007988:	d107      	bne.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 800798a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800798e:	61fb      	str	r3, [r7, #28]
          break;
 8007990:	e003      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 8007992:	bf00      	nop
 8007994:	e322      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007996:	bf00      	nop
 8007998:	e320      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800799a:	bf00      	nop
        break;
 800799c:	e31e      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800799e:	4b10      	ldr	r3, [pc, #64]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80079a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80079a8:	60fb      	str	r3, [r7, #12]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2bc0      	cmp	r3, #192	; 0xc0
 80079ae:	d027      	beq.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2bc0      	cmp	r3, #192	; 0xc0
 80079b4:	d82f      	bhi.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2b80      	cmp	r3, #128	; 0x80
 80079ba:	d017      	beq.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2b80      	cmp	r3, #128	; 0x80
 80079c0:	d829      	bhi.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d003      	beq.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2b40      	cmp	r3, #64	; 0x40
 80079cc:	d004      	beq.n	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 80079ce:	e022      	b.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 80079d0:	f7fe ff74 	bl	80068bc <HAL_RCC_GetPCLK1Freq>
 80079d4:	61f8      	str	r0, [r7, #28]
          break;
 80079d6:	e023      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 80079d8:	f7fe feda 	bl	8006790 <HAL_RCC_GetSysClockFreq>
 80079dc:	61f8      	str	r0, [r7, #28]
          break;
 80079de:	e01f      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80079e0:	40021000 	.word	0x40021000
 80079e4:	02dc6c00 	.word	0x02dc6c00
 80079e8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079ec:	4b9b      	ldr	r3, [pc, #620]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079f8:	d10f      	bne.n	8007a1a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 80079fa:	4b99      	ldr	r3, [pc, #612]	; (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80079fc:	61fb      	str	r3, [r7, #28]
          break;
 80079fe:	e00c      	b.n	8007a1a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007a00:	4b96      	ldr	r3, [pc, #600]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a06:	f003 0302 	and.w	r3, r3, #2
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d107      	bne.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 8007a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a12:	61fb      	str	r3, [r7, #28]
          break;
 8007a14:	e003      	b.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 8007a16:	bf00      	nop
 8007a18:	e2e0      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007a1a:	bf00      	nop
 8007a1c:	e2de      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007a1e:	bf00      	nop
        break;
 8007a20:	e2dc      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007a22:	4b8e      	ldr	r3, [pc, #568]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a2c:	60fb      	str	r3, [r7, #12]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a34:	d025      	beq.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a3c:	d82c      	bhi.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a44:	d013      	beq.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a4c:	d824      	bhi.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d004      	beq.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a5a:	d004      	beq.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8007a5c:	e01c      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a5e:	f7fe ff2d 	bl	80068bc <HAL_RCC_GetPCLK1Freq>
 8007a62:	61f8      	str	r0, [r7, #28]
          break;
 8007a64:	e01d      	b.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8007a66:	f7fe fe93 	bl	8006790 <HAL_RCC_GetSysClockFreq>
 8007a6a:	61f8      	str	r0, [r7, #28]
          break;
 8007a6c:	e019      	b.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a6e:	4b7b      	ldr	r3, [pc, #492]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a7a:	d10f      	bne.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8007a7c:	4b78      	ldr	r3, [pc, #480]	; (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007a7e:	61fb      	str	r3, [r7, #28]
          break;
 8007a80:	e00c      	b.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007a82:	4b76      	ldr	r3, [pc, #472]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d107      	bne.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8007a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a94:	61fb      	str	r3, [r7, #28]
          break;
 8007a96:	e003      	b.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8007a98:	bf00      	nop
 8007a9a:	e29f      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007a9c:	bf00      	nop
 8007a9e:	e29d      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007aa0:	bf00      	nop
        break;
 8007aa2:	e29b      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007aa4:	4b6d      	ldr	r3, [pc, #436]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aaa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007aae:	60fb      	str	r3, [r7, #12]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ab6:	d025      	beq.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007abe:	d82c      	bhi.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ac6:	d013      	beq.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ace:	d824      	bhi.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d004      	beq.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007adc:	d004      	beq.n	8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 8007ade:	e01c      	b.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007ae0:	f7fe feec 	bl	80068bc <HAL_RCC_GetPCLK1Freq>
 8007ae4:	61f8      	str	r0, [r7, #28]
          break;
 8007ae6:	e01d      	b.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 8007ae8:	f7fe fe52 	bl	8006790 <HAL_RCC_GetSysClockFreq>
 8007aec:	61f8      	str	r0, [r7, #28]
          break;
 8007aee:	e019      	b.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007af0:	4b5a      	ldr	r3, [pc, #360]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007afc:	d10f      	bne.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 8007afe:	4b58      	ldr	r3, [pc, #352]	; (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007b00:	61fb      	str	r3, [r7, #28]
          break;
 8007b02:	e00c      	b.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007b04:	4b55      	ldr	r3, [pc, #340]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b0a:	f003 0302 	and.w	r3, r3, #2
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d107      	bne.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 8007b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b16:	61fb      	str	r3, [r7, #28]
          break;
 8007b18:	e003      	b.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 8007b1a:	bf00      	nop
 8007b1c:	e25e      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007b1e:	bf00      	nop
 8007b20:	e25c      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007b22:	bf00      	nop
        break;
 8007b24:	e25a      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007b26:	4b4d      	ldr	r3, [pc, #308]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b30:	60fb      	str	r3, [r7, #12]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b38:	d007      	beq.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b40:	d12f      	bne.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8007b42:	f7fe fe25 	bl	8006790 <HAL_RCC_GetSysClockFreq>
 8007b46:	61f8      	str	r0, [r7, #28]
          break;
 8007b48:	e02e      	b.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8007b4a:	4b44      	ldr	r3, [pc, #272]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b56:	d126      	bne.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8007b58:	4b40      	ldr	r3, [pc, #256]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d020      	beq.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007b64:	4b3d      	ldr	r3, [pc, #244]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	0a1b      	lsrs	r3, r3, #8
 8007b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b6e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	fb03 f202 	mul.w	r2, r3, r2
 8007b78:	4b38      	ldr	r3, [pc, #224]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	091b      	lsrs	r3, r3, #4
 8007b7e:	f003 030f 	and.w	r3, r3, #15
 8007b82:	3301      	adds	r3, #1
 8007b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b88:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8007b8a:	4b34      	ldr	r3, [pc, #208]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	0e5b      	lsrs	r3, r3, #25
 8007b90:	f003 0303 	and.w	r3, r3, #3
 8007b94:	3301      	adds	r3, #1
 8007b96:	005b      	lsls	r3, r3, #1
 8007b98:	69ba      	ldr	r2, [r7, #24]
 8007b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b9e:	61fb      	str	r3, [r7, #28]
          break;
 8007ba0:	e001      	b.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 8007ba2:	bf00      	nop
 8007ba4:	e21a      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007ba6:	bf00      	nop
        break;
 8007ba8:	e218      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8007baa:	4b2c      	ldr	r3, [pc, #176]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007bac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007bb0:	f003 0304 	and.w	r3, r3, #4
 8007bb4:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d103      	bne.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 8007bbc:	f7fe fe94 	bl	80068e8 <HAL_RCC_GetPCLK2Freq>
 8007bc0:	61f8      	str	r0, [r7, #28]
        break;
 8007bc2:	e20b      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 8007bc4:	f7fe fde4 	bl	8006790 <HAL_RCC_GetSysClockFreq>
 8007bc8:	61f8      	str	r0, [r7, #28]
        break;
 8007bca:	e207      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8007bcc:	4b23      	ldr	r3, [pc, #140]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007bce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007bd2:	f003 0318 	and.w	r3, r3, #24
 8007bd6:	60fb      	str	r3, [r7, #12]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2b10      	cmp	r3, #16
 8007bdc:	d010      	beq.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2b10      	cmp	r3, #16
 8007be2:	d834      	bhi.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2b08      	cmp	r3, #8
 8007bee:	d024      	beq.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8007bf0:	e02d      	b.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007bf2:	69b9      	ldr	r1, [r7, #24]
 8007bf4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007bf8:	f000 fbe2 	bl	80083c0 <RCCEx_GetSAIxPeriphCLKFreq>
 8007bfc:	61f8      	str	r0, [r7, #28]
          break;
 8007bfe:	e02b      	b.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007c00:	4b16      	ldr	r3, [pc, #88]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0302 	and.w	r3, r3, #2
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d122      	bne.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007c0c:	4b13      	ldr	r3, [pc, #76]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0308 	and.w	r3, r3, #8
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d005      	beq.n	8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8007c18:	4b10      	ldr	r3, [pc, #64]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	091b      	lsrs	r3, r3, #4
 8007c1e:	f003 030f 	and.w	r3, r3, #15
 8007c22:	e005      	b.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8007c24:	4b0d      	ldr	r3, [pc, #52]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c2a:	0a1b      	lsrs	r3, r3, #8
 8007c2c:	f003 030f 	and.w	r3, r3, #15
 8007c30:	4a0c      	ldr	r2, [pc, #48]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c36:	61fb      	str	r3, [r7, #28]
          break;
 8007c38:	e00b      	b.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c3a:	4b08      	ldr	r3, [pc, #32]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c46:	d106      	bne.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 8007c48:	4b05      	ldr	r3, [pc, #20]	; (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007c4a:	61fb      	str	r3, [r7, #28]
          break;
 8007c4c:	e003      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 8007c4e:	bf00      	nop
 8007c50:	e1c4      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007c52:	bf00      	nop
 8007c54:	e1c2      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007c56:	bf00      	nop
        break;
 8007c58:	e1c0      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8007c5a:	bf00      	nop
 8007c5c:	40021000 	.word	0x40021000
 8007c60:	00f42400 	.word	0x00f42400
 8007c64:	0801be18 	.word	0x0801be18
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007c68:	4b96      	ldr	r3, [pc, #600]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c6e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007c72:	60fb      	str	r3, [r7, #12]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c7a:	d013      	beq.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c82:	d819      	bhi.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d004      	beq.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c90:	d004      	beq.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 8007c92:	e011      	b.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007c94:	f7fe fe12 	bl	80068bc <HAL_RCC_GetPCLK1Freq>
 8007c98:	61f8      	str	r0, [r7, #28]
          break;
 8007c9a:	e010      	b.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8007c9c:	f7fe fd78 	bl	8006790 <HAL_RCC_GetSysClockFreq>
 8007ca0:	61f8      	str	r0, [r7, #28]
          break;
 8007ca2:	e00c      	b.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ca4:	4b87      	ldr	r3, [pc, #540]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cb0:	d104      	bne.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 8007cb2:	4b85      	ldr	r3, [pc, #532]	; (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007cb4:	61fb      	str	r3, [r7, #28]
          break;
 8007cb6:	e001      	b.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8007cb8:	bf00      	nop
 8007cba:	e18f      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007cbc:	bf00      	nop
        break;
 8007cbe:	e18d      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007cc0:	4b80      	ldr	r3, [pc, #512]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cc6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007cca:	60fb      	str	r3, [r7, #12]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cd2:	d013      	beq.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cda:	d819      	bhi.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d004      	beq.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ce8:	d004      	beq.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 8007cea:	e011      	b.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007cec:	f7fe fde6 	bl	80068bc <HAL_RCC_GetPCLK1Freq>
 8007cf0:	61f8      	str	r0, [r7, #28]
          break;
 8007cf2:	e010      	b.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8007cf4:	f7fe fd4c 	bl	8006790 <HAL_RCC_GetSysClockFreq>
 8007cf8:	61f8      	str	r0, [r7, #28]
          break;
 8007cfa:	e00c      	b.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007cfc:	4b71      	ldr	r3, [pc, #452]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d08:	d104      	bne.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 8007d0a:	4b6f      	ldr	r3, [pc, #444]	; (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007d0c:	61fb      	str	r3, [r7, #28]
          break;
 8007d0e:	e001      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8007d10:	bf00      	nop
 8007d12:	e163      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007d14:	bf00      	nop
        break;
 8007d16:	e161      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007d18:	4b6a      	ldr	r3, [pc, #424]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d22:	60fb      	str	r3, [r7, #12]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d2a:	d013      	beq.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d32:	d819      	bhi.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d004      	beq.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d40:	d004      	beq.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 8007d42:	e011      	b.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d44:	f7fe fdba 	bl	80068bc <HAL_RCC_GetPCLK1Freq>
 8007d48:	61f8      	str	r0, [r7, #28]
          break;
 8007d4a:	e010      	b.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8007d4c:	f7fe fd20 	bl	8006790 <HAL_RCC_GetSysClockFreq>
 8007d50:	61f8      	str	r0, [r7, #28]
          break;
 8007d52:	e00c      	b.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d54:	4b5b      	ldr	r3, [pc, #364]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d60:	d104      	bne.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 8007d62:	4b59      	ldr	r3, [pc, #356]	; (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007d64:	61fb      	str	r3, [r7, #28]
          break;
 8007d66:	e001      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8007d68:	bf00      	nop
 8007d6a:	e137      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007d6c:	bf00      	nop
        break;
 8007d6e:	e135      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007d70:	4b54      	ldr	r3, [pc, #336]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007d72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d76:	f003 0303 	and.w	r3, r3, #3
 8007d7a:	60fb      	str	r3, [r7, #12]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d011      	beq.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d818      	bhi.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d004      	beq.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8007d94:	e011      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d96:	f7fe fd91 	bl	80068bc <HAL_RCC_GetPCLK1Freq>
 8007d9a:	61f8      	str	r0, [r7, #28]
          break;
 8007d9c:	e010      	b.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8007d9e:	f7fe fcf7 	bl	8006790 <HAL_RCC_GetSysClockFreq>
 8007da2:	61f8      	str	r0, [r7, #28]
          break;
 8007da4:	e00c      	b.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007da6:	4b47      	ldr	r3, [pc, #284]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007db2:	d104      	bne.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8007db4:	4b44      	ldr	r3, [pc, #272]	; (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007db6:	61fb      	str	r3, [r7, #28]
          break;
 8007db8:	e001      	b.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 8007dba:	bf00      	nop
 8007dbc:	e10e      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007dbe:	bf00      	nop
        break;
 8007dc0:	e10c      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007dc2:	4b40      	ldr	r3, [pc, #256]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dc8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007dcc:	60fb      	str	r3, [r7, #12]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007dd4:	d02c      	beq.n	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007ddc:	d833      	bhi.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007de4:	d01a      	beq.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007dec:	d82b      	bhi.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d004      	beq.n	8007dfe <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dfa:	d004      	beq.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8007dfc:	e023      	b.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007dfe:	f7fe fd5d 	bl	80068bc <HAL_RCC_GetPCLK1Freq>
 8007e02:	61f8      	str	r0, [r7, #28]
          break;
 8007e04:	e026      	b.n	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007e06:	4b2f      	ldr	r3, [pc, #188]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e0c:	f003 0302 	and.w	r3, r3, #2
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d11a      	bne.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8007e14:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007e18:	61fb      	str	r3, [r7, #28]
          break;
 8007e1a:	e016      	b.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e1c:	4b29      	ldr	r3, [pc, #164]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e28:	d111      	bne.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 8007e2a:	4b27      	ldr	r3, [pc, #156]	; (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007e2c:	61fb      	str	r3, [r7, #28]
          break;
 8007e2e:	e00e      	b.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007e30:	4b24      	ldr	r3, [pc, #144]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e36:	f003 0302 	and.w	r3, r3, #2
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d109      	bne.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8007e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e42:	61fb      	str	r3, [r7, #28]
          break;
 8007e44:	e005      	b.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 8007e46:	bf00      	nop
 8007e48:	e0c8      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007e4a:	bf00      	nop
 8007e4c:	e0c6      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007e4e:	bf00      	nop
 8007e50:	e0c4      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007e52:	bf00      	nop
        break;
 8007e54:	e0c2      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007e56:	4b1b      	ldr	r3, [pc, #108]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e5c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007e60:	60fb      	str	r3, [r7, #12]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e68:	d030      	beq.n	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e70:	d837      	bhi.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e78:	d01a      	beq.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e80:	d82f      	bhi.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d004      	beq.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e8e:	d004      	beq.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8007e90:	e027      	b.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007e92:	f7fe fd13 	bl	80068bc <HAL_RCC_GetPCLK1Freq>
 8007e96:	61f8      	str	r0, [r7, #28]
          break;
 8007e98:	e02a      	b.n	8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007e9a:	4b0a      	ldr	r3, [pc, #40]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ea0:	f003 0302 	and.w	r3, r3, #2
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d11e      	bne.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8007ea8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007eac:	61fb      	str	r3, [r7, #28]
          break;
 8007eae:	e01a      	b.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007eb0:	4b04      	ldr	r3, [pc, #16]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ebc:	d115      	bne.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 8007ebe:	4b02      	ldr	r3, [pc, #8]	; (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007ec0:	61fb      	str	r3, [r7, #28]
          break;
 8007ec2:	e012      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8007ec4:	40021000 	.word	0x40021000
 8007ec8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007ecc:	4b46      	ldr	r3, [pc, #280]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ed2:	f003 0302 	and.w	r3, r3, #2
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d109      	bne.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 8007eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ede:	61fb      	str	r3, [r7, #28]
          break;
 8007ee0:	e005      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8007ee2:	bf00      	nop
 8007ee4:	e07a      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007ee6:	bf00      	nop
 8007ee8:	e078      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007eea:	bf00      	nop
 8007eec:	e076      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007eee:	bf00      	nop
        break;
 8007ef0:	e074      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007ef2:	4b3d      	ldr	r3, [pc, #244]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007ef4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ef8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007efc:	60fb      	str	r3, [r7, #12]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f04:	d02c      	beq.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f0c:	d855      	bhi.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d004      	beq.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f1a:	d004      	beq.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8007f1c:	e04d      	b.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8007f1e:	f7fe fc37 	bl	8006790 <HAL_RCC_GetSysClockFreq>
 8007f22:	61f8      	str	r0, [r7, #28]
          break;
 8007f24:	e04e      	b.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007f26:	4b30      	ldr	r3, [pc, #192]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 0302 	and.w	r3, r3, #2
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d145      	bne.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007f32:	4b2d      	ldr	r3, [pc, #180]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 0308 	and.w	r3, r3, #8
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d005      	beq.n	8007f4a <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8007f3e:	4b2a      	ldr	r3, [pc, #168]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	091b      	lsrs	r3, r3, #4
 8007f44:	f003 030f 	and.w	r3, r3, #15
 8007f48:	e005      	b.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 8007f4a:	4b27      	ldr	r3, [pc, #156]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f50:	0a1b      	lsrs	r3, r3, #8
 8007f52:	f003 030f 	and.w	r3, r3, #15
 8007f56:	4a25      	ldr	r2, [pc, #148]	; (8007fec <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f5c:	61fb      	str	r3, [r7, #28]
          break;
 8007f5e:	e02e      	b.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007f60:	4b21      	ldr	r3, [pc, #132]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f6c:	d129      	bne.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007f6e:	4b1e      	ldr	r3, [pc, #120]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f7a:	d122      	bne.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007f7c:	4b1a      	ldr	r3, [pc, #104]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	0a1b      	lsrs	r3, r3, #8
 8007f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f86:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	fb03 f202 	mul.w	r2, r3, r2
 8007f90:	4b15      	ldr	r3, [pc, #84]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	091b      	lsrs	r3, r3, #4
 8007f96:	f003 030f 	and.w	r3, r3, #15
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007fa2:	4b11      	ldr	r3, [pc, #68]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	0d5b      	lsrs	r3, r3, #21
 8007fa8:	f003 0303 	and.w	r3, r3, #3
 8007fac:	3301      	adds	r3, #1
 8007fae:	005b      	lsls	r3, r3, #1
 8007fb0:	69ba      	ldr	r2, [r7, #24]
 8007fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb6:	61fb      	str	r3, [r7, #28]
          break;
 8007fb8:	e003      	b.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 8007fba:	bf00      	nop
 8007fbc:	e00e      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007fbe:	bf00      	nop
 8007fc0:	e00c      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007fc2:	bf00      	nop
        break;
 8007fc4:	e00a      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007fc6:	bf00      	nop
 8007fc8:	e008      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007fca:	bf00      	nop
 8007fcc:	e006      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007fce:	bf00      	nop
 8007fd0:	e004      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007fd2:	bf00      	nop
 8007fd4:	e002      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007fd6:	bf00      	nop
 8007fd8:	e000      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007fda:	bf00      	nop
    }
  }

  return(frequency);
 8007fdc:	69fb      	ldr	r3, [r7, #28]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3720      	adds	r7, #32
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	40021000 	.word	0x40021000
 8007fec:	0801be18 	.word	0x0801be18

08007ff0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007ffe:	4b72      	ldr	r3, [pc, #456]	; (80081c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	f003 0303 	and.w	r3, r3, #3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00e      	beq.n	8008028 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800800a:	4b6f      	ldr	r3, [pc, #444]	; (80081c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	f003 0203 	and.w	r2, r3, #3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	429a      	cmp	r2, r3
 8008018:	d103      	bne.n	8008022 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
       ||
 800801e:	2b00      	cmp	r3, #0
 8008020:	d142      	bne.n	80080a8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	73fb      	strb	r3, [r7, #15]
 8008026:	e03f      	b.n	80080a8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2b03      	cmp	r3, #3
 800802e:	d018      	beq.n	8008062 <RCCEx_PLLSAI1_Config+0x72>
 8008030:	2b03      	cmp	r3, #3
 8008032:	d825      	bhi.n	8008080 <RCCEx_PLLSAI1_Config+0x90>
 8008034:	2b01      	cmp	r3, #1
 8008036:	d002      	beq.n	800803e <RCCEx_PLLSAI1_Config+0x4e>
 8008038:	2b02      	cmp	r3, #2
 800803a:	d009      	beq.n	8008050 <RCCEx_PLLSAI1_Config+0x60>
 800803c:	e020      	b.n	8008080 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800803e:	4b62      	ldr	r3, [pc, #392]	; (80081c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 0302 	and.w	r3, r3, #2
 8008046:	2b00      	cmp	r3, #0
 8008048:	d11d      	bne.n	8008086 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800804e:	e01a      	b.n	8008086 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008050:	4b5d      	ldr	r3, [pc, #372]	; (80081c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008058:	2b00      	cmp	r3, #0
 800805a:	d116      	bne.n	800808a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008060:	e013      	b.n	800808a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008062:	4b59      	ldr	r3, [pc, #356]	; (80081c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10f      	bne.n	800808e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800806e:	4b56      	ldr	r3, [pc, #344]	; (80081c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008076:	2b00      	cmp	r3, #0
 8008078:	d109      	bne.n	800808e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800807e:	e006      	b.n	800808e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	73fb      	strb	r3, [r7, #15]
      break;
 8008084:	e004      	b.n	8008090 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008086:	bf00      	nop
 8008088:	e002      	b.n	8008090 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800808a:	bf00      	nop
 800808c:	e000      	b.n	8008090 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800808e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008090:	7bfb      	ldrb	r3, [r7, #15]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d108      	bne.n	80080a8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8008096:	4b4c      	ldr	r3, [pc, #304]	; (80081c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	f023 0203 	bic.w	r2, r3, #3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4949      	ldr	r1, [pc, #292]	; (80081c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80080a4:	4313      	orrs	r3, r2
 80080a6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f040 8086 	bne.w	80081bc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80080b0:	4b45      	ldr	r3, [pc, #276]	; (80081c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a44      	ldr	r2, [pc, #272]	; (80081c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80080b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80080ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080bc:	f7fa fb6e 	bl	800279c <HAL_GetTick>
 80080c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80080c2:	e009      	b.n	80080d8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80080c4:	f7fa fb6a 	bl	800279c <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d902      	bls.n	80080d8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	73fb      	strb	r3, [r7, #15]
        break;
 80080d6:	e005      	b.n	80080e4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80080d8:	4b3b      	ldr	r3, [pc, #236]	; (80081c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1ef      	bne.n	80080c4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80080e4:	7bfb      	ldrb	r3, [r7, #15]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d168      	bne.n	80081bc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d113      	bne.n	8008118 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80080f0:	4b35      	ldr	r3, [pc, #212]	; (80081c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80080f2:	691a      	ldr	r2, [r3, #16]
 80080f4:	4b35      	ldr	r3, [pc, #212]	; (80081cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80080f6:	4013      	ands	r3, r2
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	6892      	ldr	r2, [r2, #8]
 80080fc:	0211      	lsls	r1, r2, #8
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	68d2      	ldr	r2, [r2, #12]
 8008102:	06d2      	lsls	r2, r2, #27
 8008104:	4311      	orrs	r1, r2
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	6852      	ldr	r2, [r2, #4]
 800810a:	3a01      	subs	r2, #1
 800810c:	0112      	lsls	r2, r2, #4
 800810e:	430a      	orrs	r2, r1
 8008110:	492d      	ldr	r1, [pc, #180]	; (80081c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008112:	4313      	orrs	r3, r2
 8008114:	610b      	str	r3, [r1, #16]
 8008116:	e02d      	b.n	8008174 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d115      	bne.n	800814a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800811e:	4b2a      	ldr	r3, [pc, #168]	; (80081c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008120:	691a      	ldr	r2, [r3, #16]
 8008122:	4b2b      	ldr	r3, [pc, #172]	; (80081d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008124:	4013      	ands	r3, r2
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	6892      	ldr	r2, [r2, #8]
 800812a:	0211      	lsls	r1, r2, #8
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	6912      	ldr	r2, [r2, #16]
 8008130:	0852      	lsrs	r2, r2, #1
 8008132:	3a01      	subs	r2, #1
 8008134:	0552      	lsls	r2, r2, #21
 8008136:	4311      	orrs	r1, r2
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	6852      	ldr	r2, [r2, #4]
 800813c:	3a01      	subs	r2, #1
 800813e:	0112      	lsls	r2, r2, #4
 8008140:	430a      	orrs	r2, r1
 8008142:	4921      	ldr	r1, [pc, #132]	; (80081c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008144:	4313      	orrs	r3, r2
 8008146:	610b      	str	r3, [r1, #16]
 8008148:	e014      	b.n	8008174 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800814a:	4b1f      	ldr	r3, [pc, #124]	; (80081c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800814c:	691a      	ldr	r2, [r3, #16]
 800814e:	4b21      	ldr	r3, [pc, #132]	; (80081d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008150:	4013      	ands	r3, r2
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	6892      	ldr	r2, [r2, #8]
 8008156:	0211      	lsls	r1, r2, #8
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	6952      	ldr	r2, [r2, #20]
 800815c:	0852      	lsrs	r2, r2, #1
 800815e:	3a01      	subs	r2, #1
 8008160:	0652      	lsls	r2, r2, #25
 8008162:	4311      	orrs	r1, r2
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	6852      	ldr	r2, [r2, #4]
 8008168:	3a01      	subs	r2, #1
 800816a:	0112      	lsls	r2, r2, #4
 800816c:	430a      	orrs	r2, r1
 800816e:	4916      	ldr	r1, [pc, #88]	; (80081c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008170:	4313      	orrs	r3, r2
 8008172:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008174:	4b14      	ldr	r3, [pc, #80]	; (80081c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a13      	ldr	r2, [pc, #76]	; (80081c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800817a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800817e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008180:	f7fa fb0c 	bl	800279c <HAL_GetTick>
 8008184:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008186:	e009      	b.n	800819c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008188:	f7fa fb08 	bl	800279c <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	2b02      	cmp	r3, #2
 8008194:	d902      	bls.n	800819c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	73fb      	strb	r3, [r7, #15]
          break;
 800819a:	e005      	b.n	80081a8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800819c:	4b0a      	ldr	r3, [pc, #40]	; (80081c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d0ef      	beq.n	8008188 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80081a8:	7bfb      	ldrb	r3, [r7, #15]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d106      	bne.n	80081bc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80081ae:	4b06      	ldr	r3, [pc, #24]	; (80081c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80081b0:	691a      	ldr	r2, [r3, #16]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	4904      	ldr	r1, [pc, #16]	; (80081c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80081b8:	4313      	orrs	r3, r2
 80081ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80081bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	40021000 	.word	0x40021000
 80081cc:	07ff800f 	.word	0x07ff800f
 80081d0:	ff9f800f 	.word	0xff9f800f
 80081d4:	f9ff800f 	.word	0xf9ff800f

080081d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80081e6:	4b72      	ldr	r3, [pc, #456]	; (80083b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	f003 0303 	and.w	r3, r3, #3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00e      	beq.n	8008210 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80081f2:	4b6f      	ldr	r3, [pc, #444]	; (80083b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	f003 0203 	and.w	r2, r3, #3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d103      	bne.n	800820a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
       ||
 8008206:	2b00      	cmp	r3, #0
 8008208:	d142      	bne.n	8008290 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	73fb      	strb	r3, [r7, #15]
 800820e:	e03f      	b.n	8008290 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b03      	cmp	r3, #3
 8008216:	d018      	beq.n	800824a <RCCEx_PLLSAI2_Config+0x72>
 8008218:	2b03      	cmp	r3, #3
 800821a:	d825      	bhi.n	8008268 <RCCEx_PLLSAI2_Config+0x90>
 800821c:	2b01      	cmp	r3, #1
 800821e:	d002      	beq.n	8008226 <RCCEx_PLLSAI2_Config+0x4e>
 8008220:	2b02      	cmp	r3, #2
 8008222:	d009      	beq.n	8008238 <RCCEx_PLLSAI2_Config+0x60>
 8008224:	e020      	b.n	8008268 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008226:	4b62      	ldr	r3, [pc, #392]	; (80083b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 0302 	and.w	r3, r3, #2
 800822e:	2b00      	cmp	r3, #0
 8008230:	d11d      	bne.n	800826e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008236:	e01a      	b.n	800826e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008238:	4b5d      	ldr	r3, [pc, #372]	; (80083b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008240:	2b00      	cmp	r3, #0
 8008242:	d116      	bne.n	8008272 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008248:	e013      	b.n	8008272 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800824a:	4b59      	ldr	r3, [pc, #356]	; (80083b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008252:	2b00      	cmp	r3, #0
 8008254:	d10f      	bne.n	8008276 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008256:	4b56      	ldr	r3, [pc, #344]	; (80083b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d109      	bne.n	8008276 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008266:	e006      	b.n	8008276 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	73fb      	strb	r3, [r7, #15]
      break;
 800826c:	e004      	b.n	8008278 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800826e:	bf00      	nop
 8008270:	e002      	b.n	8008278 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008272:	bf00      	nop
 8008274:	e000      	b.n	8008278 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008276:	bf00      	nop
    }

    if(status == HAL_OK)
 8008278:	7bfb      	ldrb	r3, [r7, #15]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d108      	bne.n	8008290 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800827e:	4b4c      	ldr	r3, [pc, #304]	; (80083b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	f023 0203 	bic.w	r2, r3, #3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4949      	ldr	r1, [pc, #292]	; (80083b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800828c:	4313      	orrs	r3, r2
 800828e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008290:	7bfb      	ldrb	r3, [r7, #15]
 8008292:	2b00      	cmp	r3, #0
 8008294:	f040 8086 	bne.w	80083a4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008298:	4b45      	ldr	r3, [pc, #276]	; (80083b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a44      	ldr	r2, [pc, #272]	; (80083b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800829e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082a4:	f7fa fa7a 	bl	800279c <HAL_GetTick>
 80082a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80082aa:	e009      	b.n	80082c0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80082ac:	f7fa fa76 	bl	800279c <HAL_GetTick>
 80082b0:	4602      	mov	r2, r0
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d902      	bls.n	80082c0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	73fb      	strb	r3, [r7, #15]
        break;
 80082be:	e005      	b.n	80082cc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80082c0:	4b3b      	ldr	r3, [pc, #236]	; (80083b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1ef      	bne.n	80082ac <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d168      	bne.n	80083a4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d113      	bne.n	8008300 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80082d8:	4b35      	ldr	r3, [pc, #212]	; (80083b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082da:	695a      	ldr	r2, [r3, #20]
 80082dc:	4b35      	ldr	r3, [pc, #212]	; (80083b4 <RCCEx_PLLSAI2_Config+0x1dc>)
 80082de:	4013      	ands	r3, r2
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	6892      	ldr	r2, [r2, #8]
 80082e4:	0211      	lsls	r1, r2, #8
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	68d2      	ldr	r2, [r2, #12]
 80082ea:	06d2      	lsls	r2, r2, #27
 80082ec:	4311      	orrs	r1, r2
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	6852      	ldr	r2, [r2, #4]
 80082f2:	3a01      	subs	r2, #1
 80082f4:	0112      	lsls	r2, r2, #4
 80082f6:	430a      	orrs	r2, r1
 80082f8:	492d      	ldr	r1, [pc, #180]	; (80083b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	614b      	str	r3, [r1, #20]
 80082fe:	e02d      	b.n	800835c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d115      	bne.n	8008332 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008306:	4b2a      	ldr	r3, [pc, #168]	; (80083b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008308:	695a      	ldr	r2, [r3, #20]
 800830a:	4b2b      	ldr	r3, [pc, #172]	; (80083b8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800830c:	4013      	ands	r3, r2
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	6892      	ldr	r2, [r2, #8]
 8008312:	0211      	lsls	r1, r2, #8
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	6912      	ldr	r2, [r2, #16]
 8008318:	0852      	lsrs	r2, r2, #1
 800831a:	3a01      	subs	r2, #1
 800831c:	0552      	lsls	r2, r2, #21
 800831e:	4311      	orrs	r1, r2
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	6852      	ldr	r2, [r2, #4]
 8008324:	3a01      	subs	r2, #1
 8008326:	0112      	lsls	r2, r2, #4
 8008328:	430a      	orrs	r2, r1
 800832a:	4921      	ldr	r1, [pc, #132]	; (80083b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800832c:	4313      	orrs	r3, r2
 800832e:	614b      	str	r3, [r1, #20]
 8008330:	e014      	b.n	800835c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008332:	4b1f      	ldr	r3, [pc, #124]	; (80083b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008334:	695a      	ldr	r2, [r3, #20]
 8008336:	4b21      	ldr	r3, [pc, #132]	; (80083bc <RCCEx_PLLSAI2_Config+0x1e4>)
 8008338:	4013      	ands	r3, r2
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	6892      	ldr	r2, [r2, #8]
 800833e:	0211      	lsls	r1, r2, #8
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	6952      	ldr	r2, [r2, #20]
 8008344:	0852      	lsrs	r2, r2, #1
 8008346:	3a01      	subs	r2, #1
 8008348:	0652      	lsls	r2, r2, #25
 800834a:	4311      	orrs	r1, r2
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	6852      	ldr	r2, [r2, #4]
 8008350:	3a01      	subs	r2, #1
 8008352:	0112      	lsls	r2, r2, #4
 8008354:	430a      	orrs	r2, r1
 8008356:	4916      	ldr	r1, [pc, #88]	; (80083b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008358:	4313      	orrs	r3, r2
 800835a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800835c:	4b14      	ldr	r3, [pc, #80]	; (80083b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a13      	ldr	r2, [pc, #76]	; (80083b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008366:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008368:	f7fa fa18 	bl	800279c <HAL_GetTick>
 800836c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800836e:	e009      	b.n	8008384 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008370:	f7fa fa14 	bl	800279c <HAL_GetTick>
 8008374:	4602      	mov	r2, r0
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	2b02      	cmp	r3, #2
 800837c:	d902      	bls.n	8008384 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	73fb      	strb	r3, [r7, #15]
          break;
 8008382:	e005      	b.n	8008390 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008384:	4b0a      	ldr	r3, [pc, #40]	; (80083b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800838c:	2b00      	cmp	r3, #0
 800838e:	d0ef      	beq.n	8008370 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008390:	7bfb      	ldrb	r3, [r7, #15]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d106      	bne.n	80083a4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008396:	4b06      	ldr	r3, [pc, #24]	; (80083b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008398:	695a      	ldr	r2, [r3, #20]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	4904      	ldr	r1, [pc, #16]	; (80083b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80083a0:	4313      	orrs	r3, r2
 80083a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	40021000 	.word	0x40021000
 80083b4:	07ff800f 	.word	0x07ff800f
 80083b8:	ff9f800f 	.word	0xff9f800f
 80083bc:	f9ff800f 	.word	0xf9ff800f

080083c0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b089      	sub	sp, #36	; 0x24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80083ca:	2300      	movs	r3, #0
 80083cc:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80083ce:	2300      	movs	r3, #0
 80083d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80083d2:	2300      	movs	r3, #0
 80083d4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083dc:	d10b      	bne.n	80083f6 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80083de:	4b7e      	ldr	r3, [pc, #504]	; (80085d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80083e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083e4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80083e8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	2b60      	cmp	r3, #96	; 0x60
 80083ee:	d112      	bne.n	8008416 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80083f0:	4b7a      	ldr	r3, [pc, #488]	; (80085dc <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80083f2:	61fb      	str	r3, [r7, #28]
 80083f4:	e00f      	b.n	8008416 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083fc:	d10b      	bne.n	8008416 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80083fe:	4b76      	ldr	r3, [pc, #472]	; (80085d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008400:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008404:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008408:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008410:	d101      	bne.n	8008416 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8008412:	4b72      	ldr	r3, [pc, #456]	; (80085dc <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8008414:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	2b00      	cmp	r3, #0
 800841a:	f040 80d6 	bne.w	80085ca <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	2b40      	cmp	r3, #64	; 0x40
 8008426:	d003      	beq.n	8008430 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800842e:	d13b      	bne.n	80084a8 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008430:	4b69      	ldr	r3, [pc, #420]	; (80085d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008438:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800843c:	f040 80c4 	bne.w	80085c8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8008440:	4b65      	ldr	r3, [pc, #404]	; (80085d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 80bd 	beq.w	80085c8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800844e:	4b62      	ldr	r3, [pc, #392]	; (80085d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	091b      	lsrs	r3, r3, #4
 8008454:	f003 030f 	and.w	r3, r3, #15
 8008458:	3301      	adds	r3, #1
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008460:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008462:	4b5d      	ldr	r3, [pc, #372]	; (80085d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	0a1b      	lsrs	r3, r3, #8
 8008468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800846c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800846e:	4b5a      	ldr	r3, [pc, #360]	; (80085d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	0edb      	lsrs	r3, r3, #27
 8008474:	f003 031f 	and.w	r3, r3, #31
 8008478:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10a      	bne.n	8008496 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8008480:	4b55      	ldr	r3, [pc, #340]	; (80085d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d002      	beq.n	8008492 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800848c:	2311      	movs	r3, #17
 800848e:	617b      	str	r3, [r7, #20]
 8008490:	e001      	b.n	8008496 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8008492:	2307      	movs	r3, #7
 8008494:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	fb03 f202 	mul.w	r2, r3, r2
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084a4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80084a6:	e08f      	b.n	80085c8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d13a      	bne.n	8008524 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80084ae:	4b4a      	ldr	r3, [pc, #296]	; (80085d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084ba:	f040 8086 	bne.w	80085ca <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80084be:	4b46      	ldr	r3, [pc, #280]	; (80085d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d07f      	beq.n	80085ca <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80084ca:	4b43      	ldr	r3, [pc, #268]	; (80085d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	091b      	lsrs	r3, r3, #4
 80084d0:	f003 030f 	and.w	r3, r3, #15
 80084d4:	3301      	adds	r3, #1
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80084dc:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80084de:	4b3e      	ldr	r3, [pc, #248]	; (80085d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	0a1b      	lsrs	r3, r3, #8
 80084e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084e8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80084ea:	4b3b      	ldr	r3, [pc, #236]	; (80085d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	0edb      	lsrs	r3, r3, #27
 80084f0:	f003 031f 	and.w	r3, r3, #31
 80084f4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10a      	bne.n	8008512 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80084fc:	4b36      	ldr	r3, [pc, #216]	; (80085d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d002      	beq.n	800850e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8008508:	2311      	movs	r3, #17
 800850a:	617b      	str	r3, [r7, #20]
 800850c:	e001      	b.n	8008512 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800850e:	2307      	movs	r3, #7
 8008510:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	fb03 f202 	mul.w	r2, r3, r2
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008520:	61fb      	str	r3, [r7, #28]
 8008522:	e052      	b.n	80085ca <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	2b80      	cmp	r3, #128	; 0x80
 8008528:	d003      	beq.n	8008532 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008530:	d109      	bne.n	8008546 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008532:	4b29      	ldr	r3, [pc, #164]	; (80085d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800853a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800853e:	d144      	bne.n	80085ca <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8008540:	4b27      	ldr	r3, [pc, #156]	; (80085e0 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8008542:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008544:	e041      	b.n	80085ca <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	2b20      	cmp	r3, #32
 800854a:	d003      	beq.n	8008554 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008552:	d13a      	bne.n	80085ca <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8008554:	4b20      	ldr	r3, [pc, #128]	; (80085d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800855c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008560:	d133      	bne.n	80085ca <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8008562:	4b1d      	ldr	r3, [pc, #116]	; (80085d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d02d      	beq.n	80085ca <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800856e:	4b1a      	ldr	r3, [pc, #104]	; (80085d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	091b      	lsrs	r3, r3, #4
 8008574:	f003 030f 	and.w	r3, r3, #15
 8008578:	3301      	adds	r3, #1
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008580:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008582:	4b15      	ldr	r3, [pc, #84]	; (80085d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008584:	695b      	ldr	r3, [r3, #20]
 8008586:	0a1b      	lsrs	r3, r3, #8
 8008588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800858c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800858e:	4b12      	ldr	r3, [pc, #72]	; (80085d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	0edb      	lsrs	r3, r3, #27
 8008594:	f003 031f 	and.w	r3, r3, #31
 8008598:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10a      	bne.n	80085b6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80085a0:	4b0d      	ldr	r3, [pc, #52]	; (80085d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80085a2:	695b      	ldr	r3, [r3, #20]
 80085a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80085ac:	2311      	movs	r3, #17
 80085ae:	617b      	str	r3, [r7, #20]
 80085b0:	e001      	b.n	80085b6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 80085b2:	2307      	movs	r3, #7
 80085b4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	fb03 f202 	mul.w	r2, r3, r2
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80085c4:	61fb      	str	r3, [r7, #28]
 80085c6:	e000      	b.n	80085ca <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80085c8:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80085ca:	69fb      	ldr	r3, [r7, #28]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3724      	adds	r7, #36	; 0x24
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr
 80085d8:	40021000 	.word	0x40021000
 80085dc:	001fff68 	.word	0x001fff68
 80085e0:	00f42400 	.word	0x00f42400

080085e4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d079      	beq.n	80086ea <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d106      	bne.n	8008610 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7f9 fd10 	bl	8002030 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2202      	movs	r2, #2
 8008614:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	f003 0310 	and.w	r3, r3, #16
 8008622:	2b10      	cmp	r3, #16
 8008624:	d058      	beq.n	80086d8 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	22ca      	movs	r2, #202	; 0xca
 800862c:	625a      	str	r2, [r3, #36]	; 0x24
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2253      	movs	r2, #83	; 0x53
 8008634:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f9a4 	bl	8008984 <RTC_EnterInitMode>
 800863c:	4603      	mov	r3, r0
 800863e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008640:	7bfb      	ldrb	r3, [r7, #15]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d127      	bne.n	8008696 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	6812      	ldr	r2, [r2, #0]
 8008650:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008654:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008658:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	6899      	ldr	r1, [r3, #8]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685a      	ldr	r2, [r3, #4]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	431a      	orrs	r2, r3
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	699b      	ldr	r3, [r3, #24]
 800866e:	431a      	orrs	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	430a      	orrs	r2, r1
 8008676:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	68d2      	ldr	r2, [r2, #12]
 8008680:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	6919      	ldr	r1, [r3, #16]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	041a      	lsls	r2, r3, #16
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	430a      	orrs	r2, r1
 8008694:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 f9a8 	bl	80089ec <RTC_ExitInitMode>
 800869c:	4603      	mov	r3, r0
 800869e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d113      	bne.n	80086ce <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f022 0203 	bic.w	r2, r2, #3
 80086b4:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	69da      	ldr	r2, [r3, #28]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	695b      	ldr	r3, [r3, #20]
 80086c4:	431a      	orrs	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	430a      	orrs	r2, r1
 80086cc:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	22ff      	movs	r2, #255	; 0xff
 80086d4:	625a      	str	r2, [r3, #36]	; 0x24
 80086d6:	e001      	b.n	80086dc <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80086d8:	2300      	movs	r3, #0
 80086da:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d103      	bne.n	80086ea <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 80086ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80086f4:	b590      	push	{r4, r7, lr}
 80086f6:	b087      	sub	sp, #28
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d101      	bne.n	800870e <HAL_RTC_SetTime+0x1a>
 800870a:	2302      	movs	r3, #2
 800870c:	e08b      	b.n	8008826 <HAL_RTC_SetTime+0x132>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2202      	movs	r2, #2
 800871a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	22ca      	movs	r2, #202	; 0xca
 8008724:	625a      	str	r2, [r3, #36]	; 0x24
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2253      	movs	r2, #83	; 0x53
 800872c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f000 f928 	bl	8008984 <RTC_EnterInitMode>
 8008734:	4603      	mov	r3, r0
 8008736:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008738:	7cfb      	ldrb	r3, [r7, #19]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d163      	bne.n	8008806 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d126      	bne.n	8008792 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800874e:	2b00      	cmp	r3, #0
 8008750:	d102      	bne.n	8008758 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2200      	movs	r2, #0
 8008756:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	4618      	mov	r0, r3
 800875e:	f000 f983 	bl	8008a68 <RTC_ByteToBcd2>
 8008762:	4603      	mov	r3, r0
 8008764:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	785b      	ldrb	r3, [r3, #1]
 800876a:	4618      	mov	r0, r3
 800876c:	f000 f97c 	bl	8008a68 <RTC_ByteToBcd2>
 8008770:	4603      	mov	r3, r0
 8008772:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008774:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	789b      	ldrb	r3, [r3, #2]
 800877a:	4618      	mov	r0, r3
 800877c:	f000 f974 	bl	8008a68 <RTC_ByteToBcd2>
 8008780:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008782:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	78db      	ldrb	r3, [r3, #3]
 800878a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800878c:	4313      	orrs	r3, r2
 800878e:	617b      	str	r3, [r7, #20]
 8008790:	e018      	b.n	80087c4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800879c:	2b00      	cmp	r3, #0
 800879e:	d102      	bne.n	80087a6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	2200      	movs	r2, #0
 80087a4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	785b      	ldrb	r3, [r3, #1]
 80087b0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80087b2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80087b8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	78db      	ldrb	r3, [r3, #3]
 80087be:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80087c0:	4313      	orrs	r3, r2
 80087c2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80087ce:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80087d2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	689a      	ldr	r2, [r3, #8]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80087e2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	6899      	ldr	r1, [r3, #8]
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	68da      	ldr	r2, [r3, #12]
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	431a      	orrs	r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	430a      	orrs	r2, r1
 80087fa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f000 f8f5 	bl	80089ec <RTC_ExitInitMode>
 8008802:	4603      	mov	r3, r0
 8008804:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	22ff      	movs	r2, #255	; 0xff
 800880c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800880e:	7cfb      	ldrb	r3, [r7, #19]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d103      	bne.n	800881c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008824:	7cfb      	ldrb	r3, [r7, #19]
}
 8008826:	4618      	mov	r0, r3
 8008828:	371c      	adds	r7, #28
 800882a:	46bd      	mov	sp, r7
 800882c:	bd90      	pop	{r4, r7, pc}

0800882e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800882e:	b590      	push	{r4, r7, lr}
 8008830:	b087      	sub	sp, #28
 8008832:	af00      	add	r7, sp, #0
 8008834:	60f8      	str	r0, [r7, #12]
 8008836:	60b9      	str	r1, [r7, #8]
 8008838:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d101      	bne.n	8008848 <HAL_RTC_SetDate+0x1a>
 8008844:	2302      	movs	r3, #2
 8008846:	e075      	b.n	8008934 <HAL_RTC_SetDate+0x106>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2202      	movs	r2, #2
 8008854:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d10e      	bne.n	800887c <HAL_RTC_SetDate+0x4e>
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	785b      	ldrb	r3, [r3, #1]
 8008862:	f003 0310 	and.w	r3, r3, #16
 8008866:	2b00      	cmp	r3, #0
 8008868:	d008      	beq.n	800887c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	785b      	ldrb	r3, [r3, #1]
 800886e:	f023 0310 	bic.w	r3, r3, #16
 8008872:	b2db      	uxtb	r3, r3
 8008874:	330a      	adds	r3, #10
 8008876:	b2da      	uxtb	r2, r3
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d11c      	bne.n	80088bc <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	78db      	ldrb	r3, [r3, #3]
 8008886:	4618      	mov	r0, r3
 8008888:	f000 f8ee 	bl	8008a68 <RTC_ByteToBcd2>
 800888c:	4603      	mov	r3, r0
 800888e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	785b      	ldrb	r3, [r3, #1]
 8008894:	4618      	mov	r0, r3
 8008896:	f000 f8e7 	bl	8008a68 <RTC_ByteToBcd2>
 800889a:	4603      	mov	r3, r0
 800889c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800889e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	789b      	ldrb	r3, [r3, #2]
 80088a4:	4618      	mov	r0, r3
 80088a6:	f000 f8df 	bl	8008a68 <RTC_ByteToBcd2>
 80088aa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80088ac:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80088b6:	4313      	orrs	r3, r2
 80088b8:	617b      	str	r3, [r7, #20]
 80088ba:	e00e      	b.n	80088da <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	78db      	ldrb	r3, [r3, #3]
 80088c0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	785b      	ldrb	r3, [r3, #1]
 80088c6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80088c8:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80088ce:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80088d6:	4313      	orrs	r3, r2
 80088d8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	22ca      	movs	r2, #202	; 0xca
 80088e0:	625a      	str	r2, [r3, #36]	; 0x24
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2253      	movs	r2, #83	; 0x53
 80088e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 f84a 	bl	8008984 <RTC_EnterInitMode>
 80088f0:	4603      	mov	r3, r0
 80088f2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80088f4:	7cfb      	ldrb	r3, [r7, #19]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10c      	bne.n	8008914 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008904:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008908:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f000 f86e 	bl	80089ec <RTC_ExitInitMode>
 8008910:	4603      	mov	r3, r0
 8008912:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	22ff      	movs	r2, #255	; 0xff
 800891a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800891c:	7cfb      	ldrb	r3, [r7, #19]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d103      	bne.n	800892a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2201      	movs	r2, #1
 8008926:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008932:	7cfb      	ldrb	r3, [r7, #19]
}
 8008934:	4618      	mov	r0, r3
 8008936:	371c      	adds	r7, #28
 8008938:	46bd      	mov	sp, r7
 800893a:	bd90      	pop	{r4, r7, pc}

0800893c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a0d      	ldr	r2, [pc, #52]	; (8008980 <HAL_RTC_WaitForSynchro+0x44>)
 800894a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800894c:	f7f9 ff26 	bl	800279c <HAL_GetTick>
 8008950:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008952:	e009      	b.n	8008968 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008954:	f7f9 ff22 	bl	800279c <HAL_GetTick>
 8008958:	4602      	mov	r2, r0
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008962:	d901      	bls.n	8008968 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8008964:	2303      	movs	r3, #3
 8008966:	e007      	b.n	8008978 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	f003 0320 	and.w	r3, r3, #32
 8008972:	2b00      	cmp	r3, #0
 8008974:	d0ee      	beq.n	8008954 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	0003ff5f 	.word	0x0003ff5f

08008984 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800898c:	2300      	movs	r3, #0
 800898e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800899a:	2b00      	cmp	r3, #0
 800899c:	d120      	bne.n	80089e0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089a6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80089a8:	f7f9 fef8 	bl	800279c <HAL_GetTick>
 80089ac:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80089ae:	e00d      	b.n	80089cc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80089b0:	f7f9 fef4 	bl	800279c <HAL_GetTick>
 80089b4:	4602      	mov	r2, r0
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089be:	d905      	bls.n	80089cc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80089c0:	2303      	movs	r3, #3
 80089c2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2203      	movs	r2, #3
 80089c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d102      	bne.n	80089e0 <RTC_EnterInitMode+0x5c>
 80089da:	7bfb      	ldrb	r3, [r7, #15]
 80089dc:	2b03      	cmp	r3, #3
 80089de:	d1e7      	bne.n	80089b0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80089e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
	...

080089ec <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80089f8:	4b1a      	ldr	r3, [pc, #104]	; (8008a64 <RTC_ExitInitMode+0x78>)
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	4a19      	ldr	r2, [pc, #100]	; (8008a64 <RTC_ExitInitMode+0x78>)
 80089fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a02:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008a04:	4b17      	ldr	r3, [pc, #92]	; (8008a64 <RTC_ExitInitMode+0x78>)
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	f003 0320 	and.w	r3, r3, #32
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10c      	bne.n	8008a2a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7ff ff93 	bl	800893c <HAL_RTC_WaitForSynchro>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d01e      	beq.n	8008a5a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2203      	movs	r2, #3
 8008a20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	73fb      	strb	r3, [r7, #15]
 8008a28:	e017      	b.n	8008a5a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008a2a:	4b0e      	ldr	r3, [pc, #56]	; (8008a64 <RTC_ExitInitMode+0x78>)
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	4a0d      	ldr	r2, [pc, #52]	; (8008a64 <RTC_ExitInitMode+0x78>)
 8008a30:	f023 0320 	bic.w	r3, r3, #32
 8008a34:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f7ff ff80 	bl	800893c <HAL_RTC_WaitForSynchro>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d005      	beq.n	8008a4e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2203      	movs	r2, #3
 8008a46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008a4e:	4b05      	ldr	r3, [pc, #20]	; (8008a64 <RTC_ExitInitMode+0x78>)
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	4a04      	ldr	r2, [pc, #16]	; (8008a64 <RTC_ExitInitMode+0x78>)
 8008a54:	f043 0320 	orr.w	r3, r3, #32
 8008a58:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	40002800 	.word	0x40002800

08008a68 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	4603      	mov	r3, r0
 8008a70:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008a72:	2300      	movs	r3, #0
 8008a74:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8008a76:	79fb      	ldrb	r3, [r7, #7]
 8008a78:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8008a7a:	e005      	b.n	8008a88 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8008a82:	7afb      	ldrb	r3, [r7, #11]
 8008a84:	3b0a      	subs	r3, #10
 8008a86:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8008a88:	7afb      	ldrb	r3, [r7, #11]
 8008a8a:	2b09      	cmp	r3, #9
 8008a8c:	d8f6      	bhi.n	8008a7c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	011b      	lsls	r3, r3, #4
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	7afb      	ldrb	r3, [r7, #11]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	b2db      	uxtb	r3, r3
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3714      	adds	r7, #20
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b08a      	sub	sp, #40	; 0x28
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d101      	bne.n	8008aba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e078      	b.n	8008bac <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d105      	bne.n	8008ad2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f7f9 fae1 	bl	8002094 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2203      	movs	r2, #3
 8008ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f86a 	bl	8008bb4 <HAL_SD_InitCard>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d001      	beq.n	8008aea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e060      	b.n	8008bac <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008aea:	f107 0308 	add.w	r3, r7, #8
 8008aee:	4619      	mov	r1, r3
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 fdb5 	bl	8009660 <HAL_SD_GetCardStatus>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d001      	beq.n	8008b00 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	e055      	b.n	8008bac <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008b00:	7e3b      	ldrb	r3, [r7, #24]
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008b06:	7e7b      	ldrb	r3, [r7, #25]
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d10a      	bne.n	8008b2a <HAL_SD_Init+0x82>
 8008b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d102      	bne.n	8008b20 <HAL_SD_Init+0x78>
 8008b1a:	6a3b      	ldr	r3, [r7, #32]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d004      	beq.n	8008b2a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b26:	65da      	str	r2, [r3, #92]	; 0x5c
 8008b28:	e00b      	b.n	8008b42 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d104      	bne.n	8008b3c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b38:	65da      	str	r2, [r3, #92]	; 0x5c
 8008b3a:	e002      	b.n	8008b42 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	4619      	mov	r1, r3
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 fe6b 	bl	8009824 <HAL_SD_ConfigWideBusOperation>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d001      	beq.n	8008b58 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	e029      	b.n	8008bac <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008b58:	f7f9 fe20 	bl	800279c <HAL_GetTick>
 8008b5c:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008b5e:	e014      	b.n	8008b8a <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8008b60:	f7f9 fe1c 	bl	800279c <HAL_GetTick>
 8008b64:	4602      	mov	r2, r0
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b6e:	d10c      	bne.n	8008b8a <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008b76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8008b86:	2303      	movs	r3, #3
 8008b88:	e010      	b.n	8008bac <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 ff5e 	bl	8009a4c <HAL_SD_GetCardState>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b04      	cmp	r3, #4
 8008b94:	d1e4      	bne.n	8008b60 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3728      	adds	r7, #40	; 0x28
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008bb4:	b5b0      	push	{r4, r5, r7, lr}
 8008bb6:	b08e      	sub	sp, #56	; 0x38
 8008bb8:	af04      	add	r7, sp, #16
 8008bba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8008bcc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008bd0:	f7fe faee 	bl	80071b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008bd4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d109      	bne.n	8008bf0 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008bea:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e079      	b.n	8008ce4 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	0a1b      	lsrs	r3, r3, #8
 8008bf4:	4a3d      	ldr	r2, [pc, #244]	; (8008cec <HAL_SD_InitCard+0x138>)
 8008bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8008bfa:	091b      	lsrs	r3, r3, #4
 8008bfc:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	699b      	ldr	r3, [r3, #24]
 8008c02:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d107      	bne.n	8008c1c <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f042 0210 	orr.w	r2, r2, #16
 8008c1a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681d      	ldr	r5, [r3, #0]
 8008c20:	466c      	mov	r4, sp
 8008c22:	f107 0314 	add.w	r3, r7, #20
 8008c26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008c2e:	f107 0308 	add.w	r3, r7, #8
 8008c32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c34:	4628      	mov	r0, r5
 8008c36:	f002 ff65 	bl	800bb04 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f002 ffa8 	bl	800bb94 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	005b      	lsls	r3, r3, #1
 8008c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c4e:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8008c50:	4a27      	ldr	r2, [pc, #156]	; (8008cf0 <HAL_SD_InitCard+0x13c>)
 8008c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c58:	3301      	adds	r3, #1
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7f9 fdaa 	bl	80027b4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 ffd3 	bl	8009c0c <SD_PowerON>
 8008c66:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c68:	6a3b      	ldr	r3, [r7, #32]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00b      	beq.n	8008c86 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c7a:	6a3b      	ldr	r3, [r7, #32]
 8008c7c:	431a      	orrs	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e02e      	b.n	8008ce4 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 ff00 	bl	8009a8c <SD_InitCard>
 8008c8c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c8e:	6a3b      	ldr	r3, [r7, #32]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00b      	beq.n	8008cac <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ca0:	6a3b      	ldr	r3, [r7, #32]
 8008ca2:	431a      	orrs	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e01b      	b.n	8008ce4 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f003 f803 	bl	800bcc0 <SDMMC_CmdBlockLength>
 8008cba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cbc:	6a3b      	ldr	r3, [r7, #32]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00f      	beq.n	8008ce2 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a0b      	ldr	r2, [pc, #44]	; (8008cf4 <HAL_SD_InitCard+0x140>)
 8008cc8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cce:	6a3b      	ldr	r3, [r7, #32]
 8008cd0:	431a      	orrs	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e000      	b.n	8008ce4 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3728      	adds	r7, #40	; 0x28
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bdb0      	pop	{r4, r5, r7, pc}
 8008cec:	014f8b59 	.word	0x014f8b59
 8008cf0:	00012110 	.word	0x00012110
 8008cf4:	1fe00fff 	.word	0x1fe00fff

08008cf8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b08c      	sub	sp, #48	; 0x30
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]
 8008d04:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d107      	bne.n	8008d20 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d14:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e08d      	b.n	8008e3c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	f040 8086 	bne.w	8008e3a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2200      	movs	r2, #0
 8008d32:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	441a      	add	r2, r3
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d907      	bls.n	8008d52 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d46:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e074      	b.n	8008e3c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2203      	movs	r2, #3
 8008d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	025a      	lsls	r2, r3, #9
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d002      	beq.n	8008d7e <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 8008d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7a:	025b      	lsls	r3, r3, #9
 8008d7c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d82:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	025b      	lsls	r3, r3, #9
 8008d88:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008d8a:	2390      	movs	r3, #144	; 0x90
 8008d8c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008d8e:	2302      	movs	r3, #2
 8008d90:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 8008d96:	2300      	movs	r3, #0
 8008d98:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f107 0210 	add.w	r2, r7, #16
 8008da2:	4611      	mov	r1, r2
 8008da4:	4618      	mov	r0, r3
 8008da6:	f002 ff5f 	bl	800bc68 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68da      	ldr	r2, [r3, #12]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008db8:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d90a      	bls.n	8008de6 <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2282      	movs	r2, #130	; 0x82
 8008dd4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f002 ffb5 	bl	800bd4c <SDMMC_CmdReadMultiBlock>
 8008de2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008de4:	e009      	b.n	8008dfa <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2281      	movs	r2, #129	; 0x81
 8008dea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008df2:	4618      	mov	r0, r3
 8008df4:	f002 ff87 	bl	800bd06 <SDMMC_CmdReadSingleBlock>
 8008df8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d012      	beq.n	8008e26 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a0f      	ldr	r2, [pc, #60]	; (8008e44 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8008e06:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0e:	431a      	orrs	r2, r3
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	e00a      	b.n	8008e3c <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008e34:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8008e36:	2300      	movs	r3, #0
 8008e38:	e000      	b.n	8008e3c <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8008e3a:	2302      	movs	r3, #2
  }
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3730      	adds	r7, #48	; 0x30
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	1fe00fff 	.word	0x1fe00fff

08008e48 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b08c      	sub	sp, #48	; 0x30
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
 8008e54:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d107      	bne.n	8008e70 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e64:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e08d      	b.n	8008f8c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	f040 8086 	bne.w	8008f8a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008e84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	441a      	add	r2, r3
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d907      	bls.n	8008ea2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e96:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e074      	b.n	8008f8c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2203      	movs	r2, #3
 8008ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	68ba      	ldr	r2, [r7, #8]
 8008eb6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	025a      	lsls	r2, r3, #9
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d002      	beq.n	8008ece <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8008ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eca:	025b      	lsls	r3, r3, #9
 8008ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008ece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ed2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	025b      	lsls	r3, r3, #9
 8008ed8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008eda:	2390      	movs	r3, #144	; 0x90
 8008edc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f107 0210 	add.w	r2, r7, #16
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f002 feb7 	bl	800bc68 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68da      	ldr	r2, [r3, #12]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f08:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2201      	movs	r2, #1
 8008f18:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d90a      	bls.n	8008f36 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	22a0      	movs	r2, #160	; 0xa0
 8008f24:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f002 ff53 	bl	800bdd8 <SDMMC_CmdWriteMultiBlock>
 8008f32:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008f34:	e009      	b.n	8008f4a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2290      	movs	r2, #144	; 0x90
 8008f3a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f42:	4618      	mov	r0, r3
 8008f44:	f002 ff25 	bl	800bd92 <SDMMC_CmdWriteSingleBlock>
 8008f48:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d012      	beq.n	8008f76 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a0f      	ldr	r2, [pc, #60]	; (8008f94 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8008f56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5e:	431a      	orrs	r2, r3
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	e00a      	b.n	8008f8c <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8008f84:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8008f86:	2300      	movs	r3, #0
 8008f88:	e000      	b.n	8008f8c <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8008f8a:	2302      	movs	r3, #2
  }
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3730      	adds	r7, #48	; 0x30
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	1fe00fff 	.word	0x1fe00fff

08008f98 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d008      	beq.n	8008fc6 <HAL_SD_IRQHandler+0x2e>
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f003 0308 	and.w	r3, r3, #8
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d003      	beq.n	8008fc6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f001 f98e 	bl	800a2e0 <SD_Read_IT>
 8008fc4:	e199      	b.n	80092fa <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 80ae 	beq.w	8009132 <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008fde:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	6812      	ldr	r2, [r2, #0]
 8008fea:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8008fee:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8008ff2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009002:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68da      	ldr	r2, [r3, #12]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009012:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f003 0308 	and.w	r3, r3, #8
 800901a:	2b00      	cmp	r3, #0
 800901c:	d038      	beq.n	8009090 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f003 0302 	and.w	r3, r3, #2
 8009024:	2b00      	cmp	r3, #0
 8009026:	d104      	bne.n	8009032 <HAL_SD_IRQHandler+0x9a>
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f003 0320 	and.w	r3, r3, #32
 800902e:	2b00      	cmp	r3, #0
 8009030:	d011      	beq.n	8009056 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4618      	mov	r0, r3
 8009038:	f002 fef2 	bl	800be20 <SDMMC_CmdStopTransfer>
 800903c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d008      	beq.n	8009056 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	431a      	orrs	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 f957 	bl	8009304 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a90      	ldr	r2, [pc, #576]	; (800929c <HAL_SD_IRQHandler+0x304>)
 800905c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2201      	movs	r2, #1
 8009062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	2b00      	cmp	r3, #0
 8009074:	d104      	bne.n	8009080 <HAL_SD_IRQHandler+0xe8>
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f003 0302 	and.w	r3, r3, #2
 800907c:	2b00      	cmp	r3, #0
 800907e:	d003      	beq.n	8009088 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f004 fe1b 	bl	800dcbc <HAL_SD_RxCpltCallback>
 8009086:	e138      	b.n	80092fa <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f004 fe0d 	bl	800dca8 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 800908e:	e134      	b.n	80092fa <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009096:	2b00      	cmp	r3, #0
 8009098:	f000 812f 	beq.w	80092fa <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2200      	movs	r2, #0
 80090a2:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2200      	movs	r2, #0
 80090aa:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2200      	movs	r2, #0
 80090b2:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f003 0302 	and.w	r3, r3, #2
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d104      	bne.n	80090c8 <HAL_SD_IRQHandler+0x130>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f003 0320 	and.w	r3, r3, #32
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d011      	beq.n	80090ec <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4618      	mov	r0, r3
 80090ce:	f002 fea7 	bl	800be20 <SDMMC_CmdStopTransfer>
 80090d2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d008      	beq.n	80090ec <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	431a      	orrs	r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f90c 	bl	8009304 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f003 0310 	and.w	r3, r3, #16
 8009100:	2b00      	cmp	r3, #0
 8009102:	d104      	bne.n	800910e <HAL_SD_IRQHandler+0x176>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f003 0320 	and.w	r3, r3, #32
 800910a:	2b00      	cmp	r3, #0
 800910c:	d002      	beq.n	8009114 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f004 fdca 	bl	800dca8 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f003 0301 	and.w	r3, r3, #1
 800911a:	2b00      	cmp	r3, #0
 800911c:	d105      	bne.n	800912a <HAL_SD_IRQHandler+0x192>
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f003 0302 	and.w	r3, r3, #2
 8009124:	2b00      	cmp	r3, #0
 8009126:	f000 80e8 	beq.w	80092fa <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f004 fdc6 	bl	800dcbc <HAL_SD_RxCpltCallback>
}
 8009130:	e0e3      	b.n	80092fa <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800913c:	2b00      	cmp	r3, #0
 800913e:	d008      	beq.n	8009152 <HAL_SD_IRQHandler+0x1ba>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f003 0308 	and.w	r3, r3, #8
 8009146:	2b00      	cmp	r3, #0
 8009148:	d003      	beq.n	8009152 <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f001 f919 	bl	800a382 <SD_Write_IT>
 8009150:	e0d3      	b.n	80092fa <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009158:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800915c:	2b00      	cmp	r3, #0
 800915e:	f000 809f 	beq.w	80092a0 <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009168:	f003 0302 	and.w	r3, r3, #2
 800916c:	2b00      	cmp	r3, #0
 800916e:	d005      	beq.n	800917c <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009174:	f043 0202 	orr.w	r2, r3, #2
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009182:	f003 0308 	and.w	r3, r3, #8
 8009186:	2b00      	cmp	r3, #0
 8009188:	d005      	beq.n	8009196 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918e:	f043 0208 	orr.w	r2, r3, #8
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800919c:	f003 0320 	and.w	r3, r3, #32
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d005      	beq.n	80091b0 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a8:	f043 0220 	orr.w	r2, r3, #32
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091b6:	f003 0310 	and.w	r3, r3, #16
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d005      	beq.n	80091ca <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c2:	f043 0210 	orr.w	r2, r3, #16
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a33      	ldr	r2, [pc, #204]	; (800929c <HAL_SD_IRQHandler+0x304>)
 80091d0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80091e0:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68da      	ldr	r2, [r3, #12]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091f0:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009200:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	68da      	ldr	r2, [r3, #12]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009210:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4618      	mov	r0, r3
 8009218:	f002 fe02 	bl	800be20 <SDMMC_CmdStopTransfer>
 800921c:	4602      	mov	r2, r0
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009222:	431a      	orrs	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68da      	ldr	r2, [r3, #12]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009236:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009240:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f003 0308 	and.w	r3, r3, #8
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00a      	beq.n	8009262 <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f852 	bl	8009304 <HAL_SD_ErrorCallback>
}
 8009260:	e04b      	b.n	80092fa <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009268:	2b00      	cmp	r3, #0
 800926a:	d046      	beq.n	80092fa <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009270:	2b00      	cmp	r3, #0
 8009272:	d042      	beq.n	80092fa <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009282:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2200      	movs	r2, #0
 800928a:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f835 	bl	8009304 <HAL_SD_ErrorCallback>
}
 800929a:	e02e      	b.n	80092fa <HAL_SD_IRQHandler+0x362>
 800929c:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d025      	beq.n	80092fa <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092b6:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092be:	f003 0304 	and.w	r3, r3, #4
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10c      	bne.n	80092e0 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f003 0320 	and.w	r3, r3, #32
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d003      	beq.n	80092d8 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f001 f8d4 	bl	800a47e <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 80092d6:	e010      	b.n	80092fa <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f001 f8bc 	bl	800a456 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 80092de:	e00c      	b.n	80092fa <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f003 0320 	and.w	r3, r3, #32
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d003      	beq.n	80092f2 <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f001 f8bd 	bl	800a46a <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 80092f0:	e003      	b.n	80092fa <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f001 f8a5 	bl	800a442 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 80092f8:	e7ff      	b.n	80092fa <HAL_SD_IRQHandler+0x362>
 80092fa:	bf00      	nop
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop

08009304 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009326:	0f9b      	lsrs	r3, r3, #30
 8009328:	b2da      	uxtb	r2, r3
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009332:	0e9b      	lsrs	r3, r3, #26
 8009334:	b2db      	uxtb	r3, r3
 8009336:	f003 030f 	and.w	r3, r3, #15
 800933a:	b2da      	uxtb	r2, r3
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009344:	0e1b      	lsrs	r3, r3, #24
 8009346:	b2db      	uxtb	r3, r3
 8009348:	f003 0303 	and.w	r3, r3, #3
 800934c:	b2da      	uxtb	r2, r3
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009356:	0c1b      	lsrs	r3, r3, #16
 8009358:	b2da      	uxtb	r2, r3
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009362:	0a1b      	lsrs	r3, r3, #8
 8009364:	b2da      	uxtb	r2, r3
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800936e:	b2da      	uxtb	r2, r3
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009378:	0d1b      	lsrs	r3, r3, #20
 800937a:	b29a      	uxth	r2, r3
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009384:	0c1b      	lsrs	r3, r3, #16
 8009386:	b2db      	uxtb	r3, r3
 8009388:	f003 030f 	and.w	r3, r3, #15
 800938c:	b2da      	uxtb	r2, r3
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009396:	0bdb      	lsrs	r3, r3, #15
 8009398:	b2db      	uxtb	r3, r3
 800939a:	f003 0301 	and.w	r3, r3, #1
 800939e:	b2da      	uxtb	r2, r3
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093a8:	0b9b      	lsrs	r3, r3, #14
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	f003 0301 	and.w	r3, r3, #1
 80093b0:	b2da      	uxtb	r2, r3
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093ba:	0b5b      	lsrs	r3, r3, #13
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	f003 0301 	and.w	r3, r3, #1
 80093c2:	b2da      	uxtb	r2, r3
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093cc:	0b1b      	lsrs	r3, r3, #12
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	f003 0301 	and.w	r3, r3, #1
 80093d4:	b2da      	uxtb	r2, r3
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	2200      	movs	r2, #0
 80093de:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d163      	bne.n	80094b0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093ec:	009a      	lsls	r2, r3, #2
 80093ee:	f640 73fc 	movw	r3, #4092	; 0xffc
 80093f2:	4013      	ands	r3, r2
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80093f8:	0f92      	lsrs	r2, r2, #30
 80093fa:	431a      	orrs	r2, r3
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009404:	0edb      	lsrs	r3, r3, #27
 8009406:	b2db      	uxtb	r3, r3
 8009408:	f003 0307 	and.w	r3, r3, #7
 800940c:	b2da      	uxtb	r2, r3
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009416:	0e1b      	lsrs	r3, r3, #24
 8009418:	b2db      	uxtb	r3, r3
 800941a:	f003 0307 	and.w	r3, r3, #7
 800941e:	b2da      	uxtb	r2, r3
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009428:	0d5b      	lsrs	r3, r3, #21
 800942a:	b2db      	uxtb	r3, r3
 800942c:	f003 0307 	and.w	r3, r3, #7
 8009430:	b2da      	uxtb	r2, r3
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800943a:	0c9b      	lsrs	r3, r3, #18
 800943c:	b2db      	uxtb	r3, r3
 800943e:	f003 0307 	and.w	r3, r3, #7
 8009442:	b2da      	uxtb	r2, r3
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800944c:	0bdb      	lsrs	r3, r3, #15
 800944e:	b2db      	uxtb	r3, r3
 8009450:	f003 0307 	and.w	r3, r3, #7
 8009454:	b2da      	uxtb	r2, r3
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	1c5a      	adds	r2, r3, #1
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	7e1b      	ldrb	r3, [r3, #24]
 8009468:	b2db      	uxtb	r3, r3
 800946a:	f003 0307 	and.w	r3, r3, #7
 800946e:	3302      	adds	r3, #2
 8009470:	2201      	movs	r2, #1
 8009472:	fa02 f303 	lsl.w	r3, r2, r3
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800947a:	fb03 f202 	mul.w	r2, r3, r2
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	7a1b      	ldrb	r3, [r3, #8]
 8009486:	b2db      	uxtb	r3, r3
 8009488:	f003 030f 	and.w	r3, r3, #15
 800948c:	2201      	movs	r2, #1
 800948e:	409a      	lsls	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800949c:	0a52      	lsrs	r2, r2, #9
 800949e:	fb03 f202 	mul.w	r2, r3, r2
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094ac:	659a      	str	r2, [r3, #88]	; 0x58
 80094ae:	e031      	b.n	8009514 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d11d      	bne.n	80094f4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094bc:	041b      	lsls	r3, r3, #16
 80094be:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094c6:	0c1b      	lsrs	r3, r3, #16
 80094c8:	431a      	orrs	r2, r3
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	3301      	adds	r3, #1
 80094d4:	029a      	lsls	r2, r3, #10
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094e8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	659a      	str	r2, [r3, #88]	; 0x58
 80094f2:	e00f      	b.n	8009514 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a58      	ldr	r2, [pc, #352]	; (800965c <HAL_SD_GetCardCSD+0x344>)
 80094fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009500:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	e09d      	b.n	8009650 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009518:	0b9b      	lsrs	r3, r3, #14
 800951a:	b2db      	uxtb	r3, r3
 800951c:	f003 0301 	and.w	r3, r3, #1
 8009520:	b2da      	uxtb	r2, r3
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800952a:	09db      	lsrs	r3, r3, #7
 800952c:	b2db      	uxtb	r3, r3
 800952e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009532:	b2da      	uxtb	r2, r3
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800953c:	b2db      	uxtb	r3, r3
 800953e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009542:	b2da      	uxtb	r2, r3
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800954c:	0fdb      	lsrs	r3, r3, #31
 800954e:	b2da      	uxtb	r2, r3
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009558:	0f5b      	lsrs	r3, r3, #29
 800955a:	b2db      	uxtb	r3, r3
 800955c:	f003 0303 	and.w	r3, r3, #3
 8009560:	b2da      	uxtb	r2, r3
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800956a:	0e9b      	lsrs	r3, r3, #26
 800956c:	b2db      	uxtb	r3, r3
 800956e:	f003 0307 	and.w	r3, r3, #7
 8009572:	b2da      	uxtb	r2, r3
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800957c:	0d9b      	lsrs	r3, r3, #22
 800957e:	b2db      	uxtb	r3, r3
 8009580:	f003 030f 	and.w	r3, r3, #15
 8009584:	b2da      	uxtb	r2, r3
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800958e:	0d5b      	lsrs	r3, r3, #21
 8009590:	b2db      	uxtb	r3, r3
 8009592:	f003 0301 	and.w	r3, r3, #1
 8009596:	b2da      	uxtb	r2, r3
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095aa:	0c1b      	lsrs	r3, r3, #16
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	b2da      	uxtb	r2, r3
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095be:	0bdb      	lsrs	r3, r3, #15
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	f003 0301 	and.w	r3, r3, #1
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095d2:	0b9b      	lsrs	r3, r3, #14
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	f003 0301 	and.w	r3, r3, #1
 80095da:	b2da      	uxtb	r2, r3
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095e6:	0b5b      	lsrs	r3, r3, #13
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	f003 0301 	and.w	r3, r3, #1
 80095ee:	b2da      	uxtb	r2, r3
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095fa:	0b1b      	lsrs	r3, r3, #12
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	f003 0301 	and.w	r3, r3, #1
 8009602:	b2da      	uxtb	r2, r3
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800960e:	0a9b      	lsrs	r3, r3, #10
 8009610:	b2db      	uxtb	r3, r3
 8009612:	f003 0303 	and.w	r3, r3, #3
 8009616:	b2da      	uxtb	r2, r3
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009622:	0a1b      	lsrs	r3, r3, #8
 8009624:	b2db      	uxtb	r3, r3
 8009626:	f003 0303 	and.w	r3, r3, #3
 800962a:	b2da      	uxtb	r2, r3
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009636:	085b      	lsrs	r3, r3, #1
 8009638:	b2db      	uxtb	r3, r3
 800963a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800963e:	b2da      	uxtb	r2, r3
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	2201      	movs	r2, #1
 800964a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	1fe00fff 	.word	0x1fe00fff

08009660 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b094      	sub	sp, #80	; 0x50
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800966a:	2300      	movs	r3, #0
 800966c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009670:	f107 0308 	add.w	r3, r7, #8
 8009674:	4619      	mov	r1, r3
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fbd4 	bl	8009e24 <SD_SendSDStatus>
 800967c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800967e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009680:	2b00      	cmp	r3, #0
 8009682:	d011      	beq.n	80096a8 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a4f      	ldr	r2, [pc, #316]	; (80097c8 <HAL_SD_GetCardStatus+0x168>)
 800968a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009692:	431a      	orrs	r2, r3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80096a6:	e070      	b.n	800978a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	099b      	lsrs	r3, r3, #6
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	f003 0303 	and.w	r3, r3, #3
 80096b2:	b2da      	uxtb	r2, r3
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	095b      	lsrs	r3, r3, #5
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	f003 0301 	and.w	r3, r3, #1
 80096c2:	b2da      	uxtb	r2, r3
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	0a1b      	lsrs	r3, r3, #8
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80096d2:	b29a      	uxth	r2, r3
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	0e1b      	lsrs	r3, r3, #24
 80096d8:	b29b      	uxth	r3, r3
 80096da:	4313      	orrs	r3, r2
 80096dc:	b29a      	uxth	r2, r3
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	061a      	lsls	r2, r3, #24
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	021b      	lsls	r3, r3, #8
 80096ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80096ee:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	0a1b      	lsrs	r3, r3, #8
 80096f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80096f8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	0e1b      	lsrs	r3, r3, #24
 80096fe:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	b2da      	uxtb	r2, r3
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	0a1b      	lsrs	r3, r3, #8
 8009710:	b2da      	uxtb	r2, r3
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	0d1b      	lsrs	r3, r3, #20
 800971a:	b2db      	uxtb	r3, r3
 800971c:	f003 030f 	and.w	r3, r3, #15
 8009720:	b2da      	uxtb	r2, r3
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	0c1b      	lsrs	r3, r3, #16
 800972a:	b29b      	uxth	r3, r3
 800972c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009730:	b29a      	uxth	r2, r3
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	b29b      	uxth	r3, r3
 8009736:	b2db      	uxtb	r3, r3
 8009738:	b29b      	uxth	r3, r3
 800973a:	4313      	orrs	r3, r2
 800973c:	b29a      	uxth	r2, r3
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	0a9b      	lsrs	r3, r3, #10
 8009746:	b2db      	uxtb	r3, r3
 8009748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800974c:	b2da      	uxtb	r2, r3
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	0a1b      	lsrs	r3, r3, #8
 8009756:	b2db      	uxtb	r3, r3
 8009758:	f003 0303 	and.w	r3, r3, #3
 800975c:	b2da      	uxtb	r2, r3
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	091b      	lsrs	r3, r3, #4
 8009766:	b2db      	uxtb	r3, r3
 8009768:	f003 030f 	and.w	r3, r3, #15
 800976c:	b2da      	uxtb	r2, r3
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	b2db      	uxtb	r3, r3
 8009776:	f003 030f 	and.w	r3, r3, #15
 800977a:	b2da      	uxtb	r2, r3
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	0e1b      	lsrs	r3, r3, #24
 8009784:	b2da      	uxtb	r2, r3
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009792:	4618      	mov	r0, r3
 8009794:	f002 fa94 	bl	800bcc0 <SDMMC_CmdBlockLength>
 8009798:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800979a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00d      	beq.n	80097bc <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a08      	ldr	r2, [pc, #32]	; (80097c8 <HAL_SD_GetCardStatus+0x168>)
 80097a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2201      	movs	r2, #1
 80097b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80097bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3750      	adds	r7, #80	; 0x50
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	1fe00fff 	.word	0x1fe00fff

080097cc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009824:	b5b0      	push	{r4, r5, r7, lr}
 8009826:	b090      	sub	sp, #64	; 0x40
 8009828:	af04      	add	r7, sp, #16
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800982e:	2300      	movs	r3, #0
 8009830:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2203      	movs	r2, #3
 8009838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009840:	2b03      	cmp	r3, #3
 8009842:	d02e      	beq.n	80098a2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800984a:	d106      	bne.n	800985a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009850:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	639a      	str	r2, [r3, #56]	; 0x38
 8009858:	e029      	b.n	80098ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009860:	d10a      	bne.n	8009878 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 fbd6 	bl	800a014 <SD_WideBus_Enable>
 8009868:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800986e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009870:	431a      	orrs	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	639a      	str	r2, [r3, #56]	; 0x38
 8009876:	e01a      	b.n	80098ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10a      	bne.n	8009894 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 fc13 	bl	800a0aa <SD_WideBus_Disable>
 8009884:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800988a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988c:	431a      	orrs	r2, r3
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	639a      	str	r2, [r3, #56]	; 0x38
 8009892:	e00c      	b.n	80098ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009898:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	639a      	str	r2, [r3, #56]	; 0x38
 80098a0:	e005      	b.n	80098ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d007      	beq.n	80098c6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a60      	ldr	r2, [pc, #384]	; (8009a3c <HAL_SD_ConfigWideBusOperation+0x218>)
 80098bc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80098c4:	e097      	b.n	80099f6 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80098c6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80098ca:	f7fd fc71 	bl	80071b0 <HAL_RCCEx_GetPeriphCLKFreq>
 80098ce:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 80098d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f000 8086 	beq.w	80099e4 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	695a      	ldr	r2, [r3, #20]
 80098f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f4:	4952      	ldr	r1, [pc, #328]	; (8009a40 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80098f6:	fba1 1303 	umull	r1, r3, r1, r3
 80098fa:	0e1b      	lsrs	r3, r3, #24
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d303      	bcc.n	8009908 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	695b      	ldr	r3, [r3, #20]
 8009904:	61fb      	str	r3, [r7, #28]
 8009906:	e05a      	b.n	80099be <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800990c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009910:	d103      	bne.n	800991a <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	695b      	ldr	r3, [r3, #20]
 8009916:	61fb      	str	r3, [r7, #28]
 8009918:	e051      	b.n	80099be <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800991e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009922:	d126      	bne.n	8009972 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	695b      	ldr	r3, [r3, #20]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10e      	bne.n	800994a <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800992c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992e:	4a45      	ldr	r2, [pc, #276]	; (8009a44 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d906      	bls.n	8009942 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009936:	4a42      	ldr	r2, [pc, #264]	; (8009a40 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009938:	fba2 2303 	umull	r2, r3, r2, r3
 800993c:	0e5b      	lsrs	r3, r3, #25
 800993e:	61fb      	str	r3, [r7, #28]
 8009940:	e03d      	b.n	80099be <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	695b      	ldr	r3, [r3, #20]
 8009946:	61fb      	str	r3, [r7, #28]
 8009948:	e039      	b.n	80099be <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	695b      	ldr	r3, [r3, #20]
 800994e:	005b      	lsls	r3, r3, #1
 8009950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009952:	fbb2 f3f3 	udiv	r3, r2, r3
 8009956:	4a3b      	ldr	r2, [pc, #236]	; (8009a44 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d906      	bls.n	800996a <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800995c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995e:	4a38      	ldr	r2, [pc, #224]	; (8009a40 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009960:	fba2 2303 	umull	r2, r3, r2, r3
 8009964:	0e5b      	lsrs	r3, r3, #25
 8009966:	61fb      	str	r3, [r7, #28]
 8009968:	e029      	b.n	80099be <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	695b      	ldr	r3, [r3, #20]
 800996e:	61fb      	str	r3, [r7, #28]
 8009970:	e025      	b.n	80099be <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	695b      	ldr	r3, [r3, #20]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d10e      	bne.n	8009998 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800997a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997c:	4a32      	ldr	r2, [pc, #200]	; (8009a48 <HAL_SD_ConfigWideBusOperation+0x224>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d906      	bls.n	8009990 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009984:	4a2e      	ldr	r2, [pc, #184]	; (8009a40 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009986:	fba2 2303 	umull	r2, r3, r2, r3
 800998a:	0e1b      	lsrs	r3, r3, #24
 800998c:	61fb      	str	r3, [r7, #28]
 800998e:	e016      	b.n	80099be <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	695b      	ldr	r3, [r3, #20]
 8009994:	61fb      	str	r3, [r7, #28]
 8009996:	e012      	b.n	80099be <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	695b      	ldr	r3, [r3, #20]
 800999c:	005b      	lsls	r3, r3, #1
 800999e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80099a4:	4a28      	ldr	r2, [pc, #160]	; (8009a48 <HAL_SD_ConfigWideBusOperation+0x224>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d906      	bls.n	80099b8 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80099aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ac:	4a24      	ldr	r2, [pc, #144]	; (8009a40 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80099ae:	fba2 2303 	umull	r2, r3, r2, r3
 80099b2:	0e1b      	lsrs	r3, r3, #24
 80099b4:	61fb      	str	r3, [r7, #28]
 80099b6:	e002      	b.n	80099be <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	695b      	ldr	r3, [r3, #20]
 80099bc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	699b      	ldr	r3, [r3, #24]
 80099c2:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681d      	ldr	r5, [r3, #0]
 80099c8:	466c      	mov	r4, sp
 80099ca:	f107 0318 	add.w	r3, r7, #24
 80099ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80099d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80099d6:	f107 030c 	add.w	r3, r7, #12
 80099da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80099dc:	4628      	mov	r0, r5
 80099de:	f002 f891 	bl	800bb04 <SDMMC_Init>
 80099e2:	e008      	b.n	80099f6 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80099fe:	4618      	mov	r0, r3
 8009a00:	f002 f95e 	bl	800bcc0 <SDMMC_CmdBlockLength>
 8009a04:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d00c      	beq.n	8009a26 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a0a      	ldr	r2, [pc, #40]	; (8009a3c <HAL_SD_ConfigWideBusOperation+0x218>)
 8009a12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1a:	431a      	orrs	r2, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009a2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3730      	adds	r7, #48	; 0x30
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bdb0      	pop	{r4, r5, r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	1fe00fff 	.word	0x1fe00fff
 8009a40:	55e63b89 	.word	0x55e63b89
 8009a44:	02faf080 	.word	0x02faf080
 8009a48:	017d7840 	.word	0x017d7840

08009a4c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b086      	sub	sp, #24
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009a54:	2300      	movs	r3, #0
 8009a56:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009a58:	f107 030c 	add.w	r3, r7, #12
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fab0 	bl	8009fc4 <SD_SendStatus>
 8009a64:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d005      	beq.n	8009a78 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	431a      	orrs	r2, r3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	0a5b      	lsrs	r3, r3, #9
 8009a7c:	f003 030f 	and.w	r3, r3, #15
 8009a80:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009a82:	693b      	ldr	r3, [r7, #16]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3718      	adds	r7, #24
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009a8c:	b5b0      	push	{r4, r5, r7, lr}
 8009a8e:	b090      	sub	sp, #64	; 0x40
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009a94:	2301      	movs	r3, #1
 8009a96:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f002 f88b 	bl	800bbb8 <SDMMC_GetPowerState>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d102      	bne.n	8009aae <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009aa8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009aac:	e0a9      	b.n	8009c02 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ab2:	2b03      	cmp	r3, #3
 8009ab4:	d02e      	beq.n	8009b14 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4618      	mov	r0, r3
 8009abc:	f002 fad0 	bl	800c060 <SDMMC_CmdSendCID>
 8009ac0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d001      	beq.n	8009acc <SD_InitCard+0x40>
    {
      return errorstate;
 8009ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aca:	e09a      	b.n	8009c02 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f002 f8b5 	bl	800bc42 <SDMMC_GetResponse>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2104      	movs	r1, #4
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f002 f8ac 	bl	800bc42 <SDMMC_GetResponse>
 8009aea:	4602      	mov	r2, r0
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2108      	movs	r1, #8
 8009af6:	4618      	mov	r0, r3
 8009af8:	f002 f8a3 	bl	800bc42 <SDMMC_GetResponse>
 8009afc:	4602      	mov	r2, r0
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	210c      	movs	r1, #12
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f002 f89a 	bl	800bc42 <SDMMC_GetResponse>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b18:	2b03      	cmp	r3, #3
 8009b1a:	d00d      	beq.n	8009b38 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f107 020e 	add.w	r2, r7, #14
 8009b24:	4611      	mov	r1, r2
 8009b26:	4618      	mov	r0, r3
 8009b28:	f002 fad9 	bl	800c0de <SDMMC_CmdSetRelAdd>
 8009b2c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d001      	beq.n	8009b38 <SD_InitCard+0xac>
    {
      return errorstate;
 8009b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b36:	e064      	b.n	8009c02 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b3c:	2b03      	cmp	r3, #3
 8009b3e:	d036      	beq.n	8009bae <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009b40:	89fb      	ldrh	r3, [r7, #14]
 8009b42:	461a      	mov	r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b50:	041b      	lsls	r3, r3, #16
 8009b52:	4619      	mov	r1, r3
 8009b54:	4610      	mov	r0, r2
 8009b56:	f002 faa2 	bl	800c09e <SDMMC_CmdSendCSD>
 8009b5a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d001      	beq.n	8009b66 <SD_InitCard+0xda>
    {
      return errorstate;
 8009b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b64:	e04d      	b.n	8009c02 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f002 f868 	bl	800bc42 <SDMMC_GetResponse>
 8009b72:	4602      	mov	r2, r0
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2104      	movs	r1, #4
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f002 f85f 	bl	800bc42 <SDMMC_GetResponse>
 8009b84:	4602      	mov	r2, r0
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2108      	movs	r1, #8
 8009b90:	4618      	mov	r0, r3
 8009b92:	f002 f856 	bl	800bc42 <SDMMC_GetResponse>
 8009b96:	4602      	mov	r2, r0
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	210c      	movs	r1, #12
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f002 f84d 	bl	800bc42 <SDMMC_GetResponse>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2104      	movs	r1, #4
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f002 f844 	bl	800bc42 <SDMMC_GetResponse>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	0d1a      	lsrs	r2, r3, #20
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009bc2:	f107 0310 	add.w	r3, r7, #16
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f7ff fba5 	bl	8009318 <HAL_SD_GetCardCSD>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d002      	beq.n	8009bda <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009bd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009bd8:	e013      	b.n	8009c02 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6819      	ldr	r1, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009be2:	041b      	lsls	r3, r3, #16
 8009be4:	2200      	movs	r2, #0
 8009be6:	461c      	mov	r4, r3
 8009be8:	4615      	mov	r5, r2
 8009bea:	4622      	mov	r2, r4
 8009bec:	462b      	mov	r3, r5
 8009bee:	4608      	mov	r0, r1
 8009bf0:	f002 f94c 	bl	800be8c <SDMMC_CmdSelDesel>
 8009bf4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d001      	beq.n	8009c00 <SD_InitCard+0x174>
  {
    return errorstate;
 8009bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bfe:	e000      	b.n	8009c02 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3740      	adds	r7, #64	; 0x40
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009c0c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b088      	sub	sp, #32
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c14:	2300      	movs	r3, #0
 8009c16:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	61fb      	str	r3, [r7, #28]
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8009c20:	f7f8 fdbc 	bl	800279c <HAL_GetTick>
 8009c24:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f002 f952 	bl	800bed4 <SDMMC_CmdGoIdleState>
 8009c30:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d001      	beq.n	8009c3c <SD_PowerON+0x30>
  {
    return errorstate;
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	e0ed      	b.n	8009e18 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4618      	mov	r0, r3
 8009c42:	f002 f965 	bl	800bf10 <SDMMC_CmdOperCond>
 8009c46:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00d      	beq.n	8009c6a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f002 f93b 	bl	800bed4 <SDMMC_CmdGoIdleState>
 8009c5e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d004      	beq.n	8009c70 <SD_PowerON+0x64>
    {
      return errorstate;
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	e0d6      	b.n	8009e18 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d137      	bne.n	8009ce8 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f002 f966 	bl	800bf50 <SDMMC_CmdAppCommand>
 8009c84:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d02d      	beq.n	8009ce8 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c90:	e0c2      	b.n	8009e18 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2100      	movs	r1, #0
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f002 f959 	bl	800bf50 <SDMMC_CmdAppCommand>
 8009c9e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d001      	beq.n	8009caa <SD_PowerON+0x9e>
    {
      return errorstate;
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	e0b6      	b.n	8009e18 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	495c      	ldr	r1, [pc, #368]	; (8009e20 <SD_PowerON+0x214>)
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f002 f970 	bl	800bf96 <SDMMC_CmdAppOperCommand>
 8009cb6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d002      	beq.n	8009cc4 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009cbe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009cc2:	e0a9      	b.n	8009e18 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2100      	movs	r1, #0
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f001 ffb9 	bl	800bc42 <SDMMC_GetResponse>
 8009cd0:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	0fdb      	lsrs	r3, r3, #31
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d101      	bne.n	8009cde <SD_PowerON+0xd2>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e000      	b.n	8009ce0 <SD_PowerON+0xd4>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	61bb      	str	r3, [r7, #24]

    count++;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d802      	bhi.n	8009cf8 <SD_PowerON+0xec>
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d0cc      	beq.n	8009c92 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d902      	bls.n	8009d08 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009d02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d06:	e087      	b.n	8009e18 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d07e      	beq.n	8009e10 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2201      	movs	r2, #1
 8009d16:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	699b      	ldr	r3, [r3, #24]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d17a      	bne.n	8009e16 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d075      	beq.n	8009e16 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d30:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f042 0208 	orr.w	r2, r2, #8
 8009d40:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4618      	mov	r0, r3
 8009d48:	f002 fa30 	bl	800c1ac <SDMMC_CmdVoltageSwitch>
 8009d4c:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d00c      	beq.n	8009d6e <SD_PowerON+0x162>
        {
          return errorstate;
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	e05f      	b.n	8009e18 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009d58:	f7f8 fd20 	bl	800279c <HAL_GetTick>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d66:	d102      	bne.n	8009d6e <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8009d68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d6c:	e054      	b.n	8009e18 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009d78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d7c:	d1ec      	bne.n	8009d58 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009d86:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d96:	d002      	beq.n	8009d9e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8009d98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d9c:	e03c      	b.n	8009e18 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8009d9e:	2001      	movs	r0, #1
 8009da0:	f000 fb44 	bl	800a42c <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f042 0204 	orr.w	r2, r2, #4
 8009db2:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009db4:	e00a      	b.n	8009dcc <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009db6:	f7f8 fcf1 	bl	800279c <HAL_GetTick>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	1ad3      	subs	r3, r2, r3
 8009dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dc4:	d102      	bne.n	8009dcc <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8009dc6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009dca:	e025      	b.n	8009e18 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009dda:	d1ec      	bne.n	8009db6 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009de4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009df0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009df4:	d102      	bne.n	8009dfc <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009df6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009dfa:	e00d      	b.n	8009e18 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2213      	movs	r2, #19
 8009e02:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e0c:	639a      	str	r2, [r3, #56]	; 0x38
 8009e0e:	e002      	b.n	8009e16 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3720      	adds	r7, #32
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	c1100000 	.word	0xc1100000

08009e24 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b08c      	sub	sp, #48	; 0x30
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009e2e:	f7f8 fcb5 	bl	800279c <HAL_GetTick>
 8009e32:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f001 feff 	bl	800bc42 <SDMMC_GetResponse>
 8009e44:	4603      	mov	r3, r0
 8009e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e4e:	d102      	bne.n	8009e56 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009e50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e54:	e0b0      	b.n	8009fb8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2140      	movs	r1, #64	; 0x40
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f001 ff2f 	bl	800bcc0 <SDMMC_CmdBlockLength>
 8009e62:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e64:	6a3b      	ldr	r3, [r7, #32]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d005      	beq.n	8009e76 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009e72:	6a3b      	ldr	r3, [r7, #32]
 8009e74:	e0a0      	b.n	8009fb8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e7e:	041b      	lsls	r3, r3, #16
 8009e80:	4619      	mov	r1, r3
 8009e82:	4610      	mov	r0, r2
 8009e84:	f002 f864 	bl	800bf50 <SDMMC_CmdAppCommand>
 8009e88:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e8a:	6a3b      	ldr	r3, [r7, #32]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d005      	beq.n	8009e9c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009e98:	6a3b      	ldr	r3, [r7, #32]
 8009e9a:	e08d      	b.n	8009fb8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ea0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009ea2:	2340      	movs	r3, #64	; 0x40
 8009ea4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009ea6:	2360      	movs	r3, #96	; 0x60
 8009ea8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009eaa:	2302      	movs	r3, #2
 8009eac:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f107 0208 	add.w	r2, r7, #8
 8009ebe:	4611      	mov	r1, r2
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f001 fed1 	bl	800bc68 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f002 f94c 	bl	800c168 <SDMMC_CmdStatusRegister>
 8009ed0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ed2:	6a3b      	ldr	r3, [r7, #32]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d02b      	beq.n	8009f30 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009ee0:	6a3b      	ldr	r3, [r7, #32]
 8009ee2:	e069      	b.n	8009fb8 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d013      	beq.n	8009f1a <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ef6:	e00d      	b.n	8009f14 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4618      	mov	r0, r3
 8009efe:	f001 fe2b 	bl	800bb58 <SDMMC_ReadFIFO>
 8009f02:	4602      	mov	r2, r0
 8009f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f06:	601a      	str	r2, [r3, #0]
        pData++;
 8009f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8009f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f10:	3301      	adds	r3, #1
 8009f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f16:	2b07      	cmp	r3, #7
 8009f18:	d9ee      	bls.n	8009ef8 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009f1a:	f7f8 fc3f 	bl	800279c <HAL_GetTick>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f22:	1ad3      	subs	r3, r2, r3
 8009f24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f28:	d102      	bne.n	8009f30 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009f2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f2e:	e043      	b.n	8009fb8 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f36:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d0d2      	beq.n	8009ee4 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f44:	f003 0308 	and.w	r3, r3, #8
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d001      	beq.n	8009f50 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009f4c:	2308      	movs	r3, #8
 8009f4e:	e033      	b.n	8009fb8 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f56:	f003 0302 	and.w	r3, r3, #2
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d001      	beq.n	8009f62 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009f5e:	2302      	movs	r3, #2
 8009f60:	e02a      	b.n	8009fb8 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f68:	f003 0320 	and.w	r3, r3, #32
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d017      	beq.n	8009fa0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009f70:	2320      	movs	r3, #32
 8009f72:	e021      	b.n	8009fb8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f001 fded 	bl	800bb58 <SDMMC_ReadFIFO>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f82:	601a      	str	r2, [r3, #0]
    pData++;
 8009f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f86:	3304      	adds	r3, #4
 8009f88:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009f8a:	f7f8 fc07 	bl	800279c <HAL_GetTick>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f92:	1ad3      	subs	r3, r2, r3
 8009f94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f98:	d102      	bne.n	8009fa0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009f9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f9e:	e00b      	b.n	8009fb8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1e2      	bne.n	8009f74 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a03      	ldr	r2, [pc, #12]	; (8009fc0 <SD_SendSDStatus+0x19c>)
 8009fb4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009fb6:	2300      	movs	r3, #0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3730      	adds	r7, #48	; 0x30
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	18000f3a 	.word	0x18000f3a

08009fc4 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d102      	bne.n	8009fda <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009fd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009fd8:	e018      	b.n	800a00c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fe2:	041b      	lsls	r3, r3, #16
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	4610      	mov	r0, r2
 8009fe8:	f002 f89b 	bl	800c122 <SDMMC_CmdSendStatus>
 8009fec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d001      	beq.n	8009ff8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	e009      	b.n	800a00c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2100      	movs	r1, #0
 8009ffe:	4618      	mov	r0, r3
 800a000:	f001 fe1f 	bl	800bc42 <SDMMC_GetResponse>
 800a004:	4602      	mov	r2, r0
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3710      	adds	r7, #16
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b086      	sub	sp, #24
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a01c:	2300      	movs	r3, #0
 800a01e:	60fb      	str	r3, [r7, #12]
 800a020:	2300      	movs	r3, #0
 800a022:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2100      	movs	r1, #0
 800a02a:	4618      	mov	r0, r3
 800a02c:	f001 fe09 	bl	800bc42 <SDMMC_GetResponse>
 800a030:	4603      	mov	r3, r0
 800a032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a036:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a03a:	d102      	bne.n	800a042 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a03c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a040:	e02f      	b.n	800a0a2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a042:	f107 030c 	add.w	r3, r7, #12
 800a046:	4619      	mov	r1, r3
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 f879 	bl	800a140 <SD_FindSCR>
 800a04e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d001      	beq.n	800a05a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	e023      	b.n	800a0a2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a060:	2b00      	cmp	r3, #0
 800a062:	d01c      	beq.n	800a09e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a06c:	041b      	lsls	r3, r3, #16
 800a06e:	4619      	mov	r1, r3
 800a070:	4610      	mov	r0, r2
 800a072:	f001 ff6d 	bl	800bf50 <SDMMC_CmdAppCommand>
 800a076:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d001      	beq.n	800a082 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	e00f      	b.n	800a0a2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2102      	movs	r1, #2
 800a088:	4618      	mov	r0, r3
 800a08a:	f001 ffa4 	bl	800bfd6 <SDMMC_CmdBusWidth>
 800a08e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d001      	beq.n	800a09a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	e003      	b.n	800a0a2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a09a:	2300      	movs	r3, #0
 800a09c:	e001      	b.n	800a0a2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a09e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3718      	adds	r7, #24
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b086      	sub	sp, #24
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	60fb      	str	r3, [r7, #12]
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	2100      	movs	r1, #0
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f001 fdbe 	bl	800bc42 <SDMMC_GetResponse>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0d0:	d102      	bne.n	800a0d8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a0d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a0d6:	e02f      	b.n	800a138 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a0d8:	f107 030c 	add.w	r3, r7, #12
 800a0dc:	4619      	mov	r1, r3
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 f82e 	bl	800a140 <SD_FindSCR>
 800a0e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d001      	beq.n	800a0f0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	e023      	b.n	800a138 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d01c      	beq.n	800a134 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a102:	041b      	lsls	r3, r3, #16
 800a104:	4619      	mov	r1, r3
 800a106:	4610      	mov	r0, r2
 800a108:	f001 ff22 	bl	800bf50 <SDMMC_CmdAppCommand>
 800a10c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d001      	beq.n	800a118 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	e00f      	b.n	800a138 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2100      	movs	r1, #0
 800a11e:	4618      	mov	r0, r3
 800a120:	f001 ff59 	bl	800bfd6 <SDMMC_CmdBusWidth>
 800a124:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d001      	beq.n	800a130 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	e003      	b.n	800a138 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a130:	2300      	movs	r3, #0
 800a132:	e001      	b.n	800a138 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a134:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3718      	adds	r7, #24
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b08e      	sub	sp, #56	; 0x38
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a14a:	f7f8 fb27 	bl	800279c <HAL_GetTick>
 800a14e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a150:	2300      	movs	r3, #0
 800a152:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a154:	2300      	movs	r3, #0
 800a156:	60bb      	str	r3, [r7, #8]
 800a158:	2300      	movs	r3, #0
 800a15a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2108      	movs	r1, #8
 800a166:	4618      	mov	r0, r3
 800a168:	f001 fdaa 	bl	800bcc0 <SDMMC_CmdBlockLength>
 800a16c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a170:	2b00      	cmp	r3, #0
 800a172:	d001      	beq.n	800a178 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a176:	e0ad      	b.n	800a2d4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a180:	041b      	lsls	r3, r3, #16
 800a182:	4619      	mov	r1, r3
 800a184:	4610      	mov	r0, r2
 800a186:	f001 fee3 	bl	800bf50 <SDMMC_CmdAppCommand>
 800a18a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d001      	beq.n	800a196 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a194:	e09e      	b.n	800a2d4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a19a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a19c:	2308      	movs	r3, #8
 800a19e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a1a0:	2330      	movs	r3, #48	; 0x30
 800a1a2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a1a4:	2302      	movs	r3, #2
 800a1a6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f107 0210 	add.w	r2, r7, #16
 800a1b8:	4611      	mov	r1, r2
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f001 fd54 	bl	800bc68 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f001 ff29 	bl	800c01c <SDMMC_CmdSendSCR>
 800a1ca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d027      	beq.n	800a222 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d4:	e07e      	b.n	800a2d4 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d113      	bne.n	800a20c <SD_FindSCR+0xcc>
 800a1e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d110      	bne.n	800a20c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f001 fcb2 	bl	800bb58 <SDMMC_ReadFIFO>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f001 fcab 	bl	800bb58 <SDMMC_ReadFIFO>
 800a202:	4603      	mov	r3, r0
 800a204:	60fb      	str	r3, [r7, #12]
      index++;
 800a206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a208:	3301      	adds	r3, #1
 800a20a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a20c:	f7f8 fac6 	bl	800279c <HAL_GetTick>
 800a210:	4602      	mov	r2, r0
 800a212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a214:	1ad3      	subs	r3, r2, r3
 800a216:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a21a:	d102      	bne.n	800a222 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a21c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a220:	e058      	b.n	800a2d4 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a228:	f240 532a 	movw	r3, #1322	; 0x52a
 800a22c:	4013      	ands	r3, r2
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d0d1      	beq.n	800a1d6 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a238:	f003 0308 	and.w	r3, r3, #8
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d005      	beq.n	800a24c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2208      	movs	r2, #8
 800a246:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a248:	2308      	movs	r3, #8
 800a24a:	e043      	b.n	800a2d4 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a252:	f003 0302 	and.w	r3, r3, #2
 800a256:	2b00      	cmp	r3, #0
 800a258:	d005      	beq.n	800a266 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2202      	movs	r2, #2
 800a260:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a262:	2302      	movs	r3, #2
 800a264:	e036      	b.n	800a2d4 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a26c:	f003 0320 	and.w	r3, r3, #32
 800a270:	2b00      	cmp	r3, #0
 800a272:	d005      	beq.n	800a280 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2220      	movs	r2, #32
 800a27a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a27c:	2320      	movs	r3, #32
 800a27e:	e029      	b.n	800a2d4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a15      	ldr	r2, [pc, #84]	; (800a2dc <SD_FindSCR+0x19c>)
 800a286:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	061a      	lsls	r2, r3, #24
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	021b      	lsls	r3, r3, #8
 800a290:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a294:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	0a1b      	lsrs	r3, r3, #8
 800a29a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a29e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	0e1b      	lsrs	r3, r3, #24
 800a2a4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a8:	601a      	str	r2, [r3, #0]
    scr++;
 800a2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ac:	3304      	adds	r3, #4
 800a2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	061a      	lsls	r2, r3, #24
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	021b      	lsls	r3, r3, #8
 800a2b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a2bc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	0a1b      	lsrs	r3, r3, #8
 800a2c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a2c6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	0e1b      	lsrs	r3, r3, #24
 800a2cc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3738      	adds	r7, #56	; 0x38
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	18000f3a 	.word	0x18000f3a

0800a2e0 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ec:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d03f      	beq.n	800a37a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	617b      	str	r3, [r7, #20]
 800a2fe:	e033      	b.n	800a368 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4618      	mov	r0, r3
 800a306:	f001 fc27 	bl	800bb58 <SDMMC_ReadFIFO>
 800a30a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	b2da      	uxtb	r2, r3
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	3301      	adds	r3, #1
 800a318:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	3b01      	subs	r3, #1
 800a31e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	0a1b      	lsrs	r3, r3, #8
 800a324:	b2da      	uxtb	r2, r3
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	3301      	adds	r3, #1
 800a32e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	3b01      	subs	r3, #1
 800a334:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	0c1b      	lsrs	r3, r3, #16
 800a33a:	b2da      	uxtb	r2, r3
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	3301      	adds	r3, #1
 800a344:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	3b01      	subs	r3, #1
 800a34a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	0e1b      	lsrs	r3, r3, #24
 800a350:	b2da      	uxtb	r2, r3
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	3301      	adds	r3, #1
 800a35a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	3b01      	subs	r3, #1
 800a360:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	3301      	adds	r3, #1
 800a366:	617b      	str	r3, [r7, #20]
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	2b07      	cmp	r3, #7
 800a36c:	d9c8      	bls.n	800a300 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	693a      	ldr	r2, [r7, #16]
 800a378:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800a37a:	bf00      	nop
 800a37c:	3718      	adds	r7, #24
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b086      	sub	sp, #24
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a1b      	ldr	r3, [r3, #32]
 800a38e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a394:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d043      	beq.n	800a424 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a39c:	2300      	movs	r3, #0
 800a39e:	617b      	str	r3, [r7, #20]
 800a3a0:	e037      	b.n	800a412 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	021a      	lsls	r2, r3, #8
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	041a      	lsls	r2, r3, #16
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	3b01      	subs	r3, #1
 800a3e2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	061a      	lsls	r2, r3, #24
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f107 0208 	add.w	r2, r7, #8
 800a404:	4611      	mov	r1, r2
 800a406:	4618      	mov	r0, r3
 800a408:	f001 fbb3 	bl	800bb72 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	3301      	adds	r3, #1
 800a410:	617b      	str	r3, [r7, #20]
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	2b07      	cmp	r3, #7
 800a416:	d9c4      	bls.n	800a3a2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	693a      	ldr	r2, [r7, #16]
 800a422:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a424:	bf00      	nop
 800a426:	3718      	adds	r7, #24
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	4603      	mov	r3, r0
 800a434:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800a436:	bf00      	nop
 800a438:	370c      	adds	r7, #12
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr

0800a442 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a442:	b480      	push	{r7}
 800a444:	b083      	sub	sp, #12
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800a44a:	bf00      	nop
 800a44c:	370c      	adds	r7, #12
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr

0800a456 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a456:	b480      	push	{r7}
 800a458:	b083      	sub	sp, #12
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 800a45e:	bf00      	nop
 800a460:	370c      	adds	r7, #12
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr

0800a46a <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a46a:	b480      	push	{r7}
 800a46c:	b083      	sub	sp, #12
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800a472:	bf00      	nop
 800a474:	370c      	adds	r7, #12
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a47e:	b480      	push	{r7}
 800a480:	b083      	sub	sp, #12
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800a486:	bf00      	nop
 800a488:	370c      	adds	r7, #12
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr

0800a492 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a492:	b580      	push	{r7, lr}
 800a494:	b084      	sub	sp, #16
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d101      	bne.n	800a4a4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e095      	b.n	800a5d0 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d108      	bne.n	800a4be <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a4b4:	d009      	beq.n	800a4ca <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	61da      	str	r2, [r3, #28]
 800a4bc:	e005      	b.n	800a4ca <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d106      	bne.n	800a4ea <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f7f7 fe9b 	bl	8002220 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2202      	movs	r2, #2
 800a4ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a500:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a50a:	d902      	bls.n	800a512 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a50c:	2300      	movs	r3, #0
 800a50e:	60fb      	str	r3, [r7, #12]
 800a510:	e002      	b.n	800a518 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a516:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a520:	d007      	beq.n	800a532 <HAL_SPI_Init+0xa0>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a52a:	d002      	beq.n	800a532 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a542:	431a      	orrs	r2, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	f003 0302 	and.w	r3, r3, #2
 800a54c:	431a      	orrs	r2, r3
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	695b      	ldr	r3, [r3, #20]
 800a552:	f003 0301 	and.w	r3, r3, #1
 800a556:	431a      	orrs	r2, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	699b      	ldr	r3, [r3, #24]
 800a55c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a560:	431a      	orrs	r2, r3
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	69db      	ldr	r3, [r3, #28]
 800a566:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a56a:	431a      	orrs	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6a1b      	ldr	r3, [r3, #32]
 800a570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a574:	ea42 0103 	orr.w	r1, r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a57c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	430a      	orrs	r2, r1
 800a586:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	699b      	ldr	r3, [r3, #24]
 800a58c:	0c1b      	lsrs	r3, r3, #16
 800a58e:	f003 0204 	and.w	r2, r3, #4
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a596:	f003 0310 	and.w	r3, r3, #16
 800a59a:	431a      	orrs	r2, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5a0:	f003 0308 	and.w	r3, r3, #8
 800a5a4:	431a      	orrs	r2, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a5ae:	ea42 0103 	orr.w	r1, r2, r3
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	430a      	orrs	r2, r1
 800a5be:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a5ce:	2300      	movs	r3, #0
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3710      	adds	r7, #16
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d101      	bne.n	800a5ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e049      	b.n	800a67e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d106      	bne.n	800a604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f7f7 fef6 	bl	80023f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2202      	movs	r2, #2
 800a608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	3304      	adds	r3, #4
 800a614:	4619      	mov	r1, r3
 800a616:	4610      	mov	r0, r2
 800a618:	f000 fa32 	bl	800aa80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2201      	movs	r2, #1
 800a670:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2201      	movs	r2, #1
 800a678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3708      	adds	r7, #8
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b084      	sub	sp, #16
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	691b      	ldr	r3, [r3, #16]
 800a69c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	f003 0302 	and.w	r3, r3, #2
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d020      	beq.n	800a6ea <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f003 0302 	and.w	r3, r3, #2
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d01b      	beq.n	800a6ea <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f06f 0202 	mvn.w	r2, #2
 800a6ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	699b      	ldr	r3, [r3, #24]
 800a6c8:	f003 0303 	and.w	r3, r3, #3
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d003      	beq.n	800a6d8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 f9b7 	bl	800aa44 <HAL_TIM_IC_CaptureCallback>
 800a6d6:	e005      	b.n	800a6e4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 f9a9 	bl	800aa30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f9ba 	bl	800aa58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	f003 0304 	and.w	r3, r3, #4
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d020      	beq.n	800a736 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f003 0304 	and.w	r3, r3, #4
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d01b      	beq.n	800a736 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f06f 0204 	mvn.w	r2, #4
 800a706:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2202      	movs	r2, #2
 800a70c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	699b      	ldr	r3, [r3, #24]
 800a714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d003      	beq.n	800a724 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 f991 	bl	800aa44 <HAL_TIM_IC_CaptureCallback>
 800a722:	e005      	b.n	800a730 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 f983 	bl	800aa30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f994 	bl	800aa58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	f003 0308 	and.w	r3, r3, #8
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d020      	beq.n	800a782 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f003 0308 	and.w	r3, r3, #8
 800a746:	2b00      	cmp	r3, #0
 800a748:	d01b      	beq.n	800a782 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f06f 0208 	mvn.w	r2, #8
 800a752:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2204      	movs	r2, #4
 800a758:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	69db      	ldr	r3, [r3, #28]
 800a760:	f003 0303 	and.w	r3, r3, #3
 800a764:	2b00      	cmp	r3, #0
 800a766:	d003      	beq.n	800a770 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 f96b 	bl	800aa44 <HAL_TIM_IC_CaptureCallback>
 800a76e:	e005      	b.n	800a77c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 f95d 	bl	800aa30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 f96e 	bl	800aa58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	f003 0310 	and.w	r3, r3, #16
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d020      	beq.n	800a7ce <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f003 0310 	and.w	r3, r3, #16
 800a792:	2b00      	cmp	r3, #0
 800a794:	d01b      	beq.n	800a7ce <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f06f 0210 	mvn.w	r2, #16
 800a79e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2208      	movs	r2, #8
 800a7a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	69db      	ldr	r3, [r3, #28]
 800a7ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d003      	beq.n	800a7bc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 f945 	bl	800aa44 <HAL_TIM_IC_CaptureCallback>
 800a7ba:	e005      	b.n	800a7c8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 f937 	bl	800aa30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 f948 	bl	800aa58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	f003 0301 	and.w	r3, r3, #1
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d00c      	beq.n	800a7f2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d007      	beq.n	800a7f2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f06f 0201 	mvn.w	r2, #1
 800a7ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 f915 	bl	800aa1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00c      	beq.n	800a816 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a802:	2b00      	cmp	r3, #0
 800a804:	d007      	beq.n	800a816 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a80e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f000 fafb 	bl	800ae0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00c      	beq.n	800a83a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a826:	2b00      	cmp	r3, #0
 800a828:	d007      	beq.n	800a83a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 faf3 	bl	800ae20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a840:	2b00      	cmp	r3, #0
 800a842:	d00c      	beq.n	800a85e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d007      	beq.n	800a85e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 f907 	bl	800aa6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	f003 0320 	and.w	r3, r3, #32
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00c      	beq.n	800a882 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f003 0320 	and.w	r3, r3, #32
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d007      	beq.n	800a882 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f06f 0220 	mvn.w	r2, #32
 800a87a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 fabb 	bl	800adf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a882:	bf00      	nop
 800a884:	3710      	adds	r7, #16
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}

0800a88a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b084      	sub	sp, #16
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
 800a892:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a894:	2300      	movs	r3, #0
 800a896:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d101      	bne.n	800a8a6 <HAL_TIM_ConfigClockSource+0x1c>
 800a8a2:	2302      	movs	r3, #2
 800a8a4:	e0b6      	b.n	800aa14 <HAL_TIM_ConfigClockSource+0x18a>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2202      	movs	r2, #2
 800a8b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a8c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a8d0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	68ba      	ldr	r2, [r7, #8]
 800a8d8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8e2:	d03e      	beq.n	800a962 <HAL_TIM_ConfigClockSource+0xd8>
 800a8e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8e8:	f200 8087 	bhi.w	800a9fa <HAL_TIM_ConfigClockSource+0x170>
 800a8ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8f0:	f000 8086 	beq.w	800aa00 <HAL_TIM_ConfigClockSource+0x176>
 800a8f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8f8:	d87f      	bhi.n	800a9fa <HAL_TIM_ConfigClockSource+0x170>
 800a8fa:	2b70      	cmp	r3, #112	; 0x70
 800a8fc:	d01a      	beq.n	800a934 <HAL_TIM_ConfigClockSource+0xaa>
 800a8fe:	2b70      	cmp	r3, #112	; 0x70
 800a900:	d87b      	bhi.n	800a9fa <HAL_TIM_ConfigClockSource+0x170>
 800a902:	2b60      	cmp	r3, #96	; 0x60
 800a904:	d050      	beq.n	800a9a8 <HAL_TIM_ConfigClockSource+0x11e>
 800a906:	2b60      	cmp	r3, #96	; 0x60
 800a908:	d877      	bhi.n	800a9fa <HAL_TIM_ConfigClockSource+0x170>
 800a90a:	2b50      	cmp	r3, #80	; 0x50
 800a90c:	d03c      	beq.n	800a988 <HAL_TIM_ConfigClockSource+0xfe>
 800a90e:	2b50      	cmp	r3, #80	; 0x50
 800a910:	d873      	bhi.n	800a9fa <HAL_TIM_ConfigClockSource+0x170>
 800a912:	2b40      	cmp	r3, #64	; 0x40
 800a914:	d058      	beq.n	800a9c8 <HAL_TIM_ConfigClockSource+0x13e>
 800a916:	2b40      	cmp	r3, #64	; 0x40
 800a918:	d86f      	bhi.n	800a9fa <HAL_TIM_ConfigClockSource+0x170>
 800a91a:	2b30      	cmp	r3, #48	; 0x30
 800a91c:	d064      	beq.n	800a9e8 <HAL_TIM_ConfigClockSource+0x15e>
 800a91e:	2b30      	cmp	r3, #48	; 0x30
 800a920:	d86b      	bhi.n	800a9fa <HAL_TIM_ConfigClockSource+0x170>
 800a922:	2b20      	cmp	r3, #32
 800a924:	d060      	beq.n	800a9e8 <HAL_TIM_ConfigClockSource+0x15e>
 800a926:	2b20      	cmp	r3, #32
 800a928:	d867      	bhi.n	800a9fa <HAL_TIM_ConfigClockSource+0x170>
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d05c      	beq.n	800a9e8 <HAL_TIM_ConfigClockSource+0x15e>
 800a92e:	2b10      	cmp	r3, #16
 800a930:	d05a      	beq.n	800a9e8 <HAL_TIM_ConfigClockSource+0x15e>
 800a932:	e062      	b.n	800a9fa <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a944:	f000 f9b0 	bl	800aca8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a956:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	68ba      	ldr	r2, [r7, #8]
 800a95e:	609a      	str	r2, [r3, #8]
      break;
 800a960:	e04f      	b.n	800aa02 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a972:	f000 f999 	bl	800aca8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	689a      	ldr	r2, [r3, #8]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a984:	609a      	str	r2, [r3, #8]
      break;
 800a986:	e03c      	b.n	800aa02 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a994:	461a      	mov	r2, r3
 800a996:	f000 f90d 	bl	800abb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2150      	movs	r1, #80	; 0x50
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f000 f966 	bl	800ac72 <TIM_ITRx_SetConfig>
      break;
 800a9a6:	e02c      	b.n	800aa02 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	f000 f92c 	bl	800ac12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	2160      	movs	r1, #96	; 0x60
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f000 f956 	bl	800ac72 <TIM_ITRx_SetConfig>
      break;
 800a9c6:	e01c      	b.n	800aa02 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	f000 f8ed 	bl	800abb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2140      	movs	r1, #64	; 0x40
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f000 f946 	bl	800ac72 <TIM_ITRx_SetConfig>
      break;
 800a9e6:	e00c      	b.n	800aa02 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	4610      	mov	r0, r2
 800a9f4:	f000 f93d 	bl	800ac72 <TIM_ITRx_SetConfig>
      break;
 800a9f8:	e003      	b.n	800aa02 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	73fb      	strb	r3, [r7, #15]
      break;
 800a9fe:	e000      	b.n	800aa02 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800aa00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2201      	movs	r2, #1
 800aa06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa12:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3710      	adds	r7, #16
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800aa24:	bf00      	nop
 800aa26:	370c      	adds	r7, #12
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa38:	bf00      	nop
 800aa3a:	370c      	adds	r7, #12
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa4c:	bf00      	nop
 800aa4e:	370c      	adds	r7, #12
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa60:	bf00      	nop
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa74:	bf00      	nop
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b085      	sub	sp, #20
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4a40      	ldr	r2, [pc, #256]	; (800ab94 <TIM_Base_SetConfig+0x114>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d013      	beq.n	800aac0 <TIM_Base_SetConfig+0x40>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa9e:	d00f      	beq.n	800aac0 <TIM_Base_SetConfig+0x40>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4a3d      	ldr	r2, [pc, #244]	; (800ab98 <TIM_Base_SetConfig+0x118>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d00b      	beq.n	800aac0 <TIM_Base_SetConfig+0x40>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	4a3c      	ldr	r2, [pc, #240]	; (800ab9c <TIM_Base_SetConfig+0x11c>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d007      	beq.n	800aac0 <TIM_Base_SetConfig+0x40>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4a3b      	ldr	r2, [pc, #236]	; (800aba0 <TIM_Base_SetConfig+0x120>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d003      	beq.n	800aac0 <TIM_Base_SetConfig+0x40>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a3a      	ldr	r2, [pc, #232]	; (800aba4 <TIM_Base_SetConfig+0x124>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d108      	bne.n	800aad2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	4313      	orrs	r3, r2
 800aad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4a2f      	ldr	r2, [pc, #188]	; (800ab94 <TIM_Base_SetConfig+0x114>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d01f      	beq.n	800ab1a <TIM_Base_SetConfig+0x9a>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aae0:	d01b      	beq.n	800ab1a <TIM_Base_SetConfig+0x9a>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	4a2c      	ldr	r2, [pc, #176]	; (800ab98 <TIM_Base_SetConfig+0x118>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d017      	beq.n	800ab1a <TIM_Base_SetConfig+0x9a>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4a2b      	ldr	r2, [pc, #172]	; (800ab9c <TIM_Base_SetConfig+0x11c>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d013      	beq.n	800ab1a <TIM_Base_SetConfig+0x9a>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4a2a      	ldr	r2, [pc, #168]	; (800aba0 <TIM_Base_SetConfig+0x120>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d00f      	beq.n	800ab1a <TIM_Base_SetConfig+0x9a>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4a29      	ldr	r2, [pc, #164]	; (800aba4 <TIM_Base_SetConfig+0x124>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d00b      	beq.n	800ab1a <TIM_Base_SetConfig+0x9a>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4a28      	ldr	r2, [pc, #160]	; (800aba8 <TIM_Base_SetConfig+0x128>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d007      	beq.n	800ab1a <TIM_Base_SetConfig+0x9a>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	4a27      	ldr	r2, [pc, #156]	; (800abac <TIM_Base_SetConfig+0x12c>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d003      	beq.n	800ab1a <TIM_Base_SetConfig+0x9a>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4a26      	ldr	r2, [pc, #152]	; (800abb0 <TIM_Base_SetConfig+0x130>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d108      	bne.n	800ab2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	695b      	ldr	r3, [r3, #20]
 800ab36:	4313      	orrs	r3, r2
 800ab38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	689a      	ldr	r2, [r3, #8]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	4a10      	ldr	r2, [pc, #64]	; (800ab94 <TIM_Base_SetConfig+0x114>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d00f      	beq.n	800ab78 <TIM_Base_SetConfig+0xf8>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4a12      	ldr	r2, [pc, #72]	; (800aba4 <TIM_Base_SetConfig+0x124>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d00b      	beq.n	800ab78 <TIM_Base_SetConfig+0xf8>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4a11      	ldr	r2, [pc, #68]	; (800aba8 <TIM_Base_SetConfig+0x128>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d007      	beq.n	800ab78 <TIM_Base_SetConfig+0xf8>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4a10      	ldr	r2, [pc, #64]	; (800abac <TIM_Base_SetConfig+0x12c>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d003      	beq.n	800ab78 <TIM_Base_SetConfig+0xf8>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a0f      	ldr	r2, [pc, #60]	; (800abb0 <TIM_Base_SetConfig+0x130>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d103      	bne.n	800ab80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	691a      	ldr	r2, [r3, #16]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2201      	movs	r2, #1
 800ab84:	615a      	str	r2, [r3, #20]
}
 800ab86:	bf00      	nop
 800ab88:	3714      	adds	r7, #20
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	40012c00 	.word	0x40012c00
 800ab98:	40000400 	.word	0x40000400
 800ab9c:	40000800 	.word	0x40000800
 800aba0:	40000c00 	.word	0x40000c00
 800aba4:	40013400 	.word	0x40013400
 800aba8:	40014000 	.word	0x40014000
 800abac:	40014400 	.word	0x40014400
 800abb0:	40014800 	.word	0x40014800

0800abb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b087      	sub	sp, #28
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	6a1b      	ldr	r3, [r3, #32]
 800abc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6a1b      	ldr	r3, [r3, #32]
 800abca:	f023 0201 	bic.w	r2, r3, #1
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	699b      	ldr	r3, [r3, #24]
 800abd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800abde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	011b      	lsls	r3, r3, #4
 800abe4:	693a      	ldr	r2, [r7, #16]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f023 030a 	bic.w	r3, r3, #10
 800abf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800abf2:	697a      	ldr	r2, [r7, #20]
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	4313      	orrs	r3, r2
 800abf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	693a      	ldr	r2, [r7, #16]
 800abfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	697a      	ldr	r2, [r7, #20]
 800ac04:	621a      	str	r2, [r3, #32]
}
 800ac06:	bf00      	nop
 800ac08:	371c      	adds	r7, #28
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr

0800ac12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac12:	b480      	push	{r7}
 800ac14:	b087      	sub	sp, #28
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	60f8      	str	r0, [r7, #12]
 800ac1a:	60b9      	str	r1, [r7, #8]
 800ac1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	6a1b      	ldr	r3, [r3, #32]
 800ac22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6a1b      	ldr	r3, [r3, #32]
 800ac28:	f023 0210 	bic.w	r2, r3, #16
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	699b      	ldr	r3, [r3, #24]
 800ac34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	031b      	lsls	r3, r3, #12
 800ac42:	693a      	ldr	r2, [r7, #16]
 800ac44:	4313      	orrs	r3, r2
 800ac46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	011b      	lsls	r3, r3, #4
 800ac54:	697a      	ldr	r2, [r7, #20]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	693a      	ldr	r2, [r7, #16]
 800ac5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	697a      	ldr	r2, [r7, #20]
 800ac64:	621a      	str	r2, [r3, #32]
}
 800ac66:	bf00      	nop
 800ac68:	371c      	adds	r7, #28
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr

0800ac72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac72:	b480      	push	{r7}
 800ac74:	b085      	sub	sp, #20
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
 800ac7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac8a:	683a      	ldr	r2, [r7, #0]
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	f043 0307 	orr.w	r3, r3, #7
 800ac94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	609a      	str	r2, [r3, #8]
}
 800ac9c:	bf00      	nop
 800ac9e:	3714      	adds	r7, #20
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b087      	sub	sp, #28
 800acac:	af00      	add	r7, sp, #0
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	60b9      	str	r1, [r7, #8]
 800acb2:	607a      	str	r2, [r7, #4]
 800acb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800acc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	021a      	lsls	r2, r3, #8
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	431a      	orrs	r2, r3
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	4313      	orrs	r3, r2
 800acd0:	697a      	ldr	r2, [r7, #20]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	697a      	ldr	r2, [r7, #20]
 800acda:	609a      	str	r2, [r3, #8]
}
 800acdc:	bf00      	nop
 800acde:	371c      	adds	r7, #28
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ace8:	b480      	push	{r7}
 800acea:	b085      	sub	sp, #20
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d101      	bne.n	800ad00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800acfc:	2302      	movs	r3, #2
 800acfe:	e068      	b.n	800add2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2201      	movs	r2, #1
 800ad04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2202      	movs	r2, #2
 800ad0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a2e      	ldr	r2, [pc, #184]	; (800ade0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d004      	beq.n	800ad34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a2d      	ldr	r2, [pc, #180]	; (800ade4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d108      	bne.n	800ad46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ad3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	68fa      	ldr	r2, [r7, #12]
 800ad42:	4313      	orrs	r3, r2
 800ad44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	68fa      	ldr	r2, [r7, #12]
 800ad54:	4313      	orrs	r3, r2
 800ad56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a1e      	ldr	r2, [pc, #120]	; (800ade0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d01d      	beq.n	800ada6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad72:	d018      	beq.n	800ada6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a1b      	ldr	r2, [pc, #108]	; (800ade8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d013      	beq.n	800ada6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a1a      	ldr	r2, [pc, #104]	; (800adec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d00e      	beq.n	800ada6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a18      	ldr	r2, [pc, #96]	; (800adf0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d009      	beq.n	800ada6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a13      	ldr	r2, [pc, #76]	; (800ade4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d004      	beq.n	800ada6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a14      	ldr	r2, [pc, #80]	; (800adf4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d10c      	bne.n	800adc0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800adac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	68ba      	ldr	r2, [r7, #8]
 800adb4:	4313      	orrs	r3, r2
 800adb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2201      	movs	r2, #1
 800adc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2200      	movs	r2, #0
 800adcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800add0:	2300      	movs	r3, #0
}
 800add2:	4618      	mov	r0, r3
 800add4:	3714      	adds	r7, #20
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr
 800adde:	bf00      	nop
 800ade0:	40012c00 	.word	0x40012c00
 800ade4:	40013400 	.word	0x40013400
 800ade8:	40000400 	.word	0x40000400
 800adec:	40000800 	.word	0x40000800
 800adf0:	40000c00 	.word	0x40000c00
 800adf4:	40014000 	.word	0x40014000

0800adf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b083      	sub	sp, #12
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae00:	bf00      	nop
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae14:	bf00      	nop
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ae28:	bf00      	nop
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d101      	bne.n	800ae46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae42:	2301      	movs	r3, #1
 800ae44:	e042      	b.n	800aecc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d106      	bne.n	800ae5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f7f7 fb15 	bl	8002488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2224      	movs	r2, #36	; 0x24
 800ae62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f022 0201 	bic.w	r2, r2, #1
 800ae74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d002      	beq.n	800ae84 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 fb24 	bl	800b4cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 f825 	bl	800aed4 <UART_SetConfig>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d101      	bne.n	800ae94 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ae90:	2301      	movs	r3, #1
 800ae92:	e01b      	b.n	800aecc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	685a      	ldr	r2, [r3, #4]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aea2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	689a      	ldr	r2, [r3, #8]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aeb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f042 0201 	orr.w	r2, r2, #1
 800aec2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 fba3 	bl	800b610 <UART_CheckIdleState>
 800aeca:	4603      	mov	r3, r0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aed8:	b08c      	sub	sp, #48	; 0x30
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aede:	2300      	movs	r3, #0
 800aee0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	689a      	ldr	r2, [r3, #8]
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	691b      	ldr	r3, [r3, #16]
 800aeec:	431a      	orrs	r2, r3
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	695b      	ldr	r3, [r3, #20]
 800aef2:	431a      	orrs	r2, r3
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	69db      	ldr	r3, [r3, #28]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	4baa      	ldr	r3, [pc, #680]	; (800b1ac <UART_SetConfig+0x2d8>)
 800af04:	4013      	ands	r3, r2
 800af06:	697a      	ldr	r2, [r7, #20]
 800af08:	6812      	ldr	r2, [r2, #0]
 800af0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af0c:	430b      	orrs	r3, r1
 800af0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	68da      	ldr	r2, [r3, #12]
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	430a      	orrs	r2, r1
 800af24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	699b      	ldr	r3, [r3, #24]
 800af2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a9f      	ldr	r2, [pc, #636]	; (800b1b0 <UART_SetConfig+0x2dc>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d004      	beq.n	800af40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	6a1b      	ldr	r3, [r3, #32]
 800af3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af3c:	4313      	orrs	r3, r2
 800af3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800af4a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800af4e:	697a      	ldr	r2, [r7, #20]
 800af50:	6812      	ldr	r2, [r2, #0]
 800af52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af54:	430b      	orrs	r3, r1
 800af56:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5e:	f023 010f 	bic.w	r1, r3, #15
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	430a      	orrs	r2, r1
 800af6c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a90      	ldr	r2, [pc, #576]	; (800b1b4 <UART_SetConfig+0x2e0>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d125      	bne.n	800afc4 <UART_SetConfig+0xf0>
 800af78:	4b8f      	ldr	r3, [pc, #572]	; (800b1b8 <UART_SetConfig+0x2e4>)
 800af7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af7e:	f003 0303 	and.w	r3, r3, #3
 800af82:	2b03      	cmp	r3, #3
 800af84:	d81a      	bhi.n	800afbc <UART_SetConfig+0xe8>
 800af86:	a201      	add	r2, pc, #4	; (adr r2, 800af8c <UART_SetConfig+0xb8>)
 800af88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af8c:	0800af9d 	.word	0x0800af9d
 800af90:	0800afad 	.word	0x0800afad
 800af94:	0800afa5 	.word	0x0800afa5
 800af98:	0800afb5 	.word	0x0800afb5
 800af9c:	2301      	movs	r3, #1
 800af9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afa2:	e116      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800afa4:	2302      	movs	r3, #2
 800afa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afaa:	e112      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800afac:	2304      	movs	r3, #4
 800afae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afb2:	e10e      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800afb4:	2308      	movs	r3, #8
 800afb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afba:	e10a      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800afbc:	2310      	movs	r3, #16
 800afbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afc2:	e106      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4a7c      	ldr	r2, [pc, #496]	; (800b1bc <UART_SetConfig+0x2e8>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d138      	bne.n	800b040 <UART_SetConfig+0x16c>
 800afce:	4b7a      	ldr	r3, [pc, #488]	; (800b1b8 <UART_SetConfig+0x2e4>)
 800afd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afd4:	f003 030c 	and.w	r3, r3, #12
 800afd8:	2b0c      	cmp	r3, #12
 800afda:	d82d      	bhi.n	800b038 <UART_SetConfig+0x164>
 800afdc:	a201      	add	r2, pc, #4	; (adr r2, 800afe4 <UART_SetConfig+0x110>)
 800afde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe2:	bf00      	nop
 800afe4:	0800b019 	.word	0x0800b019
 800afe8:	0800b039 	.word	0x0800b039
 800afec:	0800b039 	.word	0x0800b039
 800aff0:	0800b039 	.word	0x0800b039
 800aff4:	0800b029 	.word	0x0800b029
 800aff8:	0800b039 	.word	0x0800b039
 800affc:	0800b039 	.word	0x0800b039
 800b000:	0800b039 	.word	0x0800b039
 800b004:	0800b021 	.word	0x0800b021
 800b008:	0800b039 	.word	0x0800b039
 800b00c:	0800b039 	.word	0x0800b039
 800b010:	0800b039 	.word	0x0800b039
 800b014:	0800b031 	.word	0x0800b031
 800b018:	2300      	movs	r3, #0
 800b01a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b01e:	e0d8      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b020:	2302      	movs	r3, #2
 800b022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b026:	e0d4      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b028:	2304      	movs	r3, #4
 800b02a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b02e:	e0d0      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b030:	2308      	movs	r3, #8
 800b032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b036:	e0cc      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b038:	2310      	movs	r3, #16
 800b03a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b03e:	e0c8      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a5e      	ldr	r2, [pc, #376]	; (800b1c0 <UART_SetConfig+0x2ec>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d125      	bne.n	800b096 <UART_SetConfig+0x1c2>
 800b04a:	4b5b      	ldr	r3, [pc, #364]	; (800b1b8 <UART_SetConfig+0x2e4>)
 800b04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b050:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b054:	2b30      	cmp	r3, #48	; 0x30
 800b056:	d016      	beq.n	800b086 <UART_SetConfig+0x1b2>
 800b058:	2b30      	cmp	r3, #48	; 0x30
 800b05a:	d818      	bhi.n	800b08e <UART_SetConfig+0x1ba>
 800b05c:	2b20      	cmp	r3, #32
 800b05e:	d00a      	beq.n	800b076 <UART_SetConfig+0x1a2>
 800b060:	2b20      	cmp	r3, #32
 800b062:	d814      	bhi.n	800b08e <UART_SetConfig+0x1ba>
 800b064:	2b00      	cmp	r3, #0
 800b066:	d002      	beq.n	800b06e <UART_SetConfig+0x19a>
 800b068:	2b10      	cmp	r3, #16
 800b06a:	d008      	beq.n	800b07e <UART_SetConfig+0x1aa>
 800b06c:	e00f      	b.n	800b08e <UART_SetConfig+0x1ba>
 800b06e:	2300      	movs	r3, #0
 800b070:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b074:	e0ad      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b076:	2302      	movs	r3, #2
 800b078:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b07c:	e0a9      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b07e:	2304      	movs	r3, #4
 800b080:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b084:	e0a5      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b086:	2308      	movs	r3, #8
 800b088:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b08c:	e0a1      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b08e:	2310      	movs	r3, #16
 800b090:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b094:	e09d      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a4a      	ldr	r2, [pc, #296]	; (800b1c4 <UART_SetConfig+0x2f0>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d125      	bne.n	800b0ec <UART_SetConfig+0x218>
 800b0a0:	4b45      	ldr	r3, [pc, #276]	; (800b1b8 <UART_SetConfig+0x2e4>)
 800b0a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b0aa:	2bc0      	cmp	r3, #192	; 0xc0
 800b0ac:	d016      	beq.n	800b0dc <UART_SetConfig+0x208>
 800b0ae:	2bc0      	cmp	r3, #192	; 0xc0
 800b0b0:	d818      	bhi.n	800b0e4 <UART_SetConfig+0x210>
 800b0b2:	2b80      	cmp	r3, #128	; 0x80
 800b0b4:	d00a      	beq.n	800b0cc <UART_SetConfig+0x1f8>
 800b0b6:	2b80      	cmp	r3, #128	; 0x80
 800b0b8:	d814      	bhi.n	800b0e4 <UART_SetConfig+0x210>
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d002      	beq.n	800b0c4 <UART_SetConfig+0x1f0>
 800b0be:	2b40      	cmp	r3, #64	; 0x40
 800b0c0:	d008      	beq.n	800b0d4 <UART_SetConfig+0x200>
 800b0c2:	e00f      	b.n	800b0e4 <UART_SetConfig+0x210>
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0ca:	e082      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b0cc:	2302      	movs	r3, #2
 800b0ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0d2:	e07e      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b0d4:	2304      	movs	r3, #4
 800b0d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0da:	e07a      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b0dc:	2308      	movs	r3, #8
 800b0de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0e2:	e076      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b0e4:	2310      	movs	r3, #16
 800b0e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0ea:	e072      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a35      	ldr	r2, [pc, #212]	; (800b1c8 <UART_SetConfig+0x2f4>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d12a      	bne.n	800b14c <UART_SetConfig+0x278>
 800b0f6:	4b30      	ldr	r3, [pc, #192]	; (800b1b8 <UART_SetConfig+0x2e4>)
 800b0f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b100:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b104:	d01a      	beq.n	800b13c <UART_SetConfig+0x268>
 800b106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b10a:	d81b      	bhi.n	800b144 <UART_SetConfig+0x270>
 800b10c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b110:	d00c      	beq.n	800b12c <UART_SetConfig+0x258>
 800b112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b116:	d815      	bhi.n	800b144 <UART_SetConfig+0x270>
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d003      	beq.n	800b124 <UART_SetConfig+0x250>
 800b11c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b120:	d008      	beq.n	800b134 <UART_SetConfig+0x260>
 800b122:	e00f      	b.n	800b144 <UART_SetConfig+0x270>
 800b124:	2300      	movs	r3, #0
 800b126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b12a:	e052      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b12c:	2302      	movs	r3, #2
 800b12e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b132:	e04e      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b134:	2304      	movs	r3, #4
 800b136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b13a:	e04a      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b13c:	2308      	movs	r3, #8
 800b13e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b142:	e046      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b144:	2310      	movs	r3, #16
 800b146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b14a:	e042      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a17      	ldr	r2, [pc, #92]	; (800b1b0 <UART_SetConfig+0x2dc>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d13a      	bne.n	800b1cc <UART_SetConfig+0x2f8>
 800b156:	4b18      	ldr	r3, [pc, #96]	; (800b1b8 <UART_SetConfig+0x2e4>)
 800b158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b15c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b160:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b164:	d01a      	beq.n	800b19c <UART_SetConfig+0x2c8>
 800b166:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b16a:	d81b      	bhi.n	800b1a4 <UART_SetConfig+0x2d0>
 800b16c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b170:	d00c      	beq.n	800b18c <UART_SetConfig+0x2b8>
 800b172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b176:	d815      	bhi.n	800b1a4 <UART_SetConfig+0x2d0>
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d003      	beq.n	800b184 <UART_SetConfig+0x2b0>
 800b17c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b180:	d008      	beq.n	800b194 <UART_SetConfig+0x2c0>
 800b182:	e00f      	b.n	800b1a4 <UART_SetConfig+0x2d0>
 800b184:	2300      	movs	r3, #0
 800b186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b18a:	e022      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b18c:	2302      	movs	r3, #2
 800b18e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b192:	e01e      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b194:	2304      	movs	r3, #4
 800b196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b19a:	e01a      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b19c:	2308      	movs	r3, #8
 800b19e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b1a2:	e016      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b1a4:	2310      	movs	r3, #16
 800b1a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b1aa:	e012      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b1ac:	cfff69f3 	.word	0xcfff69f3
 800b1b0:	40008000 	.word	0x40008000
 800b1b4:	40013800 	.word	0x40013800
 800b1b8:	40021000 	.word	0x40021000
 800b1bc:	40004400 	.word	0x40004400
 800b1c0:	40004800 	.word	0x40004800
 800b1c4:	40004c00 	.word	0x40004c00
 800b1c8:	40005000 	.word	0x40005000
 800b1cc:	2310      	movs	r3, #16
 800b1ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4aae      	ldr	r2, [pc, #696]	; (800b490 <UART_SetConfig+0x5bc>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	f040 8097 	bne.w	800b30c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b1de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b1e2:	2b08      	cmp	r3, #8
 800b1e4:	d823      	bhi.n	800b22e <UART_SetConfig+0x35a>
 800b1e6:	a201      	add	r2, pc, #4	; (adr r2, 800b1ec <UART_SetConfig+0x318>)
 800b1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ec:	0800b211 	.word	0x0800b211
 800b1f0:	0800b22f 	.word	0x0800b22f
 800b1f4:	0800b219 	.word	0x0800b219
 800b1f8:	0800b22f 	.word	0x0800b22f
 800b1fc:	0800b21f 	.word	0x0800b21f
 800b200:	0800b22f 	.word	0x0800b22f
 800b204:	0800b22f 	.word	0x0800b22f
 800b208:	0800b22f 	.word	0x0800b22f
 800b20c:	0800b227 	.word	0x0800b227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b210:	f7fb fb54 	bl	80068bc <HAL_RCC_GetPCLK1Freq>
 800b214:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b216:	e010      	b.n	800b23a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b218:	4b9e      	ldr	r3, [pc, #632]	; (800b494 <UART_SetConfig+0x5c0>)
 800b21a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b21c:	e00d      	b.n	800b23a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b21e:	f7fb fab7 	bl	8006790 <HAL_RCC_GetSysClockFreq>
 800b222:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b224:	e009      	b.n	800b23a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b22a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b22c:	e005      	b.n	800b23a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b22e:	2300      	movs	r3, #0
 800b230:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b232:	2301      	movs	r3, #1
 800b234:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b238:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	f000 8130 	beq.w	800b4a2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b246:	4a94      	ldr	r2, [pc, #592]	; (800b498 <UART_SetConfig+0x5c4>)
 800b248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b24c:	461a      	mov	r2, r3
 800b24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b250:	fbb3 f3f2 	udiv	r3, r3, r2
 800b254:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	685a      	ldr	r2, [r3, #4]
 800b25a:	4613      	mov	r3, r2
 800b25c:	005b      	lsls	r3, r3, #1
 800b25e:	4413      	add	r3, r2
 800b260:	69ba      	ldr	r2, [r7, #24]
 800b262:	429a      	cmp	r2, r3
 800b264:	d305      	bcc.n	800b272 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b26c:	69ba      	ldr	r2, [r7, #24]
 800b26e:	429a      	cmp	r2, r3
 800b270:	d903      	bls.n	800b27a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b272:	2301      	movs	r3, #1
 800b274:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b278:	e113      	b.n	800b4a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27c:	2200      	movs	r2, #0
 800b27e:	60bb      	str	r3, [r7, #8]
 800b280:	60fa      	str	r2, [r7, #12]
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b286:	4a84      	ldr	r2, [pc, #528]	; (800b498 <UART_SetConfig+0x5c4>)
 800b288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	2200      	movs	r2, #0
 800b290:	603b      	str	r3, [r7, #0]
 800b292:	607a      	str	r2, [r7, #4]
 800b294:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b298:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b29c:	f7f5 f800 	bl	80002a0 <__aeabi_uldivmod>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	4610      	mov	r0, r2
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	f04f 0200 	mov.w	r2, #0
 800b2ac:	f04f 0300 	mov.w	r3, #0
 800b2b0:	020b      	lsls	r3, r1, #8
 800b2b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b2b6:	0202      	lsls	r2, r0, #8
 800b2b8:	6979      	ldr	r1, [r7, #20]
 800b2ba:	6849      	ldr	r1, [r1, #4]
 800b2bc:	0849      	lsrs	r1, r1, #1
 800b2be:	2000      	movs	r0, #0
 800b2c0:	460c      	mov	r4, r1
 800b2c2:	4605      	mov	r5, r0
 800b2c4:	eb12 0804 	adds.w	r8, r2, r4
 800b2c8:	eb43 0905 	adc.w	r9, r3, r5
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	469a      	mov	sl, r3
 800b2d4:	4693      	mov	fp, r2
 800b2d6:	4652      	mov	r2, sl
 800b2d8:	465b      	mov	r3, fp
 800b2da:	4640      	mov	r0, r8
 800b2dc:	4649      	mov	r1, r9
 800b2de:	f7f4 ffdf 	bl	80002a0 <__aeabi_uldivmod>
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	4613      	mov	r3, r2
 800b2e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b2ea:	6a3b      	ldr	r3, [r7, #32]
 800b2ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2f0:	d308      	bcc.n	800b304 <UART_SetConfig+0x430>
 800b2f2:	6a3b      	ldr	r3, [r7, #32]
 800b2f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2f8:	d204      	bcs.n	800b304 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	6a3a      	ldr	r2, [r7, #32]
 800b300:	60da      	str	r2, [r3, #12]
 800b302:	e0ce      	b.n	800b4a2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b304:	2301      	movs	r3, #1
 800b306:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b30a:	e0ca      	b.n	800b4a2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	69db      	ldr	r3, [r3, #28]
 800b310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b314:	d166      	bne.n	800b3e4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b316:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b31a:	2b08      	cmp	r3, #8
 800b31c:	d827      	bhi.n	800b36e <UART_SetConfig+0x49a>
 800b31e:	a201      	add	r2, pc, #4	; (adr r2, 800b324 <UART_SetConfig+0x450>)
 800b320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b324:	0800b349 	.word	0x0800b349
 800b328:	0800b351 	.word	0x0800b351
 800b32c:	0800b359 	.word	0x0800b359
 800b330:	0800b36f 	.word	0x0800b36f
 800b334:	0800b35f 	.word	0x0800b35f
 800b338:	0800b36f 	.word	0x0800b36f
 800b33c:	0800b36f 	.word	0x0800b36f
 800b340:	0800b36f 	.word	0x0800b36f
 800b344:	0800b367 	.word	0x0800b367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b348:	f7fb fab8 	bl	80068bc <HAL_RCC_GetPCLK1Freq>
 800b34c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b34e:	e014      	b.n	800b37a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b350:	f7fb faca 	bl	80068e8 <HAL_RCC_GetPCLK2Freq>
 800b354:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b356:	e010      	b.n	800b37a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b358:	4b4e      	ldr	r3, [pc, #312]	; (800b494 <UART_SetConfig+0x5c0>)
 800b35a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b35c:	e00d      	b.n	800b37a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b35e:	f7fb fa17 	bl	8006790 <HAL_RCC_GetSysClockFreq>
 800b362:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b364:	e009      	b.n	800b37a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b36a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b36c:	e005      	b.n	800b37a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b36e:	2300      	movs	r3, #0
 800b370:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b372:	2301      	movs	r3, #1
 800b374:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b378:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	f000 8090 	beq.w	800b4a2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b386:	4a44      	ldr	r2, [pc, #272]	; (800b498 <UART_SetConfig+0x5c4>)
 800b388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b38c:	461a      	mov	r2, r3
 800b38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b390:	fbb3 f3f2 	udiv	r3, r3, r2
 800b394:	005a      	lsls	r2, r3, #1
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	085b      	lsrs	r3, r3, #1
 800b39c:	441a      	add	r2, r3
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3a6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3a8:	6a3b      	ldr	r3, [r7, #32]
 800b3aa:	2b0f      	cmp	r3, #15
 800b3ac:	d916      	bls.n	800b3dc <UART_SetConfig+0x508>
 800b3ae:	6a3b      	ldr	r3, [r7, #32]
 800b3b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3b4:	d212      	bcs.n	800b3dc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b3b6:	6a3b      	ldr	r3, [r7, #32]
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	f023 030f 	bic.w	r3, r3, #15
 800b3be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b3c0:	6a3b      	ldr	r3, [r7, #32]
 800b3c2:	085b      	lsrs	r3, r3, #1
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	f003 0307 	and.w	r3, r3, #7
 800b3ca:	b29a      	uxth	r2, r3
 800b3cc:	8bfb      	ldrh	r3, [r7, #30]
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	8bfa      	ldrh	r2, [r7, #30]
 800b3d8:	60da      	str	r2, [r3, #12]
 800b3da:	e062      	b.n	800b4a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b3e2:	e05e      	b.n	800b4a2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b3e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b3e8:	2b08      	cmp	r3, #8
 800b3ea:	d828      	bhi.n	800b43e <UART_SetConfig+0x56a>
 800b3ec:	a201      	add	r2, pc, #4	; (adr r2, 800b3f4 <UART_SetConfig+0x520>)
 800b3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f2:	bf00      	nop
 800b3f4:	0800b419 	.word	0x0800b419
 800b3f8:	0800b421 	.word	0x0800b421
 800b3fc:	0800b429 	.word	0x0800b429
 800b400:	0800b43f 	.word	0x0800b43f
 800b404:	0800b42f 	.word	0x0800b42f
 800b408:	0800b43f 	.word	0x0800b43f
 800b40c:	0800b43f 	.word	0x0800b43f
 800b410:	0800b43f 	.word	0x0800b43f
 800b414:	0800b437 	.word	0x0800b437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b418:	f7fb fa50 	bl	80068bc <HAL_RCC_GetPCLK1Freq>
 800b41c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b41e:	e014      	b.n	800b44a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b420:	f7fb fa62 	bl	80068e8 <HAL_RCC_GetPCLK2Freq>
 800b424:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b426:	e010      	b.n	800b44a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b428:	4b1a      	ldr	r3, [pc, #104]	; (800b494 <UART_SetConfig+0x5c0>)
 800b42a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b42c:	e00d      	b.n	800b44a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b42e:	f7fb f9af 	bl	8006790 <HAL_RCC_GetSysClockFreq>
 800b432:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b434:	e009      	b.n	800b44a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b43a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b43c:	e005      	b.n	800b44a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b43e:	2300      	movs	r3, #0
 800b440:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b442:	2301      	movs	r3, #1
 800b444:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b448:	bf00      	nop
    }

    if (pclk != 0U)
 800b44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d028      	beq.n	800b4a2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b454:	4a10      	ldr	r2, [pc, #64]	; (800b498 <UART_SetConfig+0x5c4>)
 800b456:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b45a:	461a      	mov	r2, r3
 800b45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	085b      	lsrs	r3, r3, #1
 800b468:	441a      	add	r2, r3
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b472:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b474:	6a3b      	ldr	r3, [r7, #32]
 800b476:	2b0f      	cmp	r3, #15
 800b478:	d910      	bls.n	800b49c <UART_SetConfig+0x5c8>
 800b47a:	6a3b      	ldr	r3, [r7, #32]
 800b47c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b480:	d20c      	bcs.n	800b49c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b482:	6a3b      	ldr	r3, [r7, #32]
 800b484:	b29a      	uxth	r2, r3
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	60da      	str	r2, [r3, #12]
 800b48c:	e009      	b.n	800b4a2 <UART_SetConfig+0x5ce>
 800b48e:	bf00      	nop
 800b490:	40008000 	.word	0x40008000
 800b494:	00f42400 	.word	0x00f42400
 800b498:	0801be48 	.word	0x0801be48
      }
      else
      {
        ret = HAL_ERROR;
 800b49c:	2301      	movs	r3, #1
 800b49e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b4be:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3730      	adds	r7, #48	; 0x30
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b4cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d8:	f003 0308 	and.w	r3, r3, #8
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d00a      	beq.n	800b4f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	430a      	orrs	r2, r1
 800b4f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4fa:	f003 0301 	and.w	r3, r3, #1
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00a      	beq.n	800b518 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	430a      	orrs	r2, r1
 800b516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b51c:	f003 0302 	and.w	r3, r3, #2
 800b520:	2b00      	cmp	r3, #0
 800b522:	d00a      	beq.n	800b53a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	430a      	orrs	r2, r1
 800b538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b53e:	f003 0304 	and.w	r3, r3, #4
 800b542:	2b00      	cmp	r3, #0
 800b544:	d00a      	beq.n	800b55c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	430a      	orrs	r2, r1
 800b55a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b560:	f003 0310 	and.w	r3, r3, #16
 800b564:	2b00      	cmp	r3, #0
 800b566:	d00a      	beq.n	800b57e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	689b      	ldr	r3, [r3, #8]
 800b56e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	430a      	orrs	r2, r1
 800b57c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b582:	f003 0320 	and.w	r3, r3, #32
 800b586:	2b00      	cmp	r3, #0
 800b588:	d00a      	beq.n	800b5a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	430a      	orrs	r2, r1
 800b59e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d01a      	beq.n	800b5e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	430a      	orrs	r2, r1
 800b5c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5ca:	d10a      	bne.n	800b5e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	430a      	orrs	r2, r1
 800b5e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d00a      	beq.n	800b604 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	430a      	orrs	r2, r1
 800b602:	605a      	str	r2, [r3, #4]
  }
}
 800b604:	bf00      	nop
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b098      	sub	sp, #96	; 0x60
 800b614:	af02      	add	r7, sp, #8
 800b616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b620:	f7f7 f8bc 	bl	800279c <HAL_GetTick>
 800b624:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f003 0308 	and.w	r3, r3, #8
 800b630:	2b08      	cmp	r3, #8
 800b632:	d12f      	bne.n	800b694 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b634:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b638:	9300      	str	r3, [sp, #0]
 800b63a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b63c:	2200      	movs	r2, #0
 800b63e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f88e 	bl	800b764 <UART_WaitOnFlagUntilTimeout>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d022      	beq.n	800b694 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b656:	e853 3f00 	ldrex	r3, [r3]
 800b65a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b65c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b65e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b662:	653b      	str	r3, [r7, #80]	; 0x50
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	461a      	mov	r2, r3
 800b66a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b66c:	647b      	str	r3, [r7, #68]	; 0x44
 800b66e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b670:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b672:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b674:	e841 2300 	strex	r3, r2, [r1]
 800b678:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b67a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d1e6      	bne.n	800b64e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2220      	movs	r2, #32
 800b684:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2200      	movs	r2, #0
 800b68c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b690:	2303      	movs	r3, #3
 800b692:	e063      	b.n	800b75c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f003 0304 	and.w	r3, r3, #4
 800b69e:	2b04      	cmp	r3, #4
 800b6a0:	d149      	bne.n	800b736 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b6a6:	9300      	str	r3, [sp, #0]
 800b6a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f000 f857 	bl	800b764 <UART_WaitOnFlagUntilTimeout>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d03c      	beq.n	800b736 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c4:	e853 3f00 	ldrex	r3, [r3]
 800b6c8:	623b      	str	r3, [r7, #32]
   return(result);
 800b6ca:	6a3b      	ldr	r3, [r7, #32]
 800b6cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b6d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6da:	633b      	str	r3, [r7, #48]	; 0x30
 800b6dc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6e2:	e841 2300 	strex	r3, r2, [r1]
 800b6e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d1e6      	bne.n	800b6bc <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	3308      	adds	r3, #8
 800b6f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	e853 3f00 	ldrex	r3, [r3]
 800b6fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f023 0301 	bic.w	r3, r3, #1
 800b704:	64bb      	str	r3, [r7, #72]	; 0x48
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	3308      	adds	r3, #8
 800b70c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b70e:	61fa      	str	r2, [r7, #28]
 800b710:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b712:	69b9      	ldr	r1, [r7, #24]
 800b714:	69fa      	ldr	r2, [r7, #28]
 800b716:	e841 2300 	strex	r3, r2, [r1]
 800b71a:	617b      	str	r3, [r7, #20]
   return(result);
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d1e5      	bne.n	800b6ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2220      	movs	r2, #32
 800b726:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b732:	2303      	movs	r3, #3
 800b734:	e012      	b.n	800b75c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2220      	movs	r2, #32
 800b73a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2220      	movs	r2, #32
 800b742:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2200      	movs	r2, #0
 800b756:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b75a:	2300      	movs	r3, #0
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3758      	adds	r7, #88	; 0x58
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	60b9      	str	r1, [r7, #8]
 800b76e:	603b      	str	r3, [r7, #0]
 800b770:	4613      	mov	r3, r2
 800b772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b774:	e049      	b.n	800b80a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b77c:	d045      	beq.n	800b80a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b77e:	f7f7 f80d 	bl	800279c <HAL_GetTick>
 800b782:	4602      	mov	r2, r0
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	1ad3      	subs	r3, r2, r3
 800b788:	69ba      	ldr	r2, [r7, #24]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d302      	bcc.n	800b794 <UART_WaitOnFlagUntilTimeout+0x30>
 800b78e:	69bb      	ldr	r3, [r7, #24]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d101      	bne.n	800b798 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b794:	2303      	movs	r3, #3
 800b796:	e048      	b.n	800b82a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f003 0304 	and.w	r3, r3, #4
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d031      	beq.n	800b80a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	69db      	ldr	r3, [r3, #28]
 800b7ac:	f003 0308 	and.w	r3, r3, #8
 800b7b0:	2b08      	cmp	r3, #8
 800b7b2:	d110      	bne.n	800b7d6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	2208      	movs	r2, #8
 800b7ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f000 f838 	bl	800b832 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2208      	movs	r2, #8
 800b7c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	e029      	b.n	800b82a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	69db      	ldr	r3, [r3, #28]
 800b7dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7e4:	d111      	bne.n	800b80a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b7ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b7f0:	68f8      	ldr	r0, [r7, #12]
 800b7f2:	f000 f81e 	bl	800b832 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2220      	movs	r2, #32
 800b7fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2200      	movs	r2, #0
 800b802:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b806:	2303      	movs	r3, #3
 800b808:	e00f      	b.n	800b82a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	69da      	ldr	r2, [r3, #28]
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	4013      	ands	r3, r2
 800b814:	68ba      	ldr	r2, [r7, #8]
 800b816:	429a      	cmp	r2, r3
 800b818:	bf0c      	ite	eq
 800b81a:	2301      	moveq	r3, #1
 800b81c:	2300      	movne	r3, #0
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	461a      	mov	r2, r3
 800b822:	79fb      	ldrb	r3, [r7, #7]
 800b824:	429a      	cmp	r2, r3
 800b826:	d0a6      	beq.n	800b776 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b828:	2300      	movs	r3, #0
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3710      	adds	r7, #16
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}

0800b832 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b832:	b480      	push	{r7}
 800b834:	b095      	sub	sp, #84	; 0x54
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b842:	e853 3f00 	ldrex	r3, [r3]
 800b846:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b84e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	461a      	mov	r2, r3
 800b856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b858:	643b      	str	r3, [r7, #64]	; 0x40
 800b85a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b85c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b85e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b860:	e841 2300 	strex	r3, r2, [r1]
 800b864:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d1e6      	bne.n	800b83a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	3308      	adds	r3, #8
 800b872:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b874:	6a3b      	ldr	r3, [r7, #32]
 800b876:	e853 3f00 	ldrex	r3, [r3]
 800b87a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b87c:	69fb      	ldr	r3, [r7, #28]
 800b87e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b882:	f023 0301 	bic.w	r3, r3, #1
 800b886:	64bb      	str	r3, [r7, #72]	; 0x48
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	3308      	adds	r3, #8
 800b88e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b890:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b892:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b894:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b898:	e841 2300 	strex	r3, r2, [r1]
 800b89c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d1e3      	bne.n	800b86c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d118      	bne.n	800b8de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	e853 3f00 	ldrex	r3, [r3]
 800b8b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	f023 0310 	bic.w	r3, r3, #16
 800b8c0:	647b      	str	r3, [r7, #68]	; 0x44
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8ca:	61bb      	str	r3, [r7, #24]
 800b8cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ce:	6979      	ldr	r1, [r7, #20]
 800b8d0:	69ba      	ldr	r2, [r7, #24]
 800b8d2:	e841 2300 	strex	r3, r2, [r1]
 800b8d6:	613b      	str	r3, [r7, #16]
   return(result);
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1e6      	bne.n	800b8ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2220      	movs	r2, #32
 800b8e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b8f2:	bf00      	nop
 800b8f4:	3754      	adds	r7, #84	; 0x54
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr

0800b8fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b8fe:	b480      	push	{r7}
 800b900:	b085      	sub	sp, #20
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d101      	bne.n	800b914 <HAL_UARTEx_DisableFifoMode+0x16>
 800b910:	2302      	movs	r3, #2
 800b912:	e027      	b.n	800b964 <HAL_UARTEx_DisableFifoMode+0x66>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2201      	movs	r2, #1
 800b918:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2224      	movs	r2, #36	; 0x24
 800b920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	681a      	ldr	r2, [r3, #0]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f022 0201 	bic.w	r2, r2, #1
 800b93a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b942:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	68fa      	ldr	r2, [r7, #12]
 800b950:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2220      	movs	r2, #32
 800b956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b962:	2300      	movs	r3, #0
}
 800b964:	4618      	mov	r0, r3
 800b966:	3714      	adds	r7, #20
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr

0800b970 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b980:	2b01      	cmp	r3, #1
 800b982:	d101      	bne.n	800b988 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b984:	2302      	movs	r3, #2
 800b986:	e02d      	b.n	800b9e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2201      	movs	r2, #1
 800b98c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2224      	movs	r2, #36	; 0x24
 800b994:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f022 0201 	bic.w	r2, r2, #1
 800b9ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	683a      	ldr	r2, [r7, #0]
 800b9c0:	430a      	orrs	r2, r1
 800b9c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 f84f 	bl	800ba68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2220      	movs	r2, #32
 800b9d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b9e2:	2300      	movs	r3, #0
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3710      	adds	r7, #16
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d101      	bne.n	800ba04 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ba00:	2302      	movs	r3, #2
 800ba02:	e02d      	b.n	800ba60 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2224      	movs	r2, #36	; 0x24
 800ba10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f022 0201 	bic.w	r2, r2, #1
 800ba2a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	683a      	ldr	r2, [r7, #0]
 800ba3c:	430a      	orrs	r2, r1
 800ba3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 f811 	bl	800ba68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	68fa      	ldr	r2, [r7, #12]
 800ba4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2220      	movs	r2, #32
 800ba52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d108      	bne.n	800ba8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ba88:	e031      	b.n	800baee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ba8a:	2308      	movs	r3, #8
 800ba8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ba8e:	2308      	movs	r3, #8
 800ba90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	0e5b      	lsrs	r3, r3, #25
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	f003 0307 	and.w	r3, r3, #7
 800baa0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	0f5b      	lsrs	r3, r3, #29
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	f003 0307 	and.w	r3, r3, #7
 800bab0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bab2:	7bbb      	ldrb	r3, [r7, #14]
 800bab4:	7b3a      	ldrb	r2, [r7, #12]
 800bab6:	4911      	ldr	r1, [pc, #68]	; (800bafc <UARTEx_SetNbDataToProcess+0x94>)
 800bab8:	5c8a      	ldrb	r2, [r1, r2]
 800baba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800babe:	7b3a      	ldrb	r2, [r7, #12]
 800bac0:	490f      	ldr	r1, [pc, #60]	; (800bb00 <UARTEx_SetNbDataToProcess+0x98>)
 800bac2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bac4:	fb93 f3f2 	sdiv	r3, r3, r2
 800bac8:	b29a      	uxth	r2, r3
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bad0:	7bfb      	ldrb	r3, [r7, #15]
 800bad2:	7b7a      	ldrb	r2, [r7, #13]
 800bad4:	4909      	ldr	r1, [pc, #36]	; (800bafc <UARTEx_SetNbDataToProcess+0x94>)
 800bad6:	5c8a      	ldrb	r2, [r1, r2]
 800bad8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800badc:	7b7a      	ldrb	r2, [r7, #13]
 800bade:	4908      	ldr	r1, [pc, #32]	; (800bb00 <UARTEx_SetNbDataToProcess+0x98>)
 800bae0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bae2:	fb93 f3f2 	sdiv	r3, r3, r2
 800bae6:	b29a      	uxth	r2, r3
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800baee:	bf00      	nop
 800baf0:	3714      	adds	r7, #20
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr
 800bafa:	bf00      	nop
 800bafc:	0801be60 	.word	0x0801be60
 800bb00:	0801be68 	.word	0x0801be68

0800bb04 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bb04:	b084      	sub	sp, #16
 800bb06:	b480      	push	{r7}
 800bb08:	b085      	sub	sp, #20
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
 800bb0e:	f107 001c 	add.w	r0, r7, #28
 800bb12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bb16:	2300      	movs	r3, #0
 800bb18:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800bb1a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800bb1c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bb1e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800bb22:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800bb26:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800bb2a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bb2c:	68fa      	ldr	r2, [r7, #12]
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	685a      	ldr	r2, [r3, #4]
 800bb36:	4b07      	ldr	r3, [pc, #28]	; (800bb54 <SDMMC_Init+0x50>)
 800bb38:	4013      	ands	r3, r2
 800bb3a:	68fa      	ldr	r2, [r7, #12]
 800bb3c:	431a      	orrs	r2, r3
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bb42:	2300      	movs	r3, #0
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3714      	adds	r7, #20
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	b004      	add	sp, #16
 800bb50:	4770      	bx	lr
 800bb52:	bf00      	nop
 800bb54:	ffc02c00 	.word	0xffc02c00

0800bb58 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	370c      	adds	r7, #12
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr

0800bb72 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800bb72:	b480      	push	{r7}
 800bb74:	b083      	sub	sp, #12
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
 800bb7a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bb86:	2300      	movs	r3, #0
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	370c      	adds	r7, #12
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b082      	sub	sp, #8
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f043 0203 	orr.w	r2, r3, #3
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800bba8:	2002      	movs	r0, #2
 800bbaa:	f7f6 fe03 	bl	80027b4 <HAL_Delay>

  return HAL_OK;
 800bbae:	2300      	movs	r3, #0
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3708      	adds	r7, #8
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f003 0303 	and.w	r3, r3, #3
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	370c      	adds	r7, #12
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b085      	sub	sp, #20
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bbf2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bbf8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bbfe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	4313      	orrs	r3, r2
 800bc04:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	68da      	ldr	r2, [r3, #12]
 800bc0a:	4b06      	ldr	r3, [pc, #24]	; (800bc24 <SDMMC_SendCommand+0x50>)
 800bc0c:	4013      	ands	r3, r2
 800bc0e:	68fa      	ldr	r2, [r7, #12]
 800bc10:	431a      	orrs	r2, r3
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bc16:	2300      	movs	r3, #0
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3714      	adds	r7, #20
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr
 800bc24:	fffee0c0 	.word	0xfffee0c0

0800bc28 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	691b      	ldr	r3, [r3, #16]
 800bc34:	b2db      	uxtb	r3, r3
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	370c      	adds	r7, #12
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr

0800bc42 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bc42:	b480      	push	{r7}
 800bc44:	b085      	sub	sp, #20
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6078      	str	r0, [r7, #4]
 800bc4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	3314      	adds	r3, #20
 800bc50:	461a      	mov	r2, r3
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	4413      	add	r3, r2
 800bc56:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3714      	adds	r7, #20
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b085      	sub	sp, #20
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bc72:	2300      	movs	r3, #0
 800bc74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	685a      	ldr	r2, [r3, #4]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bc8e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800bc94:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800bc9a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bc9c:	68fa      	ldr	r2, [r7, #12]
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	431a      	orrs	r2, r3
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bcb2:	2300      	movs	r3, #0

}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3714      	adds	r7, #20
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b088      	sub	sp, #32
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bcce:	2310      	movs	r3, #16
 800bcd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bcd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bce0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bce2:	f107 0308 	add.w	r3, r7, #8
 800bce6:	4619      	mov	r1, r3
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f7ff ff73 	bl	800bbd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bcee:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcf2:	2110      	movs	r1, #16
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f000 fa7b 	bl	800c1f0 <SDMMC_GetCmdResp1>
 800bcfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcfc:	69fb      	ldr	r3, [r7, #28]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3720      	adds	r7, #32
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}

0800bd06 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bd06:	b580      	push	{r7, lr}
 800bd08:	b088      	sub	sp, #32
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
 800bd0e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bd14:	2311      	movs	r3, #17
 800bd16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd28:	f107 0308 	add.w	r3, r7, #8
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f7ff ff50 	bl	800bbd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bd34:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd38:	2111      	movs	r1, #17
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f000 fa58 	bl	800c1f0 <SDMMC_GetCmdResp1>
 800bd40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd42:	69fb      	ldr	r3, [r7, #28]
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3720      	adds	r7, #32
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b088      	sub	sp, #32
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bd5a:	2312      	movs	r3, #18
 800bd5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd64:	2300      	movs	r3, #0
 800bd66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd6e:	f107 0308 	add.w	r3, r7, #8
 800bd72:	4619      	mov	r1, r3
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f7ff ff2d 	bl	800bbd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bd7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd7e:	2112      	movs	r1, #18
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f000 fa35 	bl	800c1f0 <SDMMC_GetCmdResp1>
 800bd86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd88:	69fb      	ldr	r3, [r7, #28]
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3720      	adds	r7, #32
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}

0800bd92 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b088      	sub	sp, #32
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
 800bd9a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bda0:	2318      	movs	r3, #24
 800bda2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bda4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bda8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bdb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdb4:	f107 0308 	add.w	r3, r7, #8
 800bdb8:	4619      	mov	r1, r3
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f7ff ff0a 	bl	800bbd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bdc0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdc4:	2118      	movs	r1, #24
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fa12 	bl	800c1f0 <SDMMC_GetCmdResp1>
 800bdcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdce:	69fb      	ldr	r3, [r7, #28]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3720      	adds	r7, #32
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b088      	sub	sp, #32
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bde6:	2319      	movs	r3, #25
 800bde8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bdee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bdf8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdfa:	f107 0308 	add.w	r3, r7, #8
 800bdfe:	4619      	mov	r1, r3
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f7ff fee7 	bl	800bbd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800be06:	f241 3288 	movw	r2, #5000	; 0x1388
 800be0a:	2119      	movs	r1, #25
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f000 f9ef 	bl	800c1f0 <SDMMC_GetCmdResp1>
 800be12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be14:	69fb      	ldr	r3, [r7, #28]
}
 800be16:	4618      	mov	r0, r3
 800be18:	3720      	adds	r7, #32
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
	...

0800be20 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b088      	sub	sp, #32
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800be28:	2300      	movs	r3, #0
 800be2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800be2c:	230c      	movs	r3, #12
 800be2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be36:	2300      	movs	r3, #0
 800be38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be3e:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	68db      	ldr	r3, [r3, #12]
 800be44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be58:	f107 0308 	add.w	r3, r7, #8
 800be5c:	4619      	mov	r1, r3
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f7ff feb8 	bl	800bbd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800be64:	4a08      	ldr	r2, [pc, #32]	; (800be88 <SDMMC_CmdStopTransfer+0x68>)
 800be66:	210c      	movs	r1, #12
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 f9c1 	bl	800c1f0 <SDMMC_GetCmdResp1>
 800be6e:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	68db      	ldr	r3, [r3, #12]
 800be74:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800be7c:	69fb      	ldr	r3, [r7, #28]
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3720      	adds	r7, #32
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	05f5e100 	.word	0x05f5e100

0800be8c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b08a      	sub	sp, #40	; 0x28
 800be90:	af00      	add	r7, sp, #0
 800be92:	60f8      	str	r0, [r7, #12]
 800be94:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800be9c:	2307      	movs	r3, #7
 800be9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bea4:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bea6:	2300      	movs	r3, #0
 800bea8:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800beaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800beae:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800beb0:	f107 0310 	add.w	r3, r7, #16
 800beb4:	4619      	mov	r1, r3
 800beb6:	68f8      	ldr	r0, [r7, #12]
 800beb8:	f7ff fe8c 	bl	800bbd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bebc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bec0:	2107      	movs	r1, #7
 800bec2:	68f8      	ldr	r0, [r7, #12]
 800bec4:	f000 f994 	bl	800c1f0 <SDMMC_GetCmdResp1>
 800bec8:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800beca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800becc:	4618      	mov	r0, r3
 800bece:	3728      	adds	r7, #40	; 0x28
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b088      	sub	sp, #32
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bedc:	2300      	movs	r3, #0
 800bede:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bee0:	2300      	movs	r3, #0
 800bee2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bee4:	2300      	movs	r3, #0
 800bee6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bee8:	2300      	movs	r3, #0
 800beea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800beec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bef0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bef2:	f107 0308 	add.w	r3, r7, #8
 800bef6:	4619      	mov	r1, r3
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f7ff fe6b 	bl	800bbd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 fbb8 	bl	800c674 <SDMMC_GetCmdError>
 800bf04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf06:	69fb      	ldr	r3, [r7, #28]
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3720      	adds	r7, #32
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}

0800bf10 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b088      	sub	sp, #32
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bf18:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bf1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bf1e:	2308      	movs	r3, #8
 800bf20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf22:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf32:	f107 0308 	add.w	r3, r7, #8
 800bf36:	4619      	mov	r1, r3
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f7ff fe4b 	bl	800bbd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 fb4a 	bl	800c5d8 <SDMMC_GetCmdResp7>
 800bf44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf46:	69fb      	ldr	r3, [r7, #28]
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3720      	adds	r7, #32
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b088      	sub	sp, #32
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bf5e:	2337      	movs	r3, #55	; 0x37
 800bf60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf62:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf72:	f107 0308 	add.w	r3, r7, #8
 800bf76:	4619      	mov	r1, r3
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f7ff fe2b 	bl	800bbd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bf7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf82:	2137      	movs	r1, #55	; 0x37
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 f933 	bl	800c1f0 <SDMMC_GetCmdResp1>
 800bf8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf8c:	69fb      	ldr	r3, [r7, #28]
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3720      	adds	r7, #32
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}

0800bf96 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bf96:	b580      	push	{r7, lr}
 800bf98:	b088      	sub	sp, #32
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
 800bf9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bfa4:	2329      	movs	r3, #41	; 0x29
 800bfa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bfac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bfb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfb8:	f107 0308 	add.w	r3, r7, #8
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f7ff fe08 	bl	800bbd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f000 fa4f 	bl	800c468 <SDMMC_GetCmdResp3>
 800bfca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfcc:	69fb      	ldr	r3, [r7, #28]
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3720      	adds	r7, #32
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b088      	sub	sp, #32
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
 800bfde:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bfe4:	2306      	movs	r3, #6
 800bfe6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bfec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfee:	2300      	movs	r3, #0
 800bff0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bff6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bff8:	f107 0308 	add.w	r3, r7, #8
 800bffc:	4619      	mov	r1, r3
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f7ff fde8 	bl	800bbd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c004:	f241 3288 	movw	r2, #5000	; 0x1388
 800c008:	2106      	movs	r1, #6
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f000 f8f0 	bl	800c1f0 <SDMMC_GetCmdResp1>
 800c010:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c012:	69fb      	ldr	r3, [r7, #28]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3720      	adds	r7, #32
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b088      	sub	sp, #32
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c024:	2300      	movs	r3, #0
 800c026:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c028:	2333      	movs	r3, #51	; 0x33
 800c02a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c02c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c030:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c032:	2300      	movs	r3, #0
 800c034:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c03a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c03c:	f107 0308 	add.w	r3, r7, #8
 800c040:	4619      	mov	r1, r3
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f7ff fdc6 	bl	800bbd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c048:	f241 3288 	movw	r2, #5000	; 0x1388
 800c04c:	2133      	movs	r1, #51	; 0x33
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 f8ce 	bl	800c1f0 <SDMMC_GetCmdResp1>
 800c054:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c056:	69fb      	ldr	r3, [r7, #28]
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3720      	adds	r7, #32
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b088      	sub	sp, #32
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c068:	2300      	movs	r3, #0
 800c06a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c06c:	2302      	movs	r3, #2
 800c06e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c070:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c076:	2300      	movs	r3, #0
 800c078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c07a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c07e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c080:	f107 0308 	add.w	r3, r7, #8
 800c084:	4619      	mov	r1, r3
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f7ff fda4 	bl	800bbd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 f9a1 	bl	800c3d4 <SDMMC_GetCmdResp2>
 800c092:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c094:	69fb      	ldr	r3, [r7, #28]
}
 800c096:	4618      	mov	r0, r3
 800c098:	3720      	adds	r7, #32
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c09e:	b580      	push	{r7, lr}
 800c0a0:	b088      	sub	sp, #32
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
 800c0a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c0ac:	2309      	movs	r3, #9
 800c0ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c0b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c0b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c0be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0c0:	f107 0308 	add.w	r3, r7, #8
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f7ff fd84 	bl	800bbd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 f981 	bl	800c3d4 <SDMMC_GetCmdResp2>
 800c0d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0d4:	69fb      	ldr	r3, [r7, #28]
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3720      	adds	r7, #32
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b088      	sub	sp, #32
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
 800c0e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c0ec:	2303      	movs	r3, #3
 800c0ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c0f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c0fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c100:	f107 0308 	add.w	r3, r7, #8
 800c104:	4619      	mov	r1, r3
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f7ff fd64 	bl	800bbd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c10c:	683a      	ldr	r2, [r7, #0]
 800c10e:	2103      	movs	r1, #3
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f000 f9e9 	bl	800c4e8 <SDMMC_GetCmdResp6>
 800c116:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c118:	69fb      	ldr	r3, [r7, #28]
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3720      	adds	r7, #32
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}

0800c122 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c122:	b580      	push	{r7, lr}
 800c124:	b088      	sub	sp, #32
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
 800c12a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c130:	230d      	movs	r3, #13
 800c132:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c134:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c138:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c13a:	2300      	movs	r3, #0
 800c13c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c13e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c142:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c144:	f107 0308 	add.w	r3, r7, #8
 800c148:	4619      	mov	r1, r3
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f7ff fd42 	bl	800bbd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c150:	f241 3288 	movw	r2, #5000	; 0x1388
 800c154:	210d      	movs	r1, #13
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 f84a 	bl	800c1f0 <SDMMC_GetCmdResp1>
 800c15c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c15e:	69fb      	ldr	r3, [r7, #28]
}
 800c160:	4618      	mov	r0, r3
 800c162:	3720      	adds	r7, #32
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b088      	sub	sp, #32
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c170:	2300      	movs	r3, #0
 800c172:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c174:	230d      	movs	r3, #13
 800c176:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c178:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c17c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c17e:	2300      	movs	r3, #0
 800c180:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c186:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c188:	f107 0308 	add.w	r3, r7, #8
 800c18c:	4619      	mov	r1, r3
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f7ff fd20 	bl	800bbd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c194:	f241 3288 	movw	r2, #5000	; 0x1388
 800c198:	210d      	movs	r1, #13
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 f828 	bl	800c1f0 <SDMMC_GetCmdResp1>
 800c1a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1a2:	69fb      	ldr	r3, [r7, #28]
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3720      	adds	r7, #32
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b088      	sub	sp, #32
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800c1b8:	230b      	movs	r3, #11
 800c1ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c1c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c1ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1cc:	f107 0308 	add.w	r3, r7, #8
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f7ff fcfe 	bl	800bbd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800c1d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1dc:	210b      	movs	r1, #11
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 f806 	bl	800c1f0 <SDMMC_GetCmdResp1>
 800c1e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1e6:	69fb      	ldr	r3, [r7, #28]
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3720      	adds	r7, #32
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b088      	sub	sp, #32
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	460b      	mov	r3, r1
 800c1fa:	607a      	str	r2, [r7, #4]
 800c1fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c1fe:	4b70      	ldr	r3, [pc, #448]	; (800c3c0 <SDMMC_GetCmdResp1+0x1d0>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	4a70      	ldr	r2, [pc, #448]	; (800c3c4 <SDMMC_GetCmdResp1+0x1d4>)
 800c204:	fba2 2303 	umull	r2, r3, r2, r3
 800c208:	0a5a      	lsrs	r2, r3, #9
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	fb02 f303 	mul.w	r3, r2, r3
 800c210:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c212:	69fb      	ldr	r3, [r7, #28]
 800c214:	1e5a      	subs	r2, r3, #1
 800c216:	61fa      	str	r2, [r7, #28]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d102      	bne.n	800c222 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c21c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c220:	e0c9      	b.n	800c3b6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c226:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c228:	69ba      	ldr	r2, [r7, #24]
 800c22a:	4b67      	ldr	r3, [pc, #412]	; (800c3c8 <SDMMC_GetCmdResp1+0x1d8>)
 800c22c:	4013      	ands	r3, r2
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d0ef      	beq.n	800c212 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d1ea      	bne.n	800c212 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c240:	f003 0304 	and.w	r3, r3, #4
 800c244:	2b00      	cmp	r3, #0
 800c246:	d004      	beq.n	800c252 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2204      	movs	r2, #4
 800c24c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c24e:	2304      	movs	r3, #4
 800c250:	e0b1      	b.n	800c3b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c256:	f003 0301 	and.w	r3, r3, #1
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d004      	beq.n	800c268 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2201      	movs	r2, #1
 800c262:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c264:	2301      	movs	r3, #1
 800c266:	e0a6      	b.n	800c3b6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	4a58      	ldr	r2, [pc, #352]	; (800c3cc <SDMMC_GetCmdResp1+0x1dc>)
 800c26c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c26e:	68f8      	ldr	r0, [r7, #12]
 800c270:	f7ff fcda 	bl	800bc28 <SDMMC_GetCommandResponse>
 800c274:	4603      	mov	r3, r0
 800c276:	461a      	mov	r2, r3
 800c278:	7afb      	ldrb	r3, [r7, #11]
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d001      	beq.n	800c282 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c27e:	2301      	movs	r3, #1
 800c280:	e099      	b.n	800c3b6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c282:	2100      	movs	r1, #0
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	f7ff fcdc 	bl	800bc42 <SDMMC_GetResponse>
 800c28a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c28c:	697a      	ldr	r2, [r7, #20]
 800c28e:	4b50      	ldr	r3, [pc, #320]	; (800c3d0 <SDMMC_GetCmdResp1+0x1e0>)
 800c290:	4013      	ands	r3, r2
 800c292:	2b00      	cmp	r3, #0
 800c294:	d101      	bne.n	800c29a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c296:	2300      	movs	r3, #0
 800c298:	e08d      	b.n	800c3b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	da02      	bge.n	800c2a6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c2a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c2a4:	e087      	b.n	800c3b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d001      	beq.n	800c2b4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c2b0:	2340      	movs	r3, #64	; 0x40
 800c2b2:	e080      	b.n	800c3b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d001      	beq.n	800c2c2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c2be:	2380      	movs	r3, #128	; 0x80
 800c2c0:	e079      	b.n	800c3b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d002      	beq.n	800c2d2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c2cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c2d0:	e071      	b.n	800c3b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d002      	beq.n	800c2e2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c2dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2e0:	e069      	b.n	800c3b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d002      	beq.n	800c2f2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c2ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2f0:	e061      	b.n	800c3b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d002      	beq.n	800c302 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c2fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c300:	e059      	b.n	800c3b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d002      	beq.n	800c312 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c30c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c310:	e051      	b.n	800c3b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d002      	beq.n	800c322 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c31c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c320:	e049      	b.n	800c3b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d002      	beq.n	800c332 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c32c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c330:	e041      	b.n	800c3b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d002      	beq.n	800c342 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c33c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c340:	e039      	b.n	800c3b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d002      	beq.n	800c352 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c34c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c350:	e031      	b.n	800c3b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d002      	beq.n	800c362 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c35c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c360:	e029      	b.n	800c3b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d002      	beq.n	800c372 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c36c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c370:	e021      	b.n	800c3b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d002      	beq.n	800c382 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c37c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c380:	e019      	b.n	800c3b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d002      	beq.n	800c392 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c38c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c390:	e011      	b.n	800c3b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d002      	beq.n	800c3a2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c39c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c3a0:	e009      	b.n	800c3b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	f003 0308 	and.w	r3, r3, #8
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d002      	beq.n	800c3b2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c3ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c3b0:	e001      	b.n	800c3b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c3b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3720      	adds	r7, #32
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	20003000 	.word	0x20003000
 800c3c4:	10624dd3 	.word	0x10624dd3
 800c3c8:	00200045 	.word	0x00200045
 800c3cc:	002000c5 	.word	0x002000c5
 800c3d0:	fdffe008 	.word	0xfdffe008

0800c3d4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b085      	sub	sp, #20
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c3dc:	4b1f      	ldr	r3, [pc, #124]	; (800c45c <SDMMC_GetCmdResp2+0x88>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4a1f      	ldr	r2, [pc, #124]	; (800c460 <SDMMC_GetCmdResp2+0x8c>)
 800c3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c3e6:	0a5b      	lsrs	r3, r3, #9
 800c3e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3ec:	fb02 f303 	mul.w	r3, r2, r3
 800c3f0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	1e5a      	subs	r2, r3, #1
 800c3f6:	60fa      	str	r2, [r7, #12]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d102      	bne.n	800c402 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c3fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c400:	e026      	b.n	800c450 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c406:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d0ef      	beq.n	800c3f2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d1ea      	bne.n	800c3f2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c420:	f003 0304 	and.w	r3, r3, #4
 800c424:	2b00      	cmp	r3, #0
 800c426:	d004      	beq.n	800c432 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2204      	movs	r2, #4
 800c42c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c42e:	2304      	movs	r3, #4
 800c430:	e00e      	b.n	800c450 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c436:	f003 0301 	and.w	r3, r3, #1
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d004      	beq.n	800c448 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2201      	movs	r2, #1
 800c442:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c444:	2301      	movs	r3, #1
 800c446:	e003      	b.n	800c450 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	4a06      	ldr	r2, [pc, #24]	; (800c464 <SDMMC_GetCmdResp2+0x90>)
 800c44c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c44e:	2300      	movs	r3, #0
}
 800c450:	4618      	mov	r0, r3
 800c452:	3714      	adds	r7, #20
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr
 800c45c:	20003000 	.word	0x20003000
 800c460:	10624dd3 	.word	0x10624dd3
 800c464:	002000c5 	.word	0x002000c5

0800c468 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c468:	b480      	push	{r7}
 800c46a:	b085      	sub	sp, #20
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c470:	4b1a      	ldr	r3, [pc, #104]	; (800c4dc <SDMMC_GetCmdResp3+0x74>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4a1a      	ldr	r2, [pc, #104]	; (800c4e0 <SDMMC_GetCmdResp3+0x78>)
 800c476:	fba2 2303 	umull	r2, r3, r2, r3
 800c47a:	0a5b      	lsrs	r3, r3, #9
 800c47c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c480:	fb02 f303 	mul.w	r3, r2, r3
 800c484:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	1e5a      	subs	r2, r3, #1
 800c48a:	60fa      	str	r2, [r7, #12]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d102      	bne.n	800c496 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c490:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c494:	e01b      	b.n	800c4ce <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c49a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d0ef      	beq.n	800c486 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d1ea      	bne.n	800c486 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4b4:	f003 0304 	and.w	r3, r3, #4
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d004      	beq.n	800c4c6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2204      	movs	r2, #4
 800c4c0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c4c2:	2304      	movs	r3, #4
 800c4c4:	e003      	b.n	800c4ce <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	4a06      	ldr	r2, [pc, #24]	; (800c4e4 <SDMMC_GetCmdResp3+0x7c>)
 800c4ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c4cc:	2300      	movs	r3, #0
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3714      	adds	r7, #20
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d8:	4770      	bx	lr
 800c4da:	bf00      	nop
 800c4dc:	20003000 	.word	0x20003000
 800c4e0:	10624dd3 	.word	0x10624dd3
 800c4e4:	002000c5 	.word	0x002000c5

0800c4e8 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b088      	sub	sp, #32
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	460b      	mov	r3, r1
 800c4f2:	607a      	str	r2, [r7, #4]
 800c4f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c4f6:	4b35      	ldr	r3, [pc, #212]	; (800c5cc <SDMMC_GetCmdResp6+0xe4>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4a35      	ldr	r2, [pc, #212]	; (800c5d0 <SDMMC_GetCmdResp6+0xe8>)
 800c4fc:	fba2 2303 	umull	r2, r3, r2, r3
 800c500:	0a5b      	lsrs	r3, r3, #9
 800c502:	f241 3288 	movw	r2, #5000	; 0x1388
 800c506:	fb02 f303 	mul.w	r3, r2, r3
 800c50a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	1e5a      	subs	r2, r3, #1
 800c510:	61fa      	str	r2, [r7, #28]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d102      	bne.n	800c51c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c516:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c51a:	e052      	b.n	800c5c2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c520:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d0ef      	beq.n	800c50c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c532:	2b00      	cmp	r3, #0
 800c534:	d1ea      	bne.n	800c50c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c53a:	f003 0304 	and.w	r3, r3, #4
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d004      	beq.n	800c54c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2204      	movs	r2, #4
 800c546:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c548:	2304      	movs	r3, #4
 800c54a:	e03a      	b.n	800c5c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c550:	f003 0301 	and.w	r3, r3, #1
 800c554:	2b00      	cmp	r3, #0
 800c556:	d004      	beq.n	800c562 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2201      	movs	r2, #1
 800c55c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c55e:	2301      	movs	r3, #1
 800c560:	e02f      	b.n	800c5c2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c562:	68f8      	ldr	r0, [r7, #12]
 800c564:	f7ff fb60 	bl	800bc28 <SDMMC_GetCommandResponse>
 800c568:	4603      	mov	r3, r0
 800c56a:	461a      	mov	r2, r3
 800c56c:	7afb      	ldrb	r3, [r7, #11]
 800c56e:	4293      	cmp	r3, r2
 800c570:	d001      	beq.n	800c576 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c572:	2301      	movs	r3, #1
 800c574:	e025      	b.n	800c5c2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	4a16      	ldr	r2, [pc, #88]	; (800c5d4 <SDMMC_GetCmdResp6+0xec>)
 800c57a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c57c:	2100      	movs	r1, #0
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	f7ff fb5f 	bl	800bc42 <SDMMC_GetResponse>
 800c584:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d106      	bne.n	800c59e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	0c1b      	lsrs	r3, r3, #16
 800c594:	b29a      	uxth	r2, r3
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c59a:	2300      	movs	r3, #0
 800c59c:	e011      	b.n	800c5c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d002      	beq.n	800c5ae <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c5a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c5ac:	e009      	b.n	800c5c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d002      	beq.n	800c5be <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c5b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c5bc:	e001      	b.n	800c5c2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c5be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3720      	adds	r7, #32
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	20003000 	.word	0x20003000
 800c5d0:	10624dd3 	.word	0x10624dd3
 800c5d4:	002000c5 	.word	0x002000c5

0800c5d8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b085      	sub	sp, #20
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c5e0:	4b22      	ldr	r3, [pc, #136]	; (800c66c <SDMMC_GetCmdResp7+0x94>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4a22      	ldr	r2, [pc, #136]	; (800c670 <SDMMC_GetCmdResp7+0x98>)
 800c5e6:	fba2 2303 	umull	r2, r3, r2, r3
 800c5ea:	0a5b      	lsrs	r3, r3, #9
 800c5ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5f0:	fb02 f303 	mul.w	r3, r2, r3
 800c5f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	1e5a      	subs	r2, r3, #1
 800c5fa:	60fa      	str	r2, [r7, #12]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d102      	bne.n	800c606 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c600:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c604:	e02c      	b.n	800c660 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c60a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c612:	2b00      	cmp	r3, #0
 800c614:	d0ef      	beq.n	800c5f6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d1ea      	bne.n	800c5f6 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c624:	f003 0304 	and.w	r3, r3, #4
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d004      	beq.n	800c636 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2204      	movs	r2, #4
 800c630:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c632:	2304      	movs	r3, #4
 800c634:	e014      	b.n	800c660 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c63a:	f003 0301 	and.w	r3, r3, #1
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d004      	beq.n	800c64c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2201      	movs	r2, #1
 800c646:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c648:	2301      	movs	r3, #1
 800c64a:	e009      	b.n	800c660 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c654:	2b00      	cmp	r3, #0
 800c656:	d002      	beq.n	800c65e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2240      	movs	r2, #64	; 0x40
 800c65c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c65e:	2300      	movs	r3, #0

}
 800c660:	4618      	mov	r0, r3
 800c662:	3714      	adds	r7, #20
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr
 800c66c:	20003000 	.word	0x20003000
 800c670:	10624dd3 	.word	0x10624dd3

0800c674 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c674:	b480      	push	{r7}
 800c676:	b085      	sub	sp, #20
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c67c:	4b11      	ldr	r3, [pc, #68]	; (800c6c4 <SDMMC_GetCmdError+0x50>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4a11      	ldr	r2, [pc, #68]	; (800c6c8 <SDMMC_GetCmdError+0x54>)
 800c682:	fba2 2303 	umull	r2, r3, r2, r3
 800c686:	0a5b      	lsrs	r3, r3, #9
 800c688:	f241 3288 	movw	r2, #5000	; 0x1388
 800c68c:	fb02 f303 	mul.w	r3, r2, r3
 800c690:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	1e5a      	subs	r2, r3, #1
 800c696:	60fa      	str	r2, [r7, #12]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d102      	bne.n	800c6a2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c69c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c6a0:	e009      	b.n	800c6b6 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d0f1      	beq.n	800c692 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	4a06      	ldr	r2, [pc, #24]	; (800c6cc <SDMMC_GetCmdError+0x58>)
 800c6b2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800c6b4:	2300      	movs	r3, #0
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3714      	adds	r7, #20
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr
 800c6c2:	bf00      	nop
 800c6c4:	20003000 	.word	0x20003000
 800c6c8:	10624dd3 	.word	0x10624dd3
 800c6cc:	002000c5 	.word	0x002000c5

0800c6d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c6d0:	b084      	sub	sp, #16
 800c6d2:	b580      	push	{r7, lr}
 800c6d4:	b084      	sub	sp, #16
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	6078      	str	r0, [r7, #4]
 800c6da:	f107 001c 	add.w	r0, r7, #28
 800c6de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	68db      	ldr	r3, [r3, #12]
 800c6e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f001 fa1c 	bl	800db2c <USB_CoreReset>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800c6f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d106      	bne.n	800c70c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c702:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	639a      	str	r2, [r3, #56]	; 0x38
 800c70a:	e005      	b.n	800c718 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c710:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800c718:	7bfb      	ldrb	r3, [r7, #15]
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3710      	adds	r7, #16
 800c71e:	46bd      	mov	sp, r7
 800c720:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c724:	b004      	add	sp, #16
 800c726:	4770      	bx	lr

0800c728 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c728:	b480      	push	{r7}
 800c72a:	b087      	sub	sp, #28
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	60f8      	str	r0, [r7, #12]
 800c730:	60b9      	str	r1, [r7, #8]
 800c732:	4613      	mov	r3, r2
 800c734:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c736:	79fb      	ldrb	r3, [r7, #7]
 800c738:	2b02      	cmp	r3, #2
 800c73a:	d165      	bne.n	800c808 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	4a3e      	ldr	r2, [pc, #248]	; (800c838 <USB_SetTurnaroundTime+0x110>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d906      	bls.n	800c752 <USB_SetTurnaroundTime+0x2a>
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	4a3d      	ldr	r2, [pc, #244]	; (800c83c <USB_SetTurnaroundTime+0x114>)
 800c748:	4293      	cmp	r3, r2
 800c74a:	d202      	bcs.n	800c752 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c74c:	230f      	movs	r3, #15
 800c74e:	617b      	str	r3, [r7, #20]
 800c750:	e05c      	b.n	800c80c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	4a39      	ldr	r2, [pc, #228]	; (800c83c <USB_SetTurnaroundTime+0x114>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d306      	bcc.n	800c768 <USB_SetTurnaroundTime+0x40>
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	4a38      	ldr	r2, [pc, #224]	; (800c840 <USB_SetTurnaroundTime+0x118>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d202      	bcs.n	800c768 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c762:	230e      	movs	r3, #14
 800c764:	617b      	str	r3, [r7, #20]
 800c766:	e051      	b.n	800c80c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	4a35      	ldr	r2, [pc, #212]	; (800c840 <USB_SetTurnaroundTime+0x118>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d306      	bcc.n	800c77e <USB_SetTurnaroundTime+0x56>
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	4a34      	ldr	r2, [pc, #208]	; (800c844 <USB_SetTurnaroundTime+0x11c>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d202      	bcs.n	800c77e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c778:	230d      	movs	r3, #13
 800c77a:	617b      	str	r3, [r7, #20]
 800c77c:	e046      	b.n	800c80c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	4a30      	ldr	r2, [pc, #192]	; (800c844 <USB_SetTurnaroundTime+0x11c>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d306      	bcc.n	800c794 <USB_SetTurnaroundTime+0x6c>
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	4a2f      	ldr	r2, [pc, #188]	; (800c848 <USB_SetTurnaroundTime+0x120>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d802      	bhi.n	800c794 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c78e:	230c      	movs	r3, #12
 800c790:	617b      	str	r3, [r7, #20]
 800c792:	e03b      	b.n	800c80c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	4a2c      	ldr	r2, [pc, #176]	; (800c848 <USB_SetTurnaroundTime+0x120>)
 800c798:	4293      	cmp	r3, r2
 800c79a:	d906      	bls.n	800c7aa <USB_SetTurnaroundTime+0x82>
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	4a2b      	ldr	r2, [pc, #172]	; (800c84c <USB_SetTurnaroundTime+0x124>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d802      	bhi.n	800c7aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c7a4:	230b      	movs	r3, #11
 800c7a6:	617b      	str	r3, [r7, #20]
 800c7a8:	e030      	b.n	800c80c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	4a27      	ldr	r2, [pc, #156]	; (800c84c <USB_SetTurnaroundTime+0x124>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d906      	bls.n	800c7c0 <USB_SetTurnaroundTime+0x98>
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	4a26      	ldr	r2, [pc, #152]	; (800c850 <USB_SetTurnaroundTime+0x128>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d802      	bhi.n	800c7c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c7ba:	230a      	movs	r3, #10
 800c7bc:	617b      	str	r3, [r7, #20]
 800c7be:	e025      	b.n	800c80c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	4a23      	ldr	r2, [pc, #140]	; (800c850 <USB_SetTurnaroundTime+0x128>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d906      	bls.n	800c7d6 <USB_SetTurnaroundTime+0xae>
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	4a22      	ldr	r2, [pc, #136]	; (800c854 <USB_SetTurnaroundTime+0x12c>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d202      	bcs.n	800c7d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c7d0:	2309      	movs	r3, #9
 800c7d2:	617b      	str	r3, [r7, #20]
 800c7d4:	e01a      	b.n	800c80c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	4a1e      	ldr	r2, [pc, #120]	; (800c854 <USB_SetTurnaroundTime+0x12c>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d306      	bcc.n	800c7ec <USB_SetTurnaroundTime+0xc4>
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	4a1d      	ldr	r2, [pc, #116]	; (800c858 <USB_SetTurnaroundTime+0x130>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d802      	bhi.n	800c7ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c7e6:	2308      	movs	r3, #8
 800c7e8:	617b      	str	r3, [r7, #20]
 800c7ea:	e00f      	b.n	800c80c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	4a1a      	ldr	r2, [pc, #104]	; (800c858 <USB_SetTurnaroundTime+0x130>)
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d906      	bls.n	800c802 <USB_SetTurnaroundTime+0xda>
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	4a19      	ldr	r2, [pc, #100]	; (800c85c <USB_SetTurnaroundTime+0x134>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d202      	bcs.n	800c802 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c7fc:	2307      	movs	r3, #7
 800c7fe:	617b      	str	r3, [r7, #20]
 800c800:	e004      	b.n	800c80c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c802:	2306      	movs	r3, #6
 800c804:	617b      	str	r3, [r7, #20]
 800c806:	e001      	b.n	800c80c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c808:	2309      	movs	r3, #9
 800c80a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	68da      	ldr	r2, [r3, #12]
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	029b      	lsls	r3, r3, #10
 800c820:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c824:	431a      	orrs	r2, r3
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c82a:	2300      	movs	r3, #0
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	371c      	adds	r7, #28
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr
 800c838:	00d8acbf 	.word	0x00d8acbf
 800c83c:	00e4e1c0 	.word	0x00e4e1c0
 800c840:	00f42400 	.word	0x00f42400
 800c844:	01067380 	.word	0x01067380
 800c848:	011a499f 	.word	0x011a499f
 800c84c:	01312cff 	.word	0x01312cff
 800c850:	014ca43f 	.word	0x014ca43f
 800c854:	016e3600 	.word	0x016e3600
 800c858:	01a6ab1f 	.word	0x01a6ab1f
 800c85c:	01e84800 	.word	0x01e84800

0800c860 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c860:	b480      	push	{r7}
 800c862:	b083      	sub	sp, #12
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	689b      	ldr	r3, [r3, #8]
 800c86c:	f043 0201 	orr.w	r2, r3, #1
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c874:	2300      	movs	r3, #0
}
 800c876:	4618      	mov	r0, r3
 800c878:	370c      	adds	r7, #12
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr

0800c882 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c882:	b480      	push	{r7}
 800c884:	b083      	sub	sp, #12
 800c886:	af00      	add	r7, sp, #0
 800c888:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	689b      	ldr	r3, [r3, #8]
 800c88e:	f023 0201 	bic.w	r2, r3, #1
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c896:	2300      	movs	r3, #0
}
 800c898:	4618      	mov	r0, r3
 800c89a:	370c      	adds	r7, #12
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr

0800c8a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b084      	sub	sp, #16
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c8c0:	78fb      	ldrb	r3, [r7, #3]
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d115      	bne.n	800c8f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	68db      	ldr	r3, [r3, #12]
 800c8ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c8d2:	2001      	movs	r0, #1
 800c8d4:	f7f5 ff6e 	bl	80027b4 <HAL_Delay>
      ms++;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f001 f8ab 	bl	800da3a <USB_GetMode>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d01e      	beq.n	800c928 <USB_SetCurrentMode+0x84>
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	2b31      	cmp	r3, #49	; 0x31
 800c8ee:	d9f0      	bls.n	800c8d2 <USB_SetCurrentMode+0x2e>
 800c8f0:	e01a      	b.n	800c928 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c8f2:	78fb      	ldrb	r3, [r7, #3]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d115      	bne.n	800c924 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	68db      	ldr	r3, [r3, #12]
 800c8fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c904:	2001      	movs	r0, #1
 800c906:	f7f5 ff55 	bl	80027b4 <HAL_Delay>
      ms++;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	3301      	adds	r3, #1
 800c90e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f001 f892 	bl	800da3a <USB_GetMode>
 800c916:	4603      	mov	r3, r0
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d005      	beq.n	800c928 <USB_SetCurrentMode+0x84>
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2b31      	cmp	r3, #49	; 0x31
 800c920:	d9f0      	bls.n	800c904 <USB_SetCurrentMode+0x60>
 800c922:	e001      	b.n	800c928 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c924:	2301      	movs	r3, #1
 800c926:	e005      	b.n	800c934 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2b32      	cmp	r3, #50	; 0x32
 800c92c:	d101      	bne.n	800c932 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c92e:	2301      	movs	r3, #1
 800c930:	e000      	b.n	800c934 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c932:	2300      	movs	r3, #0
}
 800c934:	4618      	mov	r0, r3
 800c936:	3710      	adds	r7, #16
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c93c:	b084      	sub	sp, #16
 800c93e:	b580      	push	{r7, lr}
 800c940:	b086      	sub	sp, #24
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
 800c946:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c94a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c94e:	2300      	movs	r3, #0
 800c950:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c956:	2300      	movs	r3, #0
 800c958:	613b      	str	r3, [r7, #16]
 800c95a:	e009      	b.n	800c970 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	3340      	adds	r3, #64	; 0x40
 800c962:	009b      	lsls	r3, r3, #2
 800c964:	4413      	add	r3, r2
 800c966:	2200      	movs	r2, #0
 800c968:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	3301      	adds	r3, #1
 800c96e:	613b      	str	r3, [r7, #16]
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	2b0e      	cmp	r3, #14
 800c974:	d9f2      	bls.n	800c95c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d11c      	bne.n	800c9b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	68fa      	ldr	r2, [r7, #12]
 800c986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c98a:	f043 0302 	orr.w	r3, r3, #2
 800c98e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c994:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	601a      	str	r2, [r3, #0]
 800c9b4:	e005      	b.n	800c9c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c9ce:	2103      	movs	r1, #3
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f000 f959 	bl	800cc88 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c9d6:	2110      	movs	r1, #16
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 f8f1 	bl	800cbc0 <USB_FlushTxFifo>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d001      	beq.n	800c9e8 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f000 f91d 	bl	800cc28 <USB_FlushRxFifo>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d001      	beq.n	800c9f8 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9fe:	461a      	mov	r2, r3
 800ca00:	2300      	movs	r3, #0
 800ca02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca16:	461a      	mov	r2, r3
 800ca18:	2300      	movs	r3, #0
 800ca1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	613b      	str	r3, [r7, #16]
 800ca20:	e043      	b.n	800caaa <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	015a      	lsls	r2, r3, #5
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	4413      	add	r3, r2
 800ca2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca38:	d118      	bne.n	800ca6c <USB_DevInit+0x130>
    {
      if (i == 0U)
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d10a      	bne.n	800ca56 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	015a      	lsls	r2, r3, #5
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	4413      	add	r3, r2
 800ca48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ca52:	6013      	str	r3, [r2, #0]
 800ca54:	e013      	b.n	800ca7e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	015a      	lsls	r2, r3, #5
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca62:	461a      	mov	r2, r3
 800ca64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ca68:	6013      	str	r3, [r2, #0]
 800ca6a:	e008      	b.n	800ca7e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	015a      	lsls	r2, r3, #5
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	4413      	add	r3, r2
 800ca74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca78:	461a      	mov	r2, r3
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	015a      	lsls	r2, r3, #5
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	4413      	add	r3, r2
 800ca86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	015a      	lsls	r2, r3, #5
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	4413      	add	r3, r2
 800ca98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800caa2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	3301      	adds	r3, #1
 800caa8:	613b      	str	r3, [r7, #16]
 800caaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caac:	693a      	ldr	r2, [r7, #16]
 800caae:	429a      	cmp	r2, r3
 800cab0:	d3b7      	bcc.n	800ca22 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cab2:	2300      	movs	r3, #0
 800cab4:	613b      	str	r3, [r7, #16]
 800cab6:	e043      	b.n	800cb40 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	015a      	lsls	r2, r3, #5
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	4413      	add	r3, r2
 800cac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800caca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cace:	d118      	bne.n	800cb02 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d10a      	bne.n	800caec <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	015a      	lsls	r2, r3, #5
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	4413      	add	r3, r2
 800cade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cae2:	461a      	mov	r2, r3
 800cae4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cae8:	6013      	str	r3, [r2, #0]
 800caea:	e013      	b.n	800cb14 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	015a      	lsls	r2, r3, #5
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	4413      	add	r3, r2
 800caf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caf8:	461a      	mov	r2, r3
 800cafa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cafe:	6013      	str	r3, [r2, #0]
 800cb00:	e008      	b.n	800cb14 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	015a      	lsls	r2, r3, #5
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	4413      	add	r3, r2
 800cb0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb0e:	461a      	mov	r2, r3
 800cb10:	2300      	movs	r3, #0
 800cb12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	015a      	lsls	r2, r3, #5
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb20:	461a      	mov	r2, r3
 800cb22:	2300      	movs	r3, #0
 800cb24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	015a      	lsls	r2, r3, #5
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	4413      	add	r3, r2
 800cb2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb32:	461a      	mov	r2, r3
 800cb34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cb38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	613b      	str	r3, [r7, #16]
 800cb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb42:	693a      	ldr	r2, [r7, #16]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d3b7      	bcc.n	800cab8 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb4e:	691b      	ldr	r3, [r3, #16]
 800cb50:	68fa      	ldr	r2, [r7, #12]
 800cb52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cb68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	699b      	ldr	r3, [r3, #24]
 800cb6e:	f043 0210 	orr.w	r2, r3, #16
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	699a      	ldr	r2, [r3, #24]
 800cb7a:	4b10      	ldr	r3, [pc, #64]	; (800cbbc <USB_DevInit+0x280>)
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cb82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d005      	beq.n	800cb94 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	699b      	ldr	r3, [r3, #24]
 800cb8c:	f043 0208 	orr.w	r2, r3, #8
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cb94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb96:	2b01      	cmp	r3, #1
 800cb98:	d107      	bne.n	800cbaa <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	699b      	ldr	r3, [r3, #24]
 800cb9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cba2:	f043 0304 	orr.w	r3, r3, #4
 800cba6:	687a      	ldr	r2, [r7, #4]
 800cba8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cbaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3718      	adds	r7, #24
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cbb6:	b004      	add	sp, #16
 800cbb8:	4770      	bx	lr
 800cbba:	bf00      	nop
 800cbbc:	803c3800 	.word	0x803c3800

0800cbc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b085      	sub	sp, #20
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	4a13      	ldr	r2, [pc, #76]	; (800cc24 <USB_FlushTxFifo+0x64>)
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d901      	bls.n	800cbe0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cbdc:	2303      	movs	r3, #3
 800cbde:	e01b      	b.n	800cc18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	691b      	ldr	r3, [r3, #16]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	daf2      	bge.n	800cbce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	019b      	lsls	r3, r3, #6
 800cbf0:	f043 0220 	orr.w	r2, r3, #32
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	4a08      	ldr	r2, [pc, #32]	; (800cc24 <USB_FlushTxFifo+0x64>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d901      	bls.n	800cc0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cc06:	2303      	movs	r3, #3
 800cc08:	e006      	b.n	800cc18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	691b      	ldr	r3, [r3, #16]
 800cc0e:	f003 0320 	and.w	r3, r3, #32
 800cc12:	2b20      	cmp	r3, #32
 800cc14:	d0f0      	beq.n	800cbf8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cc16:	2300      	movs	r3, #0
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3714      	adds	r7, #20
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr
 800cc24:	00030d40 	.word	0x00030d40

0800cc28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b085      	sub	sp, #20
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cc30:	2300      	movs	r3, #0
 800cc32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	3301      	adds	r3, #1
 800cc38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	4a11      	ldr	r2, [pc, #68]	; (800cc84 <USB_FlushRxFifo+0x5c>)
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d901      	bls.n	800cc46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cc42:	2303      	movs	r3, #3
 800cc44:	e018      	b.n	800cc78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	691b      	ldr	r3, [r3, #16]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	daf2      	bge.n	800cc34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2210      	movs	r2, #16
 800cc56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	4a08      	ldr	r2, [pc, #32]	; (800cc84 <USB_FlushRxFifo+0x5c>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d901      	bls.n	800cc6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cc66:	2303      	movs	r3, #3
 800cc68:	e006      	b.n	800cc78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	691b      	ldr	r3, [r3, #16]
 800cc6e:	f003 0310 	and.w	r3, r3, #16
 800cc72:	2b10      	cmp	r3, #16
 800cc74:	d0f0      	beq.n	800cc58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cc76:	2300      	movs	r3, #0
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3714      	adds	r7, #20
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc82:	4770      	bx	lr
 800cc84:	00030d40 	.word	0x00030d40

0800cc88 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b085      	sub	sp, #20
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	460b      	mov	r3, r1
 800cc92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc9e:	681a      	ldr	r2, [r3, #0]
 800cca0:	78fb      	ldrb	r3, [r7, #3]
 800cca2:	68f9      	ldr	r1, [r7, #12]
 800cca4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cca8:	4313      	orrs	r3, r2
 800ccaa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ccac:	2300      	movs	r3, #0
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3714      	adds	r7, #20
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb8:	4770      	bx	lr

0800ccba <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ccba:	b480      	push	{r7}
 800ccbc:	b087      	sub	sp, #28
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cccc:	689b      	ldr	r3, [r3, #8]
 800ccce:	f003 0306 	and.w	r3, r3, #6
 800ccd2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	2b02      	cmp	r3, #2
 800ccd8:	d002      	beq.n	800cce0 <USB_GetDevSpeed+0x26>
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2b06      	cmp	r3, #6
 800ccde:	d102      	bne.n	800cce6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cce0:	2302      	movs	r3, #2
 800cce2:	75fb      	strb	r3, [r7, #23]
 800cce4:	e001      	b.n	800ccea <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800cce6:	230f      	movs	r3, #15
 800cce8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ccea:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	371c      	adds	r7, #28
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b085      	sub	sp, #20
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	785b      	ldrb	r3, [r3, #1]
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	d13a      	bne.n	800cd8a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd1a:	69da      	ldr	r2, [r3, #28]
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	f003 030f 	and.w	r3, r3, #15
 800cd24:	2101      	movs	r1, #1
 800cd26:	fa01 f303 	lsl.w	r3, r1, r3
 800cd2a:	b29b      	uxth	r3, r3
 800cd2c:	68f9      	ldr	r1, [r7, #12]
 800cd2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd32:	4313      	orrs	r3, r2
 800cd34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	015a      	lsls	r2, r3, #5
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	4413      	add	r3, r2
 800cd3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d155      	bne.n	800cdf8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	015a      	lsls	r2, r3, #5
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	4413      	add	r3, r2
 800cd54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd58:	681a      	ldr	r2, [r3, #0]
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	689b      	ldr	r3, [r3, #8]
 800cd5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	791b      	ldrb	r3, [r3, #4]
 800cd66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cd68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	059b      	lsls	r3, r3, #22
 800cd6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cd70:	4313      	orrs	r3, r2
 800cd72:	68ba      	ldr	r2, [r7, #8]
 800cd74:	0151      	lsls	r1, r2, #5
 800cd76:	68fa      	ldr	r2, [r7, #12]
 800cd78:	440a      	add	r2, r1
 800cd7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd86:	6013      	str	r3, [r2, #0]
 800cd88:	e036      	b.n	800cdf8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd90:	69da      	ldr	r2, [r3, #28]
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	f003 030f 	and.w	r3, r3, #15
 800cd9a:	2101      	movs	r1, #1
 800cd9c:	fa01 f303 	lsl.w	r3, r1, r3
 800cda0:	041b      	lsls	r3, r3, #16
 800cda2:	68f9      	ldr	r1, [r7, #12]
 800cda4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cda8:	4313      	orrs	r3, r2
 800cdaa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	015a      	lsls	r2, r3, #5
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d11a      	bne.n	800cdf8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	015a      	lsls	r2, r3, #5
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	4413      	add	r3, r2
 800cdca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	689b      	ldr	r3, [r3, #8]
 800cdd4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	791b      	ldrb	r3, [r3, #4]
 800cddc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cdde:	430b      	orrs	r3, r1
 800cde0:	4313      	orrs	r3, r2
 800cde2:	68ba      	ldr	r2, [r7, #8]
 800cde4:	0151      	lsls	r1, r2, #5
 800cde6:	68fa      	ldr	r2, [r7, #12]
 800cde8:	440a      	add	r2, r1
 800cdea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cdf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdf6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3714      	adds	r7, #20
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr
	...

0800ce08 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b085      	sub	sp, #20
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	785b      	ldrb	r3, [r3, #1]
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d161      	bne.n	800cee8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	015a      	lsls	r2, r3, #5
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	4413      	add	r3, r2
 800ce2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce3a:	d11f      	bne.n	800ce7c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	015a      	lsls	r2, r3, #5
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	4413      	add	r3, r2
 800ce44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	68ba      	ldr	r2, [r7, #8]
 800ce4c:	0151      	lsls	r1, r2, #5
 800ce4e:	68fa      	ldr	r2, [r7, #12]
 800ce50:	440a      	add	r2, r1
 800ce52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ce5a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	015a      	lsls	r2, r3, #5
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	4413      	add	r3, r2
 800ce64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	68ba      	ldr	r2, [r7, #8]
 800ce6c:	0151      	lsls	r1, r2, #5
 800ce6e:	68fa      	ldr	r2, [r7, #12]
 800ce70:	440a      	add	r2, r1
 800ce72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ce7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	f003 030f 	and.w	r3, r3, #15
 800ce8c:	2101      	movs	r1, #1
 800ce8e:	fa01 f303 	lsl.w	r3, r1, r3
 800ce92:	b29b      	uxth	r3, r3
 800ce94:	43db      	mvns	r3, r3
 800ce96:	68f9      	ldr	r1, [r7, #12]
 800ce98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce9c:	4013      	ands	r3, r2
 800ce9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cea6:	69da      	ldr	r2, [r3, #28]
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	f003 030f 	and.w	r3, r3, #15
 800ceb0:	2101      	movs	r1, #1
 800ceb2:	fa01 f303 	lsl.w	r3, r1, r3
 800ceb6:	b29b      	uxth	r3, r3
 800ceb8:	43db      	mvns	r3, r3
 800ceba:	68f9      	ldr	r1, [r7, #12]
 800cebc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cec0:	4013      	ands	r3, r2
 800cec2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	015a      	lsls	r2, r3, #5
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	4413      	add	r3, r2
 800cecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ced0:	681a      	ldr	r2, [r3, #0]
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	0159      	lsls	r1, r3, #5
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	440b      	add	r3, r1
 800ceda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cede:	4619      	mov	r1, r3
 800cee0:	4b35      	ldr	r3, [pc, #212]	; (800cfb8 <USB_DeactivateEndpoint+0x1b0>)
 800cee2:	4013      	ands	r3, r2
 800cee4:	600b      	str	r3, [r1, #0]
 800cee6:	e060      	b.n	800cfaa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	015a      	lsls	r2, r3, #5
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	4413      	add	r3, r2
 800cef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cefa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cefe:	d11f      	bne.n	800cf40 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	015a      	lsls	r2, r3, #5
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	4413      	add	r3, r2
 800cf08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	68ba      	ldr	r2, [r7, #8]
 800cf10:	0151      	lsls	r1, r2, #5
 800cf12:	68fa      	ldr	r2, [r7, #12]
 800cf14:	440a      	add	r2, r1
 800cf16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cf1e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	015a      	lsls	r2, r3, #5
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	4413      	add	r3, r2
 800cf28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	68ba      	ldr	r2, [r7, #8]
 800cf30:	0151      	lsls	r1, r2, #5
 800cf32:	68fa      	ldr	r2, [r7, #12]
 800cf34:	440a      	add	r2, r1
 800cf36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cf3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	f003 030f 	and.w	r3, r3, #15
 800cf50:	2101      	movs	r1, #1
 800cf52:	fa01 f303 	lsl.w	r3, r1, r3
 800cf56:	041b      	lsls	r3, r3, #16
 800cf58:	43db      	mvns	r3, r3
 800cf5a:	68f9      	ldr	r1, [r7, #12]
 800cf5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf60:	4013      	ands	r3, r2
 800cf62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf6a:	69da      	ldr	r2, [r3, #28]
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	f003 030f 	and.w	r3, r3, #15
 800cf74:	2101      	movs	r1, #1
 800cf76:	fa01 f303 	lsl.w	r3, r1, r3
 800cf7a:	041b      	lsls	r3, r3, #16
 800cf7c:	43db      	mvns	r3, r3
 800cf7e:	68f9      	ldr	r1, [r7, #12]
 800cf80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf84:	4013      	ands	r3, r2
 800cf86:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	015a      	lsls	r2, r3, #5
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	4413      	add	r3, r2
 800cf90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf94:	681a      	ldr	r2, [r3, #0]
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	0159      	lsls	r1, r3, #5
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	440b      	add	r3, r1
 800cf9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	4b05      	ldr	r3, [pc, #20]	; (800cfbc <USB_DeactivateEndpoint+0x1b4>)
 800cfa6:	4013      	ands	r3, r2
 800cfa8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cfaa:	2300      	movs	r3, #0
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3714      	adds	r7, #20
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr
 800cfb8:	ec337800 	.word	0xec337800
 800cfbc:	eff37800 	.word	0xeff37800

0800cfc0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b086      	sub	sp, #24
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	781b      	ldrb	r3, [r3, #0]
 800cfd2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	785b      	ldrb	r3, [r3, #1]
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	f040 8128 	bne.w	800d22e <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	691b      	ldr	r3, [r3, #16]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d132      	bne.n	800d04c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	015a      	lsls	r2, r3, #5
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	4413      	add	r3, r2
 800cfee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cff2:	691b      	ldr	r3, [r3, #16]
 800cff4:	693a      	ldr	r2, [r7, #16]
 800cff6:	0151      	lsls	r1, r2, #5
 800cff8:	697a      	ldr	r2, [r7, #20]
 800cffa:	440a      	add	r2, r1
 800cffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d000:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d004:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d008:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	015a      	lsls	r2, r3, #5
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	4413      	add	r3, r2
 800d012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d016:	691b      	ldr	r3, [r3, #16]
 800d018:	693a      	ldr	r2, [r7, #16]
 800d01a:	0151      	lsls	r1, r2, #5
 800d01c:	697a      	ldr	r2, [r7, #20]
 800d01e:	440a      	add	r2, r1
 800d020:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d024:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d028:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	015a      	lsls	r2, r3, #5
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	4413      	add	r3, r2
 800d032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d036:	691b      	ldr	r3, [r3, #16]
 800d038:	693a      	ldr	r2, [r7, #16]
 800d03a:	0151      	lsls	r1, r2, #5
 800d03c:	697a      	ldr	r2, [r7, #20]
 800d03e:	440a      	add	r2, r1
 800d040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d044:	0cdb      	lsrs	r3, r3, #19
 800d046:	04db      	lsls	r3, r3, #19
 800d048:	6113      	str	r3, [r2, #16]
 800d04a:	e092      	b.n	800d172 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	015a      	lsls	r2, r3, #5
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	4413      	add	r3, r2
 800d054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d058:	691b      	ldr	r3, [r3, #16]
 800d05a:	693a      	ldr	r2, [r7, #16]
 800d05c:	0151      	lsls	r1, r2, #5
 800d05e:	697a      	ldr	r2, [r7, #20]
 800d060:	440a      	add	r2, r1
 800d062:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d066:	0cdb      	lsrs	r3, r3, #19
 800d068:	04db      	lsls	r3, r3, #19
 800d06a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	015a      	lsls	r2, r3, #5
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	4413      	add	r3, r2
 800d074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d078:	691b      	ldr	r3, [r3, #16]
 800d07a:	693a      	ldr	r2, [r7, #16]
 800d07c:	0151      	lsls	r1, r2, #5
 800d07e:	697a      	ldr	r2, [r7, #20]
 800d080:	440a      	add	r2, r1
 800d082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d086:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d08a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d08e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d11a      	bne.n	800d0cc <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	691a      	ldr	r2, [r3, #16]
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	689b      	ldr	r3, [r3, #8]
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d903      	bls.n	800d0aa <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	689a      	ldr	r2, [r3, #8]
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	015a      	lsls	r2, r3, #5
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	4413      	add	r3, r2
 800d0b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0b6:	691b      	ldr	r3, [r3, #16]
 800d0b8:	693a      	ldr	r2, [r7, #16]
 800d0ba:	0151      	lsls	r1, r2, #5
 800d0bc:	697a      	ldr	r2, [r7, #20]
 800d0be:	440a      	add	r2, r1
 800d0c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d0c8:	6113      	str	r3, [r2, #16]
 800d0ca:	e01b      	b.n	800d104 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	015a      	lsls	r2, r3, #5
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	4413      	add	r3, r2
 800d0d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0d8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	6919      	ldr	r1, [r3, #16]
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	689b      	ldr	r3, [r3, #8]
 800d0e2:	440b      	add	r3, r1
 800d0e4:	1e59      	subs	r1, r3, #1
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	689b      	ldr	r3, [r3, #8]
 800d0ea:	fbb1 f3f3 	udiv	r3, r1, r3
 800d0ee:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d0f0:	4b8d      	ldr	r3, [pc, #564]	; (800d328 <USB_EPStartXfer+0x368>)
 800d0f2:	400b      	ands	r3, r1
 800d0f4:	6939      	ldr	r1, [r7, #16]
 800d0f6:	0148      	lsls	r0, r1, #5
 800d0f8:	6979      	ldr	r1, [r7, #20]
 800d0fa:	4401      	add	r1, r0
 800d0fc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d100:	4313      	orrs	r3, r2
 800d102:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	015a      	lsls	r2, r3, #5
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	4413      	add	r3, r2
 800d10c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d110:	691a      	ldr	r2, [r3, #16]
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	691b      	ldr	r3, [r3, #16]
 800d116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d11a:	6939      	ldr	r1, [r7, #16]
 800d11c:	0148      	lsls	r0, r1, #5
 800d11e:	6979      	ldr	r1, [r7, #20]
 800d120:	4401      	add	r1, r0
 800d122:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d126:	4313      	orrs	r3, r2
 800d128:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	791b      	ldrb	r3, [r3, #4]
 800d12e:	2b01      	cmp	r3, #1
 800d130:	d11f      	bne.n	800d172 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	015a      	lsls	r2, r3, #5
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	4413      	add	r3, r2
 800d13a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d13e:	691b      	ldr	r3, [r3, #16]
 800d140:	693a      	ldr	r2, [r7, #16]
 800d142:	0151      	lsls	r1, r2, #5
 800d144:	697a      	ldr	r2, [r7, #20]
 800d146:	440a      	add	r2, r1
 800d148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d14c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d150:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	015a      	lsls	r2, r3, #5
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	4413      	add	r3, r2
 800d15a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d15e:	691b      	ldr	r3, [r3, #16]
 800d160:	693a      	ldr	r2, [r7, #16]
 800d162:	0151      	lsls	r1, r2, #5
 800d164:	697a      	ldr	r2, [r7, #20]
 800d166:	440a      	add	r2, r1
 800d168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d16c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d170:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	015a      	lsls	r2, r3, #5
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	4413      	add	r3, r2
 800d17a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	693a      	ldr	r2, [r7, #16]
 800d182:	0151      	lsls	r1, r2, #5
 800d184:	697a      	ldr	r2, [r7, #20]
 800d186:	440a      	add	r2, r1
 800d188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d18c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d190:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	791b      	ldrb	r3, [r3, #4]
 800d196:	2b01      	cmp	r3, #1
 800d198:	d015      	beq.n	800d1c6 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	691b      	ldr	r3, [r3, #16]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	f000 8139 	beq.w	800d416 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	f003 030f 	and.w	r3, r3, #15
 800d1b4:	2101      	movs	r1, #1
 800d1b6:	fa01 f303 	lsl.w	r3, r1, r3
 800d1ba:	6979      	ldr	r1, [r7, #20]
 800d1bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	634b      	str	r3, [r1, #52]	; 0x34
 800d1c4:	e127      	b.n	800d416 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1cc:	689b      	ldr	r3, [r3, #8]
 800d1ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d110      	bne.n	800d1f8 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	015a      	lsls	r2, r3, #5
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	4413      	add	r3, r2
 800d1de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	693a      	ldr	r2, [r7, #16]
 800d1e6:	0151      	lsls	r1, r2, #5
 800d1e8:	697a      	ldr	r2, [r7, #20]
 800d1ea:	440a      	add	r2, r1
 800d1ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d1f4:	6013      	str	r3, [r2, #0]
 800d1f6:	e00f      	b.n	800d218 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	015a      	lsls	r2, r3, #5
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	4413      	add	r3, r2
 800d200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	693a      	ldr	r2, [r7, #16]
 800d208:	0151      	lsls	r1, r2, #5
 800d20a:	697a      	ldr	r2, [r7, #20]
 800d20c:	440a      	add	r2, r1
 800d20e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d216:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	68d9      	ldr	r1, [r3, #12]
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	781a      	ldrb	r2, [r3, #0]
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	691b      	ldr	r3, [r3, #16]
 800d224:	b29b      	uxth	r3, r3
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f000 f9a6 	bl	800d578 <USB_WritePacket>
 800d22c:	e0f3      	b.n	800d416 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	015a      	lsls	r2, r3, #5
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	4413      	add	r3, r2
 800d236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d23a:	691b      	ldr	r3, [r3, #16]
 800d23c:	693a      	ldr	r2, [r7, #16]
 800d23e:	0151      	lsls	r1, r2, #5
 800d240:	697a      	ldr	r2, [r7, #20]
 800d242:	440a      	add	r2, r1
 800d244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d248:	0cdb      	lsrs	r3, r3, #19
 800d24a:	04db      	lsls	r3, r3, #19
 800d24c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	015a      	lsls	r2, r3, #5
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	4413      	add	r3, r2
 800d256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d25a:	691b      	ldr	r3, [r3, #16]
 800d25c:	693a      	ldr	r2, [r7, #16]
 800d25e:	0151      	lsls	r1, r2, #5
 800d260:	697a      	ldr	r2, [r7, #20]
 800d262:	440a      	add	r2, r1
 800d264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d268:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d26c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d270:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d12f      	bne.n	800d2d8 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	691b      	ldr	r3, [r3, #16]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d003      	beq.n	800d288 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	689a      	ldr	r2, [r3, #8]
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	689a      	ldr	r2, [r3, #8]
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	015a      	lsls	r2, r3, #5
 800d294:	697b      	ldr	r3, [r7, #20]
 800d296:	4413      	add	r3, r2
 800d298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d29c:	691a      	ldr	r2, [r3, #16]
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	6a1b      	ldr	r3, [r3, #32]
 800d2a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d2a6:	6939      	ldr	r1, [r7, #16]
 800d2a8:	0148      	lsls	r0, r1, #5
 800d2aa:	6979      	ldr	r1, [r7, #20]
 800d2ac:	4401      	add	r1, r0
 800d2ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	015a      	lsls	r2, r3, #5
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	4413      	add	r3, r2
 800d2be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2c2:	691b      	ldr	r3, [r3, #16]
 800d2c4:	693a      	ldr	r2, [r7, #16]
 800d2c6:	0151      	lsls	r1, r2, #5
 800d2c8:	697a      	ldr	r2, [r7, #20]
 800d2ca:	440a      	add	r2, r1
 800d2cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d2d4:	6113      	str	r3, [r2, #16]
 800d2d6:	e061      	b.n	800d39c <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	691b      	ldr	r3, [r3, #16]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d125      	bne.n	800d32c <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	015a      	lsls	r2, r3, #5
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	4413      	add	r3, r2
 800d2e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2ec:	691a      	ldr	r2, [r3, #16]
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	689b      	ldr	r3, [r3, #8]
 800d2f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d2f6:	6939      	ldr	r1, [r7, #16]
 800d2f8:	0148      	lsls	r0, r1, #5
 800d2fa:	6979      	ldr	r1, [r7, #20]
 800d2fc:	4401      	add	r1, r0
 800d2fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d302:	4313      	orrs	r3, r2
 800d304:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	015a      	lsls	r2, r3, #5
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	4413      	add	r3, r2
 800d30e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d312:	691b      	ldr	r3, [r3, #16]
 800d314:	693a      	ldr	r2, [r7, #16]
 800d316:	0151      	lsls	r1, r2, #5
 800d318:	697a      	ldr	r2, [r7, #20]
 800d31a:	440a      	add	r2, r1
 800d31c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d320:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d324:	6113      	str	r3, [r2, #16]
 800d326:	e039      	b.n	800d39c <USB_EPStartXfer+0x3dc>
 800d328:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	691a      	ldr	r2, [r3, #16]
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	689b      	ldr	r3, [r3, #8]
 800d334:	4413      	add	r3, r2
 800d336:	1e5a      	subs	r2, r3, #1
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	689b      	ldr	r3, [r3, #8]
 800d33c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d340:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	689b      	ldr	r3, [r3, #8]
 800d346:	89fa      	ldrh	r2, [r7, #14]
 800d348:	fb03 f202 	mul.w	r2, r3, r2
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	015a      	lsls	r2, r3, #5
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	4413      	add	r3, r2
 800d358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d35c:	691a      	ldr	r2, [r3, #16]
 800d35e:	89fb      	ldrh	r3, [r7, #14]
 800d360:	04d9      	lsls	r1, r3, #19
 800d362:	4b2f      	ldr	r3, [pc, #188]	; (800d420 <USB_EPStartXfer+0x460>)
 800d364:	400b      	ands	r3, r1
 800d366:	6939      	ldr	r1, [r7, #16]
 800d368:	0148      	lsls	r0, r1, #5
 800d36a:	6979      	ldr	r1, [r7, #20]
 800d36c:	4401      	add	r1, r0
 800d36e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d372:	4313      	orrs	r3, r2
 800d374:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	015a      	lsls	r2, r3, #5
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	4413      	add	r3, r2
 800d37e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d382:	691a      	ldr	r2, [r3, #16]
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	6a1b      	ldr	r3, [r3, #32]
 800d388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d38c:	6939      	ldr	r1, [r7, #16]
 800d38e:	0148      	lsls	r0, r1, #5
 800d390:	6979      	ldr	r1, [r7, #20]
 800d392:	4401      	add	r1, r0
 800d394:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d398:	4313      	orrs	r3, r2
 800d39a:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	791b      	ldrb	r3, [r3, #4]
 800d3a0:	2b01      	cmp	r3, #1
 800d3a2:	d128      	bne.n	800d3f6 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3aa:	689b      	ldr	r3, [r3, #8]
 800d3ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d110      	bne.n	800d3d6 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	015a      	lsls	r2, r3, #5
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	4413      	add	r3, r2
 800d3bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	693a      	ldr	r2, [r7, #16]
 800d3c4:	0151      	lsls	r1, r2, #5
 800d3c6:	697a      	ldr	r2, [r7, #20]
 800d3c8:	440a      	add	r2, r1
 800d3ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d3d2:	6013      	str	r3, [r2, #0]
 800d3d4:	e00f      	b.n	800d3f6 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	015a      	lsls	r2, r3, #5
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	4413      	add	r3, r2
 800d3de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	693a      	ldr	r2, [r7, #16]
 800d3e6:	0151      	lsls	r1, r2, #5
 800d3e8:	697a      	ldr	r2, [r7, #20]
 800d3ea:	440a      	add	r2, r1
 800d3ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d3f4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	015a      	lsls	r2, r3, #5
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	4413      	add	r3, r2
 800d3fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	693a      	ldr	r2, [r7, #16]
 800d406:	0151      	lsls	r1, r2, #5
 800d408:	697a      	ldr	r2, [r7, #20]
 800d40a:	440a      	add	r2, r1
 800d40c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d410:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d414:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d416:	2300      	movs	r3, #0
}
 800d418:	4618      	mov	r0, r3
 800d41a:	3718      	adds	r7, #24
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}
 800d420:	1ff80000 	.word	0x1ff80000

0800d424 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d424:	b480      	push	{r7}
 800d426:	b087      	sub	sp, #28
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d42e:	2300      	movs	r3, #0
 800d430:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d432:	2300      	movs	r3, #0
 800d434:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	785b      	ldrb	r3, [r3, #1]
 800d43e:	2b01      	cmp	r3, #1
 800d440:	d14a      	bne.n	800d4d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	781b      	ldrb	r3, [r3, #0]
 800d446:	015a      	lsls	r2, r3, #5
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	4413      	add	r3, r2
 800d44c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d456:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d45a:	f040 8086 	bne.w	800d56a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	015a      	lsls	r2, r3, #5
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	4413      	add	r3, r2
 800d468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	683a      	ldr	r2, [r7, #0]
 800d470:	7812      	ldrb	r2, [r2, #0]
 800d472:	0151      	lsls	r1, r2, #5
 800d474:	693a      	ldr	r2, [r7, #16]
 800d476:	440a      	add	r2, r1
 800d478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d47c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d480:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	015a      	lsls	r2, r3, #5
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	4413      	add	r3, r2
 800d48c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	683a      	ldr	r2, [r7, #0]
 800d494:	7812      	ldrb	r2, [r2, #0]
 800d496:	0151      	lsls	r1, r2, #5
 800d498:	693a      	ldr	r2, [r7, #16]
 800d49a:	440a      	add	r2, r1
 800d49c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d4a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	f242 7210 	movw	r2, #10000	; 0x2710
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	d902      	bls.n	800d4bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	75fb      	strb	r3, [r7, #23]
          break;
 800d4ba:	e056      	b.n	800d56a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	015a      	lsls	r2, r3, #5
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	4413      	add	r3, r2
 800d4c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d4d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4d4:	d0e7      	beq.n	800d4a6 <USB_EPStopXfer+0x82>
 800d4d6:	e048      	b.n	800d56a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	015a      	lsls	r2, r3, #5
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	4413      	add	r3, r2
 800d4e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d4ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4f0:	d13b      	bne.n	800d56a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	015a      	lsls	r2, r3, #5
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	4413      	add	r3, r2
 800d4fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	683a      	ldr	r2, [r7, #0]
 800d504:	7812      	ldrb	r2, [r2, #0]
 800d506:	0151      	lsls	r1, r2, #5
 800d508:	693a      	ldr	r2, [r7, #16]
 800d50a:	440a      	add	r2, r1
 800d50c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d510:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d514:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	781b      	ldrb	r3, [r3, #0]
 800d51a:	015a      	lsls	r2, r3, #5
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	4413      	add	r3, r2
 800d520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	683a      	ldr	r2, [r7, #0]
 800d528:	7812      	ldrb	r2, [r2, #0]
 800d52a:	0151      	lsls	r1, r2, #5
 800d52c:	693a      	ldr	r2, [r7, #16]
 800d52e:	440a      	add	r2, r1
 800d530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d534:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d538:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	3301      	adds	r3, #1
 800d53e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f242 7210 	movw	r2, #10000	; 0x2710
 800d546:	4293      	cmp	r3, r2
 800d548:	d902      	bls.n	800d550 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800d54a:	2301      	movs	r3, #1
 800d54c:	75fb      	strb	r3, [r7, #23]
          break;
 800d54e:	e00c      	b.n	800d56a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	015a      	lsls	r2, r3, #5
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	4413      	add	r3, r2
 800d55a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d564:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d568:	d0e7      	beq.n	800d53a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800d56a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	371c      	adds	r7, #28
 800d570:	46bd      	mov	sp, r7
 800d572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d576:	4770      	bx	lr

0800d578 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800d578:	b480      	push	{r7}
 800d57a:	b089      	sub	sp, #36	; 0x24
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	60f8      	str	r0, [r7, #12]
 800d580:	60b9      	str	r1, [r7, #8]
 800d582:	4611      	mov	r1, r2
 800d584:	461a      	mov	r2, r3
 800d586:	460b      	mov	r3, r1
 800d588:	71fb      	strb	r3, [r7, #7]
 800d58a:	4613      	mov	r3, r2
 800d58c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800d596:	88bb      	ldrh	r3, [r7, #4]
 800d598:	3303      	adds	r3, #3
 800d59a:	089b      	lsrs	r3, r3, #2
 800d59c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800d59e:	2300      	movs	r3, #0
 800d5a0:	61bb      	str	r3, [r7, #24]
 800d5a2:	e018      	b.n	800d5d6 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d5a4:	79fb      	ldrb	r3, [r7, #7]
 800d5a6:	031a      	lsls	r2, r3, #12
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	4413      	add	r3, r2
 800d5ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5b0:	461a      	mov	r2, r3
 800d5b2:	69fb      	ldr	r3, [r7, #28]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	6013      	str	r3, [r2, #0]
    pSrc++;
 800d5b8:	69fb      	ldr	r3, [r7, #28]
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800d5be:	69fb      	ldr	r3, [r7, #28]
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800d5c4:	69fb      	ldr	r3, [r7, #28]
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800d5ca:	69fb      	ldr	r3, [r7, #28]
 800d5cc:	3301      	adds	r3, #1
 800d5ce:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d5d0:	69bb      	ldr	r3, [r7, #24]
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	61bb      	str	r3, [r7, #24]
 800d5d6:	69ba      	ldr	r2, [r7, #24]
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d3e2      	bcc.n	800d5a4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800d5de:	2300      	movs	r3, #0
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3724      	adds	r7, #36	; 0x24
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ea:	4770      	bx	lr

0800d5ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b08b      	sub	sp, #44	; 0x2c
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	60f8      	str	r0, [r7, #12]
 800d5f4:	60b9      	str	r1, [r7, #8]
 800d5f6:	4613      	mov	r3, r2
 800d5f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d602:	88fb      	ldrh	r3, [r7, #6]
 800d604:	089b      	lsrs	r3, r3, #2
 800d606:	b29b      	uxth	r3, r3
 800d608:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d60a:	88fb      	ldrh	r3, [r7, #6]
 800d60c:	f003 0303 	and.w	r3, r3, #3
 800d610:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d612:	2300      	movs	r3, #0
 800d614:	623b      	str	r3, [r7, #32]
 800d616:	e014      	b.n	800d642 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d618:	69bb      	ldr	r3, [r7, #24]
 800d61a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d61e:	681a      	ldr	r2, [r3, #0]
 800d620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d622:	601a      	str	r2, [r3, #0]
    pDest++;
 800d624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d626:	3301      	adds	r3, #1
 800d628:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62c:	3301      	adds	r3, #1
 800d62e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d632:	3301      	adds	r3, #1
 800d634:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d638:	3301      	adds	r3, #1
 800d63a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d63c:	6a3b      	ldr	r3, [r7, #32]
 800d63e:	3301      	adds	r3, #1
 800d640:	623b      	str	r3, [r7, #32]
 800d642:	6a3a      	ldr	r2, [r7, #32]
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	429a      	cmp	r2, r3
 800d648:	d3e6      	bcc.n	800d618 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d64a:	8bfb      	ldrh	r3, [r7, #30]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d01e      	beq.n	800d68e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d650:	2300      	movs	r3, #0
 800d652:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d654:	69bb      	ldr	r3, [r7, #24]
 800d656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d65a:	461a      	mov	r2, r3
 800d65c:	f107 0310 	add.w	r3, r7, #16
 800d660:	6812      	ldr	r2, [r2, #0]
 800d662:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d664:	693a      	ldr	r2, [r7, #16]
 800d666:	6a3b      	ldr	r3, [r7, #32]
 800d668:	b2db      	uxtb	r3, r3
 800d66a:	00db      	lsls	r3, r3, #3
 800d66c:	fa22 f303 	lsr.w	r3, r2, r3
 800d670:	b2da      	uxtb	r2, r3
 800d672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d674:	701a      	strb	r2, [r3, #0]
      i++;
 800d676:	6a3b      	ldr	r3, [r7, #32]
 800d678:	3301      	adds	r3, #1
 800d67a:	623b      	str	r3, [r7, #32]
      pDest++;
 800d67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67e:	3301      	adds	r3, #1
 800d680:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d682:	8bfb      	ldrh	r3, [r7, #30]
 800d684:	3b01      	subs	r3, #1
 800d686:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d688:	8bfb      	ldrh	r3, [r7, #30]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d1ea      	bne.n	800d664 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d690:	4618      	mov	r0, r3
 800d692:	372c      	adds	r7, #44	; 0x2c
 800d694:	46bd      	mov	sp, r7
 800d696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69a:	4770      	bx	lr

0800d69c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d69c:	b480      	push	{r7}
 800d69e:	b085      	sub	sp, #20
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	781b      	ldrb	r3, [r3, #0]
 800d6ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	785b      	ldrb	r3, [r3, #1]
 800d6b4:	2b01      	cmp	r3, #1
 800d6b6:	d12c      	bne.n	800d712 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	015a      	lsls	r2, r3, #5
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	4413      	add	r3, r2
 800d6c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	db12      	blt.n	800d6f0 <USB_EPSetStall+0x54>
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d00f      	beq.n	800d6f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	015a      	lsls	r2, r3, #5
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	4413      	add	r3, r2
 800d6d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	68ba      	ldr	r2, [r7, #8]
 800d6e0:	0151      	lsls	r1, r2, #5
 800d6e2:	68fa      	ldr	r2, [r7, #12]
 800d6e4:	440a      	add	r2, r1
 800d6e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d6ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	015a      	lsls	r2, r3, #5
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	4413      	add	r3, r2
 800d6f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	68ba      	ldr	r2, [r7, #8]
 800d700:	0151      	lsls	r1, r2, #5
 800d702:	68fa      	ldr	r2, [r7, #12]
 800d704:	440a      	add	r2, r1
 800d706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d70a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d70e:	6013      	str	r3, [r2, #0]
 800d710:	e02b      	b.n	800d76a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	015a      	lsls	r2, r3, #5
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	4413      	add	r3, r2
 800d71a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	db12      	blt.n	800d74a <USB_EPSetStall+0xae>
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d00f      	beq.n	800d74a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	015a      	lsls	r2, r3, #5
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	4413      	add	r3, r2
 800d732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	68ba      	ldr	r2, [r7, #8]
 800d73a:	0151      	lsls	r1, r2, #5
 800d73c:	68fa      	ldr	r2, [r7, #12]
 800d73e:	440a      	add	r2, r1
 800d740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d744:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d748:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	015a      	lsls	r2, r3, #5
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	4413      	add	r3, r2
 800d752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	68ba      	ldr	r2, [r7, #8]
 800d75a:	0151      	lsls	r1, r2, #5
 800d75c:	68fa      	ldr	r2, [r7, #12]
 800d75e:	440a      	add	r2, r1
 800d760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d764:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d768:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d76a:	2300      	movs	r3, #0
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3714      	adds	r7, #20
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr

0800d778 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d778:	b480      	push	{r7}
 800d77a:	b085      	sub	sp, #20
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	781b      	ldrb	r3, [r3, #0]
 800d78a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	785b      	ldrb	r3, [r3, #1]
 800d790:	2b01      	cmp	r3, #1
 800d792:	d128      	bne.n	800d7e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	015a      	lsls	r2, r3, #5
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	4413      	add	r3, r2
 800d79c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	68ba      	ldr	r2, [r7, #8]
 800d7a4:	0151      	lsls	r1, r2, #5
 800d7a6:	68fa      	ldr	r2, [r7, #12]
 800d7a8:	440a      	add	r2, r1
 800d7aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d7b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	791b      	ldrb	r3, [r3, #4]
 800d7b8:	2b03      	cmp	r3, #3
 800d7ba:	d003      	beq.n	800d7c4 <USB_EPClearStall+0x4c>
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	791b      	ldrb	r3, [r3, #4]
 800d7c0:	2b02      	cmp	r3, #2
 800d7c2:	d138      	bne.n	800d836 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	015a      	lsls	r2, r3, #5
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	4413      	add	r3, r2
 800d7cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	68ba      	ldr	r2, [r7, #8]
 800d7d4:	0151      	lsls	r1, r2, #5
 800d7d6:	68fa      	ldr	r2, [r7, #12]
 800d7d8:	440a      	add	r2, r1
 800d7da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d7e2:	6013      	str	r3, [r2, #0]
 800d7e4:	e027      	b.n	800d836 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	015a      	lsls	r2, r3, #5
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	68ba      	ldr	r2, [r7, #8]
 800d7f6:	0151      	lsls	r1, r2, #5
 800d7f8:	68fa      	ldr	r2, [r7, #12]
 800d7fa:	440a      	add	r2, r1
 800d7fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d800:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d804:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	791b      	ldrb	r3, [r3, #4]
 800d80a:	2b03      	cmp	r3, #3
 800d80c:	d003      	beq.n	800d816 <USB_EPClearStall+0x9e>
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	791b      	ldrb	r3, [r3, #4]
 800d812:	2b02      	cmp	r3, #2
 800d814:	d10f      	bne.n	800d836 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	015a      	lsls	r2, r3, #5
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	4413      	add	r3, r2
 800d81e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	68ba      	ldr	r2, [r7, #8]
 800d826:	0151      	lsls	r1, r2, #5
 800d828:	68fa      	ldr	r2, [r7, #12]
 800d82a:	440a      	add	r2, r1
 800d82c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d834:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d836:	2300      	movs	r3, #0
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3714      	adds	r7, #20
 800d83c:	46bd      	mov	sp, r7
 800d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d842:	4770      	bx	lr

0800d844 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d844:	b480      	push	{r7}
 800d846:	b085      	sub	sp, #20
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	460b      	mov	r3, r1
 800d84e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	68fa      	ldr	r2, [r7, #12]
 800d85e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d862:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d866:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	78fb      	ldrb	r3, [r7, #3]
 800d872:	011b      	lsls	r3, r3, #4
 800d874:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d878:	68f9      	ldr	r1, [r7, #12]
 800d87a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d87e:	4313      	orrs	r3, r2
 800d880:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d882:	2300      	movs	r3, #0
}
 800d884:	4618      	mov	r0, r3
 800d886:	3714      	adds	r7, #20
 800d888:	46bd      	mov	sp, r7
 800d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88e:	4770      	bx	lr

0800d890 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d890:	b480      	push	{r7}
 800d892:	b085      	sub	sp, #20
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	68fa      	ldr	r2, [r7, #12]
 800d8a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d8aa:	f023 0303 	bic.w	r3, r3, #3
 800d8ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8b6:	685b      	ldr	r3, [r3, #4]
 800d8b8:	68fa      	ldr	r2, [r7, #12]
 800d8ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d8be:	f023 0302 	bic.w	r3, r3, #2
 800d8c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d8c4:	2300      	movs	r3, #0
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3714      	adds	r7, #20
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr

0800d8d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d8d2:	b480      	push	{r7}
 800d8d4:	b085      	sub	sp, #20
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	68fa      	ldr	r2, [r7, #12]
 800d8e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d8ec:	f023 0303 	bic.w	r3, r3, #3
 800d8f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8f8:	685b      	ldr	r3, [r3, #4]
 800d8fa:	68fa      	ldr	r2, [r7, #12]
 800d8fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d900:	f043 0302 	orr.w	r3, r3, #2
 800d904:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d906:	2300      	movs	r3, #0
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3714      	adds	r7, #20
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr

0800d914 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800d914:	b480      	push	{r7}
 800d916:	b085      	sub	sp, #20
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	695b      	ldr	r3, [r3, #20]
 800d920:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	699b      	ldr	r3, [r3, #24]
 800d926:	68fa      	ldr	r2, [r7, #12]
 800d928:	4013      	ands	r3, r2
 800d92a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d92c:	68fb      	ldr	r3, [r7, #12]
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3714      	adds	r7, #20
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr

0800d93a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d93a:	b480      	push	{r7}
 800d93c:	b085      	sub	sp, #20
 800d93e:	af00      	add	r7, sp, #0
 800d940:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d94c:	699b      	ldr	r3, [r3, #24]
 800d94e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d956:	69db      	ldr	r3, [r3, #28]
 800d958:	68ba      	ldr	r2, [r7, #8]
 800d95a:	4013      	ands	r3, r2
 800d95c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	0c1b      	lsrs	r3, r3, #16
}
 800d962:	4618      	mov	r0, r3
 800d964:	3714      	adds	r7, #20
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr

0800d96e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d96e:	b480      	push	{r7}
 800d970:	b085      	sub	sp, #20
 800d972:	af00      	add	r7, sp, #0
 800d974:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d980:	699b      	ldr	r3, [r3, #24]
 800d982:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d98a:	69db      	ldr	r3, [r3, #28]
 800d98c:	68ba      	ldr	r2, [r7, #8]
 800d98e:	4013      	ands	r3, r2
 800d990:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	b29b      	uxth	r3, r3
}
 800d996:	4618      	mov	r0, r3
 800d998:	3714      	adds	r7, #20
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr

0800d9a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d9a2:	b480      	push	{r7}
 800d9a4:	b085      	sub	sp, #20
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
 800d9aa:	460b      	mov	r3, r1
 800d9ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d9b2:	78fb      	ldrb	r3, [r7, #3]
 800d9b4:	015a      	lsls	r2, r3, #5
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	4413      	add	r3, r2
 800d9ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9be:	689b      	ldr	r3, [r3, #8]
 800d9c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9c8:	695b      	ldr	r3, [r3, #20]
 800d9ca:	68ba      	ldr	r2, [r7, #8]
 800d9cc:	4013      	ands	r3, r2
 800d9ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d9d0:	68bb      	ldr	r3, [r7, #8]
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3714      	adds	r7, #20
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9dc:	4770      	bx	lr

0800d9de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d9de:	b480      	push	{r7}
 800d9e0:	b087      	sub	sp, #28
 800d9e2:	af00      	add	r7, sp, #0
 800d9e4:	6078      	str	r0, [r7, #4]
 800d9e6:	460b      	mov	r3, r1
 800d9e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9f4:	691b      	ldr	r3, [r3, #16]
 800d9f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da00:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800da02:	78fb      	ldrb	r3, [r7, #3]
 800da04:	f003 030f 	and.w	r3, r3, #15
 800da08:	68fa      	ldr	r2, [r7, #12]
 800da0a:	fa22 f303 	lsr.w	r3, r2, r3
 800da0e:	01db      	lsls	r3, r3, #7
 800da10:	b2db      	uxtb	r3, r3
 800da12:	693a      	ldr	r2, [r7, #16]
 800da14:	4313      	orrs	r3, r2
 800da16:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800da18:	78fb      	ldrb	r3, [r7, #3]
 800da1a:	015a      	lsls	r2, r3, #5
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	4413      	add	r3, r2
 800da20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da24:	689b      	ldr	r3, [r3, #8]
 800da26:	693a      	ldr	r2, [r7, #16]
 800da28:	4013      	ands	r3, r2
 800da2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800da2c:	68bb      	ldr	r3, [r7, #8]
}
 800da2e:	4618      	mov	r0, r3
 800da30:	371c      	adds	r7, #28
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr

0800da3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800da3a:	b480      	push	{r7}
 800da3c:	b083      	sub	sp, #12
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	695b      	ldr	r3, [r3, #20]
 800da46:	f003 0301 	and.w	r3, r3, #1
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	370c      	adds	r7, #12
 800da4e:	46bd      	mov	sp, r7
 800da50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da54:	4770      	bx	lr

0800da56 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800da56:	b480      	push	{r7}
 800da58:	b085      	sub	sp, #20
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	68fa      	ldr	r2, [r7, #12]
 800da6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da70:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800da74:	f023 0307 	bic.w	r3, r3, #7
 800da78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da80:	685b      	ldr	r3, [r3, #4]
 800da82:	68fa      	ldr	r2, [r7, #12]
 800da84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800da88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800da8e:	2300      	movs	r3, #0
}
 800da90:	4618      	mov	r0, r3
 800da92:	3714      	adds	r7, #20
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr

0800da9c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b085      	sub	sp, #20
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	333c      	adds	r3, #60	; 0x3c
 800daae:	3304      	adds	r3, #4
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	4a1c      	ldr	r2, [pc, #112]	; (800db28 <USB_EP0_OutStart+0x8c>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d90a      	bls.n	800dad2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dac8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dacc:	d101      	bne.n	800dad2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800dace:	2300      	movs	r3, #0
 800dad0:	e024      	b.n	800db1c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dad8:	461a      	mov	r2, r3
 800dada:	2300      	movs	r3, #0
 800dadc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dae4:	691b      	ldr	r3, [r3, #16]
 800dae6:	68fa      	ldr	r2, [r7, #12]
 800dae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800daec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800daf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daf8:	691b      	ldr	r3, [r3, #16]
 800dafa:	68fa      	ldr	r2, [r7, #12]
 800dafc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db00:	f043 0318 	orr.w	r3, r3, #24
 800db04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db0c:	691b      	ldr	r3, [r3, #16]
 800db0e:	68fa      	ldr	r2, [r7, #12]
 800db10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db14:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800db18:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800db1a:	2300      	movs	r3, #0
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3714      	adds	r7, #20
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr
 800db28:	4f54300a 	.word	0x4f54300a

0800db2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800db2c:	b480      	push	{r7}
 800db2e:	b085      	sub	sp, #20
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800db34:	2300      	movs	r3, #0
 800db36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	3301      	adds	r3, #1
 800db3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	4a13      	ldr	r2, [pc, #76]	; (800db90 <USB_CoreReset+0x64>)
 800db42:	4293      	cmp	r3, r2
 800db44:	d901      	bls.n	800db4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800db46:	2303      	movs	r3, #3
 800db48:	e01b      	b.n	800db82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	691b      	ldr	r3, [r3, #16]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	daf2      	bge.n	800db38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800db52:	2300      	movs	r3, #0
 800db54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	691b      	ldr	r3, [r3, #16]
 800db5a:	f043 0201 	orr.w	r2, r3, #1
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	3301      	adds	r3, #1
 800db66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	4a09      	ldr	r2, [pc, #36]	; (800db90 <USB_CoreReset+0x64>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d901      	bls.n	800db74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800db70:	2303      	movs	r3, #3
 800db72:	e006      	b.n	800db82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	691b      	ldr	r3, [r3, #16]
 800db78:	f003 0301 	and.w	r3, r3, #1
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d0f0      	beq.n	800db62 <USB_CoreReset+0x36>

  return HAL_OK;
 800db80:	2300      	movs	r3, #0
}
 800db82:	4618      	mov	r0, r3
 800db84:	3714      	adds	r7, #20
 800db86:	46bd      	mov	sp, r7
 800db88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8c:	4770      	bx	lr
 800db8e:	bf00      	nop
 800db90:	00030d40 	.word	0x00030d40

0800db94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800db98:	4904      	ldr	r1, [pc, #16]	; (800dbac <MX_FATFS_Init+0x18>)
 800db9a:	4805      	ldr	r0, [pc, #20]	; (800dbb0 <MX_FATFS_Init+0x1c>)
 800db9c:	f002 fa80 	bl	80100a0 <FATFS_LinkDriver>
 800dba0:	4603      	mov	r3, r0
 800dba2:	461a      	mov	r2, r3
 800dba4:	4b03      	ldr	r3, [pc, #12]	; (800dbb4 <MX_FATFS_Init+0x20>)
 800dba6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800dba8:	bf00      	nop
 800dbaa:	bd80      	pop	{r7, pc}
 800dbac:	20004490 	.word	0x20004490
 800dbb0:	0801be70 	.word	0x0801be70
 800dbb4:	2000448c 	.word	0x2000448c

0800dbb8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800dbc2:	f000 f885 	bl	800dcd0 <BSP_SD_IsDetected>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d001      	beq.n	800dbd0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800dbcc:	2302      	movs	r3, #2
 800dbce:	e012      	b.n	800dbf6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800dbd0:	480b      	ldr	r0, [pc, #44]	; (800dc00 <BSP_SD_Init+0x48>)
 800dbd2:	f7fa ff69 	bl	8008aa8 <HAL_SD_Init>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800dbda:	79fb      	ldrb	r3, [r7, #7]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d109      	bne.n	800dbf4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800dbe0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800dbe4:	4806      	ldr	r0, [pc, #24]	; (800dc00 <BSP_SD_Init+0x48>)
 800dbe6:	f7fb fe1d 	bl	8009824 <HAL_SD_ConfigWideBusOperation>
 800dbea:	4603      	mov	r3, r0
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d001      	beq.n	800dbf4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800dbf4:	79fb      	ldrb	r3, [r7, #7]
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3708      	adds	r7, #8
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	20004134 	.word	0x20004134

0800dc04 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b086      	sub	sp, #24
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dc10:	2300      	movs	r3, #0
 800dc12:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	68ba      	ldr	r2, [r7, #8]
 800dc18:	68f9      	ldr	r1, [r7, #12]
 800dc1a:	4806      	ldr	r0, [pc, #24]	; (800dc34 <BSP_SD_ReadBlocks_DMA+0x30>)
 800dc1c:	f7fb f86c 	bl	8008cf8 <HAL_SD_ReadBlocks_DMA>
 800dc20:	4603      	mov	r3, r0
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d001      	beq.n	800dc2a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dc26:	2301      	movs	r3, #1
 800dc28:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dc2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3718      	adds	r7, #24
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}
 800dc34:	20004134 	.word	0x20004134

0800dc38 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b086      	sub	sp, #24
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	60f8      	str	r0, [r7, #12]
 800dc40:	60b9      	str	r1, [r7, #8]
 800dc42:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dc44:	2300      	movs	r3, #0
 800dc46:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	68ba      	ldr	r2, [r7, #8]
 800dc4c:	68f9      	ldr	r1, [r7, #12]
 800dc4e:	4806      	ldr	r0, [pc, #24]	; (800dc68 <BSP_SD_WriteBlocks_DMA+0x30>)
 800dc50:	f7fb f8fa 	bl	8008e48 <HAL_SD_WriteBlocks_DMA>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d001      	beq.n	800dc5e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dc5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3718      	adds	r7, #24
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	20004134 	.word	0x20004134

0800dc6c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dc70:	4805      	ldr	r0, [pc, #20]	; (800dc88 <BSP_SD_GetCardState+0x1c>)
 800dc72:	f7fb feeb 	bl	8009a4c <HAL_SD_GetCardState>
 800dc76:	4603      	mov	r3, r0
 800dc78:	2b04      	cmp	r3, #4
 800dc7a:	bf14      	ite	ne
 800dc7c:	2301      	movne	r3, #1
 800dc7e:	2300      	moveq	r3, #0
 800dc80:	b2db      	uxtb	r3, r3
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	bd80      	pop	{r7, pc}
 800dc86:	bf00      	nop
 800dc88:	20004134 	.word	0x20004134

0800dc8c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b082      	sub	sp, #8
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800dc94:	6879      	ldr	r1, [r7, #4]
 800dc96:	4803      	ldr	r0, [pc, #12]	; (800dca4 <BSP_SD_GetCardInfo+0x18>)
 800dc98:	f7fb fd98 	bl	80097cc <HAL_SD_GetCardInfo>
}
 800dc9c:	bf00      	nop
 800dc9e:	3708      	adds	r7, #8
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}
 800dca4:	20004134 	.word	0x20004134

0800dca8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b082      	sub	sp, #8
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800dcb0:	f000 f9a0 	bl	800dff4 <BSP_SD_WriteCpltCallback>
}
 800dcb4:	bf00      	nop
 800dcb6:	3708      	adds	r7, #8
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b082      	sub	sp, #8
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800dcc4:	f000 f9a2 	bl	800e00c <BSP_SD_ReadCpltCallback>
}
 800dcc8:	bf00      	nop
 800dcca:	3708      	adds	r7, #8
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b082      	sub	sp, #8
 800dcd4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800dcda:	f000 f80b 	bl	800dcf4 <BSP_PlatformIsDetected>
 800dcde:	4603      	mov	r3, r0
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d101      	bne.n	800dce8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800dce4:	2300      	movs	r3, #0
 800dce6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800dce8:	79fb      	ldrb	r3, [r7, #7]
 800dcea:	b2db      	uxtb	r3, r3
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3708      	adds	r7, #8
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}

0800dcf4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b082      	sub	sp, #8
 800dcf8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800dcfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800dd02:	4806      	ldr	r0, [pc, #24]	; (800dd1c <BSP_PlatformIsDetected+0x28>)
 800dd04:	f7f6 fbd8 	bl	80044b8 <HAL_GPIO_ReadPin>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d001      	beq.n	800dd12 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800dd12:	79fb      	ldrb	r3, [r7, #7]
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3708      	adds	r7, #8
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}
 800dd1c:	48000400 	.word	0x48000400

0800dd20 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b084      	sub	sp, #16
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800dd28:	f7f4 fd38 	bl	800279c <HAL_GetTick>
 800dd2c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800dd2e:	e006      	b.n	800dd3e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dd30:	f7ff ff9c 	bl	800dc6c <BSP_SD_GetCardState>
 800dd34:	4603      	mov	r3, r0
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d101      	bne.n	800dd3e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	e009      	b.n	800dd52 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800dd3e:	f7f4 fd2d 	bl	800279c <HAL_GetTick>
 800dd42:	4602      	mov	r2, r0
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	1ad3      	subs	r3, r2, r3
 800dd48:	687a      	ldr	r2, [r7, #4]
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d8f0      	bhi.n	800dd30 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800dd4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3710      	adds	r7, #16
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
	...

0800dd5c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b082      	sub	sp, #8
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	4603      	mov	r3, r0
 800dd64:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dd66:	4b0b      	ldr	r3, [pc, #44]	; (800dd94 <SD_CheckStatus+0x38>)
 800dd68:	2201      	movs	r2, #1
 800dd6a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800dd6c:	f7ff ff7e 	bl	800dc6c <BSP_SD_GetCardState>
 800dd70:	4603      	mov	r3, r0
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d107      	bne.n	800dd86 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dd76:	4b07      	ldr	r3, [pc, #28]	; (800dd94 <SD_CheckStatus+0x38>)
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	b2db      	uxtb	r3, r3
 800dd7c:	f023 0301 	bic.w	r3, r3, #1
 800dd80:	b2da      	uxtb	r2, r3
 800dd82:	4b04      	ldr	r3, [pc, #16]	; (800dd94 <SD_CheckStatus+0x38>)
 800dd84:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800dd86:	4b03      	ldr	r3, [pc, #12]	; (800dd94 <SD_CheckStatus+0x38>)
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	b2db      	uxtb	r3, r3
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3708      	adds	r7, #8
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	20003009 	.word	0x20003009

0800dd98 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	4603      	mov	r3, r0
 800dda0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800dda2:	f7ff ff09 	bl	800dbb8 <BSP_SD_Init>
 800dda6:	4603      	mov	r3, r0
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d107      	bne.n	800ddbc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ddac:	79fb      	ldrb	r3, [r7, #7]
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7ff ffd4 	bl	800dd5c <SD_CheckStatus>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	4b04      	ldr	r3, [pc, #16]	; (800ddcc <SD_initialize+0x34>)
 800ddba:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ddbc:	4b03      	ldr	r3, [pc, #12]	; (800ddcc <SD_initialize+0x34>)
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	b2db      	uxtb	r3, r3
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3708      	adds	r7, #8
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	20003009 	.word	0x20003009

0800ddd0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ddda:	79fb      	ldrb	r3, [r7, #7]
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7ff ffbd 	bl	800dd5c <SD_CheckStatus>
 800dde2:	4603      	mov	r3, r0
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3708      	adds	r7, #8
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b086      	sub	sp, #24
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	60b9      	str	r1, [r7, #8]
 800ddf4:	607a      	str	r2, [r7, #4]
 800ddf6:	603b      	str	r3, [r7, #0]
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800de00:	f247 5030 	movw	r0, #30000	; 0x7530
 800de04:	f7ff ff8c 	bl	800dd20 <SD_CheckStatusWithTimeout>
 800de08:	4603      	mov	r3, r0
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	da01      	bge.n	800de12 <SD_read+0x26>
  {
    return res;
 800de0e:	7dfb      	ldrb	r3, [r7, #23]
 800de10:	e03b      	b.n	800de8a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800de12:	683a      	ldr	r2, [r7, #0]
 800de14:	6879      	ldr	r1, [r7, #4]
 800de16:	68b8      	ldr	r0, [r7, #8]
 800de18:	f7ff fef4 	bl	800dc04 <BSP_SD_ReadBlocks_DMA>
 800de1c:	4603      	mov	r3, r0
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d132      	bne.n	800de88 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800de22:	4b1c      	ldr	r3, [pc, #112]	; (800de94 <SD_read+0xa8>)
 800de24:	2200      	movs	r2, #0
 800de26:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800de28:	f7f4 fcb8 	bl	800279c <HAL_GetTick>
 800de2c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800de2e:	bf00      	nop
 800de30:	4b18      	ldr	r3, [pc, #96]	; (800de94 <SD_read+0xa8>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d108      	bne.n	800de4a <SD_read+0x5e>
 800de38:	f7f4 fcb0 	bl	800279c <HAL_GetTick>
 800de3c:	4602      	mov	r2, r0
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	1ad3      	subs	r3, r2, r3
 800de42:	f247 522f 	movw	r2, #29999	; 0x752f
 800de46:	4293      	cmp	r3, r2
 800de48:	d9f2      	bls.n	800de30 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800de4a:	4b12      	ldr	r3, [pc, #72]	; (800de94 <SD_read+0xa8>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d102      	bne.n	800de58 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800de52:	2301      	movs	r3, #1
 800de54:	75fb      	strb	r3, [r7, #23]
 800de56:	e017      	b.n	800de88 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800de58:	4b0e      	ldr	r3, [pc, #56]	; (800de94 <SD_read+0xa8>)
 800de5a:	2200      	movs	r2, #0
 800de5c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800de5e:	f7f4 fc9d 	bl	800279c <HAL_GetTick>
 800de62:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800de64:	e007      	b.n	800de76 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800de66:	f7ff ff01 	bl	800dc6c <BSP_SD_GetCardState>
 800de6a:	4603      	mov	r3, r0
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d102      	bne.n	800de76 <SD_read+0x8a>
          {
            res = RES_OK;
 800de70:	2300      	movs	r3, #0
 800de72:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800de74:	e008      	b.n	800de88 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800de76:	f7f4 fc91 	bl	800279c <HAL_GetTick>
 800de7a:	4602      	mov	r2, r0
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	1ad3      	subs	r3, r2, r3
 800de80:	f247 522f 	movw	r2, #29999	; 0x752f
 800de84:	4293      	cmp	r3, r2
 800de86:	d9ee      	bls.n	800de66 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800de88:	7dfb      	ldrb	r3, [r7, #23]
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3718      	adds	r7, #24
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	20004498 	.word	0x20004498

0800de98 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b086      	sub	sp, #24
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	60b9      	str	r1, [r7, #8]
 800dea0:	607a      	str	r2, [r7, #4]
 800dea2:	603b      	str	r3, [r7, #0]
 800dea4:	4603      	mov	r3, r0
 800dea6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dea8:	2301      	movs	r3, #1
 800deaa:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800deac:	4b24      	ldr	r3, [pc, #144]	; (800df40 <SD_write+0xa8>)
 800deae:	2200      	movs	r2, #0
 800deb0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800deb2:	f247 5030 	movw	r0, #30000	; 0x7530
 800deb6:	f7ff ff33 	bl	800dd20 <SD_CheckStatusWithTimeout>
 800deba:	4603      	mov	r3, r0
 800debc:	2b00      	cmp	r3, #0
 800debe:	da01      	bge.n	800dec4 <SD_write+0x2c>
  {
    return res;
 800dec0:	7dfb      	ldrb	r3, [r7, #23]
 800dec2:	e038      	b.n	800df36 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800dec4:	683a      	ldr	r2, [r7, #0]
 800dec6:	6879      	ldr	r1, [r7, #4]
 800dec8:	68b8      	ldr	r0, [r7, #8]
 800deca:	f7ff feb5 	bl	800dc38 <BSP_SD_WriteBlocks_DMA>
 800dece:	4603      	mov	r3, r0
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d12f      	bne.n	800df34 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800ded4:	f7f4 fc62 	bl	800279c <HAL_GetTick>
 800ded8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800deda:	bf00      	nop
 800dedc:	4b18      	ldr	r3, [pc, #96]	; (800df40 <SD_write+0xa8>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d108      	bne.n	800def6 <SD_write+0x5e>
 800dee4:	f7f4 fc5a 	bl	800279c <HAL_GetTick>
 800dee8:	4602      	mov	r2, r0
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	1ad3      	subs	r3, r2, r3
 800deee:	f247 522f 	movw	r2, #29999	; 0x752f
 800def2:	4293      	cmp	r3, r2
 800def4:	d9f2      	bls.n	800dedc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800def6:	4b12      	ldr	r3, [pc, #72]	; (800df40 <SD_write+0xa8>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d102      	bne.n	800df04 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800defe:	2301      	movs	r3, #1
 800df00:	75fb      	strb	r3, [r7, #23]
 800df02:	e017      	b.n	800df34 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800df04:	4b0e      	ldr	r3, [pc, #56]	; (800df40 <SD_write+0xa8>)
 800df06:	2200      	movs	r2, #0
 800df08:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800df0a:	f7f4 fc47 	bl	800279c <HAL_GetTick>
 800df0e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800df10:	e007      	b.n	800df22 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800df12:	f7ff feab 	bl	800dc6c <BSP_SD_GetCardState>
 800df16:	4603      	mov	r3, r0
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d102      	bne.n	800df22 <SD_write+0x8a>
          {
            res = RES_OK;
 800df1c:	2300      	movs	r3, #0
 800df1e:	75fb      	strb	r3, [r7, #23]
            break;
 800df20:	e008      	b.n	800df34 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800df22:	f7f4 fc3b 	bl	800279c <HAL_GetTick>
 800df26:	4602      	mov	r2, r0
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	1ad3      	subs	r3, r2, r3
 800df2c:	f247 522f 	movw	r2, #29999	; 0x752f
 800df30:	4293      	cmp	r3, r2
 800df32:	d9ee      	bls.n	800df12 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800df34:	7dfb      	ldrb	r3, [r7, #23]
}
 800df36:	4618      	mov	r0, r3
 800df38:	3718      	adds	r7, #24
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
 800df3e:	bf00      	nop
 800df40:	20004494 	.word	0x20004494

0800df44 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b08c      	sub	sp, #48	; 0x30
 800df48:	af00      	add	r7, sp, #0
 800df4a:	4603      	mov	r3, r0
 800df4c:	603a      	str	r2, [r7, #0]
 800df4e:	71fb      	strb	r3, [r7, #7]
 800df50:	460b      	mov	r3, r1
 800df52:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800df54:	2301      	movs	r3, #1
 800df56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800df5a:	4b25      	ldr	r3, [pc, #148]	; (800dff0 <SD_ioctl+0xac>)
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	b2db      	uxtb	r3, r3
 800df60:	f003 0301 	and.w	r3, r3, #1
 800df64:	2b00      	cmp	r3, #0
 800df66:	d001      	beq.n	800df6c <SD_ioctl+0x28>
 800df68:	2303      	movs	r3, #3
 800df6a:	e03c      	b.n	800dfe6 <SD_ioctl+0xa2>

  switch (cmd)
 800df6c:	79bb      	ldrb	r3, [r7, #6]
 800df6e:	2b03      	cmp	r3, #3
 800df70:	d834      	bhi.n	800dfdc <SD_ioctl+0x98>
 800df72:	a201      	add	r2, pc, #4	; (adr r2, 800df78 <SD_ioctl+0x34>)
 800df74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df78:	0800df89 	.word	0x0800df89
 800df7c:	0800df91 	.word	0x0800df91
 800df80:	0800dfa9 	.word	0x0800dfa9
 800df84:	0800dfc3 	.word	0x0800dfc3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800df88:	2300      	movs	r3, #0
 800df8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800df8e:	e028      	b.n	800dfe2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800df90:	f107 0308 	add.w	r3, r7, #8
 800df94:	4618      	mov	r0, r3
 800df96:	f7ff fe79 	bl	800dc8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800df9a:	6a3a      	ldr	r2, [r7, #32]
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dfa6:	e01c      	b.n	800dfe2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dfa8:	f107 0308 	add.w	r3, r7, #8
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7ff fe6d 	bl	800dc8c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800dfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb4:	b29a      	uxth	r2, r3
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dfc0:	e00f      	b.n	800dfe2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dfc2:	f107 0308 	add.w	r3, r7, #8
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7ff fe60 	bl	800dc8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800dfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfce:	0a5a      	lsrs	r2, r3, #9
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dfda:	e002      	b.n	800dfe2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800dfdc:	2304      	movs	r3, #4
 800dfde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800dfe2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3730      	adds	r7, #48	; 0x30
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	bf00      	nop
 800dff0:	20003009 	.word	0x20003009

0800dff4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800dff4:	b480      	push	{r7}
 800dff6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800dff8:	4b03      	ldr	r3, [pc, #12]	; (800e008 <BSP_SD_WriteCpltCallback+0x14>)
 800dffa:	2201      	movs	r2, #1
 800dffc:	601a      	str	r2, [r3, #0]
}
 800dffe:	bf00      	nop
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr
 800e008:	20004494 	.word	0x20004494

0800e00c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e00c:	b480      	push	{r7}
 800e00e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e010:	4b03      	ldr	r3, [pc, #12]	; (800e020 <BSP_SD_ReadCpltCallback+0x14>)
 800e012:	2201      	movs	r2, #1
 800e014:	601a      	str	r2, [r3, #0]
}
 800e016:	bf00      	nop
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr
 800e020:	20004498 	.word	0x20004498

0800e024 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b084      	sub	sp, #16
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	460b      	mov	r3, r1
 800e02e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e030:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e034:	f002 fe72 	bl	8010d1c <USBD_static_malloc>
 800e038:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d109      	bne.n	800e054 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	32b0      	adds	r2, #176	; 0xb0
 800e04a:	2100      	movs	r1, #0
 800e04c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e050:	2302      	movs	r3, #2
 800e052:	e0d4      	b.n	800e1fe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e054:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800e058:	2100      	movs	r1, #0
 800e05a:	68f8      	ldr	r0, [r7, #12]
 800e05c:	f00c fee0 	bl	801ae20 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	32b0      	adds	r2, #176	; 0xb0
 800e06a:	68f9      	ldr	r1, [r7, #12]
 800e06c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	32b0      	adds	r2, #176	; 0xb0
 800e07a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	7c1b      	ldrb	r3, [r3, #16]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d138      	bne.n	800e0fe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e08c:	4b5e      	ldr	r3, [pc, #376]	; (800e208 <USBD_CDC_Init+0x1e4>)
 800e08e:	7819      	ldrb	r1, [r3, #0]
 800e090:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e094:	2202      	movs	r2, #2
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f002 fc2c 	bl	80108f4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e09c:	4b5a      	ldr	r3, [pc, #360]	; (800e208 <USBD_CDC_Init+0x1e4>)
 800e09e:	781b      	ldrb	r3, [r3, #0]
 800e0a0:	f003 020f 	and.w	r2, r3, #15
 800e0a4:	6879      	ldr	r1, [r7, #4]
 800e0a6:	4613      	mov	r3, r2
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	4413      	add	r3, r2
 800e0ac:	009b      	lsls	r3, r3, #2
 800e0ae:	440b      	add	r3, r1
 800e0b0:	3324      	adds	r3, #36	; 0x24
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e0b6:	4b55      	ldr	r3, [pc, #340]	; (800e20c <USBD_CDC_Init+0x1e8>)
 800e0b8:	7819      	ldrb	r1, [r3, #0]
 800e0ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e0be:	2202      	movs	r2, #2
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f002 fc17 	bl	80108f4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e0c6:	4b51      	ldr	r3, [pc, #324]	; (800e20c <USBD_CDC_Init+0x1e8>)
 800e0c8:	781b      	ldrb	r3, [r3, #0]
 800e0ca:	f003 020f 	and.w	r2, r3, #15
 800e0ce:	6879      	ldr	r1, [r7, #4]
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	4413      	add	r3, r2
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	440b      	add	r3, r1
 800e0da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e0de:	2201      	movs	r2, #1
 800e0e0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e0e2:	4b4b      	ldr	r3, [pc, #300]	; (800e210 <USBD_CDC_Init+0x1ec>)
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	f003 020f 	and.w	r2, r3, #15
 800e0ea:	6879      	ldr	r1, [r7, #4]
 800e0ec:	4613      	mov	r3, r2
 800e0ee:	009b      	lsls	r3, r3, #2
 800e0f0:	4413      	add	r3, r2
 800e0f2:	009b      	lsls	r3, r3, #2
 800e0f4:	440b      	add	r3, r1
 800e0f6:	3326      	adds	r3, #38	; 0x26
 800e0f8:	2210      	movs	r2, #16
 800e0fa:	801a      	strh	r2, [r3, #0]
 800e0fc:	e035      	b.n	800e16a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e0fe:	4b42      	ldr	r3, [pc, #264]	; (800e208 <USBD_CDC_Init+0x1e4>)
 800e100:	7819      	ldrb	r1, [r3, #0]
 800e102:	2340      	movs	r3, #64	; 0x40
 800e104:	2202      	movs	r2, #2
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f002 fbf4 	bl	80108f4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e10c:	4b3e      	ldr	r3, [pc, #248]	; (800e208 <USBD_CDC_Init+0x1e4>)
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	f003 020f 	and.w	r2, r3, #15
 800e114:	6879      	ldr	r1, [r7, #4]
 800e116:	4613      	mov	r3, r2
 800e118:	009b      	lsls	r3, r3, #2
 800e11a:	4413      	add	r3, r2
 800e11c:	009b      	lsls	r3, r3, #2
 800e11e:	440b      	add	r3, r1
 800e120:	3324      	adds	r3, #36	; 0x24
 800e122:	2201      	movs	r2, #1
 800e124:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e126:	4b39      	ldr	r3, [pc, #228]	; (800e20c <USBD_CDC_Init+0x1e8>)
 800e128:	7819      	ldrb	r1, [r3, #0]
 800e12a:	2340      	movs	r3, #64	; 0x40
 800e12c:	2202      	movs	r2, #2
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f002 fbe0 	bl	80108f4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e134:	4b35      	ldr	r3, [pc, #212]	; (800e20c <USBD_CDC_Init+0x1e8>)
 800e136:	781b      	ldrb	r3, [r3, #0]
 800e138:	f003 020f 	and.w	r2, r3, #15
 800e13c:	6879      	ldr	r1, [r7, #4]
 800e13e:	4613      	mov	r3, r2
 800e140:	009b      	lsls	r3, r3, #2
 800e142:	4413      	add	r3, r2
 800e144:	009b      	lsls	r3, r3, #2
 800e146:	440b      	add	r3, r1
 800e148:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e14c:	2201      	movs	r2, #1
 800e14e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e150:	4b2f      	ldr	r3, [pc, #188]	; (800e210 <USBD_CDC_Init+0x1ec>)
 800e152:	781b      	ldrb	r3, [r3, #0]
 800e154:	f003 020f 	and.w	r2, r3, #15
 800e158:	6879      	ldr	r1, [r7, #4]
 800e15a:	4613      	mov	r3, r2
 800e15c:	009b      	lsls	r3, r3, #2
 800e15e:	4413      	add	r3, r2
 800e160:	009b      	lsls	r3, r3, #2
 800e162:	440b      	add	r3, r1
 800e164:	3326      	adds	r3, #38	; 0x26
 800e166:	2210      	movs	r2, #16
 800e168:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e16a:	4b29      	ldr	r3, [pc, #164]	; (800e210 <USBD_CDC_Init+0x1ec>)
 800e16c:	7819      	ldrb	r1, [r3, #0]
 800e16e:	2308      	movs	r3, #8
 800e170:	2203      	movs	r2, #3
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f002 fbbe 	bl	80108f4 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e178:	4b25      	ldr	r3, [pc, #148]	; (800e210 <USBD_CDC_Init+0x1ec>)
 800e17a:	781b      	ldrb	r3, [r3, #0]
 800e17c:	f003 020f 	and.w	r2, r3, #15
 800e180:	6879      	ldr	r1, [r7, #4]
 800e182:	4613      	mov	r3, r2
 800e184:	009b      	lsls	r3, r3, #2
 800e186:	4413      	add	r3, r2
 800e188:	009b      	lsls	r3, r3, #2
 800e18a:	440b      	add	r3, r1
 800e18c:	3324      	adds	r3, #36	; 0x24
 800e18e:	2201      	movs	r2, #1
 800e190:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2200      	movs	r2, #0
 800e196:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e1a0:	687a      	ldr	r2, [r7, #4]
 800e1a2:	33b0      	adds	r3, #176	; 0xb0
 800e1a4:	009b      	lsls	r3, r3, #2
 800e1a6:	4413      	add	r3, r2
 800e1a8:	685b      	ldr	r3, [r3, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d101      	bne.n	800e1cc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e1c8:	2302      	movs	r3, #2
 800e1ca:	e018      	b.n	800e1fe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	7c1b      	ldrb	r3, [r3, #16]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d10a      	bne.n	800e1ea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e1d4:	4b0d      	ldr	r3, [pc, #52]	; (800e20c <USBD_CDC_Init+0x1e8>)
 800e1d6:	7819      	ldrb	r1, [r3, #0]
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e1de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f002 fd00 	bl	8010be8 <USBD_LL_PrepareReceive>
 800e1e8:	e008      	b.n	800e1fc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e1ea:	4b08      	ldr	r3, [pc, #32]	; (800e20c <USBD_CDC_Init+0x1e8>)
 800e1ec:	7819      	ldrb	r1, [r3, #0]
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e1f4:	2340      	movs	r3, #64	; 0x40
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f002 fcf6 	bl	8010be8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e1fc:	2300      	movs	r3, #0
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3710      	adds	r7, #16
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
 800e206:	bf00      	nop
 800e208:	20003093 	.word	0x20003093
 800e20c:	20003094 	.word	0x20003094
 800e210:	20003095 	.word	0x20003095

0800e214 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	460b      	mov	r3, r1
 800e21e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e220:	4b3a      	ldr	r3, [pc, #232]	; (800e30c <USBD_CDC_DeInit+0xf8>)
 800e222:	781b      	ldrb	r3, [r3, #0]
 800e224:	4619      	mov	r1, r3
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f002 fba2 	bl	8010970 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e22c:	4b37      	ldr	r3, [pc, #220]	; (800e30c <USBD_CDC_DeInit+0xf8>)
 800e22e:	781b      	ldrb	r3, [r3, #0]
 800e230:	f003 020f 	and.w	r2, r3, #15
 800e234:	6879      	ldr	r1, [r7, #4]
 800e236:	4613      	mov	r3, r2
 800e238:	009b      	lsls	r3, r3, #2
 800e23a:	4413      	add	r3, r2
 800e23c:	009b      	lsls	r3, r3, #2
 800e23e:	440b      	add	r3, r1
 800e240:	3324      	adds	r3, #36	; 0x24
 800e242:	2200      	movs	r2, #0
 800e244:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e246:	4b32      	ldr	r3, [pc, #200]	; (800e310 <USBD_CDC_DeInit+0xfc>)
 800e248:	781b      	ldrb	r3, [r3, #0]
 800e24a:	4619      	mov	r1, r3
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f002 fb8f 	bl	8010970 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e252:	4b2f      	ldr	r3, [pc, #188]	; (800e310 <USBD_CDC_DeInit+0xfc>)
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	f003 020f 	and.w	r2, r3, #15
 800e25a:	6879      	ldr	r1, [r7, #4]
 800e25c:	4613      	mov	r3, r2
 800e25e:	009b      	lsls	r3, r3, #2
 800e260:	4413      	add	r3, r2
 800e262:	009b      	lsls	r3, r3, #2
 800e264:	440b      	add	r3, r1
 800e266:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e26a:	2200      	movs	r2, #0
 800e26c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e26e:	4b29      	ldr	r3, [pc, #164]	; (800e314 <USBD_CDC_DeInit+0x100>)
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	4619      	mov	r1, r3
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f002 fb7b 	bl	8010970 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e27a:	4b26      	ldr	r3, [pc, #152]	; (800e314 <USBD_CDC_DeInit+0x100>)
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	f003 020f 	and.w	r2, r3, #15
 800e282:	6879      	ldr	r1, [r7, #4]
 800e284:	4613      	mov	r3, r2
 800e286:	009b      	lsls	r3, r3, #2
 800e288:	4413      	add	r3, r2
 800e28a:	009b      	lsls	r3, r3, #2
 800e28c:	440b      	add	r3, r1
 800e28e:	3324      	adds	r3, #36	; 0x24
 800e290:	2200      	movs	r2, #0
 800e292:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e294:	4b1f      	ldr	r3, [pc, #124]	; (800e314 <USBD_CDC_DeInit+0x100>)
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	f003 020f 	and.w	r2, r3, #15
 800e29c:	6879      	ldr	r1, [r7, #4]
 800e29e:	4613      	mov	r3, r2
 800e2a0:	009b      	lsls	r3, r3, #2
 800e2a2:	4413      	add	r3, r2
 800e2a4:	009b      	lsls	r3, r3, #2
 800e2a6:	440b      	add	r3, r1
 800e2a8:	3326      	adds	r3, #38	; 0x26
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	32b0      	adds	r2, #176	; 0xb0
 800e2b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d01f      	beq.n	800e300 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e2c6:	687a      	ldr	r2, [r7, #4]
 800e2c8:	33b0      	adds	r3, #176	; 0xb0
 800e2ca:	009b      	lsls	r3, r3, #2
 800e2cc:	4413      	add	r3, r2
 800e2ce:	685b      	ldr	r3, [r3, #4]
 800e2d0:	685b      	ldr	r3, [r3, #4]
 800e2d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	32b0      	adds	r2, #176	; 0xb0
 800e2de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f002 fd28 	bl	8010d38 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	32b0      	adds	r2, #176	; 0xb0
 800e2f2:	2100      	movs	r1, #0
 800e2f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e300:	2300      	movs	r3, #0
}
 800e302:	4618      	mov	r0, r3
 800e304:	3708      	adds	r7, #8
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}
 800e30a:	bf00      	nop
 800e30c:	20003093 	.word	0x20003093
 800e310:	20003094 	.word	0x20003094
 800e314:	20003095 	.word	0x20003095

0800e318 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b086      	sub	sp, #24
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
 800e320:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	32b0      	adds	r2, #176	; 0xb0
 800e32c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e330:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e332:	2300      	movs	r3, #0
 800e334:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e336:	2300      	movs	r3, #0
 800e338:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e33a:	2300      	movs	r3, #0
 800e33c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d101      	bne.n	800e348 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e344:	2303      	movs	r3, #3
 800e346:	e0bf      	b.n	800e4c8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	781b      	ldrb	r3, [r3, #0]
 800e34c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e350:	2b00      	cmp	r3, #0
 800e352:	d050      	beq.n	800e3f6 <USBD_CDC_Setup+0xde>
 800e354:	2b20      	cmp	r3, #32
 800e356:	f040 80af 	bne.w	800e4b8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	88db      	ldrh	r3, [r3, #6]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d03a      	beq.n	800e3d8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	781b      	ldrb	r3, [r3, #0]
 800e366:	b25b      	sxtb	r3, r3
 800e368:	2b00      	cmp	r3, #0
 800e36a:	da1b      	bge.n	800e3a4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e372:	687a      	ldr	r2, [r7, #4]
 800e374:	33b0      	adds	r3, #176	; 0xb0
 800e376:	009b      	lsls	r3, r3, #2
 800e378:	4413      	add	r3, r2
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	689b      	ldr	r3, [r3, #8]
 800e37e:	683a      	ldr	r2, [r7, #0]
 800e380:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e382:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e384:	683a      	ldr	r2, [r7, #0]
 800e386:	88d2      	ldrh	r2, [r2, #6]
 800e388:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	88db      	ldrh	r3, [r3, #6]
 800e38e:	2b07      	cmp	r3, #7
 800e390:	bf28      	it	cs
 800e392:	2307      	movcs	r3, #7
 800e394:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e396:	693b      	ldr	r3, [r7, #16]
 800e398:	89fa      	ldrh	r2, [r7, #14]
 800e39a:	4619      	mov	r1, r3
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f001 fdb3 	bl	800ff08 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e3a2:	e090      	b.n	800e4c6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	785a      	ldrb	r2, [r3, #1]
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	88db      	ldrh	r3, [r3, #6]
 800e3b2:	2b3f      	cmp	r3, #63	; 0x3f
 800e3b4:	d803      	bhi.n	800e3be <USBD_CDC_Setup+0xa6>
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	88db      	ldrh	r3, [r3, #6]
 800e3ba:	b2da      	uxtb	r2, r3
 800e3bc:	e000      	b.n	800e3c0 <USBD_CDC_Setup+0xa8>
 800e3be:	2240      	movs	r2, #64	; 0x40
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e3c6:	6939      	ldr	r1, [r7, #16]
 800e3c8:	693b      	ldr	r3, [r7, #16]
 800e3ca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f001 fdc5 	bl	800ff60 <USBD_CtlPrepareRx>
      break;
 800e3d6:	e076      	b.n	800e4c6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	33b0      	adds	r3, #176	; 0xb0
 800e3e2:	009b      	lsls	r3, r3, #2
 800e3e4:	4413      	add	r3, r2
 800e3e6:	685b      	ldr	r3, [r3, #4]
 800e3e8:	689b      	ldr	r3, [r3, #8]
 800e3ea:	683a      	ldr	r2, [r7, #0]
 800e3ec:	7850      	ldrb	r0, [r2, #1]
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	6839      	ldr	r1, [r7, #0]
 800e3f2:	4798      	blx	r3
      break;
 800e3f4:	e067      	b.n	800e4c6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	785b      	ldrb	r3, [r3, #1]
 800e3fa:	2b0b      	cmp	r3, #11
 800e3fc:	d851      	bhi.n	800e4a2 <USBD_CDC_Setup+0x18a>
 800e3fe:	a201      	add	r2, pc, #4	; (adr r2, 800e404 <USBD_CDC_Setup+0xec>)
 800e400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e404:	0800e435 	.word	0x0800e435
 800e408:	0800e4b1 	.word	0x0800e4b1
 800e40c:	0800e4a3 	.word	0x0800e4a3
 800e410:	0800e4a3 	.word	0x0800e4a3
 800e414:	0800e4a3 	.word	0x0800e4a3
 800e418:	0800e4a3 	.word	0x0800e4a3
 800e41c:	0800e4a3 	.word	0x0800e4a3
 800e420:	0800e4a3 	.word	0x0800e4a3
 800e424:	0800e4a3 	.word	0x0800e4a3
 800e428:	0800e4a3 	.word	0x0800e4a3
 800e42c:	0800e45f 	.word	0x0800e45f
 800e430:	0800e489 	.word	0x0800e489
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e43a:	b2db      	uxtb	r3, r3
 800e43c:	2b03      	cmp	r3, #3
 800e43e:	d107      	bne.n	800e450 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e440:	f107 030a 	add.w	r3, r7, #10
 800e444:	2202      	movs	r2, #2
 800e446:	4619      	mov	r1, r3
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f001 fd5d 	bl	800ff08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e44e:	e032      	b.n	800e4b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e450:	6839      	ldr	r1, [r7, #0]
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f001 fce7 	bl	800fe26 <USBD_CtlError>
            ret = USBD_FAIL;
 800e458:	2303      	movs	r3, #3
 800e45a:	75fb      	strb	r3, [r7, #23]
          break;
 800e45c:	e02b      	b.n	800e4b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e464:	b2db      	uxtb	r3, r3
 800e466:	2b03      	cmp	r3, #3
 800e468:	d107      	bne.n	800e47a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e46a:	f107 030d 	add.w	r3, r7, #13
 800e46e:	2201      	movs	r2, #1
 800e470:	4619      	mov	r1, r3
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f001 fd48 	bl	800ff08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e478:	e01d      	b.n	800e4b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e47a:	6839      	ldr	r1, [r7, #0]
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f001 fcd2 	bl	800fe26 <USBD_CtlError>
            ret = USBD_FAIL;
 800e482:	2303      	movs	r3, #3
 800e484:	75fb      	strb	r3, [r7, #23]
          break;
 800e486:	e016      	b.n	800e4b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e48e:	b2db      	uxtb	r3, r3
 800e490:	2b03      	cmp	r3, #3
 800e492:	d00f      	beq.n	800e4b4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e494:	6839      	ldr	r1, [r7, #0]
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f001 fcc5 	bl	800fe26 <USBD_CtlError>
            ret = USBD_FAIL;
 800e49c:	2303      	movs	r3, #3
 800e49e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e4a0:	e008      	b.n	800e4b4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e4a2:	6839      	ldr	r1, [r7, #0]
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f001 fcbe 	bl	800fe26 <USBD_CtlError>
          ret = USBD_FAIL;
 800e4aa:	2303      	movs	r3, #3
 800e4ac:	75fb      	strb	r3, [r7, #23]
          break;
 800e4ae:	e002      	b.n	800e4b6 <USBD_CDC_Setup+0x19e>
          break;
 800e4b0:	bf00      	nop
 800e4b2:	e008      	b.n	800e4c6 <USBD_CDC_Setup+0x1ae>
          break;
 800e4b4:	bf00      	nop
      }
      break;
 800e4b6:	e006      	b.n	800e4c6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e4b8:	6839      	ldr	r1, [r7, #0]
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f001 fcb3 	bl	800fe26 <USBD_CtlError>
      ret = USBD_FAIL;
 800e4c0:	2303      	movs	r3, #3
 800e4c2:	75fb      	strb	r3, [r7, #23]
      break;
 800e4c4:	bf00      	nop
  }

  return (uint8_t)ret;
 800e4c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3718      	adds	r7, #24
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}

0800e4d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b084      	sub	sp, #16
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
 800e4d8:	460b      	mov	r3, r1
 800e4da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e4e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	32b0      	adds	r2, #176	; 0xb0
 800e4ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d101      	bne.n	800e4fa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e4f6:	2303      	movs	r3, #3
 800e4f8:	e065      	b.n	800e5c6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	32b0      	adds	r2, #176	; 0xb0
 800e504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e508:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e50a:	78fb      	ldrb	r3, [r7, #3]
 800e50c:	f003 020f 	and.w	r2, r3, #15
 800e510:	6879      	ldr	r1, [r7, #4]
 800e512:	4613      	mov	r3, r2
 800e514:	009b      	lsls	r3, r3, #2
 800e516:	4413      	add	r3, r2
 800e518:	009b      	lsls	r3, r3, #2
 800e51a:	440b      	add	r3, r1
 800e51c:	3318      	adds	r3, #24
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d02f      	beq.n	800e584 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e524:	78fb      	ldrb	r3, [r7, #3]
 800e526:	f003 020f 	and.w	r2, r3, #15
 800e52a:	6879      	ldr	r1, [r7, #4]
 800e52c:	4613      	mov	r3, r2
 800e52e:	009b      	lsls	r3, r3, #2
 800e530:	4413      	add	r3, r2
 800e532:	009b      	lsls	r3, r3, #2
 800e534:	440b      	add	r3, r1
 800e536:	3318      	adds	r3, #24
 800e538:	681a      	ldr	r2, [r3, #0]
 800e53a:	78fb      	ldrb	r3, [r7, #3]
 800e53c:	f003 010f 	and.w	r1, r3, #15
 800e540:	68f8      	ldr	r0, [r7, #12]
 800e542:	460b      	mov	r3, r1
 800e544:	00db      	lsls	r3, r3, #3
 800e546:	440b      	add	r3, r1
 800e548:	009b      	lsls	r3, r3, #2
 800e54a:	4403      	add	r3, r0
 800e54c:	3344      	adds	r3, #68	; 0x44
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	fbb2 f1f3 	udiv	r1, r2, r3
 800e554:	fb01 f303 	mul.w	r3, r1, r3
 800e558:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d112      	bne.n	800e584 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e55e:	78fb      	ldrb	r3, [r7, #3]
 800e560:	f003 020f 	and.w	r2, r3, #15
 800e564:	6879      	ldr	r1, [r7, #4]
 800e566:	4613      	mov	r3, r2
 800e568:	009b      	lsls	r3, r3, #2
 800e56a:	4413      	add	r3, r2
 800e56c:	009b      	lsls	r3, r3, #2
 800e56e:	440b      	add	r3, r1
 800e570:	3318      	adds	r3, #24
 800e572:	2200      	movs	r2, #0
 800e574:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e576:	78f9      	ldrb	r1, [r7, #3]
 800e578:	2300      	movs	r3, #0
 800e57a:	2200      	movs	r2, #0
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f002 fafb 	bl	8010b78 <USBD_LL_Transmit>
 800e582:	e01f      	b.n	800e5c4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	2200      	movs	r2, #0
 800e588:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e592:	687a      	ldr	r2, [r7, #4]
 800e594:	33b0      	adds	r3, #176	; 0xb0
 800e596:	009b      	lsls	r3, r3, #2
 800e598:	4413      	add	r3, r2
 800e59a:	685b      	ldr	r3, [r3, #4]
 800e59c:	691b      	ldr	r3, [r3, #16]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d010      	beq.n	800e5c4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e5a8:	687a      	ldr	r2, [r7, #4]
 800e5aa:	33b0      	adds	r3, #176	; 0xb0
 800e5ac:	009b      	lsls	r3, r3, #2
 800e5ae:	4413      	add	r3, r2
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	691b      	ldr	r3, [r3, #16]
 800e5b4:	68ba      	ldr	r2, [r7, #8]
 800e5b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e5ba:	68ba      	ldr	r2, [r7, #8]
 800e5bc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e5c0:	78fa      	ldrb	r2, [r7, #3]
 800e5c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e5c4:	2300      	movs	r3, #0
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3710      	adds	r7, #16
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}

0800e5ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e5ce:	b580      	push	{r7, lr}
 800e5d0:	b084      	sub	sp, #16
 800e5d2:	af00      	add	r7, sp, #0
 800e5d4:	6078      	str	r0, [r7, #4]
 800e5d6:	460b      	mov	r3, r1
 800e5d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	32b0      	adds	r2, #176	; 0xb0
 800e5e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	32b0      	adds	r2, #176	; 0xb0
 800e5f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d101      	bne.n	800e600 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e5fc:	2303      	movs	r3, #3
 800e5fe:	e01a      	b.n	800e636 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e600:	78fb      	ldrb	r3, [r7, #3]
 800e602:	4619      	mov	r1, r3
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f002 fb27 	bl	8010c58 <USBD_LL_GetRxDataSize>
 800e60a:	4602      	mov	r2, r0
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e618:	687a      	ldr	r2, [r7, #4]
 800e61a:	33b0      	adds	r3, #176	; 0xb0
 800e61c:	009b      	lsls	r3, r3, #2
 800e61e:	4413      	add	r3, r2
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	68db      	ldr	r3, [r3, #12]
 800e624:	68fa      	ldr	r2, [r7, #12]
 800e626:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e62a:	68fa      	ldr	r2, [r7, #12]
 800e62c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e630:	4611      	mov	r1, r2
 800e632:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e634:	2300      	movs	r3, #0
}
 800e636:	4618      	mov	r0, r3
 800e638:	3710      	adds	r7, #16
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}

0800e63e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e63e:	b580      	push	{r7, lr}
 800e640:	b084      	sub	sp, #16
 800e642:	af00      	add	r7, sp, #0
 800e644:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	32b0      	adds	r2, #176	; 0xb0
 800e650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e654:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d101      	bne.n	800e660 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e65c:	2303      	movs	r3, #3
 800e65e:	e025      	b.n	800e6ac <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e666:	687a      	ldr	r2, [r7, #4]
 800e668:	33b0      	adds	r3, #176	; 0xb0
 800e66a:	009b      	lsls	r3, r3, #2
 800e66c:	4413      	add	r3, r2
 800e66e:	685b      	ldr	r3, [r3, #4]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d01a      	beq.n	800e6aa <USBD_CDC_EP0_RxReady+0x6c>
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e67a:	2bff      	cmp	r3, #255	; 0xff
 800e67c:	d015      	beq.n	800e6aa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e684:	687a      	ldr	r2, [r7, #4]
 800e686:	33b0      	adds	r3, #176	; 0xb0
 800e688:	009b      	lsls	r3, r3, #2
 800e68a:	4413      	add	r3, r2
 800e68c:	685b      	ldr	r3, [r3, #4]
 800e68e:	689b      	ldr	r3, [r3, #8]
 800e690:	68fa      	ldr	r2, [r7, #12]
 800e692:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800e696:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e698:	68fa      	ldr	r2, [r7, #12]
 800e69a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e69e:	b292      	uxth	r2, r2
 800e6a0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	22ff      	movs	r2, #255	; 0xff
 800e6a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e6aa:	2300      	movs	r3, #0
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3710      	adds	r7, #16
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b086      	sub	sp, #24
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e6bc:	2182      	movs	r1, #130	; 0x82
 800e6be:	4818      	ldr	r0, [pc, #96]	; (800e720 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e6c0:	f000 fd4f 	bl	800f162 <USBD_GetEpDesc>
 800e6c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e6c6:	2101      	movs	r1, #1
 800e6c8:	4815      	ldr	r0, [pc, #84]	; (800e720 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e6ca:	f000 fd4a 	bl	800f162 <USBD_GetEpDesc>
 800e6ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e6d0:	2181      	movs	r1, #129	; 0x81
 800e6d2:	4813      	ldr	r0, [pc, #76]	; (800e720 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e6d4:	f000 fd45 	bl	800f162 <USBD_GetEpDesc>
 800e6d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e6da:	697b      	ldr	r3, [r7, #20]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d002      	beq.n	800e6e6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	2210      	movs	r2, #16
 800e6e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d006      	beq.n	800e6fa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e6f4:	711a      	strb	r2, [r3, #4]
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d006      	beq.n	800e70e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	2200      	movs	r2, #0
 800e704:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e708:	711a      	strb	r2, [r3, #4]
 800e70a:	2200      	movs	r2, #0
 800e70c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2243      	movs	r2, #67	; 0x43
 800e712:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e714:	4b02      	ldr	r3, [pc, #8]	; (800e720 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e716:	4618      	mov	r0, r3
 800e718:	3718      	adds	r7, #24
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}
 800e71e:	bf00      	nop
 800e720:	20003050 	.word	0x20003050

0800e724 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b086      	sub	sp, #24
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e72c:	2182      	movs	r1, #130	; 0x82
 800e72e:	4818      	ldr	r0, [pc, #96]	; (800e790 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e730:	f000 fd17 	bl	800f162 <USBD_GetEpDesc>
 800e734:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e736:	2101      	movs	r1, #1
 800e738:	4815      	ldr	r0, [pc, #84]	; (800e790 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e73a:	f000 fd12 	bl	800f162 <USBD_GetEpDesc>
 800e73e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e740:	2181      	movs	r1, #129	; 0x81
 800e742:	4813      	ldr	r0, [pc, #76]	; (800e790 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e744:	f000 fd0d 	bl	800f162 <USBD_GetEpDesc>
 800e748:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d002      	beq.n	800e756 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e750:	697b      	ldr	r3, [r7, #20]
 800e752:	2210      	movs	r2, #16
 800e754:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d006      	beq.n	800e76a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	2200      	movs	r2, #0
 800e760:	711a      	strb	r2, [r3, #4]
 800e762:	2200      	movs	r2, #0
 800e764:	f042 0202 	orr.w	r2, r2, #2
 800e768:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d006      	beq.n	800e77e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	2200      	movs	r2, #0
 800e774:	711a      	strb	r2, [r3, #4]
 800e776:	2200      	movs	r2, #0
 800e778:	f042 0202 	orr.w	r2, r2, #2
 800e77c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2243      	movs	r2, #67	; 0x43
 800e782:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e784:	4b02      	ldr	r3, [pc, #8]	; (800e790 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e786:	4618      	mov	r0, r3
 800e788:	3718      	adds	r7, #24
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}
 800e78e:	bf00      	nop
 800e790:	20003050 	.word	0x20003050

0800e794 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b086      	sub	sp, #24
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e79c:	2182      	movs	r1, #130	; 0x82
 800e79e:	4818      	ldr	r0, [pc, #96]	; (800e800 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e7a0:	f000 fcdf 	bl	800f162 <USBD_GetEpDesc>
 800e7a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e7a6:	2101      	movs	r1, #1
 800e7a8:	4815      	ldr	r0, [pc, #84]	; (800e800 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e7aa:	f000 fcda 	bl	800f162 <USBD_GetEpDesc>
 800e7ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e7b0:	2181      	movs	r1, #129	; 0x81
 800e7b2:	4813      	ldr	r0, [pc, #76]	; (800e800 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e7b4:	f000 fcd5 	bl	800f162 <USBD_GetEpDesc>
 800e7b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d002      	beq.n	800e7c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	2210      	movs	r2, #16
 800e7c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d006      	beq.n	800e7da <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e7cc:	693b      	ldr	r3, [r7, #16]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e7d4:	711a      	strb	r2, [r3, #4]
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d006      	beq.n	800e7ee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e7e8:	711a      	strb	r2, [r3, #4]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	2243      	movs	r2, #67	; 0x43
 800e7f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e7f4:	4b02      	ldr	r3, [pc, #8]	; (800e800 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3718      	adds	r7, #24
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop
 800e800:	20003050 	.word	0x20003050

0800e804 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e804:	b480      	push	{r7}
 800e806:	b083      	sub	sp, #12
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	220a      	movs	r2, #10
 800e810:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e812:	4b03      	ldr	r3, [pc, #12]	; (800e820 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e814:	4618      	mov	r0, r3
 800e816:	370c      	adds	r7, #12
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr
 800e820:	2000300c 	.word	0x2000300c

0800e824 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e824:	b480      	push	{r7}
 800e826:	b083      	sub	sp, #12
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d101      	bne.n	800e838 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e834:	2303      	movs	r3, #3
 800e836:	e009      	b.n	800e84c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e83e:	687a      	ldr	r2, [r7, #4]
 800e840:	33b0      	adds	r3, #176	; 0xb0
 800e842:	009b      	lsls	r3, r3, #2
 800e844:	4413      	add	r3, r2
 800e846:	683a      	ldr	r2, [r7, #0]
 800e848:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e84a:	2300      	movs	r3, #0
}
 800e84c:	4618      	mov	r0, r3
 800e84e:	370c      	adds	r7, #12
 800e850:	46bd      	mov	sp, r7
 800e852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e856:	4770      	bx	lr

0800e858 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e858:	b480      	push	{r7}
 800e85a:	b087      	sub	sp, #28
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	60f8      	str	r0, [r7, #12]
 800e860:	60b9      	str	r1, [r7, #8]
 800e862:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	32b0      	adds	r2, #176	; 0xb0
 800e86e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e872:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d101      	bne.n	800e87e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e87a:	2303      	movs	r3, #3
 800e87c:	e008      	b.n	800e890 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e87e:	697b      	ldr	r3, [r7, #20]
 800e880:	68ba      	ldr	r2, [r7, #8]
 800e882:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	687a      	ldr	r2, [r7, #4]
 800e88a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e88e:	2300      	movs	r3, #0
}
 800e890:	4618      	mov	r0, r3
 800e892:	371c      	adds	r7, #28
 800e894:	46bd      	mov	sp, r7
 800e896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89a:	4770      	bx	lr

0800e89c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e89c:	b480      	push	{r7}
 800e89e:	b085      	sub	sp, #20
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
 800e8a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	32b0      	adds	r2, #176	; 0xb0
 800e8b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d101      	bne.n	800e8c0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e8bc:	2303      	movs	r3, #3
 800e8be:	e004      	b.n	800e8ca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	683a      	ldr	r2, [r7, #0]
 800e8c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e8c8:	2300      	movs	r3, #0
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3714      	adds	r7, #20
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d4:	4770      	bx	lr
	...

0800e8d8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b084      	sub	sp, #16
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	32b0      	adds	r2, #176	; 0xb0
 800e8ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8ee:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d101      	bne.n	800e8fe <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e8fa:	2303      	movs	r3, #3
 800e8fc:	e025      	b.n	800e94a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e904:	2b00      	cmp	r3, #0
 800e906:	d11f      	bne.n	800e948 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	2201      	movs	r2, #1
 800e90c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e910:	4b10      	ldr	r3, [pc, #64]	; (800e954 <USBD_CDC_TransmitPacket+0x7c>)
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	f003 020f 	and.w	r2, r3, #15
 800e918:	68bb      	ldr	r3, [r7, #8]
 800e91a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	4613      	mov	r3, r2
 800e922:	009b      	lsls	r3, r3, #2
 800e924:	4413      	add	r3, r2
 800e926:	009b      	lsls	r3, r3, #2
 800e928:	4403      	add	r3, r0
 800e92a:	3318      	adds	r3, #24
 800e92c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e92e:	4b09      	ldr	r3, [pc, #36]	; (800e954 <USBD_CDC_TransmitPacket+0x7c>)
 800e930:	7819      	ldrb	r1, [r3, #0]
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f002 f91a 	bl	8010b78 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e944:	2300      	movs	r3, #0
 800e946:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e948:	7bfb      	ldrb	r3, [r7, #15]
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	3710      	adds	r7, #16
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}
 800e952:	bf00      	nop
 800e954:	20003093 	.word	0x20003093

0800e958 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b084      	sub	sp, #16
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	32b0      	adds	r2, #176	; 0xb0
 800e96a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e96e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	32b0      	adds	r2, #176	; 0xb0
 800e97a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d101      	bne.n	800e986 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e982:	2303      	movs	r3, #3
 800e984:	e018      	b.n	800e9b8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	7c1b      	ldrb	r3, [r3, #16]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d10a      	bne.n	800e9a4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e98e:	4b0c      	ldr	r3, [pc, #48]	; (800e9c0 <USBD_CDC_ReceivePacket+0x68>)
 800e990:	7819      	ldrb	r1, [r3, #0]
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e998:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f002 f923 	bl	8010be8 <USBD_LL_PrepareReceive>
 800e9a2:	e008      	b.n	800e9b6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e9a4:	4b06      	ldr	r3, [pc, #24]	; (800e9c0 <USBD_CDC_ReceivePacket+0x68>)
 800e9a6:	7819      	ldrb	r1, [r3, #0]
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e9ae:	2340      	movs	r3, #64	; 0x40
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f002 f919 	bl	8010be8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e9b6:	2300      	movs	r3, #0
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3710      	adds	r7, #16
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}
 800e9c0:	20003094 	.word	0x20003094

0800e9c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b086      	sub	sp, #24
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	60f8      	str	r0, [r7, #12]
 800e9cc:	60b9      	str	r1, [r7, #8]
 800e9ce:	4613      	mov	r3, r2
 800e9d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d101      	bne.n	800e9dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e9d8:	2303      	movs	r3, #3
 800e9da:	e01f      	b.n	800ea1c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d003      	beq.n	800ea02 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	68ba      	ldr	r2, [r7, #8]
 800e9fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2201      	movs	r2, #1
 800ea06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	79fa      	ldrb	r2, [r7, #7]
 800ea0e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ea10:	68f8      	ldr	r0, [r7, #12]
 800ea12:	f001 fef1 	bl	80107f8 <USBD_LL_Init>
 800ea16:	4603      	mov	r3, r0
 800ea18:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ea1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	3718      	adds	r7, #24
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}

0800ea24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b084      	sub	sp, #16
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d101      	bne.n	800ea3c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ea38:	2303      	movs	r3, #3
 800ea3a:	e025      	b.n	800ea88 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	683a      	ldr	r2, [r7, #0]
 800ea40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	32ae      	adds	r2, #174	; 0xae
 800ea4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d00f      	beq.n	800ea78 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	32ae      	adds	r2, #174	; 0xae
 800ea62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea68:	f107 020e 	add.w	r2, r7, #14
 800ea6c:	4610      	mov	r0, r2
 800ea6e:	4798      	blx	r3
 800ea70:	4602      	mov	r2, r0
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ea7e:	1c5a      	adds	r2, r3, #1
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ea86:	2300      	movs	r3, #0
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3710      	adds	r7, #16
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b082      	sub	sp, #8
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f001 fef9 	bl	8010890 <USBD_LL_Start>
 800ea9e:	4603      	mov	r3, r0
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	3708      	adds	r7, #8
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}

0800eaa8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b083      	sub	sp, #12
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eab0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	370c      	adds	r7, #12
 800eab6:	46bd      	mov	sp, r7
 800eab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabc:	4770      	bx	lr

0800eabe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eabe:	b580      	push	{r7, lr}
 800eac0:	b084      	sub	sp, #16
 800eac2:	af00      	add	r7, sp, #0
 800eac4:	6078      	str	r0, [r7, #4]
 800eac6:	460b      	mov	r3, r1
 800eac8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800eaca:	2300      	movs	r3, #0
 800eacc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d009      	beq.n	800eaec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	78fa      	ldrb	r2, [r7, #3]
 800eae2:	4611      	mov	r1, r2
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	4798      	blx	r3
 800eae8:	4603      	mov	r3, r0
 800eaea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800eaec:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3710      	adds	r7, #16
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}

0800eaf6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eaf6:	b580      	push	{r7, lr}
 800eaf8:	b084      	sub	sp, #16
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	6078      	str	r0, [r7, #4]
 800eafe:	460b      	mov	r3, r1
 800eb00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb02:	2300      	movs	r3, #0
 800eb04:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	78fa      	ldrb	r2, [r7, #3]
 800eb10:	4611      	mov	r1, r2
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	4798      	blx	r3
 800eb16:	4603      	mov	r3, r0
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d001      	beq.n	800eb20 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800eb1c:	2303      	movs	r3, #3
 800eb1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800eb20:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	3710      	adds	r7, #16
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}

0800eb2a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800eb2a:	b580      	push	{r7, lr}
 800eb2c:	b084      	sub	sp, #16
 800eb2e:	af00      	add	r7, sp, #0
 800eb30:	6078      	str	r0, [r7, #4]
 800eb32:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eb3a:	6839      	ldr	r1, [r7, #0]
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f001 f938 	bl	800fdb2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2201      	movs	r2, #1
 800eb46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800eb50:	461a      	mov	r2, r3
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eb5e:	f003 031f 	and.w	r3, r3, #31
 800eb62:	2b02      	cmp	r3, #2
 800eb64:	d01a      	beq.n	800eb9c <USBD_LL_SetupStage+0x72>
 800eb66:	2b02      	cmp	r3, #2
 800eb68:	d822      	bhi.n	800ebb0 <USBD_LL_SetupStage+0x86>
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d002      	beq.n	800eb74 <USBD_LL_SetupStage+0x4a>
 800eb6e:	2b01      	cmp	r3, #1
 800eb70:	d00a      	beq.n	800eb88 <USBD_LL_SetupStage+0x5e>
 800eb72:	e01d      	b.n	800ebb0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eb7a:	4619      	mov	r1, r3
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f000 fb65 	bl	800f24c <USBD_StdDevReq>
 800eb82:	4603      	mov	r3, r0
 800eb84:	73fb      	strb	r3, [r7, #15]
      break;
 800eb86:	e020      	b.n	800ebca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eb8e:	4619      	mov	r1, r3
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f000 fbcd 	bl	800f330 <USBD_StdItfReq>
 800eb96:	4603      	mov	r3, r0
 800eb98:	73fb      	strb	r3, [r7, #15]
      break;
 800eb9a:	e016      	b.n	800ebca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eba2:	4619      	mov	r1, r3
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f000 fc2f 	bl	800f408 <USBD_StdEPReq>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	73fb      	strb	r3, [r7, #15]
      break;
 800ebae:	e00c      	b.n	800ebca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ebb6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ebba:	b2db      	uxtb	r3, r3
 800ebbc:	4619      	mov	r1, r3
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f001 ff0c 	bl	80109dc <USBD_LL_StallEP>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	73fb      	strb	r3, [r7, #15]
      break;
 800ebc8:	bf00      	nop
  }

  return ret;
 800ebca:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3710      	adds	r7, #16
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b086      	sub	sp, #24
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	60f8      	str	r0, [r7, #12]
 800ebdc:	460b      	mov	r3, r1
 800ebde:	607a      	str	r2, [r7, #4]
 800ebe0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ebe6:	7afb      	ldrb	r3, [r7, #11]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d16e      	bne.n	800ecca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ebf2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ebfa:	2b03      	cmp	r3, #3
 800ebfc:	f040 8098 	bne.w	800ed30 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	689a      	ldr	r2, [r3, #8]
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	68db      	ldr	r3, [r3, #12]
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d913      	bls.n	800ec34 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ec0c:	693b      	ldr	r3, [r7, #16]
 800ec0e:	689a      	ldr	r2, [r3, #8]
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	68db      	ldr	r3, [r3, #12]
 800ec14:	1ad2      	subs	r2, r2, r3
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ec1a:	693b      	ldr	r3, [r7, #16]
 800ec1c:	68da      	ldr	r2, [r3, #12]
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	689b      	ldr	r3, [r3, #8]
 800ec22:	4293      	cmp	r3, r2
 800ec24:	bf28      	it	cs
 800ec26:	4613      	movcs	r3, r2
 800ec28:	461a      	mov	r2, r3
 800ec2a:	6879      	ldr	r1, [r7, #4]
 800ec2c:	68f8      	ldr	r0, [r7, #12]
 800ec2e:	f001 f9b4 	bl	800ff9a <USBD_CtlContinueRx>
 800ec32:	e07d      	b.n	800ed30 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ec3a:	f003 031f 	and.w	r3, r3, #31
 800ec3e:	2b02      	cmp	r3, #2
 800ec40:	d014      	beq.n	800ec6c <USBD_LL_DataOutStage+0x98>
 800ec42:	2b02      	cmp	r3, #2
 800ec44:	d81d      	bhi.n	800ec82 <USBD_LL_DataOutStage+0xae>
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d002      	beq.n	800ec50 <USBD_LL_DataOutStage+0x7c>
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d003      	beq.n	800ec56 <USBD_LL_DataOutStage+0x82>
 800ec4e:	e018      	b.n	800ec82 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ec50:	2300      	movs	r3, #0
 800ec52:	75bb      	strb	r3, [r7, #22]
            break;
 800ec54:	e018      	b.n	800ec88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ec5c:	b2db      	uxtb	r3, r3
 800ec5e:	4619      	mov	r1, r3
 800ec60:	68f8      	ldr	r0, [r7, #12]
 800ec62:	f000 fa64 	bl	800f12e <USBD_CoreFindIF>
 800ec66:	4603      	mov	r3, r0
 800ec68:	75bb      	strb	r3, [r7, #22]
            break;
 800ec6a:	e00d      	b.n	800ec88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ec72:	b2db      	uxtb	r3, r3
 800ec74:	4619      	mov	r1, r3
 800ec76:	68f8      	ldr	r0, [r7, #12]
 800ec78:	f000 fa66 	bl	800f148 <USBD_CoreFindEP>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	75bb      	strb	r3, [r7, #22]
            break;
 800ec80:	e002      	b.n	800ec88 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ec82:	2300      	movs	r3, #0
 800ec84:	75bb      	strb	r3, [r7, #22]
            break;
 800ec86:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ec88:	7dbb      	ldrb	r3, [r7, #22]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d119      	bne.n	800ecc2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec94:	b2db      	uxtb	r3, r3
 800ec96:	2b03      	cmp	r3, #3
 800ec98:	d113      	bne.n	800ecc2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ec9a:	7dba      	ldrb	r2, [r7, #22]
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	32ae      	adds	r2, #174	; 0xae
 800eca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eca4:	691b      	ldr	r3, [r3, #16]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d00b      	beq.n	800ecc2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ecaa:	7dba      	ldrb	r2, [r7, #22]
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ecb2:	7dba      	ldrb	r2, [r7, #22]
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	32ae      	adds	r2, #174	; 0xae
 800ecb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecbc:	691b      	ldr	r3, [r3, #16]
 800ecbe:	68f8      	ldr	r0, [r7, #12]
 800ecc0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ecc2:	68f8      	ldr	r0, [r7, #12]
 800ecc4:	f001 f97a 	bl	800ffbc <USBD_CtlSendStatus>
 800ecc8:	e032      	b.n	800ed30 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ecca:	7afb      	ldrb	r3, [r7, #11]
 800eccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecd0:	b2db      	uxtb	r3, r3
 800ecd2:	4619      	mov	r1, r3
 800ecd4:	68f8      	ldr	r0, [r7, #12]
 800ecd6:	f000 fa37 	bl	800f148 <USBD_CoreFindEP>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ecde:	7dbb      	ldrb	r3, [r7, #22]
 800ece0:	2bff      	cmp	r3, #255	; 0xff
 800ece2:	d025      	beq.n	800ed30 <USBD_LL_DataOutStage+0x15c>
 800ece4:	7dbb      	ldrb	r3, [r7, #22]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d122      	bne.n	800ed30 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecf0:	b2db      	uxtb	r3, r3
 800ecf2:	2b03      	cmp	r3, #3
 800ecf4:	d117      	bne.n	800ed26 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ecf6:	7dba      	ldrb	r2, [r7, #22]
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	32ae      	adds	r2, #174	; 0xae
 800ecfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed00:	699b      	ldr	r3, [r3, #24]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d00f      	beq.n	800ed26 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ed06:	7dba      	ldrb	r2, [r7, #22]
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ed0e:	7dba      	ldrb	r2, [r7, #22]
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	32ae      	adds	r2, #174	; 0xae
 800ed14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed18:	699b      	ldr	r3, [r3, #24]
 800ed1a:	7afa      	ldrb	r2, [r7, #11]
 800ed1c:	4611      	mov	r1, r2
 800ed1e:	68f8      	ldr	r0, [r7, #12]
 800ed20:	4798      	blx	r3
 800ed22:	4603      	mov	r3, r0
 800ed24:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ed26:	7dfb      	ldrb	r3, [r7, #23]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d001      	beq.n	800ed30 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ed2c:	7dfb      	ldrb	r3, [r7, #23]
 800ed2e:	e000      	b.n	800ed32 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ed30:	2300      	movs	r3, #0
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3718      	adds	r7, #24
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}

0800ed3a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ed3a:	b580      	push	{r7, lr}
 800ed3c:	b086      	sub	sp, #24
 800ed3e:	af00      	add	r7, sp, #0
 800ed40:	60f8      	str	r0, [r7, #12]
 800ed42:	460b      	mov	r3, r1
 800ed44:	607a      	str	r2, [r7, #4]
 800ed46:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ed48:	7afb      	ldrb	r3, [r7, #11]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d16f      	bne.n	800ee2e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	3314      	adds	r3, #20
 800ed52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ed5a:	2b02      	cmp	r3, #2
 800ed5c:	d15a      	bne.n	800ee14 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	689a      	ldr	r2, [r3, #8]
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	68db      	ldr	r3, [r3, #12]
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d914      	bls.n	800ed94 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	689a      	ldr	r2, [r3, #8]
 800ed6e:	693b      	ldr	r3, [r7, #16]
 800ed70:	68db      	ldr	r3, [r3, #12]
 800ed72:	1ad2      	subs	r2, r2, r3
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ed78:	693b      	ldr	r3, [r7, #16]
 800ed7a:	689b      	ldr	r3, [r3, #8]
 800ed7c:	461a      	mov	r2, r3
 800ed7e:	6879      	ldr	r1, [r7, #4]
 800ed80:	68f8      	ldr	r0, [r7, #12]
 800ed82:	f001 f8dc 	bl	800ff3e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ed86:	2300      	movs	r3, #0
 800ed88:	2200      	movs	r2, #0
 800ed8a:	2100      	movs	r1, #0
 800ed8c:	68f8      	ldr	r0, [r7, #12]
 800ed8e:	f001 ff2b 	bl	8010be8 <USBD_LL_PrepareReceive>
 800ed92:	e03f      	b.n	800ee14 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	68da      	ldr	r2, [r3, #12]
 800ed98:	693b      	ldr	r3, [r7, #16]
 800ed9a:	689b      	ldr	r3, [r3, #8]
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d11c      	bne.n	800edda <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	685a      	ldr	r2, [r3, #4]
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d316      	bcc.n	800edda <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800edac:	693b      	ldr	r3, [r7, #16]
 800edae:	685a      	ldr	r2, [r3, #4]
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d20f      	bcs.n	800edda <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800edba:	2200      	movs	r2, #0
 800edbc:	2100      	movs	r1, #0
 800edbe:	68f8      	ldr	r0, [r7, #12]
 800edc0:	f001 f8bd 	bl	800ff3e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	2200      	movs	r2, #0
 800edc8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800edcc:	2300      	movs	r3, #0
 800edce:	2200      	movs	r2, #0
 800edd0:	2100      	movs	r1, #0
 800edd2:	68f8      	ldr	r0, [r7, #12]
 800edd4:	f001 ff08 	bl	8010be8 <USBD_LL_PrepareReceive>
 800edd8:	e01c      	b.n	800ee14 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ede0:	b2db      	uxtb	r3, r3
 800ede2:	2b03      	cmp	r3, #3
 800ede4:	d10f      	bne.n	800ee06 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edec:	68db      	ldr	r3, [r3, #12]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d009      	beq.n	800ee06 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	2200      	movs	r2, #0
 800edf6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee00:	68db      	ldr	r3, [r3, #12]
 800ee02:	68f8      	ldr	r0, [r7, #12]
 800ee04:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee06:	2180      	movs	r1, #128	; 0x80
 800ee08:	68f8      	ldr	r0, [r7, #12]
 800ee0a:	f001 fde7 	bl	80109dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ee0e:	68f8      	ldr	r0, [r7, #12]
 800ee10:	f001 f8e7 	bl	800ffe2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d03a      	beq.n	800ee94 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ee1e:	68f8      	ldr	r0, [r7, #12]
 800ee20:	f7ff fe42 	bl	800eaa8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	2200      	movs	r2, #0
 800ee28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ee2c:	e032      	b.n	800ee94 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ee2e:	7afb      	ldrb	r3, [r7, #11]
 800ee30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ee34:	b2db      	uxtb	r3, r3
 800ee36:	4619      	mov	r1, r3
 800ee38:	68f8      	ldr	r0, [r7, #12]
 800ee3a:	f000 f985 	bl	800f148 <USBD_CoreFindEP>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ee42:	7dfb      	ldrb	r3, [r7, #23]
 800ee44:	2bff      	cmp	r3, #255	; 0xff
 800ee46:	d025      	beq.n	800ee94 <USBD_LL_DataInStage+0x15a>
 800ee48:	7dfb      	ldrb	r3, [r7, #23]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d122      	bne.n	800ee94 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee54:	b2db      	uxtb	r3, r3
 800ee56:	2b03      	cmp	r3, #3
 800ee58:	d11c      	bne.n	800ee94 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ee5a:	7dfa      	ldrb	r2, [r7, #23]
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	32ae      	adds	r2, #174	; 0xae
 800ee60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee64:	695b      	ldr	r3, [r3, #20]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d014      	beq.n	800ee94 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ee6a:	7dfa      	ldrb	r2, [r7, #23]
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ee72:	7dfa      	ldrb	r2, [r7, #23]
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	32ae      	adds	r2, #174	; 0xae
 800ee78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee7c:	695b      	ldr	r3, [r3, #20]
 800ee7e:	7afa      	ldrb	r2, [r7, #11]
 800ee80:	4611      	mov	r1, r2
 800ee82:	68f8      	ldr	r0, [r7, #12]
 800ee84:	4798      	blx	r3
 800ee86:	4603      	mov	r3, r0
 800ee88:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ee8a:	7dbb      	ldrb	r3, [r7, #22]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d001      	beq.n	800ee94 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ee90:	7dbb      	ldrb	r3, [r7, #22]
 800ee92:	e000      	b.n	800ee96 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ee94:	2300      	movs	r3, #0
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3718      	adds	r7, #24
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}

0800ee9e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ee9e:	b580      	push	{r7, lr}
 800eea0:	b084      	sub	sp, #16
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800eea6:	2300      	movs	r3, #0
 800eea8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2201      	movs	r2, #1
 800eeae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2200      	movs	r2, #0
 800eebe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2200      	movs	r2, #0
 800eec4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2200      	movs	r2, #0
 800eecc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d014      	beq.n	800ef04 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eee0:	685b      	ldr	r3, [r3, #4]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d00e      	beq.n	800ef04 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eeec:	685b      	ldr	r3, [r3, #4]
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	6852      	ldr	r2, [r2, #4]
 800eef2:	b2d2      	uxtb	r2, r2
 800eef4:	4611      	mov	r1, r2
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	4798      	blx	r3
 800eefa:	4603      	mov	r3, r0
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d001      	beq.n	800ef04 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ef00:	2303      	movs	r3, #3
 800ef02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ef04:	2340      	movs	r3, #64	; 0x40
 800ef06:	2200      	movs	r2, #0
 800ef08:	2100      	movs	r1, #0
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f001 fcf2 	bl	80108f4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2201      	movs	r2, #1
 800ef14:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2240      	movs	r2, #64	; 0x40
 800ef1c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ef20:	2340      	movs	r3, #64	; 0x40
 800ef22:	2200      	movs	r2, #0
 800ef24:	2180      	movs	r1, #128	; 0x80
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f001 fce4 	bl	80108f4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2201      	movs	r2, #1
 800ef30:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2240      	movs	r2, #64	; 0x40
 800ef36:	621a      	str	r2, [r3, #32]

  return ret;
 800ef38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	3710      	adds	r7, #16
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}

0800ef42 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ef42:	b480      	push	{r7}
 800ef44:	b083      	sub	sp, #12
 800ef46:	af00      	add	r7, sp, #0
 800ef48:	6078      	str	r0, [r7, #4]
 800ef4a:	460b      	mov	r3, r1
 800ef4c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	78fa      	ldrb	r2, [r7, #3]
 800ef52:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ef54:	2300      	movs	r3, #0
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	370c      	adds	r7, #12
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef60:	4770      	bx	lr

0800ef62 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ef62:	b480      	push	{r7}
 800ef64:	b083      	sub	sp, #12
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef70:	b2db      	uxtb	r3, r3
 800ef72:	2b04      	cmp	r3, #4
 800ef74:	d006      	beq.n	800ef84 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef7c:	b2da      	uxtb	r2, r3
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2204      	movs	r2, #4
 800ef88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ef8c:	2300      	movs	r3, #0
}
 800ef8e:	4618      	mov	r0, r3
 800ef90:	370c      	adds	r7, #12
 800ef92:	46bd      	mov	sp, r7
 800ef94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef98:	4770      	bx	lr

0800ef9a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ef9a:	b480      	push	{r7}
 800ef9c:	b083      	sub	sp, #12
 800ef9e:	af00      	add	r7, sp, #0
 800efa0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efa8:	b2db      	uxtb	r3, r3
 800efaa:	2b04      	cmp	r3, #4
 800efac:	d106      	bne.n	800efbc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800efb4:	b2da      	uxtb	r2, r3
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800efbc:	2300      	movs	r3, #0
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	370c      	adds	r7, #12
 800efc2:	46bd      	mov	sp, r7
 800efc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc8:	4770      	bx	lr

0800efca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800efca:	b580      	push	{r7, lr}
 800efcc:	b082      	sub	sp, #8
 800efce:	af00      	add	r7, sp, #0
 800efd0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efd8:	b2db      	uxtb	r3, r3
 800efda:	2b03      	cmp	r3, #3
 800efdc:	d110      	bne.n	800f000 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d00b      	beq.n	800f000 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efee:	69db      	ldr	r3, [r3, #28]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d005      	beq.n	800f000 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800effa:	69db      	ldr	r3, [r3, #28]
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f000:	2300      	movs	r3, #0
}
 800f002:	4618      	mov	r0, r3
 800f004:	3708      	adds	r7, #8
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}

0800f00a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f00a:	b580      	push	{r7, lr}
 800f00c:	b082      	sub	sp, #8
 800f00e:	af00      	add	r7, sp, #0
 800f010:	6078      	str	r0, [r7, #4]
 800f012:	460b      	mov	r3, r1
 800f014:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	32ae      	adds	r2, #174	; 0xae
 800f020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d101      	bne.n	800f02c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800f028:	2303      	movs	r3, #3
 800f02a:	e01c      	b.n	800f066 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f032:	b2db      	uxtb	r3, r3
 800f034:	2b03      	cmp	r3, #3
 800f036:	d115      	bne.n	800f064 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	32ae      	adds	r2, #174	; 0xae
 800f042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f046:	6a1b      	ldr	r3, [r3, #32]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d00b      	beq.n	800f064 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	32ae      	adds	r2, #174	; 0xae
 800f056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f05a:	6a1b      	ldr	r3, [r3, #32]
 800f05c:	78fa      	ldrb	r2, [r7, #3]
 800f05e:	4611      	mov	r1, r2
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f064:	2300      	movs	r3, #0
}
 800f066:	4618      	mov	r0, r3
 800f068:	3708      	adds	r7, #8
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}

0800f06e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f06e:	b580      	push	{r7, lr}
 800f070:	b082      	sub	sp, #8
 800f072:	af00      	add	r7, sp, #0
 800f074:	6078      	str	r0, [r7, #4]
 800f076:	460b      	mov	r3, r1
 800f078:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	32ae      	adds	r2, #174	; 0xae
 800f084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d101      	bne.n	800f090 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800f08c:	2303      	movs	r3, #3
 800f08e:	e01c      	b.n	800f0ca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f096:	b2db      	uxtb	r3, r3
 800f098:	2b03      	cmp	r3, #3
 800f09a:	d115      	bne.n	800f0c8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	32ae      	adds	r2, #174	; 0xae
 800f0a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d00b      	beq.n	800f0c8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	32ae      	adds	r2, #174	; 0xae
 800f0ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0c0:	78fa      	ldrb	r2, [r7, #3]
 800f0c2:	4611      	mov	r1, r2
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f0c8:	2300      	movs	r3, #0
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3708      	adds	r7, #8
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}

0800f0d2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f0d2:	b480      	push	{r7}
 800f0d4:	b083      	sub	sp, #12
 800f0d6:	af00      	add	r7, sp, #0
 800f0d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f0da:	2300      	movs	r3, #0
}
 800f0dc:	4618      	mov	r0, r3
 800f0de:	370c      	adds	r7, #12
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e6:	4770      	bx	lr

0800f0e8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b084      	sub	sp, #16
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2201      	movs	r2, #1
 800f0f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f102:	2b00      	cmp	r3, #0
 800f104:	d00e      	beq.n	800f124 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	687a      	ldr	r2, [r7, #4]
 800f110:	6852      	ldr	r2, [r2, #4]
 800f112:	b2d2      	uxtb	r2, r2
 800f114:	4611      	mov	r1, r2
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	4798      	blx	r3
 800f11a:	4603      	mov	r3, r0
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d001      	beq.n	800f124 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800f120:	2303      	movs	r3, #3
 800f122:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f124:	7bfb      	ldrb	r3, [r7, #15]
}
 800f126:	4618      	mov	r0, r3
 800f128:	3710      	adds	r7, #16
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}

0800f12e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f12e:	b480      	push	{r7}
 800f130:	b083      	sub	sp, #12
 800f132:	af00      	add	r7, sp, #0
 800f134:	6078      	str	r0, [r7, #4]
 800f136:	460b      	mov	r3, r1
 800f138:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f13a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	370c      	adds	r7, #12
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr

0800f148 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f148:	b480      	push	{r7}
 800f14a:	b083      	sub	sp, #12
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	460b      	mov	r3, r1
 800f152:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f154:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f156:	4618      	mov	r0, r3
 800f158:	370c      	adds	r7, #12
 800f15a:	46bd      	mov	sp, r7
 800f15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f160:	4770      	bx	lr

0800f162 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f162:	b580      	push	{r7, lr}
 800f164:	b086      	sub	sp, #24
 800f166:	af00      	add	r7, sp, #0
 800f168:	6078      	str	r0, [r7, #4]
 800f16a:	460b      	mov	r3, r1
 800f16c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f176:	2300      	movs	r3, #0
 800f178:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	885b      	ldrh	r3, [r3, #2]
 800f17e:	b29a      	uxth	r2, r3
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	b29b      	uxth	r3, r3
 800f186:	429a      	cmp	r2, r3
 800f188:	d920      	bls.n	800f1cc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	781b      	ldrb	r3, [r3, #0]
 800f18e:	b29b      	uxth	r3, r3
 800f190:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f192:	e013      	b.n	800f1bc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f194:	f107 030a 	add.w	r3, r7, #10
 800f198:	4619      	mov	r1, r3
 800f19a:	6978      	ldr	r0, [r7, #20]
 800f19c:	f000 f81b 	bl	800f1d6 <USBD_GetNextDesc>
 800f1a0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	785b      	ldrb	r3, [r3, #1]
 800f1a6:	2b05      	cmp	r3, #5
 800f1a8:	d108      	bne.n	800f1bc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f1ae:	693b      	ldr	r3, [r7, #16]
 800f1b0:	789b      	ldrb	r3, [r3, #2]
 800f1b2:	78fa      	ldrb	r2, [r7, #3]
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d008      	beq.n	800f1ca <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	885b      	ldrh	r3, [r3, #2]
 800f1c0:	b29a      	uxth	r2, r3
 800f1c2:	897b      	ldrh	r3, [r7, #10]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d8e5      	bhi.n	800f194 <USBD_GetEpDesc+0x32>
 800f1c8:	e000      	b.n	800f1cc <USBD_GetEpDesc+0x6a>
          break;
 800f1ca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f1cc:	693b      	ldr	r3, [r7, #16]
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3718      	adds	r7, #24
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}

0800f1d6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f1d6:	b480      	push	{r7}
 800f1d8:	b085      	sub	sp, #20
 800f1da:	af00      	add	r7, sp, #0
 800f1dc:	6078      	str	r0, [r7, #4]
 800f1de:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	881a      	ldrh	r2, [r3, #0]
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	781b      	ldrb	r3, [r3, #0]
 800f1ec:	b29b      	uxth	r3, r3
 800f1ee:	4413      	add	r3, r2
 800f1f0:	b29a      	uxth	r2, r3
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	781b      	ldrb	r3, [r3, #0]
 800f1fa:	461a      	mov	r2, r3
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	4413      	add	r3, r2
 800f200:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f202:	68fb      	ldr	r3, [r7, #12]
}
 800f204:	4618      	mov	r0, r3
 800f206:	3714      	adds	r7, #20
 800f208:	46bd      	mov	sp, r7
 800f20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20e:	4770      	bx	lr

0800f210 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f210:	b480      	push	{r7}
 800f212:	b087      	sub	sp, #28
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	781b      	ldrb	r3, [r3, #0]
 800f220:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	3301      	adds	r3, #1
 800f226:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f228:	697b      	ldr	r3, [r7, #20]
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f22e:	8a3b      	ldrh	r3, [r7, #16]
 800f230:	021b      	lsls	r3, r3, #8
 800f232:	b21a      	sxth	r2, r3
 800f234:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f238:	4313      	orrs	r3, r2
 800f23a:	b21b      	sxth	r3, r3
 800f23c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f23e:	89fb      	ldrh	r3, [r7, #14]
}
 800f240:	4618      	mov	r0, r3
 800f242:	371c      	adds	r7, #28
 800f244:	46bd      	mov	sp, r7
 800f246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24a:	4770      	bx	lr

0800f24c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b084      	sub	sp, #16
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f256:	2300      	movs	r3, #0
 800f258:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	781b      	ldrb	r3, [r3, #0]
 800f25e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f262:	2b40      	cmp	r3, #64	; 0x40
 800f264:	d005      	beq.n	800f272 <USBD_StdDevReq+0x26>
 800f266:	2b40      	cmp	r3, #64	; 0x40
 800f268:	d857      	bhi.n	800f31a <USBD_StdDevReq+0xce>
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d00f      	beq.n	800f28e <USBD_StdDevReq+0x42>
 800f26e:	2b20      	cmp	r3, #32
 800f270:	d153      	bne.n	800f31a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	32ae      	adds	r2, #174	; 0xae
 800f27c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f280:	689b      	ldr	r3, [r3, #8]
 800f282:	6839      	ldr	r1, [r7, #0]
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	4798      	blx	r3
 800f288:	4603      	mov	r3, r0
 800f28a:	73fb      	strb	r3, [r7, #15]
      break;
 800f28c:	e04a      	b.n	800f324 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	785b      	ldrb	r3, [r3, #1]
 800f292:	2b09      	cmp	r3, #9
 800f294:	d83b      	bhi.n	800f30e <USBD_StdDevReq+0xc2>
 800f296:	a201      	add	r2, pc, #4	; (adr r2, 800f29c <USBD_StdDevReq+0x50>)
 800f298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f29c:	0800f2f1 	.word	0x0800f2f1
 800f2a0:	0800f305 	.word	0x0800f305
 800f2a4:	0800f30f 	.word	0x0800f30f
 800f2a8:	0800f2fb 	.word	0x0800f2fb
 800f2ac:	0800f30f 	.word	0x0800f30f
 800f2b0:	0800f2cf 	.word	0x0800f2cf
 800f2b4:	0800f2c5 	.word	0x0800f2c5
 800f2b8:	0800f30f 	.word	0x0800f30f
 800f2bc:	0800f2e7 	.word	0x0800f2e7
 800f2c0:	0800f2d9 	.word	0x0800f2d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f2c4:	6839      	ldr	r1, [r7, #0]
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f000 fa3c 	bl	800f744 <USBD_GetDescriptor>
          break;
 800f2cc:	e024      	b.n	800f318 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f2ce:	6839      	ldr	r1, [r7, #0]
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f000 fbcb 	bl	800fa6c <USBD_SetAddress>
          break;
 800f2d6:	e01f      	b.n	800f318 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f2d8:	6839      	ldr	r1, [r7, #0]
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f000 fc0a 	bl	800faf4 <USBD_SetConfig>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	73fb      	strb	r3, [r7, #15]
          break;
 800f2e4:	e018      	b.n	800f318 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f2e6:	6839      	ldr	r1, [r7, #0]
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f000 fcad 	bl	800fc48 <USBD_GetConfig>
          break;
 800f2ee:	e013      	b.n	800f318 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f2f0:	6839      	ldr	r1, [r7, #0]
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f000 fcde 	bl	800fcb4 <USBD_GetStatus>
          break;
 800f2f8:	e00e      	b.n	800f318 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f2fa:	6839      	ldr	r1, [r7, #0]
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f000 fd0d 	bl	800fd1c <USBD_SetFeature>
          break;
 800f302:	e009      	b.n	800f318 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f304:	6839      	ldr	r1, [r7, #0]
 800f306:	6878      	ldr	r0, [r7, #4]
 800f308:	f000 fd31 	bl	800fd6e <USBD_ClrFeature>
          break;
 800f30c:	e004      	b.n	800f318 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f30e:	6839      	ldr	r1, [r7, #0]
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f000 fd88 	bl	800fe26 <USBD_CtlError>
          break;
 800f316:	bf00      	nop
      }
      break;
 800f318:	e004      	b.n	800f324 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f31a:	6839      	ldr	r1, [r7, #0]
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f000 fd82 	bl	800fe26 <USBD_CtlError>
      break;
 800f322:	bf00      	nop
  }

  return ret;
 800f324:	7bfb      	ldrb	r3, [r7, #15]
}
 800f326:	4618      	mov	r0, r3
 800f328:	3710      	adds	r7, #16
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}
 800f32e:	bf00      	nop

0800f330 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b084      	sub	sp, #16
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f33a:	2300      	movs	r3, #0
 800f33c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f346:	2b40      	cmp	r3, #64	; 0x40
 800f348:	d005      	beq.n	800f356 <USBD_StdItfReq+0x26>
 800f34a:	2b40      	cmp	r3, #64	; 0x40
 800f34c:	d852      	bhi.n	800f3f4 <USBD_StdItfReq+0xc4>
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d001      	beq.n	800f356 <USBD_StdItfReq+0x26>
 800f352:	2b20      	cmp	r3, #32
 800f354:	d14e      	bne.n	800f3f4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f35c:	b2db      	uxtb	r3, r3
 800f35e:	3b01      	subs	r3, #1
 800f360:	2b02      	cmp	r3, #2
 800f362:	d840      	bhi.n	800f3e6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	889b      	ldrh	r3, [r3, #4]
 800f368:	b2db      	uxtb	r3, r3
 800f36a:	2b01      	cmp	r3, #1
 800f36c:	d836      	bhi.n	800f3dc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	889b      	ldrh	r3, [r3, #4]
 800f372:	b2db      	uxtb	r3, r3
 800f374:	4619      	mov	r1, r3
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f7ff fed9 	bl	800f12e <USBD_CoreFindIF>
 800f37c:	4603      	mov	r3, r0
 800f37e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f380:	7bbb      	ldrb	r3, [r7, #14]
 800f382:	2bff      	cmp	r3, #255	; 0xff
 800f384:	d01d      	beq.n	800f3c2 <USBD_StdItfReq+0x92>
 800f386:	7bbb      	ldrb	r3, [r7, #14]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d11a      	bne.n	800f3c2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f38c:	7bba      	ldrb	r2, [r7, #14]
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	32ae      	adds	r2, #174	; 0xae
 800f392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f396:	689b      	ldr	r3, [r3, #8]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d00f      	beq.n	800f3bc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f39c:	7bba      	ldrb	r2, [r7, #14]
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f3a4:	7bba      	ldrb	r2, [r7, #14]
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	32ae      	adds	r2, #174	; 0xae
 800f3aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3ae:	689b      	ldr	r3, [r3, #8]
 800f3b0:	6839      	ldr	r1, [r7, #0]
 800f3b2:	6878      	ldr	r0, [r7, #4]
 800f3b4:	4798      	blx	r3
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f3ba:	e004      	b.n	800f3c6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f3bc:	2303      	movs	r3, #3
 800f3be:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f3c0:	e001      	b.n	800f3c6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f3c2:	2303      	movs	r3, #3
 800f3c4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	88db      	ldrh	r3, [r3, #6]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d110      	bne.n	800f3f0 <USBD_StdItfReq+0xc0>
 800f3ce:	7bfb      	ldrb	r3, [r7, #15]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d10d      	bne.n	800f3f0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f000 fdf1 	bl	800ffbc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f3da:	e009      	b.n	800f3f0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f3dc:	6839      	ldr	r1, [r7, #0]
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f000 fd21 	bl	800fe26 <USBD_CtlError>
          break;
 800f3e4:	e004      	b.n	800f3f0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f3e6:	6839      	ldr	r1, [r7, #0]
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f000 fd1c 	bl	800fe26 <USBD_CtlError>
          break;
 800f3ee:	e000      	b.n	800f3f2 <USBD_StdItfReq+0xc2>
          break;
 800f3f0:	bf00      	nop
      }
      break;
 800f3f2:	e004      	b.n	800f3fe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f3f4:	6839      	ldr	r1, [r7, #0]
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f000 fd15 	bl	800fe26 <USBD_CtlError>
      break;
 800f3fc:	bf00      	nop
  }

  return ret;
 800f3fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800f400:	4618      	mov	r0, r3
 800f402:	3710      	adds	r7, #16
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b084      	sub	sp, #16
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f412:	2300      	movs	r3, #0
 800f414:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	889b      	ldrh	r3, [r3, #4]
 800f41a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f424:	2b40      	cmp	r3, #64	; 0x40
 800f426:	d007      	beq.n	800f438 <USBD_StdEPReq+0x30>
 800f428:	2b40      	cmp	r3, #64	; 0x40
 800f42a:	f200 817f 	bhi.w	800f72c <USBD_StdEPReq+0x324>
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d02a      	beq.n	800f488 <USBD_StdEPReq+0x80>
 800f432:	2b20      	cmp	r3, #32
 800f434:	f040 817a 	bne.w	800f72c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f438:	7bbb      	ldrb	r3, [r7, #14]
 800f43a:	4619      	mov	r1, r3
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f7ff fe83 	bl	800f148 <USBD_CoreFindEP>
 800f442:	4603      	mov	r3, r0
 800f444:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f446:	7b7b      	ldrb	r3, [r7, #13]
 800f448:	2bff      	cmp	r3, #255	; 0xff
 800f44a:	f000 8174 	beq.w	800f736 <USBD_StdEPReq+0x32e>
 800f44e:	7b7b      	ldrb	r3, [r7, #13]
 800f450:	2b00      	cmp	r3, #0
 800f452:	f040 8170 	bne.w	800f736 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f456:	7b7a      	ldrb	r2, [r7, #13]
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f45e:	7b7a      	ldrb	r2, [r7, #13]
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	32ae      	adds	r2, #174	; 0xae
 800f464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f468:	689b      	ldr	r3, [r3, #8]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	f000 8163 	beq.w	800f736 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f470:	7b7a      	ldrb	r2, [r7, #13]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	32ae      	adds	r2, #174	; 0xae
 800f476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f47a:	689b      	ldr	r3, [r3, #8]
 800f47c:	6839      	ldr	r1, [r7, #0]
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	4798      	blx	r3
 800f482:	4603      	mov	r3, r0
 800f484:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f486:	e156      	b.n	800f736 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	785b      	ldrb	r3, [r3, #1]
 800f48c:	2b03      	cmp	r3, #3
 800f48e:	d008      	beq.n	800f4a2 <USBD_StdEPReq+0x9a>
 800f490:	2b03      	cmp	r3, #3
 800f492:	f300 8145 	bgt.w	800f720 <USBD_StdEPReq+0x318>
 800f496:	2b00      	cmp	r3, #0
 800f498:	f000 809b 	beq.w	800f5d2 <USBD_StdEPReq+0x1ca>
 800f49c:	2b01      	cmp	r3, #1
 800f49e:	d03c      	beq.n	800f51a <USBD_StdEPReq+0x112>
 800f4a0:	e13e      	b.n	800f720 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4a8:	b2db      	uxtb	r3, r3
 800f4aa:	2b02      	cmp	r3, #2
 800f4ac:	d002      	beq.n	800f4b4 <USBD_StdEPReq+0xac>
 800f4ae:	2b03      	cmp	r3, #3
 800f4b0:	d016      	beq.n	800f4e0 <USBD_StdEPReq+0xd8>
 800f4b2:	e02c      	b.n	800f50e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f4b4:	7bbb      	ldrb	r3, [r7, #14]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d00d      	beq.n	800f4d6 <USBD_StdEPReq+0xce>
 800f4ba:	7bbb      	ldrb	r3, [r7, #14]
 800f4bc:	2b80      	cmp	r3, #128	; 0x80
 800f4be:	d00a      	beq.n	800f4d6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f4c0:	7bbb      	ldrb	r3, [r7, #14]
 800f4c2:	4619      	mov	r1, r3
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f001 fa89 	bl	80109dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f4ca:	2180      	movs	r1, #128	; 0x80
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f001 fa85 	bl	80109dc <USBD_LL_StallEP>
 800f4d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f4d4:	e020      	b.n	800f518 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f4d6:	6839      	ldr	r1, [r7, #0]
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f000 fca4 	bl	800fe26 <USBD_CtlError>
              break;
 800f4de:	e01b      	b.n	800f518 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	885b      	ldrh	r3, [r3, #2]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d10e      	bne.n	800f506 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f4e8:	7bbb      	ldrb	r3, [r7, #14]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d00b      	beq.n	800f506 <USBD_StdEPReq+0xfe>
 800f4ee:	7bbb      	ldrb	r3, [r7, #14]
 800f4f0:	2b80      	cmp	r3, #128	; 0x80
 800f4f2:	d008      	beq.n	800f506 <USBD_StdEPReq+0xfe>
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	88db      	ldrh	r3, [r3, #6]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d104      	bne.n	800f506 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f4fc:	7bbb      	ldrb	r3, [r7, #14]
 800f4fe:	4619      	mov	r1, r3
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f001 fa6b 	bl	80109dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f000 fd58 	bl	800ffbc <USBD_CtlSendStatus>

              break;
 800f50c:	e004      	b.n	800f518 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f50e:	6839      	ldr	r1, [r7, #0]
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f000 fc88 	bl	800fe26 <USBD_CtlError>
              break;
 800f516:	bf00      	nop
          }
          break;
 800f518:	e107      	b.n	800f72a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f520:	b2db      	uxtb	r3, r3
 800f522:	2b02      	cmp	r3, #2
 800f524:	d002      	beq.n	800f52c <USBD_StdEPReq+0x124>
 800f526:	2b03      	cmp	r3, #3
 800f528:	d016      	beq.n	800f558 <USBD_StdEPReq+0x150>
 800f52a:	e04b      	b.n	800f5c4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f52c:	7bbb      	ldrb	r3, [r7, #14]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d00d      	beq.n	800f54e <USBD_StdEPReq+0x146>
 800f532:	7bbb      	ldrb	r3, [r7, #14]
 800f534:	2b80      	cmp	r3, #128	; 0x80
 800f536:	d00a      	beq.n	800f54e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f538:	7bbb      	ldrb	r3, [r7, #14]
 800f53a:	4619      	mov	r1, r3
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f001 fa4d 	bl	80109dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f542:	2180      	movs	r1, #128	; 0x80
 800f544:	6878      	ldr	r0, [r7, #4]
 800f546:	f001 fa49 	bl	80109dc <USBD_LL_StallEP>
 800f54a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f54c:	e040      	b.n	800f5d0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f54e:	6839      	ldr	r1, [r7, #0]
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f000 fc68 	bl	800fe26 <USBD_CtlError>
              break;
 800f556:	e03b      	b.n	800f5d0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	885b      	ldrh	r3, [r3, #2]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d136      	bne.n	800f5ce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f560:	7bbb      	ldrb	r3, [r7, #14]
 800f562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f566:	2b00      	cmp	r3, #0
 800f568:	d004      	beq.n	800f574 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f56a:	7bbb      	ldrb	r3, [r7, #14]
 800f56c:	4619      	mov	r1, r3
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f001 fa6a 	bl	8010a48 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f574:	6878      	ldr	r0, [r7, #4]
 800f576:	f000 fd21 	bl	800ffbc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f57a:	7bbb      	ldrb	r3, [r7, #14]
 800f57c:	4619      	mov	r1, r3
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f7ff fde2 	bl	800f148 <USBD_CoreFindEP>
 800f584:	4603      	mov	r3, r0
 800f586:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f588:	7b7b      	ldrb	r3, [r7, #13]
 800f58a:	2bff      	cmp	r3, #255	; 0xff
 800f58c:	d01f      	beq.n	800f5ce <USBD_StdEPReq+0x1c6>
 800f58e:	7b7b      	ldrb	r3, [r7, #13]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d11c      	bne.n	800f5ce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f594:	7b7a      	ldrb	r2, [r7, #13]
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f59c:	7b7a      	ldrb	r2, [r7, #13]
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	32ae      	adds	r2, #174	; 0xae
 800f5a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5a6:	689b      	ldr	r3, [r3, #8]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d010      	beq.n	800f5ce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f5ac:	7b7a      	ldrb	r2, [r7, #13]
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	32ae      	adds	r2, #174	; 0xae
 800f5b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5b6:	689b      	ldr	r3, [r3, #8]
 800f5b8:	6839      	ldr	r1, [r7, #0]
 800f5ba:	6878      	ldr	r0, [r7, #4]
 800f5bc:	4798      	blx	r3
 800f5be:	4603      	mov	r3, r0
 800f5c0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f5c2:	e004      	b.n	800f5ce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f5c4:	6839      	ldr	r1, [r7, #0]
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f000 fc2d 	bl	800fe26 <USBD_CtlError>
              break;
 800f5cc:	e000      	b.n	800f5d0 <USBD_StdEPReq+0x1c8>
              break;
 800f5ce:	bf00      	nop
          }
          break;
 800f5d0:	e0ab      	b.n	800f72a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5d8:	b2db      	uxtb	r3, r3
 800f5da:	2b02      	cmp	r3, #2
 800f5dc:	d002      	beq.n	800f5e4 <USBD_StdEPReq+0x1dc>
 800f5de:	2b03      	cmp	r3, #3
 800f5e0:	d032      	beq.n	800f648 <USBD_StdEPReq+0x240>
 800f5e2:	e097      	b.n	800f714 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f5e4:	7bbb      	ldrb	r3, [r7, #14]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d007      	beq.n	800f5fa <USBD_StdEPReq+0x1f2>
 800f5ea:	7bbb      	ldrb	r3, [r7, #14]
 800f5ec:	2b80      	cmp	r3, #128	; 0x80
 800f5ee:	d004      	beq.n	800f5fa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f5f0:	6839      	ldr	r1, [r7, #0]
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f000 fc17 	bl	800fe26 <USBD_CtlError>
                break;
 800f5f8:	e091      	b.n	800f71e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f5fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	da0b      	bge.n	800f61a <USBD_StdEPReq+0x212>
 800f602:	7bbb      	ldrb	r3, [r7, #14]
 800f604:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f608:	4613      	mov	r3, r2
 800f60a:	009b      	lsls	r3, r3, #2
 800f60c:	4413      	add	r3, r2
 800f60e:	009b      	lsls	r3, r3, #2
 800f610:	3310      	adds	r3, #16
 800f612:	687a      	ldr	r2, [r7, #4]
 800f614:	4413      	add	r3, r2
 800f616:	3304      	adds	r3, #4
 800f618:	e00b      	b.n	800f632 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f61a:	7bbb      	ldrb	r3, [r7, #14]
 800f61c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f620:	4613      	mov	r3, r2
 800f622:	009b      	lsls	r3, r3, #2
 800f624:	4413      	add	r3, r2
 800f626:	009b      	lsls	r3, r3, #2
 800f628:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f62c:	687a      	ldr	r2, [r7, #4]
 800f62e:	4413      	add	r3, r2
 800f630:	3304      	adds	r3, #4
 800f632:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	2200      	movs	r2, #0
 800f638:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	2202      	movs	r2, #2
 800f63e:	4619      	mov	r1, r3
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f000 fc61 	bl	800ff08 <USBD_CtlSendData>
              break;
 800f646:	e06a      	b.n	800f71e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f648:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	da11      	bge.n	800f674 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f650:	7bbb      	ldrb	r3, [r7, #14]
 800f652:	f003 020f 	and.w	r2, r3, #15
 800f656:	6879      	ldr	r1, [r7, #4]
 800f658:	4613      	mov	r3, r2
 800f65a:	009b      	lsls	r3, r3, #2
 800f65c:	4413      	add	r3, r2
 800f65e:	009b      	lsls	r3, r3, #2
 800f660:	440b      	add	r3, r1
 800f662:	3324      	adds	r3, #36	; 0x24
 800f664:	881b      	ldrh	r3, [r3, #0]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d117      	bne.n	800f69a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f66a:	6839      	ldr	r1, [r7, #0]
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f000 fbda 	bl	800fe26 <USBD_CtlError>
                  break;
 800f672:	e054      	b.n	800f71e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f674:	7bbb      	ldrb	r3, [r7, #14]
 800f676:	f003 020f 	and.w	r2, r3, #15
 800f67a:	6879      	ldr	r1, [r7, #4]
 800f67c:	4613      	mov	r3, r2
 800f67e:	009b      	lsls	r3, r3, #2
 800f680:	4413      	add	r3, r2
 800f682:	009b      	lsls	r3, r3, #2
 800f684:	440b      	add	r3, r1
 800f686:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f68a:	881b      	ldrh	r3, [r3, #0]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d104      	bne.n	800f69a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f690:	6839      	ldr	r1, [r7, #0]
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	f000 fbc7 	bl	800fe26 <USBD_CtlError>
                  break;
 800f698:	e041      	b.n	800f71e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f69a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	da0b      	bge.n	800f6ba <USBD_StdEPReq+0x2b2>
 800f6a2:	7bbb      	ldrb	r3, [r7, #14]
 800f6a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f6a8:	4613      	mov	r3, r2
 800f6aa:	009b      	lsls	r3, r3, #2
 800f6ac:	4413      	add	r3, r2
 800f6ae:	009b      	lsls	r3, r3, #2
 800f6b0:	3310      	adds	r3, #16
 800f6b2:	687a      	ldr	r2, [r7, #4]
 800f6b4:	4413      	add	r3, r2
 800f6b6:	3304      	adds	r3, #4
 800f6b8:	e00b      	b.n	800f6d2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f6ba:	7bbb      	ldrb	r3, [r7, #14]
 800f6bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f6c0:	4613      	mov	r3, r2
 800f6c2:	009b      	lsls	r3, r3, #2
 800f6c4:	4413      	add	r3, r2
 800f6c6:	009b      	lsls	r3, r3, #2
 800f6c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f6cc:	687a      	ldr	r2, [r7, #4]
 800f6ce:	4413      	add	r3, r2
 800f6d0:	3304      	adds	r3, #4
 800f6d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f6d4:	7bbb      	ldrb	r3, [r7, #14]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d002      	beq.n	800f6e0 <USBD_StdEPReq+0x2d8>
 800f6da:	7bbb      	ldrb	r3, [r7, #14]
 800f6dc:	2b80      	cmp	r3, #128	; 0x80
 800f6de:	d103      	bne.n	800f6e8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	601a      	str	r2, [r3, #0]
 800f6e6:	e00e      	b.n	800f706 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f6e8:	7bbb      	ldrb	r3, [r7, #14]
 800f6ea:	4619      	mov	r1, r3
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f001 f9e1 	bl	8010ab4 <USBD_LL_IsStallEP>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d003      	beq.n	800f700 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	2201      	movs	r2, #1
 800f6fc:	601a      	str	r2, [r3, #0]
 800f6fe:	e002      	b.n	800f706 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	2200      	movs	r2, #0
 800f704:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	2202      	movs	r2, #2
 800f70a:	4619      	mov	r1, r3
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f000 fbfb 	bl	800ff08 <USBD_CtlSendData>
              break;
 800f712:	e004      	b.n	800f71e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f714:	6839      	ldr	r1, [r7, #0]
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f000 fb85 	bl	800fe26 <USBD_CtlError>
              break;
 800f71c:	bf00      	nop
          }
          break;
 800f71e:	e004      	b.n	800f72a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f720:	6839      	ldr	r1, [r7, #0]
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f000 fb7f 	bl	800fe26 <USBD_CtlError>
          break;
 800f728:	bf00      	nop
      }
      break;
 800f72a:	e005      	b.n	800f738 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f72c:	6839      	ldr	r1, [r7, #0]
 800f72e:	6878      	ldr	r0, [r7, #4]
 800f730:	f000 fb79 	bl	800fe26 <USBD_CtlError>
      break;
 800f734:	e000      	b.n	800f738 <USBD_StdEPReq+0x330>
      break;
 800f736:	bf00      	nop
  }

  return ret;
 800f738:	7bfb      	ldrb	r3, [r7, #15]
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	3710      	adds	r7, #16
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}
	...

0800f744 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b084      	sub	sp, #16
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
 800f74c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f74e:	2300      	movs	r3, #0
 800f750:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f752:	2300      	movs	r3, #0
 800f754:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f756:	2300      	movs	r3, #0
 800f758:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	885b      	ldrh	r3, [r3, #2]
 800f75e:	0a1b      	lsrs	r3, r3, #8
 800f760:	b29b      	uxth	r3, r3
 800f762:	3b01      	subs	r3, #1
 800f764:	2b0e      	cmp	r3, #14
 800f766:	f200 8152 	bhi.w	800fa0e <USBD_GetDescriptor+0x2ca>
 800f76a:	a201      	add	r2, pc, #4	; (adr r2, 800f770 <USBD_GetDescriptor+0x2c>)
 800f76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f770:	0800f7e1 	.word	0x0800f7e1
 800f774:	0800f7f9 	.word	0x0800f7f9
 800f778:	0800f839 	.word	0x0800f839
 800f77c:	0800fa0f 	.word	0x0800fa0f
 800f780:	0800fa0f 	.word	0x0800fa0f
 800f784:	0800f9af 	.word	0x0800f9af
 800f788:	0800f9db 	.word	0x0800f9db
 800f78c:	0800fa0f 	.word	0x0800fa0f
 800f790:	0800fa0f 	.word	0x0800fa0f
 800f794:	0800fa0f 	.word	0x0800fa0f
 800f798:	0800fa0f 	.word	0x0800fa0f
 800f79c:	0800fa0f 	.word	0x0800fa0f
 800f7a0:	0800fa0f 	.word	0x0800fa0f
 800f7a4:	0800fa0f 	.word	0x0800fa0f
 800f7a8:	0800f7ad 	.word	0x0800f7ad
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7b2:	69db      	ldr	r3, [r3, #28]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d00b      	beq.n	800f7d0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7be:	69db      	ldr	r3, [r3, #28]
 800f7c0:	687a      	ldr	r2, [r7, #4]
 800f7c2:	7c12      	ldrb	r2, [r2, #16]
 800f7c4:	f107 0108 	add.w	r1, r7, #8
 800f7c8:	4610      	mov	r0, r2
 800f7ca:	4798      	blx	r3
 800f7cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f7ce:	e126      	b.n	800fa1e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f7d0:	6839      	ldr	r1, [r7, #0]
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f000 fb27 	bl	800fe26 <USBD_CtlError>
        err++;
 800f7d8:	7afb      	ldrb	r3, [r7, #11]
 800f7da:	3301      	adds	r3, #1
 800f7dc:	72fb      	strb	r3, [r7, #11]
      break;
 800f7de:	e11e      	b.n	800fa1e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	687a      	ldr	r2, [r7, #4]
 800f7ea:	7c12      	ldrb	r2, [r2, #16]
 800f7ec:	f107 0108 	add.w	r1, r7, #8
 800f7f0:	4610      	mov	r0, r2
 800f7f2:	4798      	blx	r3
 800f7f4:	60f8      	str	r0, [r7, #12]
      break;
 800f7f6:	e112      	b.n	800fa1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	7c1b      	ldrb	r3, [r3, #16]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d10d      	bne.n	800f81c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f808:	f107 0208 	add.w	r2, r7, #8
 800f80c:	4610      	mov	r0, r2
 800f80e:	4798      	blx	r3
 800f810:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	3301      	adds	r3, #1
 800f816:	2202      	movs	r2, #2
 800f818:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f81a:	e100      	b.n	800fa1e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f824:	f107 0208 	add.w	r2, r7, #8
 800f828:	4610      	mov	r0, r2
 800f82a:	4798      	blx	r3
 800f82c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	3301      	adds	r3, #1
 800f832:	2202      	movs	r2, #2
 800f834:	701a      	strb	r2, [r3, #0]
      break;
 800f836:	e0f2      	b.n	800fa1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	885b      	ldrh	r3, [r3, #2]
 800f83c:	b2db      	uxtb	r3, r3
 800f83e:	2b05      	cmp	r3, #5
 800f840:	f200 80ac 	bhi.w	800f99c <USBD_GetDescriptor+0x258>
 800f844:	a201      	add	r2, pc, #4	; (adr r2, 800f84c <USBD_GetDescriptor+0x108>)
 800f846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f84a:	bf00      	nop
 800f84c:	0800f865 	.word	0x0800f865
 800f850:	0800f899 	.word	0x0800f899
 800f854:	0800f8cd 	.word	0x0800f8cd
 800f858:	0800f901 	.word	0x0800f901
 800f85c:	0800f935 	.word	0x0800f935
 800f860:	0800f969 	.word	0x0800f969
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f86a:	685b      	ldr	r3, [r3, #4]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d00b      	beq.n	800f888 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f876:	685b      	ldr	r3, [r3, #4]
 800f878:	687a      	ldr	r2, [r7, #4]
 800f87a:	7c12      	ldrb	r2, [r2, #16]
 800f87c:	f107 0108 	add.w	r1, r7, #8
 800f880:	4610      	mov	r0, r2
 800f882:	4798      	blx	r3
 800f884:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f886:	e091      	b.n	800f9ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f888:	6839      	ldr	r1, [r7, #0]
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f000 facb 	bl	800fe26 <USBD_CtlError>
            err++;
 800f890:	7afb      	ldrb	r3, [r7, #11]
 800f892:	3301      	adds	r3, #1
 800f894:	72fb      	strb	r3, [r7, #11]
          break;
 800f896:	e089      	b.n	800f9ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f89e:	689b      	ldr	r3, [r3, #8]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d00b      	beq.n	800f8bc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8aa:	689b      	ldr	r3, [r3, #8]
 800f8ac:	687a      	ldr	r2, [r7, #4]
 800f8ae:	7c12      	ldrb	r2, [r2, #16]
 800f8b0:	f107 0108 	add.w	r1, r7, #8
 800f8b4:	4610      	mov	r0, r2
 800f8b6:	4798      	blx	r3
 800f8b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f8ba:	e077      	b.n	800f9ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f8bc:	6839      	ldr	r1, [r7, #0]
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f000 fab1 	bl	800fe26 <USBD_CtlError>
            err++;
 800f8c4:	7afb      	ldrb	r3, [r7, #11]
 800f8c6:	3301      	adds	r3, #1
 800f8c8:	72fb      	strb	r3, [r7, #11]
          break;
 800f8ca:	e06f      	b.n	800f9ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8d2:	68db      	ldr	r3, [r3, #12]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d00b      	beq.n	800f8f0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8de:	68db      	ldr	r3, [r3, #12]
 800f8e0:	687a      	ldr	r2, [r7, #4]
 800f8e2:	7c12      	ldrb	r2, [r2, #16]
 800f8e4:	f107 0108 	add.w	r1, r7, #8
 800f8e8:	4610      	mov	r0, r2
 800f8ea:	4798      	blx	r3
 800f8ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f8ee:	e05d      	b.n	800f9ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f8f0:	6839      	ldr	r1, [r7, #0]
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f000 fa97 	bl	800fe26 <USBD_CtlError>
            err++;
 800f8f8:	7afb      	ldrb	r3, [r7, #11]
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	72fb      	strb	r3, [r7, #11]
          break;
 800f8fe:	e055      	b.n	800f9ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f906:	691b      	ldr	r3, [r3, #16]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d00b      	beq.n	800f924 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f912:	691b      	ldr	r3, [r3, #16]
 800f914:	687a      	ldr	r2, [r7, #4]
 800f916:	7c12      	ldrb	r2, [r2, #16]
 800f918:	f107 0108 	add.w	r1, r7, #8
 800f91c:	4610      	mov	r0, r2
 800f91e:	4798      	blx	r3
 800f920:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f922:	e043      	b.n	800f9ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f924:	6839      	ldr	r1, [r7, #0]
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f000 fa7d 	bl	800fe26 <USBD_CtlError>
            err++;
 800f92c:	7afb      	ldrb	r3, [r7, #11]
 800f92e:	3301      	adds	r3, #1
 800f930:	72fb      	strb	r3, [r7, #11]
          break;
 800f932:	e03b      	b.n	800f9ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f93a:	695b      	ldr	r3, [r3, #20]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d00b      	beq.n	800f958 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f946:	695b      	ldr	r3, [r3, #20]
 800f948:	687a      	ldr	r2, [r7, #4]
 800f94a:	7c12      	ldrb	r2, [r2, #16]
 800f94c:	f107 0108 	add.w	r1, r7, #8
 800f950:	4610      	mov	r0, r2
 800f952:	4798      	blx	r3
 800f954:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f956:	e029      	b.n	800f9ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f958:	6839      	ldr	r1, [r7, #0]
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f000 fa63 	bl	800fe26 <USBD_CtlError>
            err++;
 800f960:	7afb      	ldrb	r3, [r7, #11]
 800f962:	3301      	adds	r3, #1
 800f964:	72fb      	strb	r3, [r7, #11]
          break;
 800f966:	e021      	b.n	800f9ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f96e:	699b      	ldr	r3, [r3, #24]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d00b      	beq.n	800f98c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f97a:	699b      	ldr	r3, [r3, #24]
 800f97c:	687a      	ldr	r2, [r7, #4]
 800f97e:	7c12      	ldrb	r2, [r2, #16]
 800f980:	f107 0108 	add.w	r1, r7, #8
 800f984:	4610      	mov	r0, r2
 800f986:	4798      	blx	r3
 800f988:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f98a:	e00f      	b.n	800f9ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f98c:	6839      	ldr	r1, [r7, #0]
 800f98e:	6878      	ldr	r0, [r7, #4]
 800f990:	f000 fa49 	bl	800fe26 <USBD_CtlError>
            err++;
 800f994:	7afb      	ldrb	r3, [r7, #11]
 800f996:	3301      	adds	r3, #1
 800f998:	72fb      	strb	r3, [r7, #11]
          break;
 800f99a:	e007      	b.n	800f9ac <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f99c:	6839      	ldr	r1, [r7, #0]
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f000 fa41 	bl	800fe26 <USBD_CtlError>
          err++;
 800f9a4:	7afb      	ldrb	r3, [r7, #11]
 800f9a6:	3301      	adds	r3, #1
 800f9a8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f9aa:	bf00      	nop
      }
      break;
 800f9ac:	e037      	b.n	800fa1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	7c1b      	ldrb	r3, [r3, #16]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d109      	bne.n	800f9ca <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9be:	f107 0208 	add.w	r2, r7, #8
 800f9c2:	4610      	mov	r0, r2
 800f9c4:	4798      	blx	r3
 800f9c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f9c8:	e029      	b.n	800fa1e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f9ca:	6839      	ldr	r1, [r7, #0]
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f000 fa2a 	bl	800fe26 <USBD_CtlError>
        err++;
 800f9d2:	7afb      	ldrb	r3, [r7, #11]
 800f9d4:	3301      	adds	r3, #1
 800f9d6:	72fb      	strb	r3, [r7, #11]
      break;
 800f9d8:	e021      	b.n	800fa1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	7c1b      	ldrb	r3, [r3, #16]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d10d      	bne.n	800f9fe <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9ea:	f107 0208 	add.w	r2, r7, #8
 800f9ee:	4610      	mov	r0, r2
 800f9f0:	4798      	blx	r3
 800f9f2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	3301      	adds	r3, #1
 800f9f8:	2207      	movs	r2, #7
 800f9fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f9fc:	e00f      	b.n	800fa1e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f9fe:	6839      	ldr	r1, [r7, #0]
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f000 fa10 	bl	800fe26 <USBD_CtlError>
        err++;
 800fa06:	7afb      	ldrb	r3, [r7, #11]
 800fa08:	3301      	adds	r3, #1
 800fa0a:	72fb      	strb	r3, [r7, #11]
      break;
 800fa0c:	e007      	b.n	800fa1e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800fa0e:	6839      	ldr	r1, [r7, #0]
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f000 fa08 	bl	800fe26 <USBD_CtlError>
      err++;
 800fa16:	7afb      	ldrb	r3, [r7, #11]
 800fa18:	3301      	adds	r3, #1
 800fa1a:	72fb      	strb	r3, [r7, #11]
      break;
 800fa1c:	bf00      	nop
  }

  if (err != 0U)
 800fa1e:	7afb      	ldrb	r3, [r7, #11]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d11e      	bne.n	800fa62 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	88db      	ldrh	r3, [r3, #6]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d016      	beq.n	800fa5a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800fa2c:	893b      	ldrh	r3, [r7, #8]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d00e      	beq.n	800fa50 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	88da      	ldrh	r2, [r3, #6]
 800fa36:	893b      	ldrh	r3, [r7, #8]
 800fa38:	4293      	cmp	r3, r2
 800fa3a:	bf28      	it	cs
 800fa3c:	4613      	movcs	r3, r2
 800fa3e:	b29b      	uxth	r3, r3
 800fa40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fa42:	893b      	ldrh	r3, [r7, #8]
 800fa44:	461a      	mov	r2, r3
 800fa46:	68f9      	ldr	r1, [r7, #12]
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f000 fa5d 	bl	800ff08 <USBD_CtlSendData>
 800fa4e:	e009      	b.n	800fa64 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fa50:	6839      	ldr	r1, [r7, #0]
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f000 f9e7 	bl	800fe26 <USBD_CtlError>
 800fa58:	e004      	b.n	800fa64 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fa5a:	6878      	ldr	r0, [r7, #4]
 800fa5c:	f000 faae 	bl	800ffbc <USBD_CtlSendStatus>
 800fa60:	e000      	b.n	800fa64 <USBD_GetDescriptor+0x320>
    return;
 800fa62:	bf00      	nop
  }
}
 800fa64:	3710      	adds	r7, #16
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}
 800fa6a:	bf00      	nop

0800fa6c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b084      	sub	sp, #16
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
 800fa74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	889b      	ldrh	r3, [r3, #4]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d131      	bne.n	800fae2 <USBD_SetAddress+0x76>
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	88db      	ldrh	r3, [r3, #6]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d12d      	bne.n	800fae2 <USBD_SetAddress+0x76>
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	885b      	ldrh	r3, [r3, #2]
 800fa8a:	2b7f      	cmp	r3, #127	; 0x7f
 800fa8c:	d829      	bhi.n	800fae2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	885b      	ldrh	r3, [r3, #2]
 800fa92:	b2db      	uxtb	r3, r3
 800fa94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800faa0:	b2db      	uxtb	r3, r3
 800faa2:	2b03      	cmp	r3, #3
 800faa4:	d104      	bne.n	800fab0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800faa6:	6839      	ldr	r1, [r7, #0]
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f000 f9bc 	bl	800fe26 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800faae:	e01d      	b.n	800faec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	7bfa      	ldrb	r2, [r7, #15]
 800fab4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fab8:	7bfb      	ldrb	r3, [r7, #15]
 800faba:	4619      	mov	r1, r3
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f001 f825 	bl	8010b0c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	f000 fa7a 	bl	800ffbc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fac8:	7bfb      	ldrb	r3, [r7, #15]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d004      	beq.n	800fad8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2202      	movs	r2, #2
 800fad2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fad6:	e009      	b.n	800faec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2201      	movs	r2, #1
 800fadc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fae0:	e004      	b.n	800faec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fae2:	6839      	ldr	r1, [r7, #0]
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f000 f99e 	bl	800fe26 <USBD_CtlError>
  }
}
 800faea:	bf00      	nop
 800faec:	bf00      	nop
 800faee:	3710      	adds	r7, #16
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b084      	sub	sp, #16
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
 800fafc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fafe:	2300      	movs	r3, #0
 800fb00:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	885b      	ldrh	r3, [r3, #2]
 800fb06:	b2da      	uxtb	r2, r3
 800fb08:	4b4e      	ldr	r3, [pc, #312]	; (800fc44 <USBD_SetConfig+0x150>)
 800fb0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fb0c:	4b4d      	ldr	r3, [pc, #308]	; (800fc44 <USBD_SetConfig+0x150>)
 800fb0e:	781b      	ldrb	r3, [r3, #0]
 800fb10:	2b01      	cmp	r3, #1
 800fb12:	d905      	bls.n	800fb20 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fb14:	6839      	ldr	r1, [r7, #0]
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f000 f985 	bl	800fe26 <USBD_CtlError>
    return USBD_FAIL;
 800fb1c:	2303      	movs	r3, #3
 800fb1e:	e08c      	b.n	800fc3a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb26:	b2db      	uxtb	r3, r3
 800fb28:	2b02      	cmp	r3, #2
 800fb2a:	d002      	beq.n	800fb32 <USBD_SetConfig+0x3e>
 800fb2c:	2b03      	cmp	r3, #3
 800fb2e:	d029      	beq.n	800fb84 <USBD_SetConfig+0x90>
 800fb30:	e075      	b.n	800fc1e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fb32:	4b44      	ldr	r3, [pc, #272]	; (800fc44 <USBD_SetConfig+0x150>)
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d020      	beq.n	800fb7c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800fb3a:	4b42      	ldr	r3, [pc, #264]	; (800fc44 <USBD_SetConfig+0x150>)
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	461a      	mov	r2, r3
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fb44:	4b3f      	ldr	r3, [pc, #252]	; (800fc44 <USBD_SetConfig+0x150>)
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	4619      	mov	r1, r3
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f7fe ffb7 	bl	800eabe <USBD_SetClassConfig>
 800fb50:	4603      	mov	r3, r0
 800fb52:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fb54:	7bfb      	ldrb	r3, [r7, #15]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d008      	beq.n	800fb6c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800fb5a:	6839      	ldr	r1, [r7, #0]
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f000 f962 	bl	800fe26 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2202      	movs	r2, #2
 800fb66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fb6a:	e065      	b.n	800fc38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f000 fa25 	bl	800ffbc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2203      	movs	r2, #3
 800fb76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fb7a:	e05d      	b.n	800fc38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f000 fa1d 	bl	800ffbc <USBD_CtlSendStatus>
      break;
 800fb82:	e059      	b.n	800fc38 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fb84:	4b2f      	ldr	r3, [pc, #188]	; (800fc44 <USBD_SetConfig+0x150>)
 800fb86:	781b      	ldrb	r3, [r3, #0]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d112      	bne.n	800fbb2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2202      	movs	r2, #2
 800fb90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800fb94:	4b2b      	ldr	r3, [pc, #172]	; (800fc44 <USBD_SetConfig+0x150>)
 800fb96:	781b      	ldrb	r3, [r3, #0]
 800fb98:	461a      	mov	r2, r3
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fb9e:	4b29      	ldr	r3, [pc, #164]	; (800fc44 <USBD_SetConfig+0x150>)
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	4619      	mov	r1, r3
 800fba4:	6878      	ldr	r0, [r7, #4]
 800fba6:	f7fe ffa6 	bl	800eaf6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fbaa:	6878      	ldr	r0, [r7, #4]
 800fbac:	f000 fa06 	bl	800ffbc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fbb0:	e042      	b.n	800fc38 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800fbb2:	4b24      	ldr	r3, [pc, #144]	; (800fc44 <USBD_SetConfig+0x150>)
 800fbb4:	781b      	ldrb	r3, [r3, #0]
 800fbb6:	461a      	mov	r2, r3
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	685b      	ldr	r3, [r3, #4]
 800fbbc:	429a      	cmp	r2, r3
 800fbbe:	d02a      	beq.n	800fc16 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	685b      	ldr	r3, [r3, #4]
 800fbc4:	b2db      	uxtb	r3, r3
 800fbc6:	4619      	mov	r1, r3
 800fbc8:	6878      	ldr	r0, [r7, #4]
 800fbca:	f7fe ff94 	bl	800eaf6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fbce:	4b1d      	ldr	r3, [pc, #116]	; (800fc44 <USBD_SetConfig+0x150>)
 800fbd0:	781b      	ldrb	r3, [r3, #0]
 800fbd2:	461a      	mov	r2, r3
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fbd8:	4b1a      	ldr	r3, [pc, #104]	; (800fc44 <USBD_SetConfig+0x150>)
 800fbda:	781b      	ldrb	r3, [r3, #0]
 800fbdc:	4619      	mov	r1, r3
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f7fe ff6d 	bl	800eabe <USBD_SetClassConfig>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fbe8:	7bfb      	ldrb	r3, [r7, #15]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d00f      	beq.n	800fc0e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fbee:	6839      	ldr	r1, [r7, #0]
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f000 f918 	bl	800fe26 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	685b      	ldr	r3, [r3, #4]
 800fbfa:	b2db      	uxtb	r3, r3
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f7fe ff79 	bl	800eaf6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2202      	movs	r2, #2
 800fc08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fc0c:	e014      	b.n	800fc38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	f000 f9d4 	bl	800ffbc <USBD_CtlSendStatus>
      break;
 800fc14:	e010      	b.n	800fc38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fc16:	6878      	ldr	r0, [r7, #4]
 800fc18:	f000 f9d0 	bl	800ffbc <USBD_CtlSendStatus>
      break;
 800fc1c:	e00c      	b.n	800fc38 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fc1e:	6839      	ldr	r1, [r7, #0]
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	f000 f900 	bl	800fe26 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fc26:	4b07      	ldr	r3, [pc, #28]	; (800fc44 <USBD_SetConfig+0x150>)
 800fc28:	781b      	ldrb	r3, [r3, #0]
 800fc2a:	4619      	mov	r1, r3
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f7fe ff62 	bl	800eaf6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fc32:	2303      	movs	r3, #3
 800fc34:	73fb      	strb	r3, [r7, #15]
      break;
 800fc36:	bf00      	nop
  }

  return ret;
 800fc38:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3710      	adds	r7, #16
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
 800fc42:	bf00      	nop
 800fc44:	2000449c 	.word	0x2000449c

0800fc48 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b082      	sub	sp, #8
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	88db      	ldrh	r3, [r3, #6]
 800fc56:	2b01      	cmp	r3, #1
 800fc58:	d004      	beq.n	800fc64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fc5a:	6839      	ldr	r1, [r7, #0]
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f000 f8e2 	bl	800fe26 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fc62:	e023      	b.n	800fcac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc6a:	b2db      	uxtb	r3, r3
 800fc6c:	2b02      	cmp	r3, #2
 800fc6e:	dc02      	bgt.n	800fc76 <USBD_GetConfig+0x2e>
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	dc03      	bgt.n	800fc7c <USBD_GetConfig+0x34>
 800fc74:	e015      	b.n	800fca2 <USBD_GetConfig+0x5a>
 800fc76:	2b03      	cmp	r3, #3
 800fc78:	d00b      	beq.n	800fc92 <USBD_GetConfig+0x4a>
 800fc7a:	e012      	b.n	800fca2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2200      	movs	r2, #0
 800fc80:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	3308      	adds	r3, #8
 800fc86:	2201      	movs	r2, #1
 800fc88:	4619      	mov	r1, r3
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f000 f93c 	bl	800ff08 <USBD_CtlSendData>
        break;
 800fc90:	e00c      	b.n	800fcac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	3304      	adds	r3, #4
 800fc96:	2201      	movs	r2, #1
 800fc98:	4619      	mov	r1, r3
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f000 f934 	bl	800ff08 <USBD_CtlSendData>
        break;
 800fca0:	e004      	b.n	800fcac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fca2:	6839      	ldr	r1, [r7, #0]
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f000 f8be 	bl	800fe26 <USBD_CtlError>
        break;
 800fcaa:	bf00      	nop
}
 800fcac:	bf00      	nop
 800fcae:	3708      	adds	r7, #8
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}

0800fcb4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b082      	sub	sp, #8
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
 800fcbc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fcc4:	b2db      	uxtb	r3, r3
 800fcc6:	3b01      	subs	r3, #1
 800fcc8:	2b02      	cmp	r3, #2
 800fcca:	d81e      	bhi.n	800fd0a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	88db      	ldrh	r3, [r3, #6]
 800fcd0:	2b02      	cmp	r3, #2
 800fcd2:	d004      	beq.n	800fcde <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fcd4:	6839      	ldr	r1, [r7, #0]
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f000 f8a5 	bl	800fe26 <USBD_CtlError>
        break;
 800fcdc:	e01a      	b.n	800fd14 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2201      	movs	r2, #1
 800fce2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d005      	beq.n	800fcfa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	68db      	ldr	r3, [r3, #12]
 800fcf2:	f043 0202 	orr.w	r2, r3, #2
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	330c      	adds	r3, #12
 800fcfe:	2202      	movs	r2, #2
 800fd00:	4619      	mov	r1, r3
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f000 f900 	bl	800ff08 <USBD_CtlSendData>
      break;
 800fd08:	e004      	b.n	800fd14 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fd0a:	6839      	ldr	r1, [r7, #0]
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f000 f88a 	bl	800fe26 <USBD_CtlError>
      break;
 800fd12:	bf00      	nop
  }
}
 800fd14:	bf00      	nop
 800fd16:	3708      	adds	r7, #8
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}

0800fd1c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b082      	sub	sp, #8
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
 800fd24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fd26:	683b      	ldr	r3, [r7, #0]
 800fd28:	885b      	ldrh	r3, [r3, #2]
 800fd2a:	2b01      	cmp	r3, #1
 800fd2c:	d107      	bne.n	800fd3e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2201      	movs	r2, #1
 800fd32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f000 f940 	bl	800ffbc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800fd3c:	e013      	b.n	800fd66 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	885b      	ldrh	r3, [r3, #2]
 800fd42:	2b02      	cmp	r3, #2
 800fd44:	d10b      	bne.n	800fd5e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	889b      	ldrh	r3, [r3, #4]
 800fd4a:	0a1b      	lsrs	r3, r3, #8
 800fd4c:	b29b      	uxth	r3, r3
 800fd4e:	b2da      	uxtb	r2, r3
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f000 f930 	bl	800ffbc <USBD_CtlSendStatus>
}
 800fd5c:	e003      	b.n	800fd66 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800fd5e:	6839      	ldr	r1, [r7, #0]
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f000 f860 	bl	800fe26 <USBD_CtlError>
}
 800fd66:	bf00      	nop
 800fd68:	3708      	adds	r7, #8
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}

0800fd6e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd6e:	b580      	push	{r7, lr}
 800fd70:	b082      	sub	sp, #8
 800fd72:	af00      	add	r7, sp, #0
 800fd74:	6078      	str	r0, [r7, #4]
 800fd76:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd7e:	b2db      	uxtb	r3, r3
 800fd80:	3b01      	subs	r3, #1
 800fd82:	2b02      	cmp	r3, #2
 800fd84:	d80b      	bhi.n	800fd9e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	885b      	ldrh	r3, [r3, #2]
 800fd8a:	2b01      	cmp	r3, #1
 800fd8c:	d10c      	bne.n	800fda8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2200      	movs	r2, #0
 800fd92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f000 f910 	bl	800ffbc <USBD_CtlSendStatus>
      }
      break;
 800fd9c:	e004      	b.n	800fda8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fd9e:	6839      	ldr	r1, [r7, #0]
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f000 f840 	bl	800fe26 <USBD_CtlError>
      break;
 800fda6:	e000      	b.n	800fdaa <USBD_ClrFeature+0x3c>
      break;
 800fda8:	bf00      	nop
  }
}
 800fdaa:	bf00      	nop
 800fdac:	3708      	adds	r7, #8
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}

0800fdb2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fdb2:	b580      	push	{r7, lr}
 800fdb4:	b084      	sub	sp, #16
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	6078      	str	r0, [r7, #4]
 800fdba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	781a      	ldrb	r2, [r3, #0]
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	3301      	adds	r3, #1
 800fdcc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	781a      	ldrb	r2, [r3, #0]
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	3301      	adds	r3, #1
 800fdda:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fddc:	68f8      	ldr	r0, [r7, #12]
 800fdde:	f7ff fa17 	bl	800f210 <SWAPBYTE>
 800fde2:	4603      	mov	r3, r0
 800fde4:	461a      	mov	r2, r3
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	3301      	adds	r3, #1
 800fdee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	3301      	adds	r3, #1
 800fdf4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fdf6:	68f8      	ldr	r0, [r7, #12]
 800fdf8:	f7ff fa0a 	bl	800f210 <SWAPBYTE>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	461a      	mov	r2, r3
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	3301      	adds	r3, #1
 800fe08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	3301      	adds	r3, #1
 800fe0e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fe10:	68f8      	ldr	r0, [r7, #12]
 800fe12:	f7ff f9fd 	bl	800f210 <SWAPBYTE>
 800fe16:	4603      	mov	r3, r0
 800fe18:	461a      	mov	r2, r3
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	80da      	strh	r2, [r3, #6]
}
 800fe1e:	bf00      	nop
 800fe20:	3710      	adds	r7, #16
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}

0800fe26 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe26:	b580      	push	{r7, lr}
 800fe28:	b082      	sub	sp, #8
 800fe2a:	af00      	add	r7, sp, #0
 800fe2c:	6078      	str	r0, [r7, #4]
 800fe2e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fe30:	2180      	movs	r1, #128	; 0x80
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f000 fdd2 	bl	80109dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fe38:	2100      	movs	r1, #0
 800fe3a:	6878      	ldr	r0, [r7, #4]
 800fe3c:	f000 fdce 	bl	80109dc <USBD_LL_StallEP>
}
 800fe40:	bf00      	nop
 800fe42:	3708      	adds	r7, #8
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}

0800fe48 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b086      	sub	sp, #24
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	60f8      	str	r0, [r7, #12]
 800fe50:	60b9      	str	r1, [r7, #8]
 800fe52:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fe54:	2300      	movs	r3, #0
 800fe56:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d036      	beq.n	800fecc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fe62:	6938      	ldr	r0, [r7, #16]
 800fe64:	f000 f836 	bl	800fed4 <USBD_GetLen>
 800fe68:	4603      	mov	r3, r0
 800fe6a:	3301      	adds	r3, #1
 800fe6c:	b29b      	uxth	r3, r3
 800fe6e:	005b      	lsls	r3, r3, #1
 800fe70:	b29a      	uxth	r2, r3
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fe76:	7dfb      	ldrb	r3, [r7, #23]
 800fe78:	68ba      	ldr	r2, [r7, #8]
 800fe7a:	4413      	add	r3, r2
 800fe7c:	687a      	ldr	r2, [r7, #4]
 800fe7e:	7812      	ldrb	r2, [r2, #0]
 800fe80:	701a      	strb	r2, [r3, #0]
  idx++;
 800fe82:	7dfb      	ldrb	r3, [r7, #23]
 800fe84:	3301      	adds	r3, #1
 800fe86:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fe88:	7dfb      	ldrb	r3, [r7, #23]
 800fe8a:	68ba      	ldr	r2, [r7, #8]
 800fe8c:	4413      	add	r3, r2
 800fe8e:	2203      	movs	r2, #3
 800fe90:	701a      	strb	r2, [r3, #0]
  idx++;
 800fe92:	7dfb      	ldrb	r3, [r7, #23]
 800fe94:	3301      	adds	r3, #1
 800fe96:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fe98:	e013      	b.n	800fec2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fe9a:	7dfb      	ldrb	r3, [r7, #23]
 800fe9c:	68ba      	ldr	r2, [r7, #8]
 800fe9e:	4413      	add	r3, r2
 800fea0:	693a      	ldr	r2, [r7, #16]
 800fea2:	7812      	ldrb	r2, [r2, #0]
 800fea4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fea6:	693b      	ldr	r3, [r7, #16]
 800fea8:	3301      	adds	r3, #1
 800feaa:	613b      	str	r3, [r7, #16]
    idx++;
 800feac:	7dfb      	ldrb	r3, [r7, #23]
 800feae:	3301      	adds	r3, #1
 800feb0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800feb2:	7dfb      	ldrb	r3, [r7, #23]
 800feb4:	68ba      	ldr	r2, [r7, #8]
 800feb6:	4413      	add	r3, r2
 800feb8:	2200      	movs	r2, #0
 800feba:	701a      	strb	r2, [r3, #0]
    idx++;
 800febc:	7dfb      	ldrb	r3, [r7, #23]
 800febe:	3301      	adds	r3, #1
 800fec0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fec2:	693b      	ldr	r3, [r7, #16]
 800fec4:	781b      	ldrb	r3, [r3, #0]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d1e7      	bne.n	800fe9a <USBD_GetString+0x52>
 800feca:	e000      	b.n	800fece <USBD_GetString+0x86>
    return;
 800fecc:	bf00      	nop
  }
}
 800fece:	3718      	adds	r7, #24
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}

0800fed4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fed4:	b480      	push	{r7}
 800fed6:	b085      	sub	sp, #20
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fedc:	2300      	movs	r3, #0
 800fede:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fee4:	e005      	b.n	800fef2 <USBD_GetLen+0x1e>
  {
    len++;
 800fee6:	7bfb      	ldrb	r3, [r7, #15]
 800fee8:	3301      	adds	r3, #1
 800feea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	3301      	adds	r3, #1
 800fef0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	781b      	ldrb	r3, [r3, #0]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d1f5      	bne.n	800fee6 <USBD_GetLen+0x12>
  }

  return len;
 800fefa:	7bfb      	ldrb	r3, [r7, #15]
}
 800fefc:	4618      	mov	r0, r3
 800fefe:	3714      	adds	r7, #20
 800ff00:	46bd      	mov	sp, r7
 800ff02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff06:	4770      	bx	lr

0800ff08 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b084      	sub	sp, #16
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	60f8      	str	r0, [r7, #12]
 800ff10:	60b9      	str	r1, [r7, #8]
 800ff12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	2202      	movs	r2, #2
 800ff18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	687a      	ldr	r2, [r7, #4]
 800ff20:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	687a      	ldr	r2, [r7, #4]
 800ff26:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	68ba      	ldr	r2, [r7, #8]
 800ff2c:	2100      	movs	r1, #0
 800ff2e:	68f8      	ldr	r0, [r7, #12]
 800ff30:	f000 fe22 	bl	8010b78 <USBD_LL_Transmit>

  return USBD_OK;
 800ff34:	2300      	movs	r3, #0
}
 800ff36:	4618      	mov	r0, r3
 800ff38:	3710      	adds	r7, #16
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}

0800ff3e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ff3e:	b580      	push	{r7, lr}
 800ff40:	b084      	sub	sp, #16
 800ff42:	af00      	add	r7, sp, #0
 800ff44:	60f8      	str	r0, [r7, #12]
 800ff46:	60b9      	str	r1, [r7, #8]
 800ff48:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	68ba      	ldr	r2, [r7, #8]
 800ff4e:	2100      	movs	r1, #0
 800ff50:	68f8      	ldr	r0, [r7, #12]
 800ff52:	f000 fe11 	bl	8010b78 <USBD_LL_Transmit>

  return USBD_OK;
 800ff56:	2300      	movs	r3, #0
}
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3710      	adds	r7, #16
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}

0800ff60 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b084      	sub	sp, #16
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	60f8      	str	r0, [r7, #12]
 800ff68:	60b9      	str	r1, [r7, #8]
 800ff6a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	2203      	movs	r2, #3
 800ff70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	687a      	ldr	r2, [r7, #4]
 800ff78:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	687a      	ldr	r2, [r7, #4]
 800ff80:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	68ba      	ldr	r2, [r7, #8]
 800ff88:	2100      	movs	r1, #0
 800ff8a:	68f8      	ldr	r0, [r7, #12]
 800ff8c:	f000 fe2c 	bl	8010be8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ff90:	2300      	movs	r3, #0
}
 800ff92:	4618      	mov	r0, r3
 800ff94:	3710      	adds	r7, #16
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}

0800ff9a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ff9a:	b580      	push	{r7, lr}
 800ff9c:	b084      	sub	sp, #16
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	60f8      	str	r0, [r7, #12]
 800ffa2:	60b9      	str	r1, [r7, #8]
 800ffa4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	68ba      	ldr	r2, [r7, #8]
 800ffaa:	2100      	movs	r1, #0
 800ffac:	68f8      	ldr	r0, [r7, #12]
 800ffae:	f000 fe1b 	bl	8010be8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ffb2:	2300      	movs	r3, #0
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3710      	adds	r7, #16
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}

0800ffbc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b082      	sub	sp, #8
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2204      	movs	r2, #4
 800ffc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ffcc:	2300      	movs	r3, #0
 800ffce:	2200      	movs	r2, #0
 800ffd0:	2100      	movs	r1, #0
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f000 fdd0 	bl	8010b78 <USBD_LL_Transmit>

  return USBD_OK;
 800ffd8:	2300      	movs	r3, #0
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	3708      	adds	r7, #8
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}

0800ffe2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ffe2:	b580      	push	{r7, lr}
 800ffe4:	b082      	sub	sp, #8
 800ffe6:	af00      	add	r7, sp, #0
 800ffe8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	2205      	movs	r2, #5
 800ffee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fff2:	2300      	movs	r3, #0
 800fff4:	2200      	movs	r2, #0
 800fff6:	2100      	movs	r1, #0
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f000 fdf5 	bl	8010be8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fffe:	2300      	movs	r3, #0
}
 8010000:	4618      	mov	r0, r3
 8010002:	3708      	adds	r7, #8
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}

08010008 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010008:	b480      	push	{r7}
 801000a:	b087      	sub	sp, #28
 801000c:	af00      	add	r7, sp, #0
 801000e:	60f8      	str	r0, [r7, #12]
 8010010:	60b9      	str	r1, [r7, #8]
 8010012:	4613      	mov	r3, r2
 8010014:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010016:	2301      	movs	r3, #1
 8010018:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801001a:	2300      	movs	r3, #0
 801001c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801001e:	4b1f      	ldr	r3, [pc, #124]	; (801009c <FATFS_LinkDriverEx+0x94>)
 8010020:	7a5b      	ldrb	r3, [r3, #9]
 8010022:	b2db      	uxtb	r3, r3
 8010024:	2b00      	cmp	r3, #0
 8010026:	d131      	bne.n	801008c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010028:	4b1c      	ldr	r3, [pc, #112]	; (801009c <FATFS_LinkDriverEx+0x94>)
 801002a:	7a5b      	ldrb	r3, [r3, #9]
 801002c:	b2db      	uxtb	r3, r3
 801002e:	461a      	mov	r2, r3
 8010030:	4b1a      	ldr	r3, [pc, #104]	; (801009c <FATFS_LinkDriverEx+0x94>)
 8010032:	2100      	movs	r1, #0
 8010034:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010036:	4b19      	ldr	r3, [pc, #100]	; (801009c <FATFS_LinkDriverEx+0x94>)
 8010038:	7a5b      	ldrb	r3, [r3, #9]
 801003a:	b2db      	uxtb	r3, r3
 801003c:	4a17      	ldr	r2, [pc, #92]	; (801009c <FATFS_LinkDriverEx+0x94>)
 801003e:	009b      	lsls	r3, r3, #2
 8010040:	4413      	add	r3, r2
 8010042:	68fa      	ldr	r2, [r7, #12]
 8010044:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010046:	4b15      	ldr	r3, [pc, #84]	; (801009c <FATFS_LinkDriverEx+0x94>)
 8010048:	7a5b      	ldrb	r3, [r3, #9]
 801004a:	b2db      	uxtb	r3, r3
 801004c:	461a      	mov	r2, r3
 801004e:	4b13      	ldr	r3, [pc, #76]	; (801009c <FATFS_LinkDriverEx+0x94>)
 8010050:	4413      	add	r3, r2
 8010052:	79fa      	ldrb	r2, [r7, #7]
 8010054:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010056:	4b11      	ldr	r3, [pc, #68]	; (801009c <FATFS_LinkDriverEx+0x94>)
 8010058:	7a5b      	ldrb	r3, [r3, #9]
 801005a:	b2db      	uxtb	r3, r3
 801005c:	1c5a      	adds	r2, r3, #1
 801005e:	b2d1      	uxtb	r1, r2
 8010060:	4a0e      	ldr	r2, [pc, #56]	; (801009c <FATFS_LinkDriverEx+0x94>)
 8010062:	7251      	strb	r1, [r2, #9]
 8010064:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010066:	7dbb      	ldrb	r3, [r7, #22]
 8010068:	3330      	adds	r3, #48	; 0x30
 801006a:	b2da      	uxtb	r2, r3
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	3301      	adds	r3, #1
 8010074:	223a      	movs	r2, #58	; 0x3a
 8010076:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010078:	68bb      	ldr	r3, [r7, #8]
 801007a:	3302      	adds	r3, #2
 801007c:	222f      	movs	r2, #47	; 0x2f
 801007e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	3303      	adds	r3, #3
 8010084:	2200      	movs	r2, #0
 8010086:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010088:	2300      	movs	r3, #0
 801008a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801008c:	7dfb      	ldrb	r3, [r7, #23]
}
 801008e:	4618      	mov	r0, r3
 8010090:	371c      	adds	r7, #28
 8010092:	46bd      	mov	sp, r7
 8010094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010098:	4770      	bx	lr
 801009a:	bf00      	nop
 801009c:	200044a0 	.word	0x200044a0

080100a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b082      	sub	sp, #8
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80100aa:	2200      	movs	r2, #0
 80100ac:	6839      	ldr	r1, [r7, #0]
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f7ff ffaa 	bl	8010008 <FATFS_LinkDriverEx>
 80100b4:	4603      	mov	r3, r0
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	3708      	adds	r7, #8
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}
	...

080100c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80100c4:	2200      	movs	r2, #0
 80100c6:	4912      	ldr	r1, [pc, #72]	; (8010110 <MX_USB_DEVICE_Init+0x50>)
 80100c8:	4812      	ldr	r0, [pc, #72]	; (8010114 <MX_USB_DEVICE_Init+0x54>)
 80100ca:	f7fe fc7b 	bl	800e9c4 <USBD_Init>
 80100ce:	4603      	mov	r3, r0
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d001      	beq.n	80100d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80100d4:	f7f1 fd72 	bl	8001bbc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80100d8:	490f      	ldr	r1, [pc, #60]	; (8010118 <MX_USB_DEVICE_Init+0x58>)
 80100da:	480e      	ldr	r0, [pc, #56]	; (8010114 <MX_USB_DEVICE_Init+0x54>)
 80100dc:	f7fe fca2 	bl	800ea24 <USBD_RegisterClass>
 80100e0:	4603      	mov	r3, r0
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d001      	beq.n	80100ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80100e6:	f7f1 fd69 	bl	8001bbc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80100ea:	490c      	ldr	r1, [pc, #48]	; (801011c <MX_USB_DEVICE_Init+0x5c>)
 80100ec:	4809      	ldr	r0, [pc, #36]	; (8010114 <MX_USB_DEVICE_Init+0x54>)
 80100ee:	f7fe fb99 	bl	800e824 <USBD_CDC_RegisterInterface>
 80100f2:	4603      	mov	r3, r0
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d001      	beq.n	80100fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80100f8:	f7f1 fd60 	bl	8001bbc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80100fc:	4805      	ldr	r0, [pc, #20]	; (8010114 <MX_USB_DEVICE_Init+0x54>)
 80100fe:	f7fe fcc7 	bl	800ea90 <USBD_Start>
 8010102:	4603      	mov	r3, r0
 8010104:	2b00      	cmp	r3, #0
 8010106:	d001      	beq.n	801010c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010108:	f7f1 fd58 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801010c:	bf00      	nop
 801010e:	bd80      	pop	{r7, pc}
 8010110:	200030ac 	.word	0x200030ac
 8010114:	200044ac 	.word	0x200044ac
 8010118:	20003018 	.word	0x20003018
 801011c:	20003098 	.word	0x20003098

08010120 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010124:	2200      	movs	r2, #0
 8010126:	4905      	ldr	r1, [pc, #20]	; (801013c <CDC_Init_FS+0x1c>)
 8010128:	4805      	ldr	r0, [pc, #20]	; (8010140 <CDC_Init_FS+0x20>)
 801012a:	f7fe fb95 	bl	800e858 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801012e:	4905      	ldr	r1, [pc, #20]	; (8010144 <CDC_Init_FS+0x24>)
 8010130:	4803      	ldr	r0, [pc, #12]	; (8010140 <CDC_Init_FS+0x20>)
 8010132:	f7fe fbb3 	bl	800e89c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010136:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010138:	4618      	mov	r0, r3
 801013a:	bd80      	pop	{r7, pc}
 801013c:	20004f88 	.word	0x20004f88
 8010140:	200044ac 	.word	0x200044ac
 8010144:	20004788 	.word	0x20004788

08010148 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010148:	b480      	push	{r7}
 801014a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801014c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801014e:	4618      	mov	r0, r3
 8010150:	46bd      	mov	sp, r7
 8010152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010156:	4770      	bx	lr

08010158 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010158:	b480      	push	{r7}
 801015a:	b083      	sub	sp, #12
 801015c:	af00      	add	r7, sp, #0
 801015e:	4603      	mov	r3, r0
 8010160:	6039      	str	r1, [r7, #0]
 8010162:	71fb      	strb	r3, [r7, #7]
 8010164:	4613      	mov	r3, r2
 8010166:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010168:	79fb      	ldrb	r3, [r7, #7]
 801016a:	2b23      	cmp	r3, #35	; 0x23
 801016c:	d84a      	bhi.n	8010204 <CDC_Control_FS+0xac>
 801016e:	a201      	add	r2, pc, #4	; (adr r2, 8010174 <CDC_Control_FS+0x1c>)
 8010170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010174:	08010205 	.word	0x08010205
 8010178:	08010205 	.word	0x08010205
 801017c:	08010205 	.word	0x08010205
 8010180:	08010205 	.word	0x08010205
 8010184:	08010205 	.word	0x08010205
 8010188:	08010205 	.word	0x08010205
 801018c:	08010205 	.word	0x08010205
 8010190:	08010205 	.word	0x08010205
 8010194:	08010205 	.word	0x08010205
 8010198:	08010205 	.word	0x08010205
 801019c:	08010205 	.word	0x08010205
 80101a0:	08010205 	.word	0x08010205
 80101a4:	08010205 	.word	0x08010205
 80101a8:	08010205 	.word	0x08010205
 80101ac:	08010205 	.word	0x08010205
 80101b0:	08010205 	.word	0x08010205
 80101b4:	08010205 	.word	0x08010205
 80101b8:	08010205 	.word	0x08010205
 80101bc:	08010205 	.word	0x08010205
 80101c0:	08010205 	.word	0x08010205
 80101c4:	08010205 	.word	0x08010205
 80101c8:	08010205 	.word	0x08010205
 80101cc:	08010205 	.word	0x08010205
 80101d0:	08010205 	.word	0x08010205
 80101d4:	08010205 	.word	0x08010205
 80101d8:	08010205 	.word	0x08010205
 80101dc:	08010205 	.word	0x08010205
 80101e0:	08010205 	.word	0x08010205
 80101e4:	08010205 	.word	0x08010205
 80101e8:	08010205 	.word	0x08010205
 80101ec:	08010205 	.word	0x08010205
 80101f0:	08010205 	.word	0x08010205
 80101f4:	08010205 	.word	0x08010205
 80101f8:	08010205 	.word	0x08010205
 80101fc:	08010205 	.word	0x08010205
 8010200:	08010205 	.word	0x08010205
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010204:	bf00      	nop
  }

  return (USBD_OK);
 8010206:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010208:	4618      	mov	r0, r3
 801020a:	370c      	adds	r7, #12
 801020c:	46bd      	mov	sp, r7
 801020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010212:	4770      	bx	lr

08010214 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b082      	sub	sp, #8
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801021e:	6879      	ldr	r1, [r7, #4]
 8010220:	4805      	ldr	r0, [pc, #20]	; (8010238 <CDC_Receive_FS+0x24>)
 8010222:	f7fe fb3b 	bl	800e89c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010226:	4804      	ldr	r0, [pc, #16]	; (8010238 <CDC_Receive_FS+0x24>)
 8010228:	f7fe fb96 	bl	800e958 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801022c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801022e:	4618      	mov	r0, r3
 8010230:	3708      	adds	r7, #8
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}
 8010236:	bf00      	nop
 8010238:	200044ac 	.word	0x200044ac

0801023c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b084      	sub	sp, #16
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	460b      	mov	r3, r1
 8010246:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010248:	2300      	movs	r3, #0
 801024a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801024c:	4b0d      	ldr	r3, [pc, #52]	; (8010284 <CDC_Transmit_FS+0x48>)
 801024e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010252:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801025a:	2b00      	cmp	r3, #0
 801025c:	d001      	beq.n	8010262 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801025e:	2301      	movs	r3, #1
 8010260:	e00b      	b.n	801027a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010262:	887b      	ldrh	r3, [r7, #2]
 8010264:	461a      	mov	r2, r3
 8010266:	6879      	ldr	r1, [r7, #4]
 8010268:	4806      	ldr	r0, [pc, #24]	; (8010284 <CDC_Transmit_FS+0x48>)
 801026a:	f7fe faf5 	bl	800e858 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801026e:	4805      	ldr	r0, [pc, #20]	; (8010284 <CDC_Transmit_FS+0x48>)
 8010270:	f7fe fb32 	bl	800e8d8 <USBD_CDC_TransmitPacket>
 8010274:	4603      	mov	r3, r0
 8010276:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010278:	7bfb      	ldrb	r3, [r7, #15]
}
 801027a:	4618      	mov	r0, r3
 801027c:	3710      	adds	r7, #16
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}
 8010282:	bf00      	nop
 8010284:	200044ac 	.word	0x200044ac

08010288 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010288:	b480      	push	{r7}
 801028a:	b087      	sub	sp, #28
 801028c:	af00      	add	r7, sp, #0
 801028e:	60f8      	str	r0, [r7, #12]
 8010290:	60b9      	str	r1, [r7, #8]
 8010292:	4613      	mov	r3, r2
 8010294:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010296:	2300      	movs	r3, #0
 8010298:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801029a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801029e:	4618      	mov	r0, r3
 80102a0:	371c      	adds	r7, #28
 80102a2:	46bd      	mov	sp, r7
 80102a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a8:	4770      	bx	lr
	...

080102ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80102ac:	b480      	push	{r7}
 80102ae:	b083      	sub	sp, #12
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	4603      	mov	r3, r0
 80102b4:	6039      	str	r1, [r7, #0]
 80102b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	2212      	movs	r2, #18
 80102bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80102be:	4b03      	ldr	r3, [pc, #12]	; (80102cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	370c      	adds	r7, #12
 80102c4:	46bd      	mov	sp, r7
 80102c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ca:	4770      	bx	lr
 80102cc:	200030cc 	.word	0x200030cc

080102d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80102d0:	b480      	push	{r7}
 80102d2:	b083      	sub	sp, #12
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	4603      	mov	r3, r0
 80102d8:	6039      	str	r1, [r7, #0]
 80102da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	2204      	movs	r2, #4
 80102e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80102e2:	4b03      	ldr	r3, [pc, #12]	; (80102f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	370c      	adds	r7, #12
 80102e8:	46bd      	mov	sp, r7
 80102ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ee:	4770      	bx	lr
 80102f0:	200030ec 	.word	0x200030ec

080102f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	4603      	mov	r3, r0
 80102fc:	6039      	str	r1, [r7, #0]
 80102fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010300:	79fb      	ldrb	r3, [r7, #7]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d105      	bne.n	8010312 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010306:	683a      	ldr	r2, [r7, #0]
 8010308:	4907      	ldr	r1, [pc, #28]	; (8010328 <USBD_FS_ProductStrDescriptor+0x34>)
 801030a:	4808      	ldr	r0, [pc, #32]	; (801032c <USBD_FS_ProductStrDescriptor+0x38>)
 801030c:	f7ff fd9c 	bl	800fe48 <USBD_GetString>
 8010310:	e004      	b.n	801031c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010312:	683a      	ldr	r2, [r7, #0]
 8010314:	4904      	ldr	r1, [pc, #16]	; (8010328 <USBD_FS_ProductStrDescriptor+0x34>)
 8010316:	4805      	ldr	r0, [pc, #20]	; (801032c <USBD_FS_ProductStrDescriptor+0x38>)
 8010318:	f7ff fd96 	bl	800fe48 <USBD_GetString>
  }
  return USBD_StrDesc;
 801031c:	4b02      	ldr	r3, [pc, #8]	; (8010328 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801031e:	4618      	mov	r0, r3
 8010320:	3708      	adds	r7, #8
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}
 8010326:	bf00      	nop
 8010328:	20005788 	.word	0x20005788
 801032c:	0801bd88 	.word	0x0801bd88

08010330 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b082      	sub	sp, #8
 8010334:	af00      	add	r7, sp, #0
 8010336:	4603      	mov	r3, r0
 8010338:	6039      	str	r1, [r7, #0]
 801033a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801033c:	683a      	ldr	r2, [r7, #0]
 801033e:	4904      	ldr	r1, [pc, #16]	; (8010350 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010340:	4804      	ldr	r0, [pc, #16]	; (8010354 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010342:	f7ff fd81 	bl	800fe48 <USBD_GetString>
  return USBD_StrDesc;
 8010346:	4b02      	ldr	r3, [pc, #8]	; (8010350 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010348:	4618      	mov	r0, r3
 801034a:	3708      	adds	r7, #8
 801034c:	46bd      	mov	sp, r7
 801034e:	bd80      	pop	{r7, pc}
 8010350:	20005788 	.word	0x20005788
 8010354:	0801bda0 	.word	0x0801bda0

08010358 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b082      	sub	sp, #8
 801035c:	af00      	add	r7, sp, #0
 801035e:	4603      	mov	r3, r0
 8010360:	6039      	str	r1, [r7, #0]
 8010362:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	221a      	movs	r2, #26
 8010368:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801036a:	f000 f855 	bl	8010418 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801036e:	4b02      	ldr	r3, [pc, #8]	; (8010378 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010370:	4618      	mov	r0, r3
 8010372:	3708      	adds	r7, #8
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}
 8010378:	200030f0 	.word	0x200030f0

0801037c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b082      	sub	sp, #8
 8010380:	af00      	add	r7, sp, #0
 8010382:	4603      	mov	r3, r0
 8010384:	6039      	str	r1, [r7, #0]
 8010386:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010388:	79fb      	ldrb	r3, [r7, #7]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d105      	bne.n	801039a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801038e:	683a      	ldr	r2, [r7, #0]
 8010390:	4907      	ldr	r1, [pc, #28]	; (80103b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010392:	4808      	ldr	r0, [pc, #32]	; (80103b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010394:	f7ff fd58 	bl	800fe48 <USBD_GetString>
 8010398:	e004      	b.n	80103a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801039a:	683a      	ldr	r2, [r7, #0]
 801039c:	4904      	ldr	r1, [pc, #16]	; (80103b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801039e:	4805      	ldr	r0, [pc, #20]	; (80103b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80103a0:	f7ff fd52 	bl	800fe48 <USBD_GetString>
  }
  return USBD_StrDesc;
 80103a4:	4b02      	ldr	r3, [pc, #8]	; (80103b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	3708      	adds	r7, #8
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}
 80103ae:	bf00      	nop
 80103b0:	20005788 	.word	0x20005788
 80103b4:	0801bdb4 	.word	0x0801bdb4

080103b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b082      	sub	sp, #8
 80103bc:	af00      	add	r7, sp, #0
 80103be:	4603      	mov	r3, r0
 80103c0:	6039      	str	r1, [r7, #0]
 80103c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80103c4:	79fb      	ldrb	r3, [r7, #7]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d105      	bne.n	80103d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80103ca:	683a      	ldr	r2, [r7, #0]
 80103cc:	4907      	ldr	r1, [pc, #28]	; (80103ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80103ce:	4808      	ldr	r0, [pc, #32]	; (80103f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80103d0:	f7ff fd3a 	bl	800fe48 <USBD_GetString>
 80103d4:	e004      	b.n	80103e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80103d6:	683a      	ldr	r2, [r7, #0]
 80103d8:	4904      	ldr	r1, [pc, #16]	; (80103ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80103da:	4805      	ldr	r0, [pc, #20]	; (80103f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80103dc:	f7ff fd34 	bl	800fe48 <USBD_GetString>
  }
  return USBD_StrDesc;
 80103e0:	4b02      	ldr	r3, [pc, #8]	; (80103ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80103e2:	4618      	mov	r0, r3
 80103e4:	3708      	adds	r7, #8
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd80      	pop	{r7, pc}
 80103ea:	bf00      	nop
 80103ec:	20005788 	.word	0x20005788
 80103f0:	0801bdc0 	.word	0x0801bdc0

080103f4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103f4:	b480      	push	{r7}
 80103f6:	b083      	sub	sp, #12
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	4603      	mov	r3, r0
 80103fc:	6039      	str	r1, [r7, #0]
 80103fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	220c      	movs	r2, #12
 8010404:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8010406:	4b03      	ldr	r3, [pc, #12]	; (8010414 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8010408:	4618      	mov	r0, r3
 801040a:	370c      	adds	r7, #12
 801040c:	46bd      	mov	sp, r7
 801040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010412:	4770      	bx	lr
 8010414:	200030e0 	.word	0x200030e0

08010418 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b084      	sub	sp, #16
 801041c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801041e:	4b0f      	ldr	r3, [pc, #60]	; (801045c <Get_SerialNum+0x44>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010424:	4b0e      	ldr	r3, [pc, #56]	; (8010460 <Get_SerialNum+0x48>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801042a:	4b0e      	ldr	r3, [pc, #56]	; (8010464 <Get_SerialNum+0x4c>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010430:	68fa      	ldr	r2, [r7, #12]
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	4413      	add	r3, r2
 8010436:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d009      	beq.n	8010452 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801043e:	2208      	movs	r2, #8
 8010440:	4909      	ldr	r1, [pc, #36]	; (8010468 <Get_SerialNum+0x50>)
 8010442:	68f8      	ldr	r0, [r7, #12]
 8010444:	f000 f814 	bl	8010470 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010448:	2204      	movs	r2, #4
 801044a:	4908      	ldr	r1, [pc, #32]	; (801046c <Get_SerialNum+0x54>)
 801044c:	68b8      	ldr	r0, [r7, #8]
 801044e:	f000 f80f 	bl	8010470 <IntToUnicode>
  }
}
 8010452:	bf00      	nop
 8010454:	3710      	adds	r7, #16
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}
 801045a:	bf00      	nop
 801045c:	1fff7590 	.word	0x1fff7590
 8010460:	1fff7594 	.word	0x1fff7594
 8010464:	1fff7598 	.word	0x1fff7598
 8010468:	200030f2 	.word	0x200030f2
 801046c:	20003102 	.word	0x20003102

08010470 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010470:	b480      	push	{r7}
 8010472:	b087      	sub	sp, #28
 8010474:	af00      	add	r7, sp, #0
 8010476:	60f8      	str	r0, [r7, #12]
 8010478:	60b9      	str	r1, [r7, #8]
 801047a:	4613      	mov	r3, r2
 801047c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801047e:	2300      	movs	r3, #0
 8010480:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010482:	2300      	movs	r3, #0
 8010484:	75fb      	strb	r3, [r7, #23]
 8010486:	e027      	b.n	80104d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	0f1b      	lsrs	r3, r3, #28
 801048c:	2b09      	cmp	r3, #9
 801048e:	d80b      	bhi.n	80104a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	0f1b      	lsrs	r3, r3, #28
 8010494:	b2da      	uxtb	r2, r3
 8010496:	7dfb      	ldrb	r3, [r7, #23]
 8010498:	005b      	lsls	r3, r3, #1
 801049a:	4619      	mov	r1, r3
 801049c:	68bb      	ldr	r3, [r7, #8]
 801049e:	440b      	add	r3, r1
 80104a0:	3230      	adds	r2, #48	; 0x30
 80104a2:	b2d2      	uxtb	r2, r2
 80104a4:	701a      	strb	r2, [r3, #0]
 80104a6:	e00a      	b.n	80104be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	0f1b      	lsrs	r3, r3, #28
 80104ac:	b2da      	uxtb	r2, r3
 80104ae:	7dfb      	ldrb	r3, [r7, #23]
 80104b0:	005b      	lsls	r3, r3, #1
 80104b2:	4619      	mov	r1, r3
 80104b4:	68bb      	ldr	r3, [r7, #8]
 80104b6:	440b      	add	r3, r1
 80104b8:	3237      	adds	r2, #55	; 0x37
 80104ba:	b2d2      	uxtb	r2, r2
 80104bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	011b      	lsls	r3, r3, #4
 80104c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80104c4:	7dfb      	ldrb	r3, [r7, #23]
 80104c6:	005b      	lsls	r3, r3, #1
 80104c8:	3301      	adds	r3, #1
 80104ca:	68ba      	ldr	r2, [r7, #8]
 80104cc:	4413      	add	r3, r2
 80104ce:	2200      	movs	r2, #0
 80104d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80104d2:	7dfb      	ldrb	r3, [r7, #23]
 80104d4:	3301      	adds	r3, #1
 80104d6:	75fb      	strb	r3, [r7, #23]
 80104d8:	7dfa      	ldrb	r2, [r7, #23]
 80104da:	79fb      	ldrb	r3, [r7, #7]
 80104dc:	429a      	cmp	r2, r3
 80104de:	d3d3      	bcc.n	8010488 <IntToUnicode+0x18>
  }
}
 80104e0:	bf00      	nop
 80104e2:	bf00      	nop
 80104e4:	371c      	adds	r7, #28
 80104e6:	46bd      	mov	sp, r7
 80104e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ec:	4770      	bx	lr
	...

080104f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b0b2      	sub	sp, #200	; 0xc8
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80104f8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80104fc:	2200      	movs	r2, #0
 80104fe:	601a      	str	r2, [r3, #0]
 8010500:	605a      	str	r2, [r3, #4]
 8010502:	609a      	str	r2, [r3, #8]
 8010504:	60da      	str	r2, [r3, #12]
 8010506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010508:	f107 0318 	add.w	r3, r7, #24
 801050c:	229c      	movs	r2, #156	; 0x9c
 801050e:	2100      	movs	r1, #0
 8010510:	4618      	mov	r0, r3
 8010512:	f00a fc85 	bl	801ae20 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801051e:	d163      	bne.n	80105e8 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010524:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010526:	2300      	movs	r3, #0
 8010528:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801052c:	f107 0318 	add.w	r3, r7, #24
 8010530:	4618      	mov	r0, r3
 8010532:	f7f6 faad 	bl	8006a90 <HAL_RCCEx_PeriphCLKConfig>
 8010536:	4603      	mov	r3, r0
 8010538:	2b00      	cmp	r3, #0
 801053a:	d001      	beq.n	8010540 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 801053c:	f7f1 fb3e 	bl	8001bbc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010540:	4b2b      	ldr	r3, [pc, #172]	; (80105f0 <HAL_PCD_MspInit+0x100>)
 8010542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010544:	4a2a      	ldr	r2, [pc, #168]	; (80105f0 <HAL_PCD_MspInit+0x100>)
 8010546:	f043 0301 	orr.w	r3, r3, #1
 801054a:	64d3      	str	r3, [r2, #76]	; 0x4c
 801054c:	4b28      	ldr	r3, [pc, #160]	; (80105f0 <HAL_PCD_MspInit+0x100>)
 801054e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010550:	f003 0301 	and.w	r3, r3, #1
 8010554:	617b      	str	r3, [r7, #20]
 8010556:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTG_DP_Pin|USB_OTG_DM_Pin;
 8010558:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801055c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010560:	2302      	movs	r3, #2
 8010562:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010566:	2300      	movs	r3, #0
 8010568:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801056c:	2303      	movs	r3, #3
 801056e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010572:	230a      	movs	r3, #10
 8010574:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010578:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801057c:	4619      	mov	r1, r3
 801057e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010582:	f7f3 fe07 	bl	8004194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010586:	4b1a      	ldr	r3, [pc, #104]	; (80105f0 <HAL_PCD_MspInit+0x100>)
 8010588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801058a:	4a19      	ldr	r2, [pc, #100]	; (80105f0 <HAL_PCD_MspInit+0x100>)
 801058c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010592:	4b17      	ldr	r3, [pc, #92]	; (80105f0 <HAL_PCD_MspInit+0x100>)
 8010594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010596:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801059a:	613b      	str	r3, [r7, #16]
 801059c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801059e:	4b14      	ldr	r3, [pc, #80]	; (80105f0 <HAL_PCD_MspInit+0x100>)
 80105a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d114      	bne.n	80105d4 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80105aa:	4b11      	ldr	r3, [pc, #68]	; (80105f0 <HAL_PCD_MspInit+0x100>)
 80105ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105ae:	4a10      	ldr	r2, [pc, #64]	; (80105f0 <HAL_PCD_MspInit+0x100>)
 80105b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80105b4:	6593      	str	r3, [r2, #88]	; 0x58
 80105b6:	4b0e      	ldr	r3, [pc, #56]	; (80105f0 <HAL_PCD_MspInit+0x100>)
 80105b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80105be:	60fb      	str	r3, [r7, #12]
 80105c0:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80105c2:	f7f5 fb71 	bl	8005ca8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80105c6:	4b0a      	ldr	r3, [pc, #40]	; (80105f0 <HAL_PCD_MspInit+0x100>)
 80105c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105ca:	4a09      	ldr	r2, [pc, #36]	; (80105f0 <HAL_PCD_MspInit+0x100>)
 80105cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80105d0:	6593      	str	r3, [r2, #88]	; 0x58
 80105d2:	e001      	b.n	80105d8 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80105d4:	f7f5 fb68 	bl	8005ca8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80105d8:	2200      	movs	r2, #0
 80105da:	2100      	movs	r1, #0
 80105dc:	2043      	movs	r0, #67	; 0x43
 80105de:	f7f3 f8ca 	bl	8003776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80105e2:	2043      	movs	r0, #67	; 0x43
 80105e4:	f7f3 f8e3 	bl	80037ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80105e8:	bf00      	nop
 80105ea:	37c8      	adds	r7, #200	; 0xc8
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}
 80105f0:	40021000 	.word	0x40021000

080105f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b082      	sub	sp, #8
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010608:	4619      	mov	r1, r3
 801060a:	4610      	mov	r0, r2
 801060c:	f7fe fa8d 	bl	800eb2a <USBD_LL_SetupStage>
}
 8010610:	bf00      	nop
 8010612:	3708      	adds	r7, #8
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}

08010618 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	460b      	mov	r3, r1
 8010622:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801062a:	78fa      	ldrb	r2, [r7, #3]
 801062c:	6879      	ldr	r1, [r7, #4]
 801062e:	4613      	mov	r3, r2
 8010630:	00db      	lsls	r3, r3, #3
 8010632:	4413      	add	r3, r2
 8010634:	009b      	lsls	r3, r3, #2
 8010636:	440b      	add	r3, r1
 8010638:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801063c:	681a      	ldr	r2, [r3, #0]
 801063e:	78fb      	ldrb	r3, [r7, #3]
 8010640:	4619      	mov	r1, r3
 8010642:	f7fe fac7 	bl	800ebd4 <USBD_LL_DataOutStage>
}
 8010646:	bf00      	nop
 8010648:	3708      	adds	r7, #8
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}

0801064e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801064e:	b580      	push	{r7, lr}
 8010650:	b082      	sub	sp, #8
 8010652:	af00      	add	r7, sp, #0
 8010654:	6078      	str	r0, [r7, #4]
 8010656:	460b      	mov	r3, r1
 8010658:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010660:	78fa      	ldrb	r2, [r7, #3]
 8010662:	6879      	ldr	r1, [r7, #4]
 8010664:	4613      	mov	r3, r2
 8010666:	00db      	lsls	r3, r3, #3
 8010668:	4413      	add	r3, r2
 801066a:	009b      	lsls	r3, r3, #2
 801066c:	440b      	add	r3, r1
 801066e:	3348      	adds	r3, #72	; 0x48
 8010670:	681a      	ldr	r2, [r3, #0]
 8010672:	78fb      	ldrb	r3, [r7, #3]
 8010674:	4619      	mov	r1, r3
 8010676:	f7fe fb60 	bl	800ed3a <USBD_LL_DataInStage>
}
 801067a:	bf00      	nop
 801067c:	3708      	adds	r7, #8
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}

08010682 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010682:	b580      	push	{r7, lr}
 8010684:	b082      	sub	sp, #8
 8010686:	af00      	add	r7, sp, #0
 8010688:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010690:	4618      	mov	r0, r3
 8010692:	f7fe fc9a 	bl	800efca <USBD_LL_SOF>
}
 8010696:	bf00      	nop
 8010698:	3708      	adds	r7, #8
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}

0801069e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801069e:	b580      	push	{r7, lr}
 80106a0:	b084      	sub	sp, #16
 80106a2:	af00      	add	r7, sp, #0
 80106a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80106a6:	2301      	movs	r3, #1
 80106a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	691b      	ldr	r3, [r3, #16]
 80106ae:	2b02      	cmp	r3, #2
 80106b0:	d001      	beq.n	80106b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80106b2:	f7f1 fa83 	bl	8001bbc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80106bc:	7bfa      	ldrb	r2, [r7, #15]
 80106be:	4611      	mov	r1, r2
 80106c0:	4618      	mov	r0, r3
 80106c2:	f7fe fc3e 	bl	800ef42 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80106cc:	4618      	mov	r0, r3
 80106ce:	f7fe fbe6 	bl	800ee9e <USBD_LL_Reset>
}
 80106d2:	bf00      	nop
 80106d4:	3710      	adds	r7, #16
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}
	...

080106dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b082      	sub	sp, #8
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	687a      	ldr	r2, [r7, #4]
 80106f0:	6812      	ldr	r2, [r2, #0]
 80106f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80106f6:	f043 0301 	orr.w	r3, r3, #1
 80106fa:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010702:	4618      	mov	r0, r3
 8010704:	f7fe fc2d 	bl	800ef62 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	6a1b      	ldr	r3, [r3, #32]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d005      	beq.n	801071c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010710:	4b04      	ldr	r3, [pc, #16]	; (8010724 <HAL_PCD_SuspendCallback+0x48>)
 8010712:	691b      	ldr	r3, [r3, #16]
 8010714:	4a03      	ldr	r2, [pc, #12]	; (8010724 <HAL_PCD_SuspendCallback+0x48>)
 8010716:	f043 0306 	orr.w	r3, r3, #6
 801071a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801071c:	bf00      	nop
 801071e:	3708      	adds	r7, #8
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}
 8010724:	e000ed00 	.word	0xe000ed00

08010728 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b082      	sub	sp, #8
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	687a      	ldr	r2, [r7, #4]
 801073c:	6812      	ldr	r2, [r2, #0]
 801073e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010742:	f023 0301 	bic.w	r3, r3, #1
 8010746:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	6a1b      	ldr	r3, [r3, #32]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d007      	beq.n	8010760 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010750:	4b08      	ldr	r3, [pc, #32]	; (8010774 <HAL_PCD_ResumeCallback+0x4c>)
 8010752:	691b      	ldr	r3, [r3, #16]
 8010754:	4a07      	ldr	r2, [pc, #28]	; (8010774 <HAL_PCD_ResumeCallback+0x4c>)
 8010756:	f023 0306 	bic.w	r3, r3, #6
 801075a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801075c:	f000 faf6 	bl	8010d4c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010766:	4618      	mov	r0, r3
 8010768:	f7fe fc17 	bl	800ef9a <USBD_LL_Resume>
}
 801076c:	bf00      	nop
 801076e:	3708      	adds	r7, #8
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}
 8010774:	e000ed00 	.word	0xe000ed00

08010778 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b082      	sub	sp, #8
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
 8010780:	460b      	mov	r3, r1
 8010782:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801078a:	78fa      	ldrb	r2, [r7, #3]
 801078c:	4611      	mov	r1, r2
 801078e:	4618      	mov	r0, r3
 8010790:	f7fe fc6d 	bl	800f06e <USBD_LL_IsoOUTIncomplete>
}
 8010794:	bf00      	nop
 8010796:	3708      	adds	r7, #8
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}

0801079c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b082      	sub	sp, #8
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
 80107a4:	460b      	mov	r3, r1
 80107a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80107ae:	78fa      	ldrb	r2, [r7, #3]
 80107b0:	4611      	mov	r1, r2
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7fe fc29 	bl	800f00a <USBD_LL_IsoINIncomplete>
}
 80107b8:	bf00      	nop
 80107ba:	3708      	adds	r7, #8
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd80      	pop	{r7, pc}

080107c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b082      	sub	sp, #8
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80107ce:	4618      	mov	r0, r3
 80107d0:	f7fe fc7f 	bl	800f0d2 <USBD_LL_DevConnected>
}
 80107d4:	bf00      	nop
 80107d6:	3708      	adds	r7, #8
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}

080107dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b082      	sub	sp, #8
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80107ea:	4618      	mov	r0, r3
 80107ec:	f7fe fc7c 	bl	800f0e8 <USBD_LL_DevDisconnected>
}
 80107f0:	bf00      	nop
 80107f2:	3708      	adds	r7, #8
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}

080107f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b082      	sub	sp, #8
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	781b      	ldrb	r3, [r3, #0]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d13c      	bne.n	8010882 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010808:	4a20      	ldr	r2, [pc, #128]	; (801088c <USBD_LL_Init+0x94>)
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	4a1e      	ldr	r2, [pc, #120]	; (801088c <USBD_LL_Init+0x94>)
 8010814:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010818:	4b1c      	ldr	r3, [pc, #112]	; (801088c <USBD_LL_Init+0x94>)
 801081a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801081e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8010820:	4b1a      	ldr	r3, [pc, #104]	; (801088c <USBD_LL_Init+0x94>)
 8010822:	2206      	movs	r2, #6
 8010824:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010826:	4b19      	ldr	r3, [pc, #100]	; (801088c <USBD_LL_Init+0x94>)
 8010828:	2202      	movs	r2, #2
 801082a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801082c:	4b17      	ldr	r3, [pc, #92]	; (801088c <USBD_LL_Init+0x94>)
 801082e:	2202      	movs	r2, #2
 8010830:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010832:	4b16      	ldr	r3, [pc, #88]	; (801088c <USBD_LL_Init+0x94>)
 8010834:	2200      	movs	r2, #0
 8010836:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010838:	4b14      	ldr	r3, [pc, #80]	; (801088c <USBD_LL_Init+0x94>)
 801083a:	2200      	movs	r2, #0
 801083c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801083e:	4b13      	ldr	r3, [pc, #76]	; (801088c <USBD_LL_Init+0x94>)
 8010840:	2200      	movs	r2, #0
 8010842:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8010844:	4b11      	ldr	r3, [pc, #68]	; (801088c <USBD_LL_Init+0x94>)
 8010846:	2201      	movs	r2, #1
 8010848:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801084a:	4b10      	ldr	r3, [pc, #64]	; (801088c <USBD_LL_Init+0x94>)
 801084c:	2200      	movs	r2, #0
 801084e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010850:	4b0e      	ldr	r3, [pc, #56]	; (801088c <USBD_LL_Init+0x94>)
 8010852:	2200      	movs	r2, #0
 8010854:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010856:	480d      	ldr	r0, [pc, #52]	; (801088c <USBD_LL_Init+0x94>)
 8010858:	f7f3 ffaa 	bl	80047b0 <HAL_PCD_Init>
 801085c:	4603      	mov	r3, r0
 801085e:	2b00      	cmp	r3, #0
 8010860:	d001      	beq.n	8010866 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010862:	f7f1 f9ab 	bl	8001bbc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010866:	2180      	movs	r1, #128	; 0x80
 8010868:	4808      	ldr	r0, [pc, #32]	; (801088c <USBD_LL_Init+0x94>)
 801086a:	f7f5 f914 	bl	8005a96 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801086e:	2240      	movs	r2, #64	; 0x40
 8010870:	2100      	movs	r1, #0
 8010872:	4806      	ldr	r0, [pc, #24]	; (801088c <USBD_LL_Init+0x94>)
 8010874:	f7f5 f8c8 	bl	8005a08 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010878:	2280      	movs	r2, #128	; 0x80
 801087a:	2101      	movs	r1, #1
 801087c:	4803      	ldr	r0, [pc, #12]	; (801088c <USBD_LL_Init+0x94>)
 801087e:	f7f5 f8c3 	bl	8005a08 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010882:	2300      	movs	r3, #0
}
 8010884:	4618      	mov	r0, r3
 8010886:	3708      	adds	r7, #8
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}
 801088c:	20005988 	.word	0x20005988

08010890 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b084      	sub	sp, #16
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010898:	2300      	movs	r3, #0
 801089a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801089c:	2300      	movs	r3, #0
 801089e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80108a6:	4618      	mov	r0, r3
 80108a8:	f7f4 f8a6 	bl	80049f8 <HAL_PCD_Start>
 80108ac:	4603      	mov	r3, r0
 80108ae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80108b0:	7bbb      	ldrb	r3, [r7, #14]
 80108b2:	2b03      	cmp	r3, #3
 80108b4:	d816      	bhi.n	80108e4 <USBD_LL_Start+0x54>
 80108b6:	a201      	add	r2, pc, #4	; (adr r2, 80108bc <USBD_LL_Start+0x2c>)
 80108b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108bc:	080108cd 	.word	0x080108cd
 80108c0:	080108d3 	.word	0x080108d3
 80108c4:	080108d9 	.word	0x080108d9
 80108c8:	080108df 	.word	0x080108df
    case HAL_OK :
      usb_status = USBD_OK;
 80108cc:	2300      	movs	r3, #0
 80108ce:	73fb      	strb	r3, [r7, #15]
    break;
 80108d0:	e00b      	b.n	80108ea <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80108d2:	2303      	movs	r3, #3
 80108d4:	73fb      	strb	r3, [r7, #15]
    break;
 80108d6:	e008      	b.n	80108ea <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80108d8:	2301      	movs	r3, #1
 80108da:	73fb      	strb	r3, [r7, #15]
    break;
 80108dc:	e005      	b.n	80108ea <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80108de:	2303      	movs	r3, #3
 80108e0:	73fb      	strb	r3, [r7, #15]
    break;
 80108e2:	e002      	b.n	80108ea <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80108e4:	2303      	movs	r3, #3
 80108e6:	73fb      	strb	r3, [r7, #15]
    break;
 80108e8:	bf00      	nop
  }
  return usb_status;
 80108ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80108ec:	4618      	mov	r0, r3
 80108ee:	3710      	adds	r7, #16
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bd80      	pop	{r7, pc}

080108f4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b084      	sub	sp, #16
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
 80108fc:	4608      	mov	r0, r1
 80108fe:	4611      	mov	r1, r2
 8010900:	461a      	mov	r2, r3
 8010902:	4603      	mov	r3, r0
 8010904:	70fb      	strb	r3, [r7, #3]
 8010906:	460b      	mov	r3, r1
 8010908:	70bb      	strb	r3, [r7, #2]
 801090a:	4613      	mov	r3, r2
 801090c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801090e:	2300      	movs	r3, #0
 8010910:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010912:	2300      	movs	r3, #0
 8010914:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801091c:	78bb      	ldrb	r3, [r7, #2]
 801091e:	883a      	ldrh	r2, [r7, #0]
 8010920:	78f9      	ldrb	r1, [r7, #3]
 8010922:	f7f4 fd50 	bl	80053c6 <HAL_PCD_EP_Open>
 8010926:	4603      	mov	r3, r0
 8010928:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801092a:	7bbb      	ldrb	r3, [r7, #14]
 801092c:	2b03      	cmp	r3, #3
 801092e:	d817      	bhi.n	8010960 <USBD_LL_OpenEP+0x6c>
 8010930:	a201      	add	r2, pc, #4	; (adr r2, 8010938 <USBD_LL_OpenEP+0x44>)
 8010932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010936:	bf00      	nop
 8010938:	08010949 	.word	0x08010949
 801093c:	0801094f 	.word	0x0801094f
 8010940:	08010955 	.word	0x08010955
 8010944:	0801095b 	.word	0x0801095b
    case HAL_OK :
      usb_status = USBD_OK;
 8010948:	2300      	movs	r3, #0
 801094a:	73fb      	strb	r3, [r7, #15]
    break;
 801094c:	e00b      	b.n	8010966 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801094e:	2303      	movs	r3, #3
 8010950:	73fb      	strb	r3, [r7, #15]
    break;
 8010952:	e008      	b.n	8010966 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010954:	2301      	movs	r3, #1
 8010956:	73fb      	strb	r3, [r7, #15]
    break;
 8010958:	e005      	b.n	8010966 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801095a:	2303      	movs	r3, #3
 801095c:	73fb      	strb	r3, [r7, #15]
    break;
 801095e:	e002      	b.n	8010966 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8010960:	2303      	movs	r3, #3
 8010962:	73fb      	strb	r3, [r7, #15]
    break;
 8010964:	bf00      	nop
  }
  return usb_status;
 8010966:	7bfb      	ldrb	r3, [r7, #15]
}
 8010968:	4618      	mov	r0, r3
 801096a:	3710      	adds	r7, #16
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}

08010970 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b084      	sub	sp, #16
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
 8010978:	460b      	mov	r3, r1
 801097a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801097c:	2300      	movs	r3, #0
 801097e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010980:	2300      	movs	r3, #0
 8010982:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801098a:	78fa      	ldrb	r2, [r7, #3]
 801098c:	4611      	mov	r1, r2
 801098e:	4618      	mov	r0, r3
 8010990:	f7f4 fd81 	bl	8005496 <HAL_PCD_EP_Close>
 8010994:	4603      	mov	r3, r0
 8010996:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010998:	7bbb      	ldrb	r3, [r7, #14]
 801099a:	2b03      	cmp	r3, #3
 801099c:	d816      	bhi.n	80109cc <USBD_LL_CloseEP+0x5c>
 801099e:	a201      	add	r2, pc, #4	; (adr r2, 80109a4 <USBD_LL_CloseEP+0x34>)
 80109a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109a4:	080109b5 	.word	0x080109b5
 80109a8:	080109bb 	.word	0x080109bb
 80109ac:	080109c1 	.word	0x080109c1
 80109b0:	080109c7 	.word	0x080109c7
    case HAL_OK :
      usb_status = USBD_OK;
 80109b4:	2300      	movs	r3, #0
 80109b6:	73fb      	strb	r3, [r7, #15]
    break;
 80109b8:	e00b      	b.n	80109d2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80109ba:	2303      	movs	r3, #3
 80109bc:	73fb      	strb	r3, [r7, #15]
    break;
 80109be:	e008      	b.n	80109d2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80109c0:	2301      	movs	r3, #1
 80109c2:	73fb      	strb	r3, [r7, #15]
    break;
 80109c4:	e005      	b.n	80109d2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80109c6:	2303      	movs	r3, #3
 80109c8:	73fb      	strb	r3, [r7, #15]
    break;
 80109ca:	e002      	b.n	80109d2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80109cc:	2303      	movs	r3, #3
 80109ce:	73fb      	strb	r3, [r7, #15]
    break;
 80109d0:	bf00      	nop
  }
  return usb_status;
 80109d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80109d4:	4618      	mov	r0, r3
 80109d6:	3710      	adds	r7, #16
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}

080109dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	b084      	sub	sp, #16
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
 80109e4:	460b      	mov	r3, r1
 80109e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109e8:	2300      	movs	r3, #0
 80109ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109ec:	2300      	movs	r3, #0
 80109ee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80109f6:	78fa      	ldrb	r2, [r7, #3]
 80109f8:	4611      	mov	r1, r2
 80109fa:	4618      	mov	r0, r3
 80109fc:	f7f4 fe10 	bl	8005620 <HAL_PCD_EP_SetStall>
 8010a00:	4603      	mov	r3, r0
 8010a02:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010a04:	7bbb      	ldrb	r3, [r7, #14]
 8010a06:	2b03      	cmp	r3, #3
 8010a08:	d816      	bhi.n	8010a38 <USBD_LL_StallEP+0x5c>
 8010a0a:	a201      	add	r2, pc, #4	; (adr r2, 8010a10 <USBD_LL_StallEP+0x34>)
 8010a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a10:	08010a21 	.word	0x08010a21
 8010a14:	08010a27 	.word	0x08010a27
 8010a18:	08010a2d 	.word	0x08010a2d
 8010a1c:	08010a33 	.word	0x08010a33
    case HAL_OK :
      usb_status = USBD_OK;
 8010a20:	2300      	movs	r3, #0
 8010a22:	73fb      	strb	r3, [r7, #15]
    break;
 8010a24:	e00b      	b.n	8010a3e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010a26:	2303      	movs	r3, #3
 8010a28:	73fb      	strb	r3, [r7, #15]
    break;
 8010a2a:	e008      	b.n	8010a3e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	73fb      	strb	r3, [r7, #15]
    break;
 8010a30:	e005      	b.n	8010a3e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010a32:	2303      	movs	r3, #3
 8010a34:	73fb      	strb	r3, [r7, #15]
    break;
 8010a36:	e002      	b.n	8010a3e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010a38:	2303      	movs	r3, #3
 8010a3a:	73fb      	strb	r3, [r7, #15]
    break;
 8010a3c:	bf00      	nop
  }
  return usb_status;
 8010a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a40:	4618      	mov	r0, r3
 8010a42:	3710      	adds	r7, #16
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd80      	pop	{r7, pc}

08010a48 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b084      	sub	sp, #16
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
 8010a50:	460b      	mov	r3, r1
 8010a52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a54:	2300      	movs	r3, #0
 8010a56:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a58:	2300      	movs	r3, #0
 8010a5a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010a62:	78fa      	ldrb	r2, [r7, #3]
 8010a64:	4611      	mov	r1, r2
 8010a66:	4618      	mov	r0, r3
 8010a68:	f7f4 fe3c 	bl	80056e4 <HAL_PCD_EP_ClrStall>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010a70:	7bbb      	ldrb	r3, [r7, #14]
 8010a72:	2b03      	cmp	r3, #3
 8010a74:	d816      	bhi.n	8010aa4 <USBD_LL_ClearStallEP+0x5c>
 8010a76:	a201      	add	r2, pc, #4	; (adr r2, 8010a7c <USBD_LL_ClearStallEP+0x34>)
 8010a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a7c:	08010a8d 	.word	0x08010a8d
 8010a80:	08010a93 	.word	0x08010a93
 8010a84:	08010a99 	.word	0x08010a99
 8010a88:	08010a9f 	.word	0x08010a9f
    case HAL_OK :
      usb_status = USBD_OK;
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8010a90:	e00b      	b.n	8010aaa <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010a92:	2303      	movs	r3, #3
 8010a94:	73fb      	strb	r3, [r7, #15]
    break;
 8010a96:	e008      	b.n	8010aaa <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010a98:	2301      	movs	r3, #1
 8010a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8010a9c:	e005      	b.n	8010aaa <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010a9e:	2303      	movs	r3, #3
 8010aa0:	73fb      	strb	r3, [r7, #15]
    break;
 8010aa2:	e002      	b.n	8010aaa <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010aa4:	2303      	movs	r3, #3
 8010aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8010aa8:	bf00      	nop
  }
  return usb_status;
 8010aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	3710      	adds	r7, #16
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}

08010ab4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ab4:	b480      	push	{r7}
 8010ab6:	b085      	sub	sp, #20
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
 8010abc:	460b      	mov	r3, r1
 8010abe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010ac6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010ac8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	da0b      	bge.n	8010ae8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010ad0:	78fb      	ldrb	r3, [r7, #3]
 8010ad2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010ad6:	68f9      	ldr	r1, [r7, #12]
 8010ad8:	4613      	mov	r3, r2
 8010ada:	00db      	lsls	r3, r3, #3
 8010adc:	4413      	add	r3, r2
 8010ade:	009b      	lsls	r3, r3, #2
 8010ae0:	440b      	add	r3, r1
 8010ae2:	333e      	adds	r3, #62	; 0x3e
 8010ae4:	781b      	ldrb	r3, [r3, #0]
 8010ae6:	e00b      	b.n	8010b00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010ae8:	78fb      	ldrb	r3, [r7, #3]
 8010aea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010aee:	68f9      	ldr	r1, [r7, #12]
 8010af0:	4613      	mov	r3, r2
 8010af2:	00db      	lsls	r3, r3, #3
 8010af4:	4413      	add	r3, r2
 8010af6:	009b      	lsls	r3, r3, #2
 8010af8:	440b      	add	r3, r1
 8010afa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010afe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010b00:	4618      	mov	r0, r3
 8010b02:	3714      	adds	r7, #20
 8010b04:	46bd      	mov	sp, r7
 8010b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0a:	4770      	bx	lr

08010b0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b084      	sub	sp, #16
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
 8010b14:	460b      	mov	r3, r1
 8010b16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b18:	2300      	movs	r3, #0
 8010b1a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010b26:	78fa      	ldrb	r2, [r7, #3]
 8010b28:	4611      	mov	r1, r2
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f7f4 fc26 	bl	800537c <HAL_PCD_SetAddress>
 8010b30:	4603      	mov	r3, r0
 8010b32:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010b34:	7bbb      	ldrb	r3, [r7, #14]
 8010b36:	2b03      	cmp	r3, #3
 8010b38:	d816      	bhi.n	8010b68 <USBD_LL_SetUSBAddress+0x5c>
 8010b3a:	a201      	add	r2, pc, #4	; (adr r2, 8010b40 <USBD_LL_SetUSBAddress+0x34>)
 8010b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b40:	08010b51 	.word	0x08010b51
 8010b44:	08010b57 	.word	0x08010b57
 8010b48:	08010b5d 	.word	0x08010b5d
 8010b4c:	08010b63 	.word	0x08010b63
    case HAL_OK :
      usb_status = USBD_OK;
 8010b50:	2300      	movs	r3, #0
 8010b52:	73fb      	strb	r3, [r7, #15]
    break;
 8010b54:	e00b      	b.n	8010b6e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010b56:	2303      	movs	r3, #3
 8010b58:	73fb      	strb	r3, [r7, #15]
    break;
 8010b5a:	e008      	b.n	8010b6e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8010b60:	e005      	b.n	8010b6e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010b62:	2303      	movs	r3, #3
 8010b64:	73fb      	strb	r3, [r7, #15]
    break;
 8010b66:	e002      	b.n	8010b6e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8010b68:	2303      	movs	r3, #3
 8010b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8010b6c:	bf00      	nop
  }
  return usb_status;
 8010b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	3710      	adds	r7, #16
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}

08010b78 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b086      	sub	sp, #24
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	60f8      	str	r0, [r7, #12]
 8010b80:	607a      	str	r2, [r7, #4]
 8010b82:	603b      	str	r3, [r7, #0]
 8010b84:	460b      	mov	r3, r1
 8010b86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b88:	2300      	movs	r3, #0
 8010b8a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010b96:	7af9      	ldrb	r1, [r7, #11]
 8010b98:	683b      	ldr	r3, [r7, #0]
 8010b9a:	687a      	ldr	r2, [r7, #4]
 8010b9c:	f7f4 fd0f 	bl	80055be <HAL_PCD_EP_Transmit>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8010ba4:	7dbb      	ldrb	r3, [r7, #22]
 8010ba6:	2b03      	cmp	r3, #3
 8010ba8:	d816      	bhi.n	8010bd8 <USBD_LL_Transmit+0x60>
 8010baa:	a201      	add	r2, pc, #4	; (adr r2, 8010bb0 <USBD_LL_Transmit+0x38>)
 8010bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bb0:	08010bc1 	.word	0x08010bc1
 8010bb4:	08010bc7 	.word	0x08010bc7
 8010bb8:	08010bcd 	.word	0x08010bcd
 8010bbc:	08010bd3 	.word	0x08010bd3
    case HAL_OK :
      usb_status = USBD_OK;
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	75fb      	strb	r3, [r7, #23]
    break;
 8010bc4:	e00b      	b.n	8010bde <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010bc6:	2303      	movs	r3, #3
 8010bc8:	75fb      	strb	r3, [r7, #23]
    break;
 8010bca:	e008      	b.n	8010bde <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010bcc:	2301      	movs	r3, #1
 8010bce:	75fb      	strb	r3, [r7, #23]
    break;
 8010bd0:	e005      	b.n	8010bde <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010bd2:	2303      	movs	r3, #3
 8010bd4:	75fb      	strb	r3, [r7, #23]
    break;
 8010bd6:	e002      	b.n	8010bde <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8010bd8:	2303      	movs	r3, #3
 8010bda:	75fb      	strb	r3, [r7, #23]
    break;
 8010bdc:	bf00      	nop
  }
  return usb_status;
 8010bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8010be0:	4618      	mov	r0, r3
 8010be2:	3718      	adds	r7, #24
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}

08010be8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b086      	sub	sp, #24
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	60f8      	str	r0, [r7, #12]
 8010bf0:	607a      	str	r2, [r7, #4]
 8010bf2:	603b      	str	r3, [r7, #0]
 8010bf4:	460b      	mov	r3, r1
 8010bf6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010c06:	7af9      	ldrb	r1, [r7, #11]
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	687a      	ldr	r2, [r7, #4]
 8010c0c:	f7f4 fc8d 	bl	800552a <HAL_PCD_EP_Receive>
 8010c10:	4603      	mov	r3, r0
 8010c12:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8010c14:	7dbb      	ldrb	r3, [r7, #22]
 8010c16:	2b03      	cmp	r3, #3
 8010c18:	d816      	bhi.n	8010c48 <USBD_LL_PrepareReceive+0x60>
 8010c1a:	a201      	add	r2, pc, #4	; (adr r2, 8010c20 <USBD_LL_PrepareReceive+0x38>)
 8010c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c20:	08010c31 	.word	0x08010c31
 8010c24:	08010c37 	.word	0x08010c37
 8010c28:	08010c3d 	.word	0x08010c3d
 8010c2c:	08010c43 	.word	0x08010c43
    case HAL_OK :
      usb_status = USBD_OK;
 8010c30:	2300      	movs	r3, #0
 8010c32:	75fb      	strb	r3, [r7, #23]
    break;
 8010c34:	e00b      	b.n	8010c4e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010c36:	2303      	movs	r3, #3
 8010c38:	75fb      	strb	r3, [r7, #23]
    break;
 8010c3a:	e008      	b.n	8010c4e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010c3c:	2301      	movs	r3, #1
 8010c3e:	75fb      	strb	r3, [r7, #23]
    break;
 8010c40:	e005      	b.n	8010c4e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010c42:	2303      	movs	r3, #3
 8010c44:	75fb      	strb	r3, [r7, #23]
    break;
 8010c46:	e002      	b.n	8010c4e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8010c48:	2303      	movs	r3, #3
 8010c4a:	75fb      	strb	r3, [r7, #23]
    break;
 8010c4c:	bf00      	nop
  }
  return usb_status;
 8010c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3718      	adds	r7, #24
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}

08010c58 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b082      	sub	sp, #8
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
 8010c60:	460b      	mov	r3, r1
 8010c62:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010c6a:	78fa      	ldrb	r2, [r7, #3]
 8010c6c:	4611      	mov	r1, r2
 8010c6e:	4618      	mov	r0, r3
 8010c70:	f7f4 fc8d 	bl	800558e <HAL_PCD_EP_GetRxCount>
 8010c74:	4603      	mov	r3, r0
}
 8010c76:	4618      	mov	r0, r3
 8010c78:	3708      	adds	r7, #8
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	bd80      	pop	{r7, pc}
	...

08010c80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b082      	sub	sp, #8
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
 8010c88:	460b      	mov	r3, r1
 8010c8a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8010c8c:	78fb      	ldrb	r3, [r7, #3]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d002      	beq.n	8010c98 <HAL_PCDEx_LPM_Callback+0x18>
 8010c92:	2b01      	cmp	r3, #1
 8010c94:	d01f      	beq.n	8010cd6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8010c96:	e03b      	b.n	8010d10 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	6a1b      	ldr	r3, [r3, #32]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d007      	beq.n	8010cb0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010ca0:	f000 f854 	bl	8010d4c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010ca4:	4b1c      	ldr	r3, [pc, #112]	; (8010d18 <HAL_PCDEx_LPM_Callback+0x98>)
 8010ca6:	691b      	ldr	r3, [r3, #16]
 8010ca8:	4a1b      	ldr	r2, [pc, #108]	; (8010d18 <HAL_PCDEx_LPM_Callback+0x98>)
 8010caa:	f023 0306 	bic.w	r3, r3, #6
 8010cae:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	687a      	ldr	r2, [r7, #4]
 8010cbc:	6812      	ldr	r2, [r2, #0]
 8010cbe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010cc2:	f023 0301 	bic.w	r3, r3, #1
 8010cc6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f7fe f963 	bl	800ef9a <USBD_LL_Resume>
    break;
 8010cd4:	e01c      	b.n	8010d10 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	687a      	ldr	r2, [r7, #4]
 8010ce2:	6812      	ldr	r2, [r2, #0]
 8010ce4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010ce8:	f043 0301 	orr.w	r3, r3, #1
 8010cec:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	f7fe f934 	bl	800ef62 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	6a1b      	ldr	r3, [r3, #32]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d005      	beq.n	8010d0e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010d02:	4b05      	ldr	r3, [pc, #20]	; (8010d18 <HAL_PCDEx_LPM_Callback+0x98>)
 8010d04:	691b      	ldr	r3, [r3, #16]
 8010d06:	4a04      	ldr	r2, [pc, #16]	; (8010d18 <HAL_PCDEx_LPM_Callback+0x98>)
 8010d08:	f043 0306 	orr.w	r3, r3, #6
 8010d0c:	6113      	str	r3, [r2, #16]
    break;
 8010d0e:	bf00      	nop
}
 8010d10:	bf00      	nop
 8010d12:	3708      	adds	r7, #8
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}
 8010d18:	e000ed00 	.word	0xe000ed00

08010d1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010d1c:	b480      	push	{r7}
 8010d1e:	b083      	sub	sp, #12
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010d24:	4b03      	ldr	r3, [pc, #12]	; (8010d34 <USBD_static_malloc+0x18>)
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	370c      	adds	r7, #12
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d30:	4770      	bx	lr
 8010d32:	bf00      	nop
 8010d34:	20005e94 	.word	0x20005e94

08010d38 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010d38:	b480      	push	{r7}
 8010d3a:	b083      	sub	sp, #12
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]

}
 8010d40:	bf00      	nop
 8010d42:	370c      	adds	r7, #12
 8010d44:	46bd      	mov	sp, r7
 8010d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4a:	4770      	bx	lr

08010d4c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010d50:	f7f0 f994 	bl	800107c <SystemClock_Config>
}
 8010d54:	bf00      	nop
 8010d56:	bd80      	pop	{r7, pc}

08010d58 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b082      	sub	sp, #8
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
 8010d60:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8010d62:	683a      	ldr	r2, [r7, #0]
 8010d64:	2101      	movs	r1, #1
 8010d66:	486d      	ldr	r0, [pc, #436]	; (8010f1c <network_configure_activations+0x1c4>)
 8010d68:	f000 fb5a 	bl	8011420 <ai_platform_get_activations_map>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	f000 80ca 	beq.w	8010f08 <network_configure_activations+0x1b0>
    /* Updating activations (byte) offsets */
    
    serving_default_input_10_output_array.data = AI_PTR(g_network_activations_map[0] + 23392);
 8010d74:	4b69      	ldr	r3, [pc, #420]	; (8010f1c <network_configure_activations+0x1c4>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	f503 43b6 	add.w	r3, r3, #23296	; 0x5b00
 8010d7c:	3360      	adds	r3, #96	; 0x60
 8010d7e:	4a68      	ldr	r2, [pc, #416]	; (8010f20 <network_configure_activations+0x1c8>)
 8010d80:	6093      	str	r3, [r2, #8]
    serving_default_input_10_output_array.data_start = AI_PTR(g_network_activations_map[0] + 23392);
 8010d82:	4b66      	ldr	r3, [pc, #408]	; (8010f1c <network_configure_activations+0x1c4>)
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	f503 43b6 	add.w	r3, r3, #23296	; 0x5b00
 8010d8a:	3360      	adds	r3, #96	; 0x60
 8010d8c:	4a64      	ldr	r2, [pc, #400]	; (8010f20 <network_configure_activations+0x1c8>)
 8010d8e:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 29536);
 8010d90:	4b62      	ldr	r3, [pc, #392]	; (8010f1c <network_configure_activations+0x1c4>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	f503 43e6 	add.w	r3, r3, #29440	; 0x7300
 8010d98:	3360      	adds	r3, #96	; 0x60
 8010d9a:	4a62      	ldr	r2, [pc, #392]	; (8010f24 <network_configure_activations+0x1cc>)
 8010d9c:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 29536);
 8010d9e:	4b5f      	ldr	r3, [pc, #380]	; (8010f1c <network_configure_activations+0x1c4>)
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	f503 43e6 	add.w	r3, r3, #29440	; 0x7300
 8010da6:	3360      	adds	r3, #96	; 0x60
 8010da8:	4a5e      	ldr	r2, [pc, #376]	; (8010f24 <network_configure_activations+0x1cc>)
 8010daa:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 30084);
 8010dac:	4b5b      	ldr	r3, [pc, #364]	; (8010f1c <network_configure_activations+0x1c4>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	f503 43eb 	add.w	r3, r3, #30080	; 0x7580
 8010db4:	3304      	adds	r3, #4
 8010db6:	4a5c      	ldr	r2, [pc, #368]	; (8010f28 <network_configure_activations+0x1d0>)
 8010db8:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 30084);
 8010dba:	4b58      	ldr	r3, [pc, #352]	; (8010f1c <network_configure_activations+0x1c4>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	f503 43eb 	add.w	r3, r3, #30080	; 0x7580
 8010dc2:	3304      	adds	r3, #4
 8010dc4:	4a58      	ldr	r2, [pc, #352]	; (8010f28 <network_configure_activations+0x1d0>)
 8010dc6:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_output_array.data = AI_PTR(g_network_activations_map[0] + 3392);
 8010dc8:	4b54      	ldr	r3, [pc, #336]	; (8010f1c <network_configure_activations+0x1c4>)
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	f503 6354 	add.w	r3, r3, #3392	; 0xd40
 8010dd0:	4a56      	ldr	r2, [pc, #344]	; (8010f2c <network_configure_activations+0x1d4>)
 8010dd2:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 3392);
 8010dd4:	4b51      	ldr	r3, [pc, #324]	; (8010f1c <network_configure_activations+0x1c4>)
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	f503 6354 	add.w	r3, r3, #3392	; 0xd40
 8010ddc:	4a53      	ldr	r2, [pc, #332]	; (8010f2c <network_configure_activations+0x1d4>)
 8010dde:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 768);
 8010de0:	4b4e      	ldr	r3, [pc, #312]	; (8010f1c <network_configure_activations+0x1c4>)
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8010de8:	4a51      	ldr	r2, [pc, #324]	; (8010f30 <network_configure_activations+0x1d8>)
 8010dea:	6093      	str	r3, [r2, #8]
    conv2d_2_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 768);
 8010dec:	4b4b      	ldr	r3, [pc, #300]	; (8010f1c <network_configure_activations+0x1c4>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8010df4:	4a4e      	ldr	r2, [pc, #312]	; (8010f30 <network_configure_activations+0x1d8>)
 8010df6:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 27968);
 8010df8:	4b48      	ldr	r3, [pc, #288]	; (8010f1c <network_configure_activations+0x1c4>)
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	f503 43da 	add.w	r3, r3, #27904	; 0x6d00
 8010e00:	3340      	adds	r3, #64	; 0x40
 8010e02:	4a4c      	ldr	r2, [pc, #304]	; (8010f34 <network_configure_activations+0x1dc>)
 8010e04:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 27968);
 8010e06:	4b45      	ldr	r3, [pc, #276]	; (8010f1c <network_configure_activations+0x1c4>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	f503 43da 	add.w	r3, r3, #27904	; 0x6d00
 8010e0e:	3340      	adds	r3, #64	; 0x40
 8010e10:	4a48      	ldr	r2, [pc, #288]	; (8010f34 <network_configure_activations+0x1dc>)
 8010e12:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 34112);
 8010e14:	4b41      	ldr	r3, [pc, #260]	; (8010f1c <network_configure_activations+0x1c4>)
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
 8010e1c:	3340      	adds	r3, #64	; 0x40
 8010e1e:	4a46      	ldr	r2, [pc, #280]	; (8010f38 <network_configure_activations+0x1e0>)
 8010e20:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 34112);
 8010e22:	4b3e      	ldr	r3, [pc, #248]	; (8010f1c <network_configure_activations+0x1c4>)
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
 8010e2a:	3340      	adds	r3, #64	; 0x40
 8010e2c:	4a42      	ldr	r2, [pc, #264]	; (8010f38 <network_configure_activations+0x1e0>)
 8010e2e:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010e30:	4b3a      	ldr	r3, [pc, #232]	; (8010f1c <network_configure_activations+0x1c4>)
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	4a41      	ldr	r2, [pc, #260]	; (8010f3c <network_configure_activations+0x1e4>)
 8010e36:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8010e38:	4b38      	ldr	r3, [pc, #224]	; (8010f1c <network_configure_activations+0x1c4>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	4a3f      	ldr	r2, [pc, #252]	; (8010f3c <network_configure_activations+0x1e4>)
 8010e3e:	60d3      	str	r3, [r2, #12]
    
    conv2d_4_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 12288);
 8010e40:	4b36      	ldr	r3, [pc, #216]	; (8010f1c <network_configure_activations+0x1c4>)
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010e48:	4a3d      	ldr	r2, [pc, #244]	; (8010f40 <network_configure_activations+0x1e8>)
 8010e4a:	6093      	str	r3, [r2, #8]
    conv2d_4_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12288);
 8010e4c:	4b33      	ldr	r3, [pc, #204]	; (8010f1c <network_configure_activations+0x1c4>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010e54:	4a3a      	ldr	r2, [pc, #232]	; (8010f40 <network_configure_activations+0x1e8>)
 8010e56:	60d3      	str	r3, [r2, #12]
    
    conv2d_4_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010e58:	4b30      	ldr	r3, [pc, #192]	; (8010f1c <network_configure_activations+0x1c4>)
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	4a39      	ldr	r2, [pc, #228]	; (8010f44 <network_configure_activations+0x1ec>)
 8010e5e:	6093      	str	r3, [r2, #8]
    conv2d_4_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8010e60:	4b2e      	ldr	r3, [pc, #184]	; (8010f1c <network_configure_activations+0x1c4>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	4a37      	ldr	r2, [pc, #220]	; (8010f44 <network_configure_activations+0x1ec>)
 8010e66:	60d3      	str	r3, [r2, #12]
    
    conv2d_4_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 7168);
 8010e68:	4b2c      	ldr	r3, [pc, #176]	; (8010f1c <network_configure_activations+0x1c4>)
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8010e70:	4a35      	ldr	r2, [pc, #212]	; (8010f48 <network_configure_activations+0x1f0>)
 8010e72:	6093      	str	r3, [r2, #8]
    conv2d_4_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 7168);
 8010e74:	4b29      	ldr	r3, [pc, #164]	; (8010f1c <network_configure_activations+0x1c4>)
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8010e7c:	4a32      	ldr	r2, [pc, #200]	; (8010f48 <network_configure_activations+0x1f0>)
 8010e7e:	60d3      	str	r3, [r2, #12]
    
    conv2d_4_output_array.data = AI_PTR(g_network_activations_map[0] + 8704);
 8010e80:	4b26      	ldr	r3, [pc, #152]	; (8010f1c <network_configure_activations+0x1c4>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8010e88:	4a30      	ldr	r2, [pc, #192]	; (8010f4c <network_configure_activations+0x1f4>)
 8010e8a:	6093      	str	r3, [r2, #8]
    conv2d_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 8704);
 8010e8c:	4b23      	ldr	r3, [pc, #140]	; (8010f1c <network_configure_activations+0x1c4>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8010e94:	4a2d      	ldr	r2, [pc, #180]	; (8010f4c <network_configure_activations+0x1f4>)
 8010e96:	60d3      	str	r3, [r2, #12]
    
    pool_6_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010e98:	4b20      	ldr	r3, [pc, #128]	; (8010f1c <network_configure_activations+0x1c4>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	4a2c      	ldr	r2, [pc, #176]	; (8010f50 <network_configure_activations+0x1f8>)
 8010e9e:	6093      	str	r3, [r2, #8]
    pool_6_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8010ea0:	4b1e      	ldr	r3, [pc, #120]	; (8010f1c <network_configure_activations+0x1c4>)
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	4a2a      	ldr	r2, [pc, #168]	; (8010f50 <network_configure_activations+0x1f8>)
 8010ea6:	60d3      	str	r3, [r2, #12]
    
    gemm_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 64);
 8010ea8:	4b1c      	ldr	r3, [pc, #112]	; (8010f1c <network_configure_activations+0x1c4>)
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	3340      	adds	r3, #64	; 0x40
 8010eae:	4a29      	ldr	r2, [pc, #164]	; (8010f54 <network_configure_activations+0x1fc>)
 8010eb0:	6093      	str	r3, [r2, #8]
    gemm_7_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 64);
 8010eb2:	4b1a      	ldr	r3, [pc, #104]	; (8010f1c <network_configure_activations+0x1c4>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	3340      	adds	r3, #64	; 0x40
 8010eb8:	4a26      	ldr	r2, [pc, #152]	; (8010f54 <network_configure_activations+0x1fc>)
 8010eba:	60d3      	str	r3, [r2, #12]
    
    gemm_7_output_array.data = AI_PTR(g_network_activations_map[0] + 192);
 8010ebc:	4b17      	ldr	r3, [pc, #92]	; (8010f1c <network_configure_activations+0x1c4>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	33c0      	adds	r3, #192	; 0xc0
 8010ec2:	4a25      	ldr	r2, [pc, #148]	; (8010f58 <network_configure_activations+0x200>)
 8010ec4:	6093      	str	r3, [r2, #8]
    gemm_7_output_array.data_start = AI_PTR(g_network_activations_map[0] + 192);
 8010ec6:	4b15      	ldr	r3, [pc, #84]	; (8010f1c <network_configure_activations+0x1c4>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	33c0      	adds	r3, #192	; 0xc0
 8010ecc:	4a22      	ldr	r2, [pc, #136]	; (8010f58 <network_configure_activations+0x200>)
 8010ece:	60d3      	str	r3, [r2, #12]
    
    nl_8_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010ed0:	4b12      	ldr	r3, [pc, #72]	; (8010f1c <network_configure_activations+0x1c4>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	4a21      	ldr	r2, [pc, #132]	; (8010f5c <network_configure_activations+0x204>)
 8010ed6:	6093      	str	r3, [r2, #8]
    nl_8_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8010ed8:	4b10      	ldr	r3, [pc, #64]	; (8010f1c <network_configure_activations+0x1c4>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	4a1f      	ldr	r2, [pc, #124]	; (8010f5c <network_configure_activations+0x204>)
 8010ede:	60d3      	str	r3, [r2, #12]
    
    nl_8_output_array.data = AI_PTR(g_network_activations_map[0] + 40);
 8010ee0:	4b0e      	ldr	r3, [pc, #56]	; (8010f1c <network_configure_activations+0x1c4>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	3328      	adds	r3, #40	; 0x28
 8010ee6:	4a1e      	ldr	r2, [pc, #120]	; (8010f60 <network_configure_activations+0x208>)
 8010ee8:	6093      	str	r3, [r2, #8]
    nl_8_output_array.data_start = AI_PTR(g_network_activations_map[0] + 40);
 8010eea:	4b0c      	ldr	r3, [pc, #48]	; (8010f1c <network_configure_activations+0x1c4>)
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	3328      	adds	r3, #40	; 0x28
 8010ef0:	4a1b      	ldr	r2, [pc, #108]	; (8010f60 <network_configure_activations+0x208>)
 8010ef2:	60d3      	str	r3, [r2, #12]
    
    conversion_9_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010ef4:	4b09      	ldr	r3, [pc, #36]	; (8010f1c <network_configure_activations+0x1c4>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	4a1a      	ldr	r2, [pc, #104]	; (8010f64 <network_configure_activations+0x20c>)
 8010efa:	6093      	str	r3, [r2, #8]
    conversion_9_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8010efc:	4b07      	ldr	r3, [pc, #28]	; (8010f1c <network_configure_activations+0x1c4>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	4a18      	ldr	r2, [pc, #96]	; (8010f64 <network_configure_activations+0x20c>)
 8010f02:	60d3      	str	r3, [r2, #12]
    
    return true;
 8010f04:	2301      	movs	r3, #1
 8010f06:	e005      	b.n	8010f14 <network_configure_activations+0x1bc>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8010f08:	2213      	movs	r2, #19
 8010f0a:	2130      	movs	r1, #48	; 0x30
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	f000 fadb 	bl	80114c8 <ai_platform_network_set_error>
  return false;
 8010f12:	2300      	movs	r3, #0
}
 8010f14:	4618      	mov	r0, r3
 8010f16:	3708      	adds	r7, #8
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}
 8010f1c:	200060b4 	.word	0x200060b4
 8010f20:	2000326c 	.word	0x2000326c
 8010f24:	200031ec 	.word	0x200031ec
 8010f28:	200031fc 	.word	0x200031fc
 8010f2c:	2000327c 	.word	0x2000327c
 8010f30:	2000328c 	.word	0x2000328c
 8010f34:	2000320c 	.word	0x2000320c
 8010f38:	2000321c 	.word	0x2000321c
 8010f3c:	2000329c 	.word	0x2000329c
 8010f40:	2000310c 	.word	0x2000310c
 8010f44:	2000322c 	.word	0x2000322c
 8010f48:	2000323c 	.word	0x2000323c
 8010f4c:	2000311c 	.word	0x2000311c
 8010f50:	2000312c 	.word	0x2000312c
 8010f54:	2000324c 	.word	0x2000324c
 8010f58:	2000313c 	.word	0x2000313c
 8010f5c:	2000325c 	.word	0x2000325c
 8010f60:	2000314c 	.word	0x2000314c
 8010f64:	2000315c 	.word	0x2000315c

08010f68 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b082      	sub	sp, #8
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
 8010f70:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8010f72:	683a      	ldr	r2, [r7, #0]
 8010f74:	2101      	movs	r1, #1
 8010f76:	4852      	ldr	r0, [pc, #328]	; (80110c0 <network_configure_weights+0x158>)
 8010f78:	f000 f9fe 	bl	8011378 <ai_platform_get_weights_map>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	f000 8094 	beq.w	80110ac <network_configure_weights+0x144>
    /* Updating weights (byte) offsets */
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8010f84:	4b4f      	ldr	r3, [pc, #316]	; (80110c4 <network_configure_weights+0x15c>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010f8c:	4a4d      	ldr	r2, [pc, #308]	; (80110c4 <network_configure_weights+0x15c>)
 8010f8e:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8010f90:	4b4b      	ldr	r3, [pc, #300]	; (80110c0 <network_configure_weights+0x158>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	4a4b      	ldr	r2, [pc, #300]	; (80110c4 <network_configure_weights+0x15c>)
 8010f96:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8010f98:	4b49      	ldr	r3, [pc, #292]	; (80110c0 <network_configure_weights+0x158>)
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	4a49      	ldr	r2, [pc, #292]	; (80110c4 <network_configure_weights+0x15c>)
 8010f9e:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8010fa0:	4b49      	ldr	r3, [pc, #292]	; (80110c8 <network_configure_weights+0x160>)
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010fa8:	4a47      	ldr	r2, [pc, #284]	; (80110c8 <network_configure_weights+0x160>)
 8010faa:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 144);
 8010fac:	4b44      	ldr	r3, [pc, #272]	; (80110c0 <network_configure_weights+0x158>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	3390      	adds	r3, #144	; 0x90
 8010fb2:	4a45      	ldr	r2, [pc, #276]	; (80110c8 <network_configure_weights+0x160>)
 8010fb4:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 144);
 8010fb6:	4b42      	ldr	r3, [pc, #264]	; (80110c0 <network_configure_weights+0x158>)
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	3390      	adds	r3, #144	; 0x90
 8010fbc:	4a42      	ldr	r2, [pc, #264]	; (80110c8 <network_configure_weights+0x160>)
 8010fbe:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8010fc0:	4b42      	ldr	r3, [pc, #264]	; (80110cc <network_configure_weights+0x164>)
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010fc8:	4a40      	ldr	r2, [pc, #256]	; (80110cc <network_configure_weights+0x164>)
 8010fca:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 208);
 8010fcc:	4b3c      	ldr	r3, [pc, #240]	; (80110c0 <network_configure_weights+0x158>)
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	33d0      	adds	r3, #208	; 0xd0
 8010fd2:	4a3e      	ldr	r2, [pc, #248]	; (80110cc <network_configure_weights+0x164>)
 8010fd4:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 208);
 8010fd6:	4b3a      	ldr	r3, [pc, #232]	; (80110c0 <network_configure_weights+0x158>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	33d0      	adds	r3, #208	; 0xd0
 8010fdc:	4a3b      	ldr	r2, [pc, #236]	; (80110cc <network_configure_weights+0x164>)
 8010fde:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8010fe0:	4b3b      	ldr	r3, [pc, #236]	; (80110d0 <network_configure_weights+0x168>)
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010fe8:	4a39      	ldr	r2, [pc, #228]	; (80110d0 <network_configure_weights+0x168>)
 8010fea:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 4816);
 8010fec:	4b34      	ldr	r3, [pc, #208]	; (80110c0 <network_configure_weights+0x158>)
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 8010ff4:	3310      	adds	r3, #16
 8010ff6:	4a36      	ldr	r2, [pc, #216]	; (80110d0 <network_configure_weights+0x168>)
 8010ff8:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 4816);
 8010ffa:	4b31      	ldr	r3, [pc, #196]	; (80110c0 <network_configure_weights+0x158>)
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 8011002:	3310      	adds	r3, #16
 8011004:	4a32      	ldr	r2, [pc, #200]	; (80110d0 <network_configure_weights+0x168>)
 8011006:	60d3      	str	r3, [r2, #12]
    
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8011008:	4b32      	ldr	r3, [pc, #200]	; (80110d4 <network_configure_weights+0x16c>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011010:	4a30      	ldr	r2, [pc, #192]	; (80110d4 <network_configure_weights+0x16c>)
 8011012:	6013      	str	r3, [r2, #0]
    conv2d_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 4944);
 8011014:	4b2a      	ldr	r3, [pc, #168]	; (80110c0 <network_configure_weights+0x158>)
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 801101c:	3310      	adds	r3, #16
 801101e:	4a2d      	ldr	r2, [pc, #180]	; (80110d4 <network_configure_weights+0x16c>)
 8011020:	6093      	str	r3, [r2, #8]
    conv2d_4_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 4944);
 8011022:	4b27      	ldr	r3, [pc, #156]	; (80110c0 <network_configure_weights+0x158>)
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 801102a:	3310      	adds	r3, #16
 801102c:	4a29      	ldr	r2, [pc, #164]	; (80110d4 <network_configure_weights+0x16c>)
 801102e:	60d3      	str	r3, [r2, #12]
    
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8011030:	4b29      	ldr	r3, [pc, #164]	; (80110d8 <network_configure_weights+0x170>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011038:	4a27      	ldr	r2, [pc, #156]	; (80110d8 <network_configure_weights+0x170>)
 801103a:	6013      	str	r3, [r2, #0]
    conv2d_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 23376);
 801103c:	4b20      	ldr	r3, [pc, #128]	; (80110c0 <network_configure_weights+0x158>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	f503 43b6 	add.w	r3, r3, #23296	; 0x5b00
 8011044:	3350      	adds	r3, #80	; 0x50
 8011046:	4a24      	ldr	r2, [pc, #144]	; (80110d8 <network_configure_weights+0x170>)
 8011048:	6093      	str	r3, [r2, #8]
    conv2d_4_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 23376);
 801104a:	4b1d      	ldr	r3, [pc, #116]	; (80110c0 <network_configure_weights+0x158>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	f503 43b6 	add.w	r3, r3, #23296	; 0x5b00
 8011052:	3350      	adds	r3, #80	; 0x50
 8011054:	4a20      	ldr	r2, [pc, #128]	; (80110d8 <network_configure_weights+0x170>)
 8011056:	60d3      	str	r3, [r2, #12]
    
    gemm_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8011058:	4b20      	ldr	r3, [pc, #128]	; (80110dc <network_configure_weights+0x174>)
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011060:	4a1e      	ldr	r2, [pc, #120]	; (80110dc <network_configure_weights+0x174>)
 8011062:	6013      	str	r3, [r2, #0]
    gemm_7_weights_array.data = AI_PTR(g_network_weights_map[0] + 23632);
 8011064:	4b16      	ldr	r3, [pc, #88]	; (80110c0 <network_configure_weights+0x158>)
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 801106c:	3350      	adds	r3, #80	; 0x50
 801106e:	4a1b      	ldr	r2, [pc, #108]	; (80110dc <network_configure_weights+0x174>)
 8011070:	6093      	str	r3, [r2, #8]
    gemm_7_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 23632);
 8011072:	4b13      	ldr	r3, [pc, #76]	; (80110c0 <network_configure_weights+0x158>)
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 801107a:	3350      	adds	r3, #80	; 0x50
 801107c:	4a17      	ldr	r2, [pc, #92]	; (80110dc <network_configure_weights+0x174>)
 801107e:	60d3      	str	r3, [r2, #12]
    
    gemm_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8011080:	4b17      	ldr	r3, [pc, #92]	; (80110e0 <network_configure_weights+0x178>)
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011088:	4a15      	ldr	r2, [pc, #84]	; (80110e0 <network_configure_weights+0x178>)
 801108a:	6013      	str	r3, [r2, #0]
    gemm_7_bias_array.data = AI_PTR(g_network_weights_map[0] + 24272);
 801108c:	4b0c      	ldr	r3, [pc, #48]	; (80110c0 <network_configure_weights+0x158>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8011094:	3350      	adds	r3, #80	; 0x50
 8011096:	4a12      	ldr	r2, [pc, #72]	; (80110e0 <network_configure_weights+0x178>)
 8011098:	6093      	str	r3, [r2, #8]
    gemm_7_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 24272);
 801109a:	4b09      	ldr	r3, [pc, #36]	; (80110c0 <network_configure_weights+0x158>)
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80110a2:	3350      	adds	r3, #80	; 0x50
 80110a4:	4a0e      	ldr	r2, [pc, #56]	; (80110e0 <network_configure_weights+0x178>)
 80110a6:	60d3      	str	r3, [r2, #12]
    
    return true;
 80110a8:	2301      	movs	r3, #1
 80110aa:	e005      	b.n	80110b8 <network_configure_weights+0x150>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80110ac:	2212      	movs	r2, #18
 80110ae:	2130      	movs	r1, #48	; 0x30
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f000 fa09 	bl	80114c8 <ai_platform_network_set_error>
  return false;
 80110b6:	2300      	movs	r3, #0
}
 80110b8:	4618      	mov	r0, r3
 80110ba:	3708      	adds	r7, #8
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}
 80110c0:	200060b8 	.word	0x200060b8
 80110c4:	2000316c 	.word	0x2000316c
 80110c8:	2000317c 	.word	0x2000317c
 80110cc:	2000318c 	.word	0x2000318c
 80110d0:	2000319c 	.word	0x2000319c
 80110d4:	200031ac 	.word	0x200031ac
 80110d8:	200031bc 	.word	0x200031bc
 80110dc:	200031cc 	.word	0x200031cc
 80110e0:	200031dc 	.word	0x200031dc

080110e4 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b084      	sub	sp, #16
 80110e8:	af02      	add	r7, sp, #8
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80110ee:	2300      	movs	r3, #0
 80110f0:	9301      	str	r3, [sp, #4]
 80110f2:	2305      	movs	r3, #5
 80110f4:	9300      	str	r3, [sp, #0]
 80110f6:	2301      	movs	r3, #1
 80110f8:	4a04      	ldr	r2, [pc, #16]	; (801110c <ai_network_create+0x28>)
 80110fa:	6839      	ldr	r1, [r7, #0]
 80110fc:	6878      	ldr	r0, [r7, #4]
 80110fe:	f000 fb8f 	bl	8011820 <ai_platform_network_create>
 8011102:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8011104:	4618      	mov	r0, r3
 8011106:	3708      	adds	r7, #8
 8011108:	46bd      	mov	sp, r7
 801110a:	bd80      	pop	{r7, pc}
 801110c:	20003dd4 	.word	0x20003dd4

08011110 <ai_network_inputs_get>:
    return err;
}

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b082      	sub	sp, #8
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
 8011118:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d104      	bne.n	801112a <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8011120:	4b06      	ldr	r3, [pc, #24]	; (801113c <ai_network_inputs_get+0x2c>)
 8011122:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	4a06      	ldr	r2, [pc, #24]	; (8011140 <ai_network_inputs_get+0x30>)
 8011128:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 801112a:	6839      	ldr	r1, [r7, #0]
 801112c:	6878      	ldr	r0, [r7, #4]
 801112e:	f000 f9d1 	bl	80114d4 <ai_platform_inputs_get>
 8011132:	4603      	mov	r3, r0
}
 8011134:	4618      	mov	r0, r3
 8011136:	3708      	adds	r7, #8
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}
 801113c:	20003dd4 	.word	0x20003dd4
 8011140:	a1c00100 	.word	0xa1c00100

08011144 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b082      	sub	sp, #8
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
 801114c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d104      	bne.n	801115e <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8011154:	4b06      	ldr	r3, [pc, #24]	; (8011170 <ai_network_outputs_get+0x2c>)
 8011156:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	4a06      	ldr	r2, [pc, #24]	; (8011174 <ai_network_outputs_get+0x30>)
 801115c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 801115e:	6839      	ldr	r1, [r7, #0]
 8011160:	6878      	ldr	r0, [r7, #4]
 8011162:	f000 fa8d 	bl	8011680 <ai_platform_outputs_get>
 8011166:	4603      	mov	r3, r0
}
 8011168:	4618      	mov	r0, r3
 801116a:	3708      	adds	r7, #8
 801116c:	46bd      	mov	sp, r7
 801116e:	bd80      	pop	{r7, pc}
 8011170:	20003dd4 	.word	0x20003dd4
 8011174:	a1c00100 	.word	0xa1c00100

08011178 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b084      	sub	sp, #16
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
 8011180:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8011182:	6839      	ldr	r1, [r7, #0]
 8011184:	6878      	ldr	r0, [r7, #4]
 8011186:	f000 fc21 	bl	80119cc <ai_platform_network_init>
 801118a:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d101      	bne.n	8011196 <ai_network_init+0x1e>
 8011192:	2300      	movs	r3, #0
 8011194:	e028      	b.n	80111e8 <ai_network_init+0x70>

  ai_bool ok = true;
 8011196:	2301      	movs	r3, #1
 8011198:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 801119a:	6839      	ldr	r1, [r7, #0]
 801119c:	68f8      	ldr	r0, [r7, #12]
 801119e:	f7ff fee3 	bl	8010f68 <network_configure_weights>
 80111a2:	4603      	mov	r3, r0
 80111a4:	461a      	mov	r2, r3
 80111a6:	7afb      	ldrb	r3, [r7, #11]
 80111a8:	4013      	ands	r3, r2
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	bf14      	ite	ne
 80111ae:	2301      	movne	r3, #1
 80111b0:	2300      	moveq	r3, #0
 80111b2:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 80111b4:	6839      	ldr	r1, [r7, #0]
 80111b6:	68f8      	ldr	r0, [r7, #12]
 80111b8:	f7ff fdce 	bl	8010d58 <network_configure_activations>
 80111bc:	4603      	mov	r3, r0
 80111be:	461a      	mov	r2, r3
 80111c0:	7afb      	ldrb	r3, [r7, #11]
 80111c2:	4013      	ands	r3, r2
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	bf14      	ite	ne
 80111c8:	2301      	movne	r3, #1
 80111ca:	2300      	moveq	r3, #0
 80111cc:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	f000 fcea 	bl	8011ba8 <ai_platform_network_post_init>
 80111d4:	4603      	mov	r3, r0
 80111d6:	461a      	mov	r2, r3
 80111d8:	7afb      	ldrb	r3, [r7, #11]
 80111da:	4013      	ands	r3, r2
 80111dc:	2b00      	cmp	r3, #0
 80111de:	bf14      	ite	ne
 80111e0:	2301      	movne	r3, #1
 80111e2:	2300      	moveq	r3, #0
 80111e4:	72fb      	strb	r3, [r7, #11]

  return ok;
 80111e6:	7afb      	ldrb	r3, [r7, #11]
}
 80111e8:	4618      	mov	r0, r3
 80111ea:	3710      	adds	r7, #16
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}

080111f0 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b084      	sub	sp, #16
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	60f8      	str	r0, [r7, #12]
 80111f8:	60b9      	str	r1, [r7, #8]
 80111fa:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80111fc:	687a      	ldr	r2, [r7, #4]
 80111fe:	68b9      	ldr	r1, [r7, #8]
 8011200:	68f8      	ldr	r0, [r7, #12]
 8011202:	f000 fd59 	bl	8011cb8 <ai_platform_network_process>
 8011206:	4603      	mov	r3, r0
}
 8011208:	4618      	mov	r0, r3
 801120a:	3710      	adds	r7, #16
 801120c:	46bd      	mov	sp, r7
 801120e:	bd80      	pop	{r7, pc}

08011210 <ai_network_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_activations_buffer_get(const ai_handle ptr)
{
 8011210:	b4b0      	push	{r4, r5, r7}
 8011212:	b08f      	sub	sp, #60	; 0x3c
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
 8011218:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 801121a:	4b15      	ldr	r3, [pc, #84]	; (8011270 <ai_network_data_activations_buffer_get+0x60>)
 801121c:	61fb      	str	r3, [r7, #28]
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	623b      	str	r3, [r7, #32]
 8011222:	2300      	movs	r3, #0
 8011224:	627b      	str	r3, [r7, #36]	; 0x24
 8011226:	2300      	movs	r3, #0
 8011228:	62bb      	str	r3, [r7, #40]	; 0x28
 801122a:	f249 1340 	movw	r3, #37184	; 0x9140
 801122e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011230:	2301      	movs	r3, #1
 8011232:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8011236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011238:	2204      	movs	r2, #4
 801123a:	f362 231f 	bfi	r3, r2, #8, #24
 801123e:	633b      	str	r3, [r7, #48]	; 0x30
 8011240:	4b0c      	ldr	r3, [pc, #48]	; (8011274 <ai_network_data_activations_buffer_get+0x64>)
 8011242:	f107 040c 	add.w	r4, r7, #12
 8011246:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011248:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801124c:	f107 030c 	add.w	r3, r7, #12
 8011250:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_ACTIVATIONS_SIZE, 1, AI_NETWORK_DATA_ACTIVATIONS_COUNT),
    AI_NETWORK_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	461d      	mov	r5, r3
 8011256:	f107 041c 	add.w	r4, r7, #28
 801125a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801125c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801125e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8011262:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	373c      	adds	r7, #60	; 0x3c
 801126a:	46bd      	mov	sp, r7
 801126c:	bcb0      	pop	{r4, r5, r7}
 801126e:	4770      	bx	lr
 8011270:	00040440 	.word	0x00040440
 8011274:	0801bdd0 	.word	0x0801bdd0

08011278 <ai_network_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_weights_buffer_get(const ai_handle ptr)
{
 8011278:	b4b0      	push	{r4, r5, r7}
 801127a:	b08f      	sub	sp, #60	; 0x3c
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
 8011280:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 8011282:	4b15      	ldr	r3, [pc, #84]	; (80112d8 <ai_network_data_weights_buffer_get+0x60>)
 8011284:	61fb      	str	r3, [r7, #28]
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	623b      	str	r3, [r7, #32]
 801128a:	2300      	movs	r3, #0
 801128c:	627b      	str	r3, [r7, #36]	; 0x24
 801128e:	2300      	movs	r3, #0
 8011290:	62bb      	str	r3, [r7, #40]	; 0x28
 8011292:	f645 63f8 	movw	r3, #24312	; 0x5ef8
 8011296:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011298:	2301      	movs	r3, #1
 801129a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 801129e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112a0:	2204      	movs	r2, #4
 80112a2:	f362 231f 	bfi	r3, r2, #8, #24
 80112a6:	633b      	str	r3, [r7, #48]	; 0x30
 80112a8:	4b0c      	ldr	r3, [pc, #48]	; (80112dc <ai_network_data_weights_buffer_get+0x64>)
 80112aa:	f107 040c 	add.w	r4, r7, #12
 80112ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80112b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80112b4:	f107 030c 	add.w	r3, r7, #12
 80112b8:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_WEIGHTS_SIZE, 1, AI_NETWORK_DATA_WEIGHTS_COUNT),
    AI_NETWORK_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	461d      	mov	r5, r3
 80112be:	f107 041c 	add.w	r4, r7, #28
 80112c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80112c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80112c6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80112ca:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80112ce:	6878      	ldr	r0, [r7, #4]
 80112d0:	373c      	adds	r7, #60	; 0x3c
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bcb0      	pop	{r4, r5, r7}
 80112d6:	4770      	bx	lr
 80112d8:	40040440 	.word	0x40040440
 80112dc:	0801bde0 	.word	0x0801bde0

080112e0 <ai_network_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
 80112e0:	b480      	push	{r7}
 80112e2:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_network_weights_table);
 80112e4:	4b02      	ldr	r3, [pc, #8]	; (80112f0 <ai_network_data_weights_get+0x10>)

}
 80112e6:	4618      	mov	r0, r3
 80112e8:	46bd      	mov	sp, r7
 80112ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ee:	4770      	bx	lr
 80112f0:	20003e78 	.word	0x20003e78

080112f4 <ai_buffer_get_size>:
 80112f4:	b378      	cbz	r0, 8011356 <ai_buffer_get_size+0x62>
 80112f6:	b410      	push	{r4}
 80112f8:	6803      	ldr	r3, [r0, #0]
 80112fa:	4a17      	ldr	r2, [pc, #92]	; (8011358 <ai_buffer_get_size+0x64>)
 80112fc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8011300:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011304:	4293      	cmp	r3, r2
 8011306:	d01e      	beq.n	8011346 <ai_buffer_get_size+0x52>
 8011308:	6984      	ldr	r4, [r0, #24]
 801130a:	6862      	ldr	r2, [r4, #4]
 801130c:	7d03      	ldrb	r3, [r0, #20]
 801130e:	6941      	ldr	r1, [r0, #20]
 8011310:	f1a3 0301 	sub.w	r3, r3, #1
 8011314:	fab3 f383 	clz	r3, r3
 8011318:	095b      	lsrs	r3, r3, #5
 801131a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 801131e:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8011322:	da0b      	bge.n	801133c <ai_buffer_get_size+0x48>
 8011324:	2b01      	cmp	r3, #1
 8011326:	d102      	bne.n	801132e <ai_buffer_get_size+0x3a>
 8011328:	2802      	cmp	r0, #2
 801132a:	d007      	beq.n	801133c <ai_buffer_get_size+0x48>
 801132c:	2302      	movs	r3, #2
 801132e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8011332:	3301      	adds	r3, #1
 8011334:	4298      	cmp	r0, r3
 8011336:	fb01 f202 	mul.w	r2, r1, r2
 801133a:	d1f3      	bne.n	8011324 <ai_buffer_get_size+0x30>
 801133c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8011340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011344:	4770      	bx	lr
 8011346:	2900      	cmp	r1, #0
 8011348:	d0de      	beq.n	8011308 <ai_buffer_get_size+0x14>
 801134a:	6984      	ldr	r4, [r0, #24]
 801134c:	6863      	ldr	r3, [r4, #4]
 801134e:	331f      	adds	r3, #31
 8011350:	f023 021f 	bic.w	r2, r3, #31
 8011354:	e7da      	b.n	801130c <ai_buffer_get_size+0x18>
 8011356:	4770      	bx	lr
 8011358:	000400c0 	.word	0x000400c0

0801135c <ai_buffer_array_sane>:
 801135c:	b138      	cbz	r0, 801136e <ai_buffer_array_sane+0x12>
 801135e:	6843      	ldr	r3, [r0, #4]
 8011360:	b123      	cbz	r3, 801136c <ai_buffer_array_sane+0x10>
 8011362:	8840      	ldrh	r0, [r0, #2]
 8011364:	3800      	subs	r0, #0
 8011366:	bf18      	it	ne
 8011368:	2001      	movne	r0, #1
 801136a:	4770      	bx	lr
 801136c:	4618      	mov	r0, r3
 801136e:	4770      	bx	lr

08011370 <_ai_platform_acquire_crc>:
 8011370:	2001      	movs	r0, #1
 8011372:	4770      	bx	lr

08011374 <_ai_platform_release_crc>:
 8011374:	4770      	bx	lr
 8011376:	bf00      	nop

08011378 <ai_platform_get_weights_map>:
 8011378:	2a00      	cmp	r2, #0
 801137a:	d037      	beq.n	80113ec <ai_platform_get_weights_map+0x74>
 801137c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801137e:	4604      	mov	r4, r0
 8011380:	b1a0      	cbz	r0, 80113ac <ai_platform_get_weights_map+0x34>
 8011382:	460f      	mov	r7, r1
 8011384:	b191      	cbz	r1, 80113ac <ai_platform_get_weights_map+0x34>
 8011386:	4b25      	ldr	r3, [pc, #148]	; (801141c <ai_platform_get_weights_map+0xa4>)
 8011388:	6810      	ldr	r0, [r2, #0]
 801138a:	4298      	cmp	r0, r3
 801138c:	4615      	mov	r5, r2
 801138e:	d00f      	beq.n	80113b0 <ai_platform_get_weights_map+0x38>
 8011390:	6855      	ldr	r5, [r2, #4]
 8011392:	b15d      	cbz	r5, 80113ac <ai_platform_get_weights_map+0x34>
 8011394:	682e      	ldr	r6, [r5, #0]
 8011396:	429e      	cmp	r6, r3
 8011398:	d02a      	beq.n	80113f0 <ai_platform_get_weights_map+0x78>
 801139a:	f1a1 0001 	sub.w	r0, r1, #1
 801139e:	6025      	str	r5, [r4, #0]
 80113a0:	fab0 f080 	clz	r0, r0
 80113a4:	0940      	lsrs	r0, r0, #5
 80113a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113a8:	42a7      	cmp	r7, r4
 80113aa:	d034      	beq.n	8011416 <ai_platform_get_weights_map+0x9e>
 80113ac:	2000      	movs	r0, #0
 80113ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113b0:	1d10      	adds	r0, r2, #4
 80113b2:	f7ff ffd3 	bl	801135c <ai_buffer_array_sane>
 80113b6:	2800      	cmp	r0, #0
 80113b8:	d0f8      	beq.n	80113ac <ai_platform_get_weights_map+0x34>
 80113ba:	88eb      	ldrh	r3, [r5, #6]
 80113bc:	429f      	cmp	r7, r3
 80113be:	d1f5      	bne.n	80113ac <ai_platform_get_weights_map+0x34>
 80113c0:	f04f 0e00 	mov.w	lr, #0
 80113c4:	1f23      	subs	r3, r4, #4
 80113c6:	4670      	mov	r0, lr
 80113c8:	68aa      	ldr	r2, [r5, #8]
 80113ca:	eb02 0c0e 	add.w	ip, r2, lr
 80113ce:	f10e 0e1c 	add.w	lr, lr, #28
 80113d2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80113d6:	b124      	cbz	r4, 80113e2 <ai_platform_get_weights_map+0x6a>
 80113d8:	3001      	adds	r0, #1
 80113da:	4287      	cmp	r7, r0
 80113dc:	f843 4f04 	str.w	r4, [r3, #4]!
 80113e0:	d1f2      	bne.n	80113c8 <ai_platform_get_weights_map+0x50>
 80113e2:	1a38      	subs	r0, r7, r0
 80113e4:	fab0 f080 	clz	r0, r0
 80113e8:	0940      	lsrs	r0, r0, #5
 80113ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113ec:	2000      	movs	r0, #0
 80113ee:	4770      	bx	lr
 80113f0:	1f23      	subs	r3, r4, #4
 80113f2:	4628      	mov	r0, r5
 80113f4:	2400      	movs	r4, #0
 80113f6:	e000      	b.n	80113fa <ai_platform_get_weights_map+0x82>
 80113f8:	4614      	mov	r4, r2
 80113fa:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80113fe:	42b2      	cmp	r2, r6
 8011400:	d0d2      	beq.n	80113a8 <ai_platform_get_weights_map+0x30>
 8011402:	f843 2f04 	str.w	r2, [r3, #4]!
 8011406:	1c62      	adds	r2, r4, #1
 8011408:	4297      	cmp	r7, r2
 801140a:	d1f5      	bne.n	80113f8 <ai_platform_get_weights_map+0x80>
 801140c:	3402      	adds	r4, #2
 801140e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8011412:	42b3      	cmp	r3, r6
 8011414:	d1ca      	bne.n	80113ac <ai_platform_get_weights_map+0x34>
 8011416:	2001      	movs	r0, #1
 8011418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801141a:	bf00      	nop
 801141c:	a1facade 	.word	0xa1facade

08011420 <ai_platform_get_activations_map>:
 8011420:	2a00      	cmp	r2, #0
 8011422:	d038      	beq.n	8011496 <ai_platform_get_activations_map+0x76>
 8011424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011426:	4604      	mov	r4, r0
 8011428:	b1a0      	cbz	r0, 8011454 <ai_platform_get_activations_map+0x34>
 801142a:	460f      	mov	r7, r1
 801142c:	b191      	cbz	r1, 8011454 <ai_platform_get_activations_map+0x34>
 801142e:	4b25      	ldr	r3, [pc, #148]	; (80114c4 <ai_platform_get_activations_map+0xa4>)
 8011430:	6810      	ldr	r0, [r2, #0]
 8011432:	4298      	cmp	r0, r3
 8011434:	4615      	mov	r5, r2
 8011436:	d00f      	beq.n	8011458 <ai_platform_get_activations_map+0x38>
 8011438:	6a15      	ldr	r5, [r2, #32]
 801143a:	b15d      	cbz	r5, 8011454 <ai_platform_get_activations_map+0x34>
 801143c:	682e      	ldr	r6, [r5, #0]
 801143e:	429e      	cmp	r6, r3
 8011440:	d02b      	beq.n	801149a <ai_platform_get_activations_map+0x7a>
 8011442:	f1a1 0001 	sub.w	r0, r1, #1
 8011446:	6025      	str	r5, [r4, #0]
 8011448:	fab0 f080 	clz	r0, r0
 801144c:	0940      	lsrs	r0, r0, #5
 801144e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011450:	42a7      	cmp	r7, r4
 8011452:	d035      	beq.n	80114c0 <ai_platform_get_activations_map+0xa0>
 8011454:	2000      	movs	r0, #0
 8011456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011458:	f102 000c 	add.w	r0, r2, #12
 801145c:	f7ff ff7e 	bl	801135c <ai_buffer_array_sane>
 8011460:	2800      	cmp	r0, #0
 8011462:	d0f7      	beq.n	8011454 <ai_platform_get_activations_map+0x34>
 8011464:	89eb      	ldrh	r3, [r5, #14]
 8011466:	429f      	cmp	r7, r3
 8011468:	d1f4      	bne.n	8011454 <ai_platform_get_activations_map+0x34>
 801146a:	f04f 0e00 	mov.w	lr, #0
 801146e:	1f23      	subs	r3, r4, #4
 8011470:	4670      	mov	r0, lr
 8011472:	692a      	ldr	r2, [r5, #16]
 8011474:	eb02 0c0e 	add.w	ip, r2, lr
 8011478:	f10e 0e1c 	add.w	lr, lr, #28
 801147c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8011480:	b124      	cbz	r4, 801148c <ai_platform_get_activations_map+0x6c>
 8011482:	3001      	adds	r0, #1
 8011484:	4287      	cmp	r7, r0
 8011486:	f843 4f04 	str.w	r4, [r3, #4]!
 801148a:	d1f2      	bne.n	8011472 <ai_platform_get_activations_map+0x52>
 801148c:	1a38      	subs	r0, r7, r0
 801148e:	fab0 f080 	clz	r0, r0
 8011492:	0940      	lsrs	r0, r0, #5
 8011494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011496:	2000      	movs	r0, #0
 8011498:	4770      	bx	lr
 801149a:	1f23      	subs	r3, r4, #4
 801149c:	4628      	mov	r0, r5
 801149e:	2400      	movs	r4, #0
 80114a0:	e000      	b.n	80114a4 <ai_platform_get_activations_map+0x84>
 80114a2:	4614      	mov	r4, r2
 80114a4:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80114a8:	42b2      	cmp	r2, r6
 80114aa:	d0d1      	beq.n	8011450 <ai_platform_get_activations_map+0x30>
 80114ac:	f843 2f04 	str.w	r2, [r3, #4]!
 80114b0:	1c62      	adds	r2, r4, #1
 80114b2:	4297      	cmp	r7, r2
 80114b4:	d1f5      	bne.n	80114a2 <ai_platform_get_activations_map+0x82>
 80114b6:	3402      	adds	r4, #2
 80114b8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80114bc:	42b3      	cmp	r3, r6
 80114be:	d1c9      	bne.n	8011454 <ai_platform_get_activations_map+0x34>
 80114c0:	2001      	movs	r0, #1
 80114c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114c4:	a1facade 	.word	0xa1facade

080114c8 <ai_platform_network_set_error>:
 80114c8:	b110      	cbz	r0, 80114d0 <ai_platform_network_set_error+0x8>
 80114ca:	3010      	adds	r0, #16
 80114cc:	f000 be7a 	b.w	80121c4 <core_set_error>
 80114d0:	4770      	bx	lr
 80114d2:	bf00      	nop

080114d4 <ai_platform_inputs_get>:
 80114d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114d8:	b085      	sub	sp, #20
 80114da:	9102      	str	r1, [sp, #8]
 80114dc:	b1f0      	cbz	r0, 801151c <ai_platform_inputs_get+0x48>
 80114de:	4b62      	ldr	r3, [pc, #392]	; (8011668 <ai_platform_inputs_get+0x194>)
 80114e0:	6802      	ldr	r2, [r0, #0]
 80114e2:	429a      	cmp	r2, r3
 80114e4:	4607      	mov	r7, r0
 80114e6:	d119      	bne.n	801151c <ai_platform_inputs_get+0x48>
 80114e8:	f7ff ff42 	bl	8011370 <_ai_platform_acquire_crc>
 80114ec:	4b5f      	ldr	r3, [pc, #380]	; (801166c <ai_platform_inputs_get+0x198>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80114f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80114f8:	d03d      	beq.n	8011576 <ai_platform_inputs_get+0xa2>
 80114fa:	4a5d      	ldr	r2, [pc, #372]	; (8011670 <ai_platform_inputs_get+0x19c>)
 80114fc:	2301      	movs	r3, #1
 80114fe:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011502:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011506:	2b00      	cmp	r3, #0
 8011508:	d1fb      	bne.n	8011502 <ai_platform_inputs_get+0x2e>
 801150a:	4b5a      	ldr	r3, [pc, #360]	; (8011674 <ai_platform_inputs_get+0x1a0>)
 801150c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8011510:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011514:	4b58      	ldr	r3, [pc, #352]	; (8011678 <ai_platform_inputs_get+0x1a4>)
 8011516:	429a      	cmp	r2, r3
 8011518:	d039      	beq.n	801158e <ai_platform_inputs_get+0xba>
 801151a:	e7fe      	b.n	801151a <ai_platform_inputs_get+0x46>
 801151c:	f7ff ff28 	bl	8011370 <_ai_platform_acquire_crc>
 8011520:	4b52      	ldr	r3, [pc, #328]	; (801166c <ai_platform_inputs_get+0x198>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801152c:	d010      	beq.n	8011550 <ai_platform_inputs_get+0x7c>
 801152e:	4a50      	ldr	r2, [pc, #320]	; (8011670 <ai_platform_inputs_get+0x19c>)
 8011530:	2301      	movs	r3, #1
 8011532:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011536:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801153a:	2b00      	cmp	r3, #0
 801153c:	d1fb      	bne.n	8011536 <ai_platform_inputs_get+0x62>
 801153e:	4b4d      	ldr	r3, [pc, #308]	; (8011674 <ai_platform_inputs_get+0x1a0>)
 8011540:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8011544:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011548:	4b4b      	ldr	r3, [pc, #300]	; (8011678 <ai_platform_inputs_get+0x1a4>)
 801154a:	429a      	cmp	r2, r3
 801154c:	d00d      	beq.n	801156a <ai_platform_inputs_get+0x96>
 801154e:	e7fe      	b.n	801154e <ai_platform_inputs_get+0x7a>
 8011550:	4a4a      	ldr	r2, [pc, #296]	; (801167c <ai_platform_inputs_get+0x1a8>)
 8011552:	2301      	movs	r3, #1
 8011554:	6093      	str	r3, [r2, #8]
 8011556:	6893      	ldr	r3, [r2, #8]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d1fc      	bne.n	8011556 <ai_platform_inputs_get+0x82>
 801155c:	4b45      	ldr	r3, [pc, #276]	; (8011674 <ai_platform_inputs_get+0x1a0>)
 801155e:	6013      	str	r3, [r2, #0]
 8011560:	6812      	ldr	r2, [r2, #0]
 8011562:	4b45      	ldr	r3, [pc, #276]	; (8011678 <ai_platform_inputs_get+0x1a4>)
 8011564:	429a      	cmp	r2, r3
 8011566:	d000      	beq.n	801156a <ai_platform_inputs_get+0x96>
 8011568:	e7fe      	b.n	8011568 <ai_platform_inputs_get+0x94>
 801156a:	f7ff ff03 	bl	8011374 <_ai_platform_release_crc>
 801156e:	2000      	movs	r0, #0
 8011570:	b005      	add	sp, #20
 8011572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011576:	4a41      	ldr	r2, [pc, #260]	; (801167c <ai_platform_inputs_get+0x1a8>)
 8011578:	2301      	movs	r3, #1
 801157a:	6093      	str	r3, [r2, #8]
 801157c:	6893      	ldr	r3, [r2, #8]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d1fc      	bne.n	801157c <ai_platform_inputs_get+0xa8>
 8011582:	4b3c      	ldr	r3, [pc, #240]	; (8011674 <ai_platform_inputs_get+0x1a0>)
 8011584:	6013      	str	r3, [r2, #0]
 8011586:	6812      	ldr	r2, [r2, #0]
 8011588:	4b3b      	ldr	r3, [pc, #236]	; (8011678 <ai_platform_inputs_get+0x1a4>)
 801158a:	429a      	cmp	r2, r3
 801158c:	d155      	bne.n	801163a <ai_platform_inputs_get+0x166>
 801158e:	f7ff fef1 	bl	8011374 <_ai_platform_release_crc>
 8011592:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011594:	2b00      	cmp	r3, #0
 8011596:	d051      	beq.n	801163c <ai_platform_inputs_get+0x168>
 8011598:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 801159c:	f1ba 0f00 	cmp.w	sl, #0
 80115a0:	d04c      	beq.n	801163c <ai_platform_inputs_get+0x168>
 80115a2:	f04f 0b00 	mov.w	fp, #0
 80115a6:	465d      	mov	r5, fp
 80115a8:	9703      	str	r7, [sp, #12]
 80115aa:	e016      	b.n	80115da <ai_platform_inputs_get+0x106>
 80115ac:	9901      	ldr	r1, [sp, #4]
 80115ae:	2301      	movs	r3, #1
 80115b0:	507b      	str	r3, [r7, r1]
 80115b2:	69b1      	ldr	r1, [r6, #24]
 80115b4:	6849      	ldr	r1, [r1, #4]
 80115b6:	6121      	str	r1, [r4, #16]
 80115b8:	f04f 0301 	mov.w	r3, #1
 80115bc:	7523      	strb	r3, [r4, #20]
 80115be:	e9c4 c200 	strd	ip, r2, [r4]
 80115c2:	6962      	ldr	r2, [r4, #20]
 80115c4:	60a0      	str	r0, [r4, #8]
 80115c6:	2300      	movs	r3, #0
 80115c8:	f369 221f 	bfi	r2, r9, #8, #24
 80115cc:	f8c4 8018 	str.w	r8, [r4, #24]
 80115d0:	60e3      	str	r3, [r4, #12]
 80115d2:	3501      	adds	r5, #1
 80115d4:	f10b 0b1c 	add.w	fp, fp, #28
 80115d8:	6162      	str	r2, [r4, #20]
 80115da:	f8ba 3000 	ldrh.w	r3, [sl]
 80115de:	42ab      	cmp	r3, r5
 80115e0:	b2aa      	uxth	r2, r5
 80115e2:	d93a      	bls.n	801165a <ai_platform_inputs_get+0x186>
 80115e4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80115e8:	00e9      	lsls	r1, r5, #3
 80115ea:	9101      	str	r1, [sp, #4]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d034      	beq.n	801165a <ai_platform_inputs_get+0x186>
 80115f0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80115f4:	2e00      	cmp	r6, #0
 80115f6:	d030      	beq.n	801165a <ai_platform_inputs_get+0x186>
 80115f8:	f8da 3008 	ldr.w	r3, [sl, #8]
 80115fc:	69b2      	ldr	r2, [r6, #24]
 80115fe:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8011602:	6810      	ldr	r0, [r2, #0]
 8011604:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8011608:	68b3      	ldr	r3, [r6, #8]
 801160a:	f3c3 2917 	ubfx	r9, r3, #8, #24
 801160e:	f009 f9f5 	bl	801a9fc <ai_array_to_buffer_fmt>
 8011612:	69b1      	ldr	r1, [r6, #24]
 8011614:	4684      	mov	ip, r0
 8011616:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 801161a:	688a      	ldr	r2, [r1, #8]
 801161c:	445c      	add	r4, fp
 801161e:	2800      	cmp	r0, #0
 8011620:	d0c8      	beq.n	80115b4 <ai_platform_inputs_get+0xe0>
 8011622:	2100      	movs	r1, #0
 8011624:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8011628:	6831      	ldr	r1, [r6, #0]
 801162a:	6041      	str	r1, [r0, #4]
 801162c:	b111      	cbz	r1, 8011634 <ai_platform_inputs_get+0x160>
 801162e:	8849      	ldrh	r1, [r1, #2]
 8011630:	2900      	cmp	r1, #0
 8011632:	d1bb      	bne.n	80115ac <ai_platform_inputs_get+0xd8>
 8011634:	69b1      	ldr	r1, [r6, #24]
 8011636:	2000      	movs	r0, #0
 8011638:	e7bc      	b.n	80115b4 <ai_platform_inputs_get+0xe0>
 801163a:	e7fe      	b.n	801163a <ai_platform_inputs_get+0x166>
 801163c:	2218      	movs	r2, #24
 801163e:	2111      	movs	r1, #17
 8011640:	f107 0010 	add.w	r0, r7, #16
 8011644:	f000 fdbe 	bl	80121c4 <core_set_error>
 8011648:	2200      	movs	r2, #0
 801164a:	4610      	mov	r0, r2
 801164c:	9b02      	ldr	r3, [sp, #8]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d08e      	beq.n	8011570 <ai_platform_inputs_get+0x9c>
 8011652:	801a      	strh	r2, [r3, #0]
 8011654:	b005      	add	sp, #20
 8011656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801165a:	9f03      	ldr	r7, [sp, #12]
 801165c:	2a00      	cmp	r2, #0
 801165e:	d0ed      	beq.n	801163c <ai_platform_inputs_get+0x168>
 8011660:	f8da 3008 	ldr.w	r3, [sl, #8]
 8011664:	6858      	ldr	r0, [r3, #4]
 8011666:	e7f1      	b.n	801164c <ai_platform_inputs_get+0x178>
 8011668:	a1c00100 	.word	0xa1c00100
 801166c:	e0042000 	.word	0xe0042000
 8011670:	58024000 	.word	0x58024000
 8011674:	f407a5c2 	.word	0xf407a5c2
 8011678:	b5e8b5cd 	.word	0xb5e8b5cd
 801167c:	40023000 	.word	0x40023000

08011680 <ai_platform_outputs_get>:
 8011680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011684:	b085      	sub	sp, #20
 8011686:	9102      	str	r1, [sp, #8]
 8011688:	b1f0      	cbz	r0, 80116c8 <ai_platform_outputs_get+0x48>
 801168a:	4b5f      	ldr	r3, [pc, #380]	; (8011808 <ai_platform_outputs_get+0x188>)
 801168c:	6802      	ldr	r2, [r0, #0]
 801168e:	429a      	cmp	r2, r3
 8011690:	4607      	mov	r7, r0
 8011692:	d119      	bne.n	80116c8 <ai_platform_outputs_get+0x48>
 8011694:	f7ff fe6c 	bl	8011370 <_ai_platform_acquire_crc>
 8011698:	4b5c      	ldr	r3, [pc, #368]	; (801180c <ai_platform_outputs_get+0x18c>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80116a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80116a4:	d03d      	beq.n	8011722 <ai_platform_outputs_get+0xa2>
 80116a6:	4a5a      	ldr	r2, [pc, #360]	; (8011810 <ai_platform_outputs_get+0x190>)
 80116a8:	2301      	movs	r3, #1
 80116aa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80116ae:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d1fb      	bne.n	80116ae <ai_platform_outputs_get+0x2e>
 80116b6:	4b57      	ldr	r3, [pc, #348]	; (8011814 <ai_platform_outputs_get+0x194>)
 80116b8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80116bc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80116c0:	4b55      	ldr	r3, [pc, #340]	; (8011818 <ai_platform_outputs_get+0x198>)
 80116c2:	429a      	cmp	r2, r3
 80116c4:	d039      	beq.n	801173a <ai_platform_outputs_get+0xba>
 80116c6:	e7fe      	b.n	80116c6 <ai_platform_outputs_get+0x46>
 80116c8:	f7ff fe52 	bl	8011370 <_ai_platform_acquire_crc>
 80116cc:	4b4f      	ldr	r3, [pc, #316]	; (801180c <ai_platform_outputs_get+0x18c>)
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80116d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80116d8:	d010      	beq.n	80116fc <ai_platform_outputs_get+0x7c>
 80116da:	4a4d      	ldr	r2, [pc, #308]	; (8011810 <ai_platform_outputs_get+0x190>)
 80116dc:	2301      	movs	r3, #1
 80116de:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80116e2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d1fb      	bne.n	80116e2 <ai_platform_outputs_get+0x62>
 80116ea:	4b4a      	ldr	r3, [pc, #296]	; (8011814 <ai_platform_outputs_get+0x194>)
 80116ec:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80116f0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80116f4:	4b48      	ldr	r3, [pc, #288]	; (8011818 <ai_platform_outputs_get+0x198>)
 80116f6:	429a      	cmp	r2, r3
 80116f8:	d00d      	beq.n	8011716 <ai_platform_outputs_get+0x96>
 80116fa:	e7fe      	b.n	80116fa <ai_platform_outputs_get+0x7a>
 80116fc:	4a47      	ldr	r2, [pc, #284]	; (801181c <ai_platform_outputs_get+0x19c>)
 80116fe:	2301      	movs	r3, #1
 8011700:	6093      	str	r3, [r2, #8]
 8011702:	6893      	ldr	r3, [r2, #8]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d1fc      	bne.n	8011702 <ai_platform_outputs_get+0x82>
 8011708:	4b42      	ldr	r3, [pc, #264]	; (8011814 <ai_platform_outputs_get+0x194>)
 801170a:	6013      	str	r3, [r2, #0]
 801170c:	6812      	ldr	r2, [r2, #0]
 801170e:	4b42      	ldr	r3, [pc, #264]	; (8011818 <ai_platform_outputs_get+0x198>)
 8011710:	429a      	cmp	r2, r3
 8011712:	d000      	beq.n	8011716 <ai_platform_outputs_get+0x96>
 8011714:	e7fe      	b.n	8011714 <ai_platform_outputs_get+0x94>
 8011716:	f7ff fe2d 	bl	8011374 <_ai_platform_release_crc>
 801171a:	2000      	movs	r0, #0
 801171c:	b005      	add	sp, #20
 801171e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011722:	4a3e      	ldr	r2, [pc, #248]	; (801181c <ai_platform_outputs_get+0x19c>)
 8011724:	2301      	movs	r3, #1
 8011726:	6093      	str	r3, [r2, #8]
 8011728:	6893      	ldr	r3, [r2, #8]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d1fc      	bne.n	8011728 <ai_platform_outputs_get+0xa8>
 801172e:	4b39      	ldr	r3, [pc, #228]	; (8011814 <ai_platform_outputs_get+0x194>)
 8011730:	6013      	str	r3, [r2, #0]
 8011732:	6812      	ldr	r2, [r2, #0]
 8011734:	4b38      	ldr	r3, [pc, #224]	; (8011818 <ai_platform_outputs_get+0x198>)
 8011736:	429a      	cmp	r2, r3
 8011738:	d150      	bne.n	80117dc <ai_platform_outputs_get+0x15c>
 801173a:	f7ff fe1b 	bl	8011374 <_ai_platform_release_crc>
 801173e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011740:	2b01      	cmp	r3, #1
 8011742:	d958      	bls.n	80117f6 <ai_platform_outputs_get+0x176>
 8011744:	f04f 0b00 	mov.w	fp, #0
 8011748:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 801174c:	9703      	str	r7, [sp, #12]
 801174e:	465d      	mov	r5, fp
 8011750:	e016      	b.n	8011780 <ai_platform_outputs_get+0x100>
 8011752:	9901      	ldr	r1, [sp, #4]
 8011754:	2301      	movs	r3, #1
 8011756:	507b      	str	r3, [r7, r1]
 8011758:	69b1      	ldr	r1, [r6, #24]
 801175a:	6849      	ldr	r1, [r1, #4]
 801175c:	6121      	str	r1, [r4, #16]
 801175e:	f04f 0301 	mov.w	r3, #1
 8011762:	7523      	strb	r3, [r4, #20]
 8011764:	e9c4 c200 	strd	ip, r2, [r4]
 8011768:	6962      	ldr	r2, [r4, #20]
 801176a:	60a0      	str	r0, [r4, #8]
 801176c:	2300      	movs	r3, #0
 801176e:	f369 221f 	bfi	r2, r9, #8, #24
 8011772:	f8c4 8018 	str.w	r8, [r4, #24]
 8011776:	60e3      	str	r3, [r4, #12]
 8011778:	3501      	adds	r5, #1
 801177a:	f10b 0b1c 	add.w	fp, fp, #28
 801177e:	6162      	str	r2, [r4, #20]
 8011780:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8011784:	42ab      	cmp	r3, r5
 8011786:	b2aa      	uxth	r2, r5
 8011788:	d929      	bls.n	80117de <ai_platform_outputs_get+0x15e>
 801178a:	f8da 3010 	ldr.w	r3, [sl, #16]
 801178e:	00e9      	lsls	r1, r5, #3
 8011790:	9101      	str	r1, [sp, #4]
 8011792:	b323      	cbz	r3, 80117de <ai_platform_outputs_get+0x15e>
 8011794:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8011798:	b30e      	cbz	r6, 80117de <ai_platform_outputs_get+0x15e>
 801179a:	f8da 3014 	ldr.w	r3, [sl, #20]
 801179e:	69b2      	ldr	r2, [r6, #24]
 80117a0:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80117a4:	6810      	ldr	r0, [r2, #0]
 80117a6:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80117aa:	68b3      	ldr	r3, [r6, #8]
 80117ac:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80117b0:	f009 f924 	bl	801a9fc <ai_array_to_buffer_fmt>
 80117b4:	69b1      	ldr	r1, [r6, #24]
 80117b6:	4684      	mov	ip, r0
 80117b8:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80117bc:	688a      	ldr	r2, [r1, #8]
 80117be:	445c      	add	r4, fp
 80117c0:	2800      	cmp	r0, #0
 80117c2:	d0ca      	beq.n	801175a <ai_platform_outputs_get+0xda>
 80117c4:	2100      	movs	r1, #0
 80117c6:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80117ca:	6831      	ldr	r1, [r6, #0]
 80117cc:	6041      	str	r1, [r0, #4]
 80117ce:	b111      	cbz	r1, 80117d6 <ai_platform_outputs_get+0x156>
 80117d0:	8849      	ldrh	r1, [r1, #2]
 80117d2:	2900      	cmp	r1, #0
 80117d4:	d1bd      	bne.n	8011752 <ai_platform_outputs_get+0xd2>
 80117d6:	69b1      	ldr	r1, [r6, #24]
 80117d8:	2000      	movs	r0, #0
 80117da:	e7be      	b.n	801175a <ai_platform_outputs_get+0xda>
 80117dc:	e7fe      	b.n	80117dc <ai_platform_outputs_get+0x15c>
 80117de:	9f03      	ldr	r7, [sp, #12]
 80117e0:	b14a      	cbz	r2, 80117f6 <ai_platform_outputs_get+0x176>
 80117e2:	f8da 3014 	ldr.w	r3, [sl, #20]
 80117e6:	6858      	ldr	r0, [r3, #4]
 80117e8:	9b02      	ldr	r3, [sp, #8]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d096      	beq.n	801171c <ai_platform_outputs_get+0x9c>
 80117ee:	801a      	strh	r2, [r3, #0]
 80117f0:	b005      	add	sp, #20
 80117f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117f6:	2218      	movs	r2, #24
 80117f8:	2111      	movs	r1, #17
 80117fa:	f107 0010 	add.w	r0, r7, #16
 80117fe:	f000 fce1 	bl	80121c4 <core_set_error>
 8011802:	2200      	movs	r2, #0
 8011804:	4610      	mov	r0, r2
 8011806:	e7ef      	b.n	80117e8 <ai_platform_outputs_get+0x168>
 8011808:	a1c00100 	.word	0xa1c00100
 801180c:	e0042000 	.word	0xe0042000
 8011810:	58024000 	.word	0x58024000
 8011814:	f407a5c2 	.word	0xf407a5c2
 8011818:	b5e8b5cd 	.word	0xb5e8b5cd
 801181c:	40023000 	.word	0x40023000

08011820 <ai_platform_network_create>:
 8011820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011824:	b083      	sub	sp, #12
 8011826:	4606      	mov	r6, r0
 8011828:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 801182c:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8011830:	4615      	mov	r5, r2
 8011832:	461f      	mov	r7, r3
 8011834:	f7ff fd9c 	bl	8011370 <_ai_platform_acquire_crc>
 8011838:	b188      	cbz	r0, 801185e <ai_platform_network_create+0x3e>
 801183a:	4a5d      	ldr	r2, [pc, #372]	; (80119b0 <ai_platform_network_create+0x190>)
 801183c:	6812      	ldr	r2, [r2, #0]
 801183e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8011842:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8011846:	4603      	mov	r3, r0
 8011848:	d00e      	beq.n	8011868 <ai_platform_network_create+0x48>
 801184a:	4a5a      	ldr	r2, [pc, #360]	; (80119b4 <ai_platform_network_create+0x194>)
 801184c:	2118      	movs	r1, #24
 801184e:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8011852:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8011856:	2918      	cmp	r1, #24
 8011858:	d018      	beq.n	801188c <ai_platform_network_create+0x6c>
 801185a:	f7ff fd8b 	bl	8011374 <_ai_platform_release_crc>
 801185e:	f244 1033 	movw	r0, #16691	; 0x4133
 8011862:	b003      	add	sp, #12
 8011864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011868:	4a53      	ldr	r2, [pc, #332]	; (80119b8 <ai_platform_network_create+0x198>)
 801186a:	2101      	movs	r1, #1
 801186c:	6091      	str	r1, [r2, #8]
 801186e:	2114      	movs	r1, #20
 8011870:	e001      	b.n	8011876 <ai_platform_network_create+0x56>
 8011872:	3901      	subs	r1, #1
 8011874:	d002      	beq.n	801187c <ai_platform_network_create+0x5c>
 8011876:	6894      	ldr	r4, [r2, #8]
 8011878:	2c00      	cmp	r4, #0
 801187a:	d1fa      	bne.n	8011872 <ai_platform_network_create+0x52>
 801187c:	4a4e      	ldr	r2, [pc, #312]	; (80119b8 <ai_platform_network_create+0x198>)
 801187e:	6891      	ldr	r1, [r2, #8]
 8011880:	b911      	cbnz	r1, 8011888 <ai_platform_network_create+0x68>
 8011882:	6812      	ldr	r2, [r2, #0]
 8011884:	3201      	adds	r2, #1
 8011886:	d008      	beq.n	801189a <ai_platform_network_create+0x7a>
 8011888:	4618      	mov	r0, r3
 801188a:	e7e6      	b.n	801185a <ai_platform_network_create+0x3a>
 801188c:	2101      	movs	r1, #1
 801188e:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8011892:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8011896:	2900      	cmp	r1, #0
 8011898:	d1fb      	bne.n	8011892 <ai_platform_network_create+0x72>
 801189a:	4618      	mov	r0, r3
 801189c:	f7ff fd6a 	bl	8011374 <_ai_platform_release_crc>
 80118a0:	f7ff fd66 	bl	8011370 <_ai_platform_acquire_crc>
 80118a4:	4b42      	ldr	r3, [pc, #264]	; (80119b0 <ai_platform_network_create+0x190>)
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80118ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80118b0:	d010      	beq.n	80118d4 <ai_platform_network_create+0xb4>
 80118b2:	4b40      	ldr	r3, [pc, #256]	; (80119b4 <ai_platform_network_create+0x194>)
 80118b4:	2201      	movs	r2, #1
 80118b6:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80118ba:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 80118be:	2900      	cmp	r1, #0
 80118c0:	d1fb      	bne.n	80118ba <ai_platform_network_create+0x9a>
 80118c2:	4a3e      	ldr	r2, [pc, #248]	; (80119bc <ai_platform_network_create+0x19c>)
 80118c4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80118c8:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80118cc:	4b3c      	ldr	r3, [pc, #240]	; (80119c0 <ai_platform_network_create+0x1a0>)
 80118ce:	429a      	cmp	r2, r3
 80118d0:	d00c      	beq.n	80118ec <ai_platform_network_create+0xcc>
 80118d2:	e7fe      	b.n	80118d2 <ai_platform_network_create+0xb2>
 80118d4:	4a38      	ldr	r2, [pc, #224]	; (80119b8 <ai_platform_network_create+0x198>)
 80118d6:	2301      	movs	r3, #1
 80118d8:	6093      	str	r3, [r2, #8]
 80118da:	6893      	ldr	r3, [r2, #8]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d1fc      	bne.n	80118da <ai_platform_network_create+0xba>
 80118e0:	4b36      	ldr	r3, [pc, #216]	; (80119bc <ai_platform_network_create+0x19c>)
 80118e2:	6013      	str	r3, [r2, #0]
 80118e4:	6812      	ldr	r2, [r2, #0]
 80118e6:	4b36      	ldr	r3, [pc, #216]	; (80119c0 <ai_platform_network_create+0x1a0>)
 80118e8:	429a      	cmp	r2, r3
 80118ea:	d122      	bne.n	8011932 <ai_platform_network_create+0x112>
 80118ec:	f7ff fd42 	bl	8011374 <_ai_platform_release_crc>
 80118f0:	b38e      	cbz	r6, 8011956 <ai_platform_network_create+0x136>
 80118f2:	4b34      	ldr	r3, [pc, #208]	; (80119c4 <ai_platform_network_create+0x1a4>)
 80118f4:	602b      	str	r3, [r5, #0]
 80118f6:	6035      	str	r5, [r6, #0]
 80118f8:	f000 fc62 	bl	80121c0 <core_init>
 80118fc:	b1d0      	cbz	r0, 8011934 <ai_platform_network_create+0x114>
 80118fe:	f7ff fd37 	bl	8011370 <_ai_platform_acquire_crc>
 8011902:	4b2b      	ldr	r3, [pc, #172]	; (80119b0 <ai_platform_network_create+0x190>)
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801190a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801190e:	d025      	beq.n	801195c <ai_platform_network_create+0x13c>
 8011910:	4a28      	ldr	r2, [pc, #160]	; (80119b4 <ai_platform_network_create+0x194>)
 8011912:	2301      	movs	r3, #1
 8011914:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011918:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801191c:	2b00      	cmp	r3, #0
 801191e:	d1fb      	bne.n	8011918 <ai_platform_network_create+0xf8>
 8011920:	4b26      	ldr	r3, [pc, #152]	; (80119bc <ai_platform_network_create+0x19c>)
 8011922:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8011926:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801192a:	4b25      	ldr	r3, [pc, #148]	; (80119c0 <ai_platform_network_create+0x1a0>)
 801192c:	429a      	cmp	r2, r3
 801192e:	d022      	beq.n	8011976 <ai_platform_network_create+0x156>
 8011930:	e7fe      	b.n	8011930 <ai_platform_network_create+0x110>
 8011932:	e7fe      	b.n	8011932 <ai_platform_network_create+0x112>
 8011934:	2430      	movs	r4, #48	; 0x30
 8011936:	2300      	movs	r3, #0
 8011938:	6033      	str	r3, [r6, #0]
 801193a:	2610      	movs	r6, #16
 801193c:	464a      	mov	r2, r9
 801193e:	4641      	mov	r1, r8
 8011940:	4638      	mov	r0, r7
 8011942:	f009 f901 	bl	801ab48 <ai_version_get>
 8011946:	4603      	mov	r3, r0
 8011948:	2000      	movs	r0, #0
 801194a:	f364 0007 	bfi	r0, r4, #0, #8
 801194e:	64ab      	str	r3, [r5, #72]	; 0x48
 8011950:	f366 201f 	bfi	r0, r6, #8, #24
 8011954:	e785      	b.n	8011862 <ai_platform_network_create+0x42>
 8011956:	f241 0010 	movw	r0, #4112	; 0x1010
 801195a:	e782      	b.n	8011862 <ai_platform_network_create+0x42>
 801195c:	4a16      	ldr	r2, [pc, #88]	; (80119b8 <ai_platform_network_create+0x198>)
 801195e:	2301      	movs	r3, #1
 8011960:	6093      	str	r3, [r2, #8]
 8011962:	6893      	ldr	r3, [r2, #8]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d1fc      	bne.n	8011962 <ai_platform_network_create+0x142>
 8011968:	4b14      	ldr	r3, [pc, #80]	; (80119bc <ai_platform_network_create+0x19c>)
 801196a:	6013      	str	r3, [r2, #0]
 801196c:	6812      	ldr	r2, [r2, #0]
 801196e:	4b14      	ldr	r3, [pc, #80]	; (80119c0 <ai_platform_network_create+0x1a0>)
 8011970:	429a      	cmp	r2, r3
 8011972:	d000      	beq.n	8011976 <ai_platform_network_create+0x156>
 8011974:	e7fe      	b.n	8011974 <ai_platform_network_create+0x154>
 8011976:	f7ff fcfd 	bl	8011374 <_ai_platform_release_crc>
 801197a:	2200      	movs	r2, #0
 801197c:	4641      	mov	r1, r8
 801197e:	4638      	mov	r0, r7
 8011980:	f009 f8e2 	bl	801ab48 <ai_version_get>
 8011984:	2200      	movs	r2, #0
 8011986:	4604      	mov	r4, r0
 8011988:	2105      	movs	r1, #5
 801198a:	2001      	movs	r0, #1
 801198c:	f009 f8dc 	bl	801ab48 <ai_version_get>
 8011990:	4284      	cmp	r4, r0
 8011992:	d001      	beq.n	8011998 <ai_platform_network_create+0x178>
 8011994:	2401      	movs	r4, #1
 8011996:	e7ce      	b.n	8011936 <ai_platform_network_create+0x116>
 8011998:	4b0b      	ldr	r3, [pc, #44]	; (80119c8 <ai_platform_network_create+0x1a8>)
 801199a:	9301      	str	r3, [sp, #4]
 801199c:	a801      	add	r0, sp, #4
 801199e:	f000 fd6b 	bl	8012478 <ai_check_custom_types>
 80119a2:	b110      	cbz	r0, 80119aa <ai_platform_network_create+0x18a>
 80119a4:	2600      	movs	r6, #0
 80119a6:	4634      	mov	r4, r6
 80119a8:	e7c8      	b.n	801193c <ai_platform_network_create+0x11c>
 80119aa:	2402      	movs	r4, #2
 80119ac:	e7c3      	b.n	8011936 <ai_platform_network_create+0x116>
 80119ae:	bf00      	nop
 80119b0:	e0042000 	.word	0xe0042000
 80119b4:	58024000 	.word	0x58024000
 80119b8:	40023000 	.word	0x40023000
 80119bc:	f407a5c2 	.word	0xf407a5c2
 80119c0:	b5e8b5cd 	.word	0xb5e8b5cd
 80119c4:	a1c00100 	.word	0xa1c00100
 80119c8:	84048403 	.word	0x84048403

080119cc <ai_platform_network_init>:
 80119cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119d0:	b1f8      	cbz	r0, 8011a12 <ai_platform_network_init+0x46>
 80119d2:	4b6e      	ldr	r3, [pc, #440]	; (8011b8c <ai_platform_network_init+0x1c0>)
 80119d4:	6802      	ldr	r2, [r0, #0]
 80119d6:	429a      	cmp	r2, r3
 80119d8:	4604      	mov	r4, r0
 80119da:	d11a      	bne.n	8011a12 <ai_platform_network_init+0x46>
 80119dc:	460e      	mov	r6, r1
 80119de:	f7ff fcc7 	bl	8011370 <_ai_platform_acquire_crc>
 80119e2:	4b6b      	ldr	r3, [pc, #428]	; (8011b90 <ai_platform_network_init+0x1c4>)
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80119ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80119ee:	d03d      	beq.n	8011a6c <ai_platform_network_init+0xa0>
 80119f0:	4a68      	ldr	r2, [pc, #416]	; (8011b94 <ai_platform_network_init+0x1c8>)
 80119f2:	2301      	movs	r3, #1
 80119f4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80119f8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d1fb      	bne.n	80119f8 <ai_platform_network_init+0x2c>
 8011a00:	4b65      	ldr	r3, [pc, #404]	; (8011b98 <ai_platform_network_init+0x1cc>)
 8011a02:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8011a06:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011a0a:	4b64      	ldr	r3, [pc, #400]	; (8011b9c <ai_platform_network_init+0x1d0>)
 8011a0c:	429a      	cmp	r2, r3
 8011a0e:	d039      	beq.n	8011a84 <ai_platform_network_init+0xb8>
 8011a10:	e7fe      	b.n	8011a10 <ai_platform_network_init+0x44>
 8011a12:	f7ff fcad 	bl	8011370 <_ai_platform_acquire_crc>
 8011a16:	4b5e      	ldr	r3, [pc, #376]	; (8011b90 <ai_platform_network_init+0x1c4>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011a22:	d010      	beq.n	8011a46 <ai_platform_network_init+0x7a>
 8011a24:	4a5b      	ldr	r2, [pc, #364]	; (8011b94 <ai_platform_network_init+0x1c8>)
 8011a26:	2301      	movs	r3, #1
 8011a28:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011a2c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d1fb      	bne.n	8011a2c <ai_platform_network_init+0x60>
 8011a34:	4b58      	ldr	r3, [pc, #352]	; (8011b98 <ai_platform_network_init+0x1cc>)
 8011a36:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8011a3a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011a3e:	4b57      	ldr	r3, [pc, #348]	; (8011b9c <ai_platform_network_init+0x1d0>)
 8011a40:	429a      	cmp	r2, r3
 8011a42:	d00d      	beq.n	8011a60 <ai_platform_network_init+0x94>
 8011a44:	e7fe      	b.n	8011a44 <ai_platform_network_init+0x78>
 8011a46:	4a56      	ldr	r2, [pc, #344]	; (8011ba0 <ai_platform_network_init+0x1d4>)
 8011a48:	2301      	movs	r3, #1
 8011a4a:	6093      	str	r3, [r2, #8]
 8011a4c:	6893      	ldr	r3, [r2, #8]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d1fc      	bne.n	8011a4c <ai_platform_network_init+0x80>
 8011a52:	4b51      	ldr	r3, [pc, #324]	; (8011b98 <ai_platform_network_init+0x1cc>)
 8011a54:	6013      	str	r3, [r2, #0]
 8011a56:	6812      	ldr	r2, [r2, #0]
 8011a58:	4b50      	ldr	r3, [pc, #320]	; (8011b9c <ai_platform_network_init+0x1d0>)
 8011a5a:	429a      	cmp	r2, r3
 8011a5c:	d000      	beq.n	8011a60 <ai_platform_network_init+0x94>
 8011a5e:	e7fe      	b.n	8011a5e <ai_platform_network_init+0x92>
 8011a60:	f7ff fc88 	bl	8011374 <_ai_platform_release_crc>
 8011a64:	2600      	movs	r6, #0
 8011a66:	4630      	mov	r0, r6
 8011a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a6c:	4a4c      	ldr	r2, [pc, #304]	; (8011ba0 <ai_platform_network_init+0x1d4>)
 8011a6e:	2301      	movs	r3, #1
 8011a70:	6093      	str	r3, [r2, #8]
 8011a72:	6893      	ldr	r3, [r2, #8]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d1fc      	bne.n	8011a72 <ai_platform_network_init+0xa6>
 8011a78:	4b47      	ldr	r3, [pc, #284]	; (8011b98 <ai_platform_network_init+0x1cc>)
 8011a7a:	6013      	str	r3, [r2, #0]
 8011a7c:	6812      	ldr	r2, [r2, #0]
 8011a7e:	4b47      	ldr	r3, [pc, #284]	; (8011b9c <ai_platform_network_init+0x1d0>)
 8011a80:	429a      	cmp	r2, r3
 8011a82:	d11c      	bne.n	8011abe <ai_platform_network_init+0xf2>
 8011a84:	f7ff fc76 	bl	8011374 <_ai_platform_release_crc>
 8011a88:	2e00      	cmp	r6, #0
 8011a8a:	d06f      	beq.n	8011b6c <ai_platform_network_init+0x1a0>
 8011a8c:	4b45      	ldr	r3, [pc, #276]	; (8011ba4 <ai_platform_network_init+0x1d8>)
 8011a8e:	6832      	ldr	r2, [r6, #0]
 8011a90:	429a      	cmp	r2, r3
 8011a92:	d115      	bne.n	8011ac0 <ai_platform_network_init+0xf4>
 8011a94:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8011a98:	6933      	ldr	r3, [r6, #16]
 8011a9a:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8011a9e:	89f7      	ldrh	r7, [r6, #14]
 8011aa0:	62a3      	str	r3, [r4, #40]	; 0x28
 8011aa2:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8011aa6:	2303      	movs	r3, #3
 8011aa8:	84e7      	strh	r7, [r4, #38]	; 0x26
 8011aaa:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8011aae:	60e3      	str	r3, [r4, #12]
 8011ab0:	4620      	mov	r0, r4
 8011ab2:	4626      	mov	r6, r4
 8011ab4:	f000 fd0a 	bl	80124cc <ai_layers_init_all>
 8011ab8:	4630      	mov	r0, r6
 8011aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011abe:	e7fe      	b.n	8011abe <ai_platform_network_init+0xf2>
 8011ac0:	2101      	movs	r1, #1
 8011ac2:	4630      	mov	r0, r6
 8011ac4:	4635      	mov	r5, r6
 8011ac6:	6876      	ldr	r6, [r6, #4]
 8011ac8:	f7ff fc14 	bl	80112f4 <ai_buffer_get_size>
 8011acc:	f105 081c 	add.w	r8, r5, #28
 8011ad0:	4681      	mov	r9, r0
 8011ad2:	2101      	movs	r1, #1
 8011ad4:	4640      	mov	r0, r8
 8011ad6:	6a2f      	ldr	r7, [r5, #32]
 8011ad8:	f7ff fc0c 	bl	80112f4 <ai_buffer_get_size>
 8011adc:	f1b9 0f00 	cmp.w	r9, #0
 8011ae0:	d025      	beq.n	8011b2e <ai_platform_network_init+0x162>
 8011ae2:	2201      	movs	r2, #1
 8011ae4:	4696      	mov	lr, r2
 8011ae6:	bb30      	cbnz	r0, 8011b36 <ai_platform_network_init+0x16a>
 8011ae8:	4680      	mov	r8, r0
 8011aea:	4607      	mov	r7, r0
 8011aec:	b376      	cbz	r6, 8011b4c <ai_platform_network_init+0x180>
 8011aee:	8be3      	ldrh	r3, [r4, #30]
 8011af0:	4573      	cmp	r3, lr
 8011af2:	d323      	bcc.n	8011b3c <ai_platform_network_init+0x170>
 8011af4:	b142      	cbz	r2, 8011b08 <ai_platform_network_init+0x13c>
 8011af6:	46ac      	mov	ip, r5
 8011af8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011afc:	6a25      	ldr	r5, [r4, #32]
 8011afe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011b00:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011b04:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8011b08:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8011b0a:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8011b0e:	2600      	movs	r6, #0
 8011b10:	42bb      	cmp	r3, r7
 8011b12:	83a6      	strh	r6, [r4, #28]
 8011b14:	d323      	bcc.n	8011b5e <ai_platform_network_init+0x192>
 8011b16:	b37f      	cbz	r7, 8011b78 <ai_platform_network_init+0x1ac>
 8011b18:	46c4      	mov	ip, r8
 8011b1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011b1e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8011b20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011b22:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011b26:	46b6      	mov	lr, r6
 8011b28:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8011b2c:	e7bb      	b.n	8011aa6 <ai_platform_network_init+0xda>
 8011b2e:	464a      	mov	r2, r9
 8011b30:	46ce      	mov	lr, r9
 8011b32:	464d      	mov	r5, r9
 8011b34:	e7d7      	b.n	8011ae6 <ai_platform_network_init+0x11a>
 8011b36:	b30f      	cbz	r7, 8011b7c <ai_platform_network_init+0x1b0>
 8011b38:	2701      	movs	r7, #1
 8011b3a:	e7d7      	b.n	8011aec <ai_platform_network_init+0x120>
 8011b3c:	2212      	movs	r2, #18
 8011b3e:	2116      	movs	r1, #22
 8011b40:	f104 0010 	add.w	r0, r4, #16
 8011b44:	f000 fb3e 	bl	80121c4 <core_set_error>
 8011b48:	2600      	movs	r6, #0
 8011b4a:	e78c      	b.n	8011a66 <ai_platform_network_init+0x9a>
 8011b4c:	f1b9 0f00 	cmp.w	r9, #0
 8011b50:	d0cd      	beq.n	8011aee <ai_platform_network_init+0x122>
 8011b52:	2110      	movs	r1, #16
 8011b54:	2212      	movs	r2, #18
 8011b56:	1860      	adds	r0, r4, r1
 8011b58:	f000 fb34 	bl	80121c4 <core_set_error>
 8011b5c:	e783      	b.n	8011a66 <ai_platform_network_init+0x9a>
 8011b5e:	2213      	movs	r2, #19
 8011b60:	2116      	movs	r1, #22
 8011b62:	f104 0010 	add.w	r0, r4, #16
 8011b66:	f000 fb2d 	bl	80121c4 <core_set_error>
 8011b6a:	e77c      	b.n	8011a66 <ai_platform_network_init+0x9a>
 8011b6c:	2110      	movs	r1, #16
 8011b6e:	2211      	movs	r2, #17
 8011b70:	1860      	adds	r0, r4, r1
 8011b72:	f000 fb27 	bl	80121c4 <core_set_error>
 8011b76:	e776      	b.n	8011a66 <ai_platform_network_init+0x9a>
 8011b78:	46be      	mov	lr, r7
 8011b7a:	e794      	b.n	8011aa6 <ai_platform_network_init+0xda>
 8011b7c:	2110      	movs	r1, #16
 8011b7e:	2213      	movs	r2, #19
 8011b80:	1860      	adds	r0, r4, r1
 8011b82:	f000 fb1f 	bl	80121c4 <core_set_error>
 8011b86:	463e      	mov	r6, r7
 8011b88:	e76d      	b.n	8011a66 <ai_platform_network_init+0x9a>
 8011b8a:	bf00      	nop
 8011b8c:	a1c00100 	.word	0xa1c00100
 8011b90:	e0042000 	.word	0xe0042000
 8011b94:	58024000 	.word	0x58024000
 8011b98:	f407a5c2 	.word	0xf407a5c2
 8011b9c:	b5e8b5cd 	.word	0xb5e8b5cd
 8011ba0:	40023000 	.word	0x40023000
 8011ba4:	a1facade 	.word	0xa1facade

08011ba8 <ai_platform_network_post_init>:
 8011ba8:	b538      	push	{r3, r4, r5, lr}
 8011baa:	b1f0      	cbz	r0, 8011bea <ai_platform_network_post_init+0x42>
 8011bac:	4b3c      	ldr	r3, [pc, #240]	; (8011ca0 <ai_platform_network_post_init+0xf8>)
 8011bae:	6802      	ldr	r2, [r0, #0]
 8011bb0:	429a      	cmp	r2, r3
 8011bb2:	4604      	mov	r4, r0
 8011bb4:	d119      	bne.n	8011bea <ai_platform_network_post_init+0x42>
 8011bb6:	f7ff fbdb 	bl	8011370 <_ai_platform_acquire_crc>
 8011bba:	4b3a      	ldr	r3, [pc, #232]	; (8011ca4 <ai_platform_network_post_init+0xfc>)
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011bc6:	d03b      	beq.n	8011c40 <ai_platform_network_post_init+0x98>
 8011bc8:	4a37      	ldr	r2, [pc, #220]	; (8011ca8 <ai_platform_network_post_init+0x100>)
 8011bca:	2301      	movs	r3, #1
 8011bcc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011bd0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d1fb      	bne.n	8011bd0 <ai_platform_network_post_init+0x28>
 8011bd8:	4b34      	ldr	r3, [pc, #208]	; (8011cac <ai_platform_network_post_init+0x104>)
 8011bda:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8011bde:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011be2:	4b33      	ldr	r3, [pc, #204]	; (8011cb0 <ai_platform_network_post_init+0x108>)
 8011be4:	429a      	cmp	r2, r3
 8011be6:	d037      	beq.n	8011c58 <ai_platform_network_post_init+0xb0>
 8011be8:	e7fe      	b.n	8011be8 <ai_platform_network_post_init+0x40>
 8011bea:	f7ff fbc1 	bl	8011370 <_ai_platform_acquire_crc>
 8011bee:	4b2d      	ldr	r3, [pc, #180]	; (8011ca4 <ai_platform_network_post_init+0xfc>)
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011bfa:	d010      	beq.n	8011c1e <ai_platform_network_post_init+0x76>
 8011bfc:	4a2a      	ldr	r2, [pc, #168]	; (8011ca8 <ai_platform_network_post_init+0x100>)
 8011bfe:	2301      	movs	r3, #1
 8011c00:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011c04:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d1fb      	bne.n	8011c04 <ai_platform_network_post_init+0x5c>
 8011c0c:	4b27      	ldr	r3, [pc, #156]	; (8011cac <ai_platform_network_post_init+0x104>)
 8011c0e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8011c12:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011c16:	4b26      	ldr	r3, [pc, #152]	; (8011cb0 <ai_platform_network_post_init+0x108>)
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	d00d      	beq.n	8011c38 <ai_platform_network_post_init+0x90>
 8011c1c:	e7fe      	b.n	8011c1c <ai_platform_network_post_init+0x74>
 8011c1e:	4a25      	ldr	r2, [pc, #148]	; (8011cb4 <ai_platform_network_post_init+0x10c>)
 8011c20:	2301      	movs	r3, #1
 8011c22:	6093      	str	r3, [r2, #8]
 8011c24:	6893      	ldr	r3, [r2, #8]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d1fc      	bne.n	8011c24 <ai_platform_network_post_init+0x7c>
 8011c2a:	4b20      	ldr	r3, [pc, #128]	; (8011cac <ai_platform_network_post_init+0x104>)
 8011c2c:	6013      	str	r3, [r2, #0]
 8011c2e:	6812      	ldr	r2, [r2, #0]
 8011c30:	4b1f      	ldr	r3, [pc, #124]	; (8011cb0 <ai_platform_network_post_init+0x108>)
 8011c32:	429a      	cmp	r2, r3
 8011c34:	d000      	beq.n	8011c38 <ai_platform_network_post_init+0x90>
 8011c36:	e7fe      	b.n	8011c36 <ai_platform_network_post_init+0x8e>
 8011c38:	f7ff fb9c 	bl	8011374 <_ai_platform_release_crc>
 8011c3c:	2000      	movs	r0, #0
 8011c3e:	bd38      	pop	{r3, r4, r5, pc}
 8011c40:	4a1c      	ldr	r2, [pc, #112]	; (8011cb4 <ai_platform_network_post_init+0x10c>)
 8011c42:	2301      	movs	r3, #1
 8011c44:	6093      	str	r3, [r2, #8]
 8011c46:	6893      	ldr	r3, [r2, #8]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d1fc      	bne.n	8011c46 <ai_platform_network_post_init+0x9e>
 8011c4c:	4b17      	ldr	r3, [pc, #92]	; (8011cac <ai_platform_network_post_init+0x104>)
 8011c4e:	6013      	str	r3, [r2, #0]
 8011c50:	6812      	ldr	r2, [r2, #0]
 8011c52:	4b17      	ldr	r3, [pc, #92]	; (8011cb0 <ai_platform_network_post_init+0x108>)
 8011c54:	429a      	cmp	r2, r3
 8011c56:	d11a      	bne.n	8011c8e <ai_platform_network_post_init+0xe6>
 8011c58:	f7ff fb8c 	bl	8011374 <_ai_platform_release_crc>
 8011c5c:	68e3      	ldr	r3, [r4, #12]
 8011c5e:	f013 0502 	ands.w	r5, r3, #2
 8011c62:	d015      	beq.n	8011c90 <ai_platform_network_post_init+0xe8>
 8011c64:	4620      	mov	r0, r4
 8011c66:	f000 fc3f 	bl	80124e8 <ai_layers_post_init_all>
 8011c6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011c6c:	b16b      	cbz	r3, 8011c8a <ai_platform_network_post_init+0xe2>
 8011c6e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8011c70:	e007      	b.n	8011c82 <ai_platform_network_post_init+0xda>
 8011c72:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8011c76:	4798      	blx	r3
 8011c78:	692b      	ldr	r3, [r5, #16]
 8011c7a:	42ab      	cmp	r3, r5
 8011c7c:	d005      	beq.n	8011c8a <ai_platform_network_post_init+0xe2>
 8011c7e:	b123      	cbz	r3, 8011c8a <ai_platform_network_post_init+0xe2>
 8011c80:	461d      	mov	r5, r3
 8011c82:	4629      	mov	r1, r5
 8011c84:	2000      	movs	r0, #0
 8011c86:	2d00      	cmp	r5, #0
 8011c88:	d1f3      	bne.n	8011c72 <ai_platform_network_post_init+0xca>
 8011c8a:	2001      	movs	r0, #1
 8011c8c:	bd38      	pop	{r3, r4, r5, pc}
 8011c8e:	e7fe      	b.n	8011c8e <ai_platform_network_post_init+0xe6>
 8011c90:	2210      	movs	r2, #16
 8011c92:	2111      	movs	r1, #17
 8011c94:	18a0      	adds	r0, r4, r2
 8011c96:	f000 fa95 	bl	80121c4 <core_set_error>
 8011c9a:	4628      	mov	r0, r5
 8011c9c:	bd38      	pop	{r3, r4, r5, pc}
 8011c9e:	bf00      	nop
 8011ca0:	a1c00100 	.word	0xa1c00100
 8011ca4:	e0042000 	.word	0xe0042000
 8011ca8:	58024000 	.word	0x58024000
 8011cac:	f407a5c2 	.word	0xf407a5c2
 8011cb0:	b5e8b5cd 	.word	0xb5e8b5cd
 8011cb4:	40023000 	.word	0x40023000

08011cb8 <ai_platform_network_process>:
 8011cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cbc:	460e      	mov	r6, r1
 8011cbe:	b085      	sub	sp, #20
 8011cc0:	4693      	mov	fp, r2
 8011cc2:	4605      	mov	r5, r0
 8011cc4:	b120      	cbz	r0, 8011cd0 <ai_platform_network_process+0x18>
 8011cc6:	4bb8      	ldr	r3, [pc, #736]	; (8011fa8 <ai_platform_network_process+0x2f0>)
 8011cc8:	6802      	ldr	r2, [r0, #0]
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	bf18      	it	ne
 8011cce:	2500      	movne	r5, #0
 8011cd0:	f7ff fb4e 	bl	8011370 <_ai_platform_acquire_crc>
 8011cd4:	4bb5      	ldr	r3, [pc, #724]	; (8011fac <ai_platform_network_process+0x2f4>)
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011ce0:	d010      	beq.n	8011d04 <ai_platform_network_process+0x4c>
 8011ce2:	4ab3      	ldr	r2, [pc, #716]	; (8011fb0 <ai_platform_network_process+0x2f8>)
 8011ce4:	2301      	movs	r3, #1
 8011ce6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011cea:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d1fb      	bne.n	8011cea <ai_platform_network_process+0x32>
 8011cf2:	4bb0      	ldr	r3, [pc, #704]	; (8011fb4 <ai_platform_network_process+0x2fc>)
 8011cf4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8011cf8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011cfc:	4bae      	ldr	r3, [pc, #696]	; (8011fb8 <ai_platform_network_process+0x300>)
 8011cfe:	429a      	cmp	r2, r3
 8011d00:	d00d      	beq.n	8011d1e <ai_platform_network_process+0x66>
 8011d02:	e7fe      	b.n	8011d02 <ai_platform_network_process+0x4a>
 8011d04:	4aad      	ldr	r2, [pc, #692]	; (8011fbc <ai_platform_network_process+0x304>)
 8011d06:	2301      	movs	r3, #1
 8011d08:	6093      	str	r3, [r2, #8]
 8011d0a:	6893      	ldr	r3, [r2, #8]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d1fc      	bne.n	8011d0a <ai_platform_network_process+0x52>
 8011d10:	4ba8      	ldr	r3, [pc, #672]	; (8011fb4 <ai_platform_network_process+0x2fc>)
 8011d12:	6013      	str	r3, [r2, #0]
 8011d14:	6812      	ldr	r2, [r2, #0]
 8011d16:	4ba8      	ldr	r3, [pc, #672]	; (8011fb8 <ai_platform_network_process+0x300>)
 8011d18:	429a      	cmp	r2, r3
 8011d1a:	f040 812c 	bne.w	8011f76 <ai_platform_network_process+0x2be>
 8011d1e:	f7ff fb29 	bl	8011374 <_ai_platform_release_crc>
 8011d22:	2d00      	cmp	r5, #0
 8011d24:	f000 8154 	beq.w	8011fd0 <ai_platform_network_process+0x318>
 8011d28:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	f000 8124 	beq.w	8011f78 <ai_platform_network_process+0x2c0>
 8011d30:	68eb      	ldr	r3, [r5, #12]
 8011d32:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8011d36:	f003 0303 	and.w	r3, r3, #3
 8011d3a:	2700      	movs	r7, #0
 8011d3c:	2b03      	cmp	r3, #3
 8011d3e:	616f      	str	r7, [r5, #20]
 8011d40:	f040 813e 	bne.w	8011fc0 <ai_platform_network_process+0x308>
 8011d44:	2e00      	cmp	r6, #0
 8011d46:	f000 811d 	beq.w	8011f84 <ai_platform_network_process+0x2cc>
 8011d4a:	f1ba 0f00 	cmp.w	sl, #0
 8011d4e:	f000 8119 	beq.w	8011f84 <ai_platform_network_process+0x2cc>
 8011d52:	f8ba 3000 	ldrh.w	r3, [sl]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	f000 8114 	beq.w	8011f84 <ai_platform_network_process+0x2cc>
 8011d5c:	69b3      	ldr	r3, [r6, #24]
 8011d5e:	f8cd b00c 	str.w	fp, [sp, #12]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8011d68:	f8da 3004 	ldr.w	r3, [sl, #4]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d072      	beq.n	8011e56 <ai_platform_network_process+0x19e>
 8011d70:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8011d74:	2c00      	cmp	r4, #0
 8011d76:	d06e      	beq.n	8011e56 <ai_platform_network_process+0x19e>
 8011d78:	f8da 3008 	ldr.w	r3, [sl, #8]
 8011d7c:	f8d3 9000 	ldr.w	r9, [r3]
 8011d80:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8011d84:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8011d88:	f000 81de 	beq.w	8012148 <ai_platform_network_process+0x490>
 8011d8c:	69a3      	ldr	r3, [r4, #24]
 8011d8e:	2101      	movs	r1, #1
 8011d90:	4630      	mov	r0, r6
 8011d92:	685d      	ldr	r5, [r3, #4]
 8011d94:	f7ff faae 	bl	80112f4 <ai_buffer_get_size>
 8011d98:	4285      	cmp	r5, r0
 8011d9a:	f0c0 811b 	bcc.w	8011fd4 <ai_platform_network_process+0x31c>
 8011d9e:	68e0      	ldr	r0, [r4, #12]
 8011da0:	69b1      	ldr	r1, [r6, #24]
 8011da2:	68c2      	ldr	r2, [r0, #12]
 8011da4:	68cb      	ldr	r3, [r1, #12]
 8011da6:	429a      	cmp	r2, r3
 8011da8:	f040 8114 	bne.w	8011fd4 <ai_platform_network_process+0x31c>
 8011dac:	6882      	ldr	r2, [r0, #8]
 8011dae:	688b      	ldr	r3, [r1, #8]
 8011db0:	429a      	cmp	r2, r3
 8011db2:	f040 810f 	bne.w	8011fd4 <ai_platform_network_process+0x31c>
 8011db6:	6842      	ldr	r2, [r0, #4]
 8011db8:	684b      	ldr	r3, [r1, #4]
 8011dba:	429a      	cmp	r2, r3
 8011dbc:	f040 810a 	bne.w	8011fd4 <ai_platform_network_process+0x31c>
 8011dc0:	69a3      	ldr	r3, [r4, #24]
 8011dc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011dc6:	f008 fead 	bl	801ab24 <ai_array_get_data_byte_size>
 8011dca:	4605      	mov	r5, r0
 8011dcc:	4620      	mov	r0, r4
 8011dce:	f008 fec1 	bl	801ab54 <get_tensor_byte_size>
 8011dd2:	4285      	cmp	r5, r0
 8011dd4:	f0c0 80fe 	bcc.w	8011fd4 <ai_platform_network_process+0x31c>
 8011dd8:	69a3      	ldr	r3, [r4, #24]
 8011dda:	6818      	ldr	r0, [r3, #0]
 8011ddc:	f008 fe0e 	bl	801a9fc <ai_array_to_buffer_fmt>
 8011de0:	6833      	ldr	r3, [r6, #0]
 8011de2:	4058      	eors	r0, r3
 8011de4:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8011de8:	f040 81b9 	bne.w	801215e <ai_platform_network_process+0x4a6>
 8011dec:	6873      	ldr	r3, [r6, #4]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	f000 81ac 	beq.w	801214c <ai_platform_network_process+0x494>
 8011df4:	69b3      	ldr	r3, [r6, #24]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	f000 819c 	beq.w	8012136 <ai_platform_network_process+0x47e>
 8011dfe:	9a01      	ldr	r2, [sp, #4]
 8011e00:	429a      	cmp	r2, r3
 8011e02:	bf38      	it	cc
 8011e04:	461a      	movcc	r2, r3
 8011e06:	4620      	mov	r0, r4
 8011e08:	9201      	str	r2, [sp, #4]
 8011e0a:	f008 fea3 	bl	801ab54 <get_tensor_byte_size>
 8011e0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011e12:	69b3      	ldr	r3, [r6, #24]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	fb00 f303 	mul.w	r3, r0, r3
 8011e1a:	f8c8 300c 	str.w	r3, [r8, #12]
 8011e1e:	6871      	ldr	r1, [r6, #4]
 8011e20:	f8c8 1004 	str.w	r1, [r8, #4]
 8011e24:	440b      	add	r3, r1
 8011e26:	f849 300b 	str.w	r3, [r9, fp]
 8011e2a:	69a0      	ldr	r0, [r4, #24]
 8011e2c:	6803      	ldr	r3, [r0, #0]
 8011e2e:	009a      	lsls	r2, r3, #2
 8011e30:	f107 0701 	add.w	r7, r7, #1
 8011e34:	f106 061c 	add.w	r6, r6, #28
 8011e38:	f100 80af 	bmi.w	8011f9a <ai_platform_network_process+0x2e2>
 8011e3c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8011e40:	1a9b      	subs	r3, r3, r2
 8011e42:	4419      	add	r1, r3
 8011e44:	6081      	str	r1, [r0, #8]
 8011e46:	69a3      	ldr	r3, [r4, #24]
 8011e48:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8011e4c:	60da      	str	r2, [r3, #12]
 8011e4e:	f8ba 3000 	ldrh.w	r3, [sl]
 8011e52:	42bb      	cmp	r3, r7
 8011e54:	d888      	bhi.n	8011d68 <ai_platform_network_process+0xb0>
 8011e56:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8011e5a:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8011e5c:	f1bb 0f00 	cmp.w	fp, #0
 8011e60:	f000 8186 	beq.w	8012170 <ai_platform_network_process+0x4b8>
 8011e64:	2a01      	cmp	r2, #1
 8011e66:	f240 815e 	bls.w	8012126 <ai_platform_network_process+0x46e>
 8011e6a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8011e6e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	f000 8157 	beq.w	8012126 <ai_platform_network_process+0x46e>
 8011e78:	465e      	mov	r6, fp
 8011e7a:	2700      	movs	r7, #0
 8011e7c:	462c      	mov	r4, r5
 8011e7e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	f000 80b4 	beq.w	8011ff0 <ai_platform_network_process+0x338>
 8011e88:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8011e8c:	2d00      	cmp	r5, #0
 8011e8e:	f000 80af 	beq.w	8011ff0 <ai_platform_network_process+0x338>
 8011e92:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8011e96:	f8d3 8000 	ldr.w	r8, [r3]
 8011e9a:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8011e9e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8011ea2:	f000 8171 	beq.w	8012188 <ai_platform_network_process+0x4d0>
 8011ea6:	69ab      	ldr	r3, [r5, #24]
 8011ea8:	2101      	movs	r1, #1
 8011eaa:	685b      	ldr	r3, [r3, #4]
 8011eac:	9302      	str	r3, [sp, #8]
 8011eae:	4630      	mov	r0, r6
 8011eb0:	f7ff fa20 	bl	80112f4 <ai_buffer_get_size>
 8011eb4:	9b02      	ldr	r3, [sp, #8]
 8011eb6:	4283      	cmp	r3, r0
 8011eb8:	f0c0 8134 	bcc.w	8012124 <ai_platform_network_process+0x46c>
 8011ebc:	68e8      	ldr	r0, [r5, #12]
 8011ebe:	69b1      	ldr	r1, [r6, #24]
 8011ec0:	68c2      	ldr	r2, [r0, #12]
 8011ec2:	68cb      	ldr	r3, [r1, #12]
 8011ec4:	429a      	cmp	r2, r3
 8011ec6:	f040 812d 	bne.w	8012124 <ai_platform_network_process+0x46c>
 8011eca:	6882      	ldr	r2, [r0, #8]
 8011ecc:	688b      	ldr	r3, [r1, #8]
 8011ece:	429a      	cmp	r2, r3
 8011ed0:	f040 8128 	bne.w	8012124 <ai_platform_network_process+0x46c>
 8011ed4:	6842      	ldr	r2, [r0, #4]
 8011ed6:	684b      	ldr	r3, [r1, #4]
 8011ed8:	429a      	cmp	r2, r3
 8011eda:	f040 8123 	bne.w	8012124 <ai_platform_network_process+0x46c>
 8011ede:	69ab      	ldr	r3, [r5, #24]
 8011ee0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011ee4:	f008 fe1e 	bl	801ab24 <ai_array_get_data_byte_size>
 8011ee8:	9002      	str	r0, [sp, #8]
 8011eea:	4628      	mov	r0, r5
 8011eec:	f008 fe32 	bl	801ab54 <get_tensor_byte_size>
 8011ef0:	9b02      	ldr	r3, [sp, #8]
 8011ef2:	4283      	cmp	r3, r0
 8011ef4:	f0c0 8116 	bcc.w	8012124 <ai_platform_network_process+0x46c>
 8011ef8:	69ab      	ldr	r3, [r5, #24]
 8011efa:	6818      	ldr	r0, [r3, #0]
 8011efc:	f008 fd7e 	bl	801a9fc <ai_array_to_buffer_fmt>
 8011f00:	6833      	ldr	r3, [r6, #0]
 8011f02:	4058      	eors	r0, r3
 8011f04:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8011f08:	f040 8136 	bne.w	8012178 <ai_platform_network_process+0x4c0>
 8011f0c:	6873      	ldr	r3, [r6, #4]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	f000 814d 	beq.w	80121ae <ai_platform_network_process+0x4f6>
 8011f14:	69b3      	ldr	r3, [r6, #24]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	f000 813f 	beq.w	801219c <ai_platform_network_process+0x4e4>
 8011f1e:	9a01      	ldr	r2, [sp, #4]
 8011f20:	429a      	cmp	r2, r3
 8011f22:	bf38      	it	cc
 8011f24:	461a      	movcc	r2, r3
 8011f26:	4628      	mov	r0, r5
 8011f28:	9201      	str	r2, [sp, #4]
 8011f2a:	f008 fe13 	bl	801ab54 <get_tensor_byte_size>
 8011f2e:	f8ca 0008 	str.w	r0, [sl, #8]
 8011f32:	69b3      	ldr	r3, [r6, #24]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	fb00 f303 	mul.w	r3, r0, r3
 8011f3a:	f8ca 300c 	str.w	r3, [sl, #12]
 8011f3e:	6871      	ldr	r1, [r6, #4]
 8011f40:	f8ca 1004 	str.w	r1, [sl, #4]
 8011f44:	440b      	add	r3, r1
 8011f46:	f848 300b 	str.w	r3, [r8, fp]
 8011f4a:	69a8      	ldr	r0, [r5, #24]
 8011f4c:	6803      	ldr	r3, [r0, #0]
 8011f4e:	009b      	lsls	r3, r3, #2
 8011f50:	f107 0701 	add.w	r7, r7, #1
 8011f54:	f106 061c 	add.w	r6, r6, #28
 8011f58:	d445      	bmi.n	8011fe6 <ai_platform_network_process+0x32e>
 8011f5a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8011f5e:	1a9b      	subs	r3, r3, r2
 8011f60:	4419      	add	r1, r3
 8011f62:	6081      	str	r1, [r0, #8]
 8011f64:	69ab      	ldr	r3, [r5, #24]
 8011f66:	f8da 2004 	ldr.w	r2, [sl, #4]
 8011f6a:	60da      	str	r2, [r3, #12]
 8011f6c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8011f70:	429f      	cmp	r7, r3
 8011f72:	d384      	bcc.n	8011e7e <ai_platform_network_process+0x1c6>
 8011f74:	e03c      	b.n	8011ff0 <ai_platform_network_process+0x338>
 8011f76:	e7fe      	b.n	8011f76 <ai_platform_network_process+0x2be>
 8011f78:	68ea      	ldr	r2, [r5, #12]
 8011f7a:	616b      	str	r3, [r5, #20]
 8011f7c:	f002 0203 	and.w	r2, r2, #3
 8011f80:	2a03      	cmp	r2, #3
 8011f82:	d11d      	bne.n	8011fc0 <ai_platform_network_process+0x308>
 8011f84:	2217      	movs	r2, #23
 8011f86:	2112      	movs	r1, #18
 8011f88:	f105 0010 	add.w	r0, r5, #16
 8011f8c:	f000 f91a 	bl	80121c4 <core_set_error>
 8011f90:	2400      	movs	r4, #0
 8011f92:	4620      	mov	r0, r4
 8011f94:	b005      	add	sp, #20
 8011f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f9a:	f8ba 3000 	ldrh.w	r3, [sl]
 8011f9e:	429f      	cmp	r7, r3
 8011fa0:	f4ff aee2 	bcc.w	8011d68 <ai_platform_network_process+0xb0>
 8011fa4:	e757      	b.n	8011e56 <ai_platform_network_process+0x19e>
 8011fa6:	bf00      	nop
 8011fa8:	a1c00100 	.word	0xa1c00100
 8011fac:	e0042000 	.word	0xe0042000
 8011fb0:	58024000 	.word	0x58024000
 8011fb4:	f407a5c2 	.word	0xf407a5c2
 8011fb8:	b5e8b5cd 	.word	0xb5e8b5cd
 8011fbc:	40023000 	.word	0x40023000
 8011fc0:	2230      	movs	r2, #48	; 0x30
 8011fc2:	2111      	movs	r1, #17
 8011fc4:	f105 0010 	add.w	r0, r5, #16
 8011fc8:	f000 f8fc 	bl	80121c4 <core_set_error>
 8011fcc:	2400      	movs	r4, #0
 8011fce:	e7e0      	b.n	8011f92 <ai_platform_network_process+0x2da>
 8011fd0:	462c      	mov	r4, r5
 8011fd2:	e7de      	b.n	8011f92 <ai_platform_network_process+0x2da>
 8011fd4:	9d02      	ldr	r5, [sp, #8]
 8011fd6:	2218      	movs	r2, #24
 8011fd8:	2112      	movs	r1, #18
 8011fda:	f105 0010 	add.w	r0, r5, #16
 8011fde:	f000 f8f1 	bl	80121c4 <core_set_error>
 8011fe2:	2400      	movs	r4, #0
 8011fe4:	e7d5      	b.n	8011f92 <ai_platform_network_process+0x2da>
 8011fe6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8011fea:	429f      	cmp	r7, r3
 8011fec:	f4ff af47 	bcc.w	8011e7e <ai_platform_network_process+0x1c6>
 8011ff0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011ff4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8011ff6:	82a3      	strh	r3, [r4, #20]
 8011ff8:	4625      	mov	r5, r4
 8011ffa:	2a00      	cmp	r2, #0
 8011ffc:	f040 808c 	bne.w	8012118 <ai_platform_network_process+0x460>
 8012000:	4616      	mov	r6, r2
 8012002:	4617      	mov	r7, r2
 8012004:	8aec      	ldrh	r4, [r5, #22]
 8012006:	429c      	cmp	r4, r3
 8012008:	bf38      	it	cc
 801200a:	46ab      	movcc	fp, r5
 801200c:	d2c1      	bcs.n	8011f92 <ai_platform_network_process+0x2da>
 801200e:	2e00      	cmp	r6, #0
 8012010:	d030      	beq.n	8012074 <ai_platform_network_process+0x3bc>
 8012012:	f04f 0800 	mov.w	r8, #0
 8012016:	e014      	b.n	8012042 <ai_platform_network_process+0x38a>
 8012018:	6882      	ldr	r2, [r0, #8]
 801201a:	68c5      	ldr	r5, [r0, #12]
 801201c:	6863      	ldr	r3, [r4, #4]
 801201e:	1b52      	subs	r2, r2, r5
 8012020:	4413      	add	r3, r2
 8012022:	6083      	str	r3, [r0, #8]
 8012024:	698b      	ldr	r3, [r1, #24]
 8012026:	6862      	ldr	r2, [r4, #4]
 8012028:	60da      	str	r2, [r3, #12]
 801202a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801202e:	f859 200a 	ldr.w	r2, [r9, sl]
 8012032:	440b      	add	r3, r1
 8012034:	4293      	cmp	r3, r2
 8012036:	bf24      	itt	cs
 8012038:	68e3      	ldrcs	r3, [r4, #12]
 801203a:	1ad3      	subcs	r3, r2, r3
 801203c:	6063      	str	r3, [r4, #4]
 801203e:	f108 0801 	add.w	r8, r8, #1
 8012042:	8833      	ldrh	r3, [r6, #0]
 8012044:	4543      	cmp	r3, r8
 8012046:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 801204a:	d913      	bls.n	8012074 <ai_platform_network_process+0x3bc>
 801204c:	6873      	ldr	r3, [r6, #4]
 801204e:	b18b      	cbz	r3, 8012074 <ai_platform_network_process+0x3bc>
 8012050:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8012054:	b171      	cbz	r1, 8012074 <ai_platform_network_process+0x3bc>
 8012056:	6988      	ldr	r0, [r1, #24]
 8012058:	68b2      	ldr	r2, [r6, #8]
 801205a:	6803      	ldr	r3, [r0, #0]
 801205c:	f8d2 9000 	ldr.w	r9, [r2]
 8012060:	009d      	lsls	r5, r3, #2
 8012062:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8012066:	d5d7      	bpl.n	8012018 <ai_platform_network_process+0x360>
 8012068:	6881      	ldr	r1, [r0, #8]
 801206a:	68a2      	ldr	r2, [r4, #8]
 801206c:	6860      	ldr	r0, [r4, #4]
 801206e:	f004 feff 	bl	8016e70 <st_int8_copy>
 8012072:	e7da      	b.n	801202a <ai_platform_network_process+0x372>
 8012074:	4658      	mov	r0, fp
 8012076:	f000 fa4b 	bl	8012510 <ai_layers_forward_all>
 801207a:	2f00      	cmp	r7, #0
 801207c:	d03d      	beq.n	80120fa <ai_platform_network_process+0x442>
 801207e:	2400      	movs	r4, #0
 8012080:	e016      	b.n	80120b0 <ai_platform_network_process+0x3f8>
 8012082:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8012086:	f859 100a 	ldr.w	r1, [r9, sl]
 801208a:	4413      	add	r3, r2
 801208c:	428b      	cmp	r3, r1
 801208e:	bf24      	itt	cs
 8012090:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8012094:	1acb      	subcs	r3, r1, r3
 8012096:	f8c8 3004 	str.w	r3, [r8, #4]
 801209a:	6981      	ldr	r1, [r0, #24]
 801209c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80120a0:	1b52      	subs	r2, r2, r5
 80120a2:	4413      	add	r3, r2
 80120a4:	608b      	str	r3, [r1, #8]
 80120a6:	6983      	ldr	r3, [r0, #24]
 80120a8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80120ac:	60da      	str	r2, [r3, #12]
 80120ae:	3401      	adds	r4, #1
 80120b0:	883b      	ldrh	r3, [r7, #0]
 80120b2:	42a3      	cmp	r3, r4
 80120b4:	d921      	bls.n	80120fa <ai_platform_network_process+0x442>
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	b1fb      	cbz	r3, 80120fa <ai_platform_network_process+0x442>
 80120ba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80120be:	b1e0      	cbz	r0, 80120fa <ai_platform_network_process+0x442>
 80120c0:	68ba      	ldr	r2, [r7, #8]
 80120c2:	6983      	ldr	r3, [r0, #24]
 80120c4:	f8d2 9000 	ldr.w	r9, [r2]
 80120c8:	681a      	ldr	r2, [r3, #0]
 80120ca:	0092      	lsls	r2, r2, #2
 80120cc:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80120d0:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80120d4:	d5d5      	bpl.n	8012082 <ai_platform_network_process+0x3ca>
 80120d6:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 80120da:	6898      	ldr	r0, [r3, #8]
 80120dc:	f004 fec8 	bl	8016e70 <st_int8_copy>
 80120e0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80120e4:	f859 200a 	ldr.w	r2, [r9, sl]
 80120e8:	440b      	add	r3, r1
 80120ea:	4293      	cmp	r3, r2
 80120ec:	bf24      	itt	cs
 80120ee:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80120f2:	1ad3      	subcs	r3, r2, r3
 80120f4:	f8c8 3004 	str.w	r3, [r8, #4]
 80120f8:	e7d9      	b.n	80120ae <ai_platform_network_process+0x3f6>
 80120fa:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 80120fe:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8012102:	3401      	adds	r4, #1
 8012104:	b2a4      	uxth	r4, r4
 8012106:	42a3      	cmp	r3, r4
 8012108:	f8ab 4016 	strh.w	r4, [fp, #22]
 801210c:	f63f af7f 	bhi.w	801200e <ai_platform_network_process+0x356>
 8012110:	4620      	mov	r0, r4
 8012112:	b005      	add	sp, #20
 8012114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012118:	2a01      	cmp	r2, #1
 801211a:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 801211c:	d03c      	beq.n	8012198 <ai_platform_network_process+0x4e0>
 801211e:	f106 070c 	add.w	r7, r6, #12
 8012122:	e76f      	b.n	8012004 <ai_platform_network_process+0x34c>
 8012124:	4625      	mov	r5, r4
 8012126:	2218      	movs	r2, #24
 8012128:	2113      	movs	r1, #19
 801212a:	f105 0010 	add.w	r0, r5, #16
 801212e:	f000 f849 	bl	80121c4 <core_set_error>
 8012132:	2400      	movs	r4, #0
 8012134:	e72d      	b.n	8011f92 <ai_platform_network_process+0x2da>
 8012136:	9d02      	ldr	r5, [sp, #8]
 8012138:	4604      	mov	r4, r0
 801213a:	2221      	movs	r2, #33	; 0x21
 801213c:	2112      	movs	r1, #18
 801213e:	f105 0010 	add.w	r0, r5, #16
 8012142:	f000 f83f 	bl	80121c4 <core_set_error>
 8012146:	e724      	b.n	8011f92 <ai_platform_network_process+0x2da>
 8012148:	9d02      	ldr	r5, [sp, #8]
 801214a:	e71b      	b.n	8011f84 <ai_platform_network_process+0x2cc>
 801214c:	9d02      	ldr	r5, [sp, #8]
 801214e:	4604      	mov	r4, r0
 8012150:	2217      	movs	r2, #23
 8012152:	2112      	movs	r1, #18
 8012154:	f105 0010 	add.w	r0, r5, #16
 8012158:	f000 f834 	bl	80121c4 <core_set_error>
 801215c:	e719      	b.n	8011f92 <ai_platform_network_process+0x2da>
 801215e:	9d02      	ldr	r5, [sp, #8]
 8012160:	2219      	movs	r2, #25
 8012162:	2112      	movs	r1, #18
 8012164:	f105 0010 	add.w	r0, r5, #16
 8012168:	f000 f82c 	bl	80121c4 <core_set_error>
 801216c:	2400      	movs	r4, #0
 801216e:	e710      	b.n	8011f92 <ai_platform_network_process+0x2da>
 8012170:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012174:	82ab      	strh	r3, [r5, #20]
 8012176:	e740      	b.n	8011ffa <ai_platform_network_process+0x342>
 8012178:	f104 0010 	add.w	r0, r4, #16
 801217c:	2219      	movs	r2, #25
 801217e:	2113      	movs	r1, #19
 8012180:	f000 f820 	bl	80121c4 <core_set_error>
 8012184:	2400      	movs	r4, #0
 8012186:	e704      	b.n	8011f92 <ai_platform_network_process+0x2da>
 8012188:	f104 0010 	add.w	r0, r4, #16
 801218c:	2217      	movs	r2, #23
 801218e:	2113      	movs	r1, #19
 8012190:	f000 f818 	bl	80121c4 <core_set_error>
 8012194:	4654      	mov	r4, sl
 8012196:	e6fc      	b.n	8011f92 <ai_platform_network_process+0x2da>
 8012198:	2700      	movs	r7, #0
 801219a:	e733      	b.n	8012004 <ai_platform_network_process+0x34c>
 801219c:	4625      	mov	r5, r4
 801219e:	2221      	movs	r2, #33	; 0x21
 80121a0:	4604      	mov	r4, r0
 80121a2:	2113      	movs	r1, #19
 80121a4:	f105 0010 	add.w	r0, r5, #16
 80121a8:	f000 f80c 	bl	80121c4 <core_set_error>
 80121ac:	e6f1      	b.n	8011f92 <ai_platform_network_process+0x2da>
 80121ae:	4625      	mov	r5, r4
 80121b0:	2217      	movs	r2, #23
 80121b2:	4604      	mov	r4, r0
 80121b4:	2113      	movs	r1, #19
 80121b6:	f105 0010 	add.w	r0, r5, #16
 80121ba:	f000 f803 	bl	80121c4 <core_set_error>
 80121be:	e6e8      	b.n	8011f92 <ai_platform_network_process+0x2da>

080121c0 <core_init>:
 80121c0:	2001      	movs	r0, #1
 80121c2:	4770      	bx	lr

080121c4 <core_set_error>:
 80121c4:	4603      	mov	r3, r0
 80121c6:	7800      	ldrb	r0, [r0, #0]
 80121c8:	b108      	cbz	r0, 80121ce <core_set_error+0xa>
 80121ca:	2000      	movs	r0, #0
 80121cc:	4770      	bx	lr
 80121ce:	7019      	strb	r1, [r3, #0]
 80121d0:	6819      	ldr	r1, [r3, #0]
 80121d2:	f362 211f 	bfi	r1, r2, #8, #24
 80121d6:	2001      	movs	r0, #1
 80121d8:	6019      	str	r1, [r3, #0]
 80121da:	4770      	bx	lr

080121dc <node_convert>:
 80121dc:	6982      	ldr	r2, [r0, #24]
 80121de:	8813      	ldrh	r3, [r2, #0]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d04a      	beq.n	801227a <node_convert+0x9e>
 80121e4:	6852      	ldr	r2, [r2, #4]
 80121e6:	6850      	ldr	r0, [r2, #4]
 80121e8:	b100      	cbz	r0, 80121ec <node_convert+0x10>
 80121ea:	6800      	ldr	r0, [r0, #0]
 80121ec:	2b01      	cmp	r3, #1
 80121ee:	f000 813c 	beq.w	801246a <node_convert+0x28e>
 80121f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121f6:	6915      	ldr	r5, [r2, #16]
 80121f8:	b105      	cbz	r5, 80121fc <node_convert+0x20>
 80121fa:	682d      	ldr	r5, [r5, #0]
 80121fc:	6883      	ldr	r3, [r0, #8]
 80121fe:	0a1b      	lsrs	r3, r3, #8
 8012200:	f000 80ed 	beq.w	80123de <node_convert+0x202>
 8012204:	68c1      	ldr	r1, [r0, #12]
 8012206:	2401      	movs	r4, #1
 8012208:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801220c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012210:	4299      	cmp	r1, r3
 8012212:	fb02 f404 	mul.w	r4, r2, r4
 8012216:	d1f9      	bne.n	801220c <node_convert+0x30>
 8012218:	6982      	ldr	r2, [r0, #24]
 801221a:	69af      	ldr	r7, [r5, #24]
 801221c:	6813      	ldr	r3, [r2, #0]
 801221e:	f3c3 4143 	ubfx	r1, r3, #17, #4
 8012222:	2901      	cmp	r1, #1
 8012224:	d02b      	beq.n	801227e <node_convert+0xa2>
 8012226:	6801      	ldr	r1, [r0, #0]
 8012228:	68bd      	ldr	r5, [r7, #8]
 801222a:	2900      	cmp	r1, #0
 801222c:	d069      	beq.n	8012302 <node_convert+0x126>
 801222e:	684e      	ldr	r6, [r1, #4]
 8012230:	6892      	ldr	r2, [r2, #8]
 8012232:	f3c3 50c0 	ubfx	r0, r3, #23, #1
 8012236:	2e00      	cmp	r6, #0
 8012238:	f000 80b7 	beq.w	80123aa <node_convert+0x1ce>
 801223c:	884b      	ldrh	r3, [r1, #2]
 801223e:	2b00      	cmp	r3, #0
 8012240:	f000 8088 	beq.w	8012354 <node_convert+0x178>
 8012244:	6833      	ldr	r3, [r6, #0]
 8012246:	ed93 7a00 	vldr	s14, [r3]
 801224a:	6873      	ldr	r3, [r6, #4]
 801224c:	2800      	cmp	r0, #0
 801224e:	f000 80c4 	beq.w	80123da <node_convert+0x1fe>
 8012252:	f993 0000 	ldrsb.w	r0, [r3]
 8012256:	b174      	cbz	r4, 8012276 <node_convert+0x9a>
 8012258:	4629      	mov	r1, r5
 801225a:	4414      	add	r4, r2
 801225c:	f912 3b01 	ldrsb.w	r3, [r2], #1
 8012260:	1a1b      	subs	r3, r3, r0
 8012262:	ee07 3a90 	vmov	s15, r3
 8012266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801226a:	42a2      	cmp	r2, r4
 801226c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012270:	ece1 7a01 	vstmia	r1!, {s15}
 8012274:	d1f2      	bne.n	801225c <node_convert+0x80>
 8012276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801227a:	685b      	ldr	r3, [r3, #4]
 801227c:	deff      	udf	#255	; 0xff
 801227e:	682e      	ldr	r6, [r5, #0]
 8012280:	6895      	ldr	r5, [r2, #8]
 8012282:	2e00      	cmp	r6, #0
 8012284:	f000 80ad 	beq.w	80123e2 <node_convert+0x206>
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	6871      	ldr	r1, [r6, #4]
 801228c:	68ba      	ldr	r2, [r7, #8]
 801228e:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8012292:	2900      	cmp	r1, #0
 8012294:	d063      	beq.n	801235e <node_convert+0x182>
 8012296:	8870      	ldrh	r0, [r6, #2]
 8012298:	2800      	cmp	r0, #0
 801229a:	d066      	beq.n	801236a <node_convert+0x18e>
 801229c:	6808      	ldr	r0, [r1, #0]
 801229e:	edd0 7a00 	vldr	s15, [r0]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	f000 80d6 	beq.w	8012454 <node_convert+0x278>
 80122a8:	684b      	ldr	r3, [r1, #4]
 80122aa:	f993 3000 	ldrsb.w	r3, [r3]
 80122ae:	ee06 3a90 	vmov	s13, r3
 80122b2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80122b6:	2c00      	cmp	r4, #0
 80122b8:	d0dd      	beq.n	8012276 <node_convert+0x9a>
 80122ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80122be:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80122c2:	4414      	add	r4, r2
 80122c4:	ed9f 5a6a 	vldr	s10, [pc, #424]	; 8012470 <node_convert+0x294>
 80122c8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80122cc:	ecb5 7a01 	vldmia	r5!, {s14}
 80122d0:	eef0 7a66 	vmov.f32	s15, s13
 80122d4:	eee7 7a06 	vfma.f32	s15, s14, s12
 80122d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80122dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122e0:	bfac      	ite	ge
 80122e2:	ee77 7aa5 	vaddge.f32	s15, s15, s11
 80122e6:	ee77 7ac5 	vsublt.f32	s15, s15, s10
 80122ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80122ee:	ee17 3a90 	vmov	r3, s15
 80122f2:	f303 0307 	ssat	r3, #8, r3
 80122f6:	f802 3b01 	strb.w	r3, [r2], #1
 80122fa:	42a2      	cmp	r2, r4
 80122fc:	d1e6      	bne.n	80122cc <node_convert+0xf0>
 80122fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012302:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 8012306:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 801230a:	1b8e      	subs	r6, r1, r6
 801230c:	3640      	adds	r6, #64	; 0x40
 801230e:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8012312:	2908      	cmp	r1, #8
 8012314:	6890      	ldr	r0, [r2, #8]
 8012316:	eba6 0603 	sub.w	r6, r6, r3
 801231a:	4622      	mov	r2, r4
 801231c:	4629      	mov	r1, r5
 801231e:	f000 808b 	beq.w	8012438 <node_convert+0x25c>
 8012322:	f008 fa9f 	bl	801a864 <arm_q15_to_float>
 8012326:	2e00      	cmp	r6, #0
 8012328:	d0a5      	beq.n	8012276 <node_convert+0x9a>
 801232a:	ee07 6a90 	vmov	s15, r6
 801232e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8012332:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8012336:	f009 f901 	bl	801b53c <powf>
 801233a:	2c00      	cmp	r4, #0
 801233c:	d09b      	beq.n	8012276 <node_convert+0x9a>
 801233e:	2300      	movs	r3, #0
 8012340:	ecf5 7a01 	vldmia	r5!, {s15}
 8012344:	3301      	adds	r3, #1
 8012346:	ee67 7a80 	vmul.f32	s15, s15, s0
 801234a:	429c      	cmp	r4, r3
 801234c:	ed45 7a01 	vstr	s15, [r5, #-4]
 8012350:	d1f6      	bne.n	8012340 <node_convert+0x164>
 8012352:	e790      	b.n	8012276 <node_convert+0x9a>
 8012354:	b358      	cbz	r0, 80123ae <node_convert+0x1d2>
 8012356:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8012474 <node_convert+0x298>
 801235a:	4618      	mov	r0, r3
 801235c:	e77b      	b.n	8012256 <node_convert+0x7a>
 801235e:	b133      	cbz	r3, 801236e <node_convert+0x192>
 8012360:	eddf 6a44 	vldr	s13, [pc, #272]	; 8012474 <node_convert+0x298>
 8012364:	eef0 7a66 	vmov.f32	s15, s13
 8012368:	e7a5      	b.n	80122b6 <node_convert+0xda>
 801236a:	2b00      	cmp	r3, #0
 801236c:	d1f8      	bne.n	8012360 <node_convert+0x184>
 801236e:	eddf 7a41 	vldr	s15, [pc, #260]	; 8012474 <node_convert+0x298>
 8012372:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8012376:	2c00      	cmp	r4, #0
 8012378:	f43f af7d 	beq.w	8012276 <node_convert+0x9a>
 801237c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012380:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8012384:	4414      	add	r4, r2
 8012386:	ecb5 7a01 	vldmia	r5!, {s14}
 801238a:	eef0 7a66 	vmov.f32	s15, s13
 801238e:	eee7 7a06 	vfma.f32	s15, s14, s12
 8012392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012396:	ee17 3a90 	vmov	r3, s15
 801239a:	f383 0308 	usat	r3, #8, r3
 801239e:	f802 3b01 	strb.w	r3, [r2], #1
 80123a2:	42a2      	cmp	r2, r4
 80123a4:	d1ef      	bne.n	8012386 <node_convert+0x1aa>
 80123a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123aa:	2800      	cmp	r0, #0
 80123ac:	d147      	bne.n	801243e <node_convert+0x262>
 80123ae:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8012474 <node_convert+0x298>
 80123b2:	2c00      	cmp	r4, #0
 80123b4:	f43f af5f 	beq.w	8012276 <node_convert+0x9a>
 80123b8:	4629      	mov	r1, r5
 80123ba:	4414      	add	r4, r2
 80123bc:	f812 3b01 	ldrb.w	r3, [r2], #1
 80123c0:	1a1b      	subs	r3, r3, r0
 80123c2:	ee07 3a90 	vmov	s15, r3
 80123c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80123ca:	42a2      	cmp	r2, r4
 80123cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80123d0:	ece1 7a01 	vstmia	r1!, {s15}
 80123d4:	d1f2      	bne.n	80123bc <node_convert+0x1e0>
 80123d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123da:	7818      	ldrb	r0, [r3, #0]
 80123dc:	e7e9      	b.n	80123b2 <node_convert+0x1d6>
 80123de:	2401      	movs	r4, #1
 80123e0:	e71a      	b.n	8012218 <node_convert+0x3c>
 80123e2:	683a      	ldr	r2, [r7, #0]
 80123e4:	f3c2 18c6 	ubfx	r8, r2, #7, #7
 80123e8:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 80123ec:	eba8 0303 	sub.w	r3, r8, r3
 80123f0:	3340      	adds	r3, #64	; 0x40
 80123f2:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 80123f6:	1a9b      	subs	r3, r3, r2
 80123f8:	d014      	beq.n	8012424 <node_convert+0x248>
 80123fa:	425b      	negs	r3, r3
 80123fc:	ee00 3a90 	vmov	s1, r3
 8012400:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8012404:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8012408:	f009 f898 	bl	801b53c <powf>
 801240c:	b154      	cbz	r4, 8012424 <node_convert+0x248>
 801240e:	4633      	mov	r3, r6
 8012410:	462a      	mov	r2, r5
 8012412:	ecf2 7a01 	vldmia	r2!, {s15}
 8012416:	3301      	adds	r3, #1
 8012418:	ee67 7a80 	vmul.f32	s15, s15, s0
 801241c:	42a3      	cmp	r3, r4
 801241e:	ed42 7a01 	vstr	s15, [r2, #-4]
 8012422:	d1f6      	bne.n	8012412 <node_convert+0x236>
 8012424:	f1b8 0f08 	cmp.w	r8, #8
 8012428:	d00d      	beq.n	8012446 <node_convert+0x26a>
 801242a:	68b9      	ldr	r1, [r7, #8]
 801242c:	4622      	mov	r2, r4
 801242e:	4628      	mov	r0, r5
 8012430:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012434:	f008 b872 	b.w	801a51c <arm_float_to_q15>
 8012438:	f008 fa7a 	bl	801a930 <arm_q7_to_float>
 801243c:	e773      	b.n	8012326 <node_convert+0x14a>
 801243e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8012474 <node_convert+0x298>
 8012442:	4630      	mov	r0, r6
 8012444:	e707      	b.n	8012256 <node_convert+0x7a>
 8012446:	68b9      	ldr	r1, [r7, #8]
 8012448:	4622      	mov	r2, r4
 801244a:	4628      	mov	r0, r5
 801244c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012450:	f008 b92a 	b.w	801a6a8 <arm_float_to_q7>
 8012454:	684b      	ldr	r3, [r1, #4]
 8012456:	781b      	ldrb	r3, [r3, #0]
 8012458:	ee06 3a90 	vmov	s13, r3
 801245c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8012460:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012464:	ee76 6a87 	vadd.f32	s13, s13, s14
 8012468:	e785      	b.n	8012376 <node_convert+0x19a>
 801246a:	2300      	movs	r3, #0
 801246c:	685b      	ldr	r3, [r3, #4]
 801246e:	deff      	udf	#255	; 0xff
 8012470:	3efffffc 	.word	0x3efffffc
 8012474:	00000000 	.word	0x00000000

08012478 <ai_check_custom_types>:
 8012478:	b082      	sub	sp, #8
 801247a:	4b13      	ldr	r3, [pc, #76]	; (80124c8 <ai_check_custom_types+0x50>)
 801247c:	9301      	str	r3, [sp, #4]
 801247e:	b118      	cbz	r0, 8012488 <ai_check_custom_types+0x10>
 8012480:	7803      	ldrb	r3, [r0, #0]
 8012482:	2b03      	cmp	r3, #3
 8012484:	d002      	beq.n	801248c <ai_check_custom_types+0x14>
 8012486:	2000      	movs	r0, #0
 8012488:	b002      	add	sp, #8
 801248a:	4770      	bx	lr
 801248c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012490:	4293      	cmp	r3, r2
 8012492:	d004      	beq.n	801249e <ai_check_custom_types+0x26>
 8012494:	2001      	movs	r0, #1
 8012496:	f080 0001 	eor.w	r0, r0, #1
 801249a:	b002      	add	sp, #8
 801249c:	4770      	bx	lr
 801249e:	7842      	ldrb	r2, [r0, #1]
 80124a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80124a4:	429a      	cmp	r2, r3
 80124a6:	f100 0001 	add.w	r0, r0, #1
 80124aa:	d1f3      	bne.n	8012494 <ai_check_custom_types+0x1c>
 80124ac:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80124b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80124b4:	429a      	cmp	r2, r3
 80124b6:	d1ed      	bne.n	8012494 <ai_check_custom_types+0x1c>
 80124b8:	7842      	ldrb	r2, [r0, #1]
 80124ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80124be:	429a      	cmp	r2, r3
 80124c0:	d1e8      	bne.n	8012494 <ai_check_custom_types+0x1c>
 80124c2:	2000      	movs	r0, #0
 80124c4:	e7e7      	b.n	8012496 <ai_check_custom_types+0x1e>
 80124c6:	bf00      	nop
 80124c8:	84048403 	.word	0x84048403

080124cc <ai_layers_init_all>:
 80124cc:	4601      	mov	r1, r0
 80124ce:	2000      	movs	r0, #0
 80124d0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80124d2:	b143      	cbz	r3, 80124e6 <ai_layers_init_all+0x1a>
 80124d4:	691a      	ldr	r2, [r3, #16]
 80124d6:	60d9      	str	r1, [r3, #12]
 80124d8:	429a      	cmp	r2, r3
 80124da:	f100 0001 	add.w	r0, r0, #1
 80124de:	d002      	beq.n	80124e6 <ai_layers_init_all+0x1a>
 80124e0:	b10a      	cbz	r2, 80124e6 <ai_layers_init_all+0x1a>
 80124e2:	4613      	mov	r3, r2
 80124e4:	e7f5      	b.n	80124d2 <ai_layers_init_all+0x6>
 80124e6:	4770      	bx	lr

080124e8 <ai_layers_post_init_all>:
 80124e8:	b538      	push	{r3, r4, r5, lr}
 80124ea:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80124ec:	2500      	movs	r5, #0
 80124ee:	b16c      	cbz	r4, 801250c <ai_layers_post_init_all+0x24>
 80124f0:	6863      	ldr	r3, [r4, #4]
 80124f2:	07db      	lsls	r3, r3, #31
 80124f4:	d504      	bpl.n	8012500 <ai_layers_post_init_all+0x18>
 80124f6:	6a23      	ldr	r3, [r4, #32]
 80124f8:	4620      	mov	r0, r4
 80124fa:	b10b      	cbz	r3, 8012500 <ai_layers_post_init_all+0x18>
 80124fc:	4798      	blx	r3
 80124fe:	3501      	adds	r5, #1
 8012500:	6923      	ldr	r3, [r4, #16]
 8012502:	42a3      	cmp	r3, r4
 8012504:	d002      	beq.n	801250c <ai_layers_post_init_all+0x24>
 8012506:	b10b      	cbz	r3, 801250c <ai_layers_post_init_all+0x24>
 8012508:	461c      	mov	r4, r3
 801250a:	e7f0      	b.n	80124ee <ai_layers_post_init_all+0x6>
 801250c:	4628      	mov	r0, r5
 801250e:	bd38      	pop	{r3, r4, r5, pc}

08012510 <ai_layers_forward_all>:
 8012510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012514:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8012518:	4604      	mov	r4, r0
 801251a:	f1b8 0f00 	cmp.w	r8, #0
 801251e:	d02b      	beq.n	8012578 <ai_layers_forward_all+0x68>
 8012520:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8012522:	6381      	str	r1, [r0, #56]	; 0x38
 8012524:	b321      	cbz	r1, 8012570 <ai_layers_forward_all+0x60>
 8012526:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8012528:	2001      	movs	r0, #1
 801252a:	47c0      	blx	r8
 801252c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801252e:	b1fe      	cbz	r6, 8012570 <ai_layers_forward_all+0x60>
 8012530:	2700      	movs	r7, #0
 8012532:	4631      	mov	r1, r6
 8012534:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8012536:	2002      	movs	r0, #2
 8012538:	47c0      	blx	r8
 801253a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 801253c:	4628      	mov	r0, r5
 801253e:	696b      	ldr	r3, [r5, #20]
 8012540:	4798      	blx	r3
 8012542:	692e      	ldr	r6, [r5, #16]
 8012544:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8012546:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012548:	42b5      	cmp	r5, r6
 801254a:	f04f 0003 	mov.w	r0, #3
 801254e:	d007      	beq.n	8012560 <ai_layers_forward_all+0x50>
 8012550:	47c0      	blx	r8
 8012552:	3701      	adds	r7, #1
 8012554:	63a6      	str	r6, [r4, #56]	; 0x38
 8012556:	2e00      	cmp	r6, #0
 8012558:	d1eb      	bne.n	8012532 <ai_layers_forward_all+0x22>
 801255a:	4638      	mov	r0, r7
 801255c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012560:	2003      	movs	r0, #3
 8012562:	47c0      	blx	r8
 8012564:	2300      	movs	r3, #0
 8012566:	3701      	adds	r7, #1
 8012568:	63a3      	str	r3, [r4, #56]	; 0x38
 801256a:	4638      	mov	r0, r7
 801256c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012570:	2700      	movs	r7, #0
 8012572:	4638      	mov	r0, r7
 8012574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012578:	6b45      	ldr	r5, [r0, #52]	; 0x34
 801257a:	6385      	str	r5, [r0, #56]	; 0x38
 801257c:	2d00      	cmp	r5, #0
 801257e:	d0f7      	beq.n	8012570 <ai_layers_forward_all+0x60>
 8012580:	4647      	mov	r7, r8
 8012582:	696b      	ldr	r3, [r5, #20]
 8012584:	4628      	mov	r0, r5
 8012586:	4798      	blx	r3
 8012588:	462b      	mov	r3, r5
 801258a:	692d      	ldr	r5, [r5, #16]
 801258c:	429d      	cmp	r5, r3
 801258e:	d004      	beq.n	801259a <ai_layers_forward_all+0x8a>
 8012590:	63a5      	str	r5, [r4, #56]	; 0x38
 8012592:	3701      	adds	r7, #1
 8012594:	2d00      	cmp	r5, #0
 8012596:	d1f4      	bne.n	8012582 <ai_layers_forward_all+0x72>
 8012598:	e7df      	b.n	801255a <ai_layers_forward_all+0x4a>
 801259a:	2300      	movs	r3, #0
 801259c:	63a3      	str	r3, [r4, #56]	; 0x38
 801259e:	3701      	adds	r7, #1
 80125a0:	e7db      	b.n	801255a <ai_layers_forward_all+0x4a>
 80125a2:	bf00      	nop

080125a4 <func_dummy>:
 80125a4:	4770      	bx	lr
 80125a6:	bf00      	nop

080125a8 <forward_conv2d_deep_sssa8_ch_nl_pool>:
 80125a8:	6982      	ldr	r2, [r0, #24]
 80125aa:	8813      	ldrh	r3, [r2, #0]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	f000 823b 	beq.w	8012a28 <forward_conv2d_deep_sssa8_ch_nl_pool+0x480>
 80125b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125b6:	ed2d 8b04 	vpush	{d8-d9}
 80125ba:	6852      	ldr	r2, [r2, #4]
 80125bc:	f8d2 a004 	ldr.w	sl, [r2, #4]
 80125c0:	b0cd      	sub	sp, #308	; 0x134
 80125c2:	4681      	mov	r9, r0
 80125c4:	f1ba 0f00 	cmp.w	sl, #0
 80125c8:	d001      	beq.n	80125ce <forward_conv2d_deep_sssa8_ch_nl_pool+0x26>
 80125ca:	f8da a000 	ldr.w	sl, [sl]
 80125ce:	2b01      	cmp	r3, #1
 80125d0:	f000 8281 	beq.w	8012ad6 <forward_conv2d_deep_sssa8_ch_nl_pool+0x52e>
 80125d4:	6911      	ldr	r1, [r2, #16]
 80125d6:	9119      	str	r1, [sp, #100]	; 0x64
 80125d8:	b109      	cbz	r1, 80125de <forward_conv2d_deep_sssa8_ch_nl_pool+0x36>
 80125da:	6809      	ldr	r1, [r1, #0]
 80125dc:	9119      	str	r1, [sp, #100]	; 0x64
 80125de:	2b02      	cmp	r3, #2
 80125e0:	f000 821f 	beq.w	8012a22 <forward_conv2d_deep_sssa8_ch_nl_pool+0x47a>
 80125e4:	69d1      	ldr	r1, [r2, #28]
 80125e6:	2900      	cmp	r1, #0
 80125e8:	f000 8270 	beq.w	8012acc <forward_conv2d_deep_sssa8_ch_nl_pool+0x524>
 80125ec:	8b10      	ldrh	r0, [r2, #24]
 80125ee:	680c      	ldr	r4, [r1, #0]
 80125f0:	9414      	str	r4, [sp, #80]	; 0x50
 80125f2:	2801      	cmp	r0, #1
 80125f4:	f200 821a 	bhi.w	8012a2c <forward_conv2d_deep_sssa8_ch_nl_pool+0x484>
 80125f8:	2000      	movs	r0, #0
 80125fa:	9016      	str	r0, [sp, #88]	; 0x58
 80125fc:	2b03      	cmp	r3, #3
 80125fe:	f000 826d 	beq.w	8012adc <forward_conv2d_deep_sssa8_ch_nl_pool+0x534>
 8012602:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8012604:	2b00      	cmp	r3, #0
 8012606:	f000 8264 	beq.w	8012ad2 <forward_conv2d_deep_sssa8_ch_nl_pool+0x52a>
 801260a:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 801260e:	6818      	ldr	r0, [r3, #0]
 8012610:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8012614:	922d      	str	r2, [sp, #180]	; 0xb4
 8012616:	9025      	str	r0, [sp, #148]	; 0x94
 8012618:	2a00      	cmp	r2, #0
 801261a:	f000 8251 	beq.w	8012ac0 <forward_conv2d_deep_sssa8_ch_nl_pool+0x518>
 801261e:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8012622:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8012624:	f8da 000c 	ldr.w	r0, [sl, #12]
 8012628:	68e4      	ldr	r4, [r4, #12]
 801262a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801262c:	68e6      	ldr	r6, [r4, #12]
 801262e:	68a4      	ldr	r4, [r4, #8]
 8012630:	68ef      	ldr	r7, [r5, #12]
 8012632:	9432      	str	r4, [sp, #200]	; 0xc8
 8012634:	6845      	ldr	r5, [r0, #4]
 8012636:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801263a:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 801263e:	6852      	ldr	r2, [r2, #4]
 8012640:	f8d9 c058 	ldr.w	ip, [r9, #88]	; 0x58
 8012644:	9215      	str	r2, [sp, #84]	; 0x54
 8012646:	e9d0 0402 	ldrd	r0, r4, [r0, #8]
 801264a:	9036      	str	r0, [sp, #216]	; 0xd8
 801264c:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
 8012650:	902e      	str	r0, [sp, #184]	; 0xb8
 8012652:	68b8      	ldr	r0, [r7, #8]
 8012654:	9023      	str	r0, [sp, #140]	; 0x8c
 8012656:	6878      	ldr	r0, [r7, #4]
 8012658:	9030      	str	r0, [sp, #192]	; 0xc0
 801265a:	f8d9 0044 	ldr.w	r0, [r9, #68]	; 0x44
 801265e:	9033      	str	r0, [sp, #204]	; 0xcc
 8012660:	f8d9 004c 	ldr.w	r0, [r9, #76]	; 0x4c
 8012664:	681a      	ldr	r2, [r3, #0]
 8012666:	9518      	str	r5, [sp, #96]	; 0x60
 8012668:	689b      	ldr	r3, [r3, #8]
 801266a:	f8d9 502c 	ldr.w	r5, [r9, #44]	; 0x2c
 801266e:	961f      	str	r6, [sp, #124]	; 0x7c
 8012670:	9034      	str	r0, [sp, #208]	; 0xd0
 8012672:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 8012676:	9017      	str	r0, [sp, #92]	; 0x5c
 8012678:	f8dc 0000 	ldr.w	r0, [ip]
 801267c:	9026      	str	r0, [sp, #152]	; 0x98
 801267e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8012682:	9035      	str	r0, [sp, #212]	; 0xd4
 8012684:	f8bd 0060 	ldrh.w	r0, [sp, #96]	; 0x60
 8012688:	ee09 0a90 	vmov	s19, r0
 801268c:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
 8012690:	901c      	str	r0, [sp, #112]	; 0x70
 8012692:	b2a8      	uxth	r0, r5
 8012694:	902f      	str	r0, [sp, #188]	; 0xbc
 8012696:	b290      	uxth	r0, r2
 8012698:	901e      	str	r0, [sp, #120]	; 0x78
 801269a:	2900      	cmp	r1, #0
 801269c:	f000 8203 	beq.w	8012aa6 <forward_conv2d_deep_sssa8_ch_nl_pool+0x4fe>
 80126a0:	6889      	ldr	r1, [r1, #8]
 80126a2:	2900      	cmp	r1, #0
 80126a4:	f000 81ff 	beq.w	8012aa6 <forward_conv2d_deep_sssa8_ch_nl_pool+0x4fe>
 80126a8:	6988      	ldr	r0, [r1, #24]
 80126aa:	2800      	cmp	r0, #0
 80126ac:	bf08      	it	eq
 80126ae:	4601      	moveq	r1, r0
 80126b0:	ee08 1a90 	vmov	s17, r1
 80126b4:	b292      	uxth	r2, r2
 80126b6:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80126b8:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80126ba:	f8db 6018 	ldr.w	r6, [fp, #24]
 80126be:	69bf      	ldr	r7, [r7, #24]
 80126c0:	9727      	str	r7, [sp, #156]	; 0x9c
 80126c2:	fa12 f383 	uxtah	r3, r2, r3
 80126c6:	4422      	add	r2, r4
 80126c8:	4423      	add	r3, r4
 80126ca:	921b      	str	r2, [sp, #108]	; 0x6c
 80126cc:	b2aa      	uxth	r2, r5
 80126ce:	9222      	str	r2, [sp, #136]	; 0x88
 80126d0:	1a5b      	subs	r3, r3, r1
 80126d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80126d6:	aa3d      	add	r2, sp, #244	; 0xf4
 80126d8:	924a      	str	r2, [sp, #296]	; 0x128
 80126da:	f240 4501 	movw	r5, #1025	; 0x401
 80126de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80126e2:	e9cd 2546 	strd	r2, r5, [sp, #280]	; 0x118
 80126e6:	9312      	str	r3, [sp, #72]	; 0x48
 80126e8:	f240 4502 	movw	r5, #1026	; 0x402
 80126ec:	2300      	movs	r3, #0
 80126ee:	e9cd 3339 	strd	r3, r3, [sp, #228]	; 0xe4
 80126f2:	e9cd 333d 	strd	r3, r3, [sp, #244]	; 0xf4
 80126f6:	9345      	str	r3, [sp, #276]	; 0x114
 80126f8:	933b      	str	r3, [sp, #236]	; 0xec
 80126fa:	933f      	str	r3, [sp, #252]	; 0xfc
 80126fc:	9549      	str	r5, [sp, #292]	; 0x124
 80126fe:	f8d8 5018 	ldr.w	r5, [r8, #24]
 8012702:	933c      	str	r3, [sp, #240]	; 0xf0
 8012704:	9340      	str	r3, [sp, #256]	; 0x100
 8012706:	934b      	str	r3, [sp, #300]	; 0x12c
 8012708:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 801270c:	9321      	str	r3, [sp, #132]	; 0x84
 801270e:	f10d 0ce4 	add.w	ip, sp, #228	; 0xe4
 8012712:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 8012716:	9331      	str	r3, [sp, #196]	; 0xc4
 8012718:	ac41      	add	r4, sp, #260	; 0x104
 801271a:	4659      	mov	r1, fp
 801271c:	a845      	add	r0, sp, #276	; 0x114
 801271e:	f8cd c120 	str.w	ip, [sp, #288]	; 0x120
 8012722:	f008 fa2f 	bl	801ab84 <core_tensor_clone>
 8012726:	4631      	mov	r1, r6
 8012728:	4620      	mov	r0, r4
 801272a:	f008 fa5d 	bl	801abe8 <core_array_clone>
 801272e:	944b      	str	r4, [sp, #300]	; 0x12c
 8012730:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012734:	9914      	ldr	r1, [sp, #80]	; 0x50
 8012736:	689b      	ldr	r3, [r3, #8]
 8012738:	931d      	str	r3, [sp, #116]	; 0x74
 801273a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801273c:	f8da 2000 	ldr.w	r2, [sl]
 8012740:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8012744:	6809      	ldr	r1, [r1, #0]
 8012746:	f8de 3008 	ldr.w	r3, [lr, #8]
 801274a:	9324      	str	r3, [sp, #144]	; 0x90
 801274c:	f9bd 4098 	ldrsh.w	r4, [sp, #152]	; 0x98
 8012750:	f8d8 3000 	ldr.w	r3, [r8]
 8012754:	9113      	str	r1, [sp, #76]	; 0x4c
 8012756:	2a00      	cmp	r2, #0
 8012758:	f000 818d 	beq.w	8012a76 <forward_conv2d_deep_sssa8_ch_nl_pool+0x4ce>
 801275c:	6851      	ldr	r1, [r2, #4]
 801275e:	2900      	cmp	r1, #0
 8012760:	f000 8189 	beq.w	8012a76 <forward_conv2d_deep_sssa8_ch_nl_pool+0x4ce>
 8012764:	8850      	ldrh	r0, [r2, #2]
 8012766:	2800      	cmp	r0, #0
 8012768:	f000 8185 	beq.w	8012a76 <forward_conv2d_deep_sssa8_ch_nl_pool+0x4ce>
 801276c:	6809      	ldr	r1, [r1, #0]
 801276e:	ed91 0a00 	vldr	s0, [r1]
 8012772:	2b00      	cmp	r3, #0
 8012774:	f000 817c 	beq.w	8012a70 <forward_conv2d_deep_sssa8_ch_nl_pool+0x4c8>
 8012778:	6859      	ldr	r1, [r3, #4]
 801277a:	2900      	cmp	r1, #0
 801277c:	f000 8178 	beq.w	8012a70 <forward_conv2d_deep_sssa8_ch_nl_pool+0x4c8>
 8012780:	8858      	ldrh	r0, [r3, #2]
 8012782:	2800      	cmp	r0, #0
 8012784:	f000 8174 	beq.w	8012a70 <forward_conv2d_deep_sssa8_ch_nl_pool+0x4c8>
 8012788:	6809      	ldr	r1, [r1, #0]
 801278a:	edd1 0a00 	vldr	s1, [r1]
 801278e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8012790:	f8da c018 	ldr.w	ip, [sl, #24]
 8012794:	6988      	ldr	r0, [r1, #24]
 8012796:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012798:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801279c:	6989      	ldr	r1, [r1, #24]
 801279e:	6880      	ldr	r0, [r0, #8]
 80127a0:	6889      	ldr	r1, [r1, #8]
 80127a2:	912c      	str	r1, [sp, #176]	; 0xb0
 80127a4:	f899 1041 	ldrb.w	r1, [r9, #65]	; 0x41
 80127a8:	912a      	str	r1, [sp, #168]	; 0xa8
 80127aa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80127ac:	9716      	str	r7, [sp, #88]	; 0x58
 80127ae:	902b      	str	r0, [sp, #172]	; 0xac
 80127b0:	b121      	cbz	r1, 80127bc <forward_conv2d_deep_sssa8_ch_nl_pool+0x214>
 80127b2:	6849      	ldr	r1, [r1, #4]
 80127b4:	9113      	str	r1, [sp, #76]	; 0x4c
 80127b6:	b109      	cbz	r1, 80127bc <forward_conv2d_deep_sssa8_ch_nl_pool+0x214>
 80127b8:	6809      	ldr	r1, [r1, #0]
 80127ba:	9113      	str	r1, [sp, #76]	; 0x4c
 80127bc:	2a00      	cmp	r2, #0
 80127be:	f000 8170 	beq.w	8012aa2 <forward_conv2d_deep_sssa8_ch_nl_pool+0x4fa>
 80127c2:	6851      	ldr	r1, [r2, #4]
 80127c4:	2900      	cmp	r1, #0
 80127c6:	f000 8179 	beq.w	8012abc <forward_conv2d_deep_sssa8_ch_nl_pool+0x514>
 80127ca:	8852      	ldrh	r2, [r2, #2]
 80127cc:	2a00      	cmp	r2, #0
 80127ce:	f000 8168 	beq.w	8012aa2 <forward_conv2d_deep_sssa8_ch_nl_pool+0x4fa>
 80127d2:	684a      	ldr	r2, [r1, #4]
 80127d4:	f992 2000 	ldrsb.w	r2, [r2]
 80127d8:	9228      	str	r2, [sp, #160]	; 0xa0
 80127da:	2b00      	cmp	r3, #0
 80127dc:	f000 815f 	beq.w	8012a9e <forward_conv2d_deep_sssa8_ch_nl_pool+0x4f6>
 80127e0:	685a      	ldr	r2, [r3, #4]
 80127e2:	2a00      	cmp	r2, #0
 80127e4:	f000 8170 	beq.w	8012ac8 <forward_conv2d_deep_sssa8_ch_nl_pool+0x520>
 80127e8:	885b      	ldrh	r3, [r3, #2]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	f000 8157 	beq.w	8012a9e <forward_conv2d_deep_sssa8_ch_nl_pool+0x4f6>
 80127f0:	6853      	ldr	r3, [r2, #4]
 80127f2:	f993 3000 	ldrsb.w	r3, [r3]
 80127f6:	9329      	str	r3, [sp, #164]	; 0xa4
 80127f8:	e9de 0100 	ldrd	r0, r1, [lr]
 80127fc:	f8bd a054 	ldrh.w	sl, [sp, #84]	; 0x54
 8012800:	edcd 0a1a 	vstr	s1, [sp, #104]	; 0x68
 8012804:	ed8d 0a14 	vstr	s0, [sp, #80]	; 0x50
 8012808:	f008 f964 	bl	801aad4 <ai_array_get_byte_size>
 801280c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801280e:	eddd 0a1a 	vldr	s1, [sp, #104]	; 0x68
 8012812:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
 8012816:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012818:	eba0 004a 	sub.w	r0, r0, sl, lsl #1
 801281c:	4613      	mov	r3, r2
 801281e:	4403      	add	r3, r0
 8012820:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8012822:	f003 ff11 	bl	8016648 <align_factor_ch>
 8012826:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012828:	2b00      	cmp	r3, #0
 801282a:	f000 8115 	beq.w	8012a58 <forward_conv2d_deep_sssa8_ch_nl_pool+0x4b0>
 801282e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012830:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8012834:	9415      	str	r4, [sp, #84]	; 0x54
 8012836:	fb02 f10a 	mul.w	r1, r2, sl
 801283a:	b292      	uxth	r2, r2
 801283c:	ee08 1a10 	vmov	s16, r1
 8012840:	9220      	str	r2, [sp, #128]	; 0x80
 8012842:	9936      	ldr	r1, [sp, #216]	; 0xd8
 8012844:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012846:	fb01 f202 	mul.w	r2, r1, r2
 801284a:	fb03 f202 	mul.w	r2, r3, r2
 801284e:	fb01 f303 	mul.w	r3, r1, r3
 8012852:	9337      	str	r3, [sp, #220]	; 0xdc
 8012854:	b28b      	uxth	r3, r1
 8012856:	ee09 3a10 	vmov	s18, r3
 801285a:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801285e:	931a      	str	r3, [sp, #104]	; 0x68
 8012860:	f04f 0a00 	mov.w	sl, #0
 8012864:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012866:	9236      	str	r2, [sp, #216]	; 0xd8
 8012868:	931d      	str	r3, [sp, #116]	; 0x74
 801286a:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
 801286e:	e0b6      	b.n	80129de <forward_conv2d_deep_sssa8_ch_nl_pool+0x436>
 8012870:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012872:	68aa      	ldr	r2, [r5, #8]
 8012874:	9213      	str	r2, [sp, #76]	; 0x4c
 8012876:	429c      	cmp	r4, r3
 8012878:	bf06      	itte	eq
 801287a:	faba f38a 	clzeq	r3, sl
 801287e:	095b      	lsreq	r3, r3, #5
 8012880:	2300      	movne	r3, #0
 8012882:	9314      	str	r3, [sp, #80]	; 0x50
 8012884:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012886:	6998      	ldr	r0, [r3, #24]
 8012888:	e9d0 0100 	ldrd	r0, r1, [r0]
 801288c:	f008 f922 	bl	801aad4 <ai_array_get_byte_size>
 8012890:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012892:	930e      	str	r3, [sp, #56]	; 0x38
 8012894:	2301      	movs	r3, #1
 8012896:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 801289a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801289c:	930b      	str	r3, [sp, #44]	; 0x2c
 801289e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80128a0:	9309      	str	r3, [sp, #36]	; 0x24
 80128a2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80128a4:	9308      	str	r3, [sp, #32]
 80128a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80128a8:	9307      	str	r3, [sp, #28]
 80128aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80128ac:	9306      	str	r3, [sp, #24]
 80128ae:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80128b0:	9305      	str	r3, [sp, #20]
 80128b2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80128b4:	9304      	str	r3, [sp, #16]
 80128b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80128b8:	9301      	str	r3, [sp, #4]
 80128ba:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80128bc:	9300      	str	r3, [sp, #0]
 80128be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80128c0:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80128c2:	9310      	str	r3, [sp, #64]	; 0x40
 80128c4:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 80128c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80128ca:	9303      	str	r3, [sp, #12]
 80128cc:	f8bd 30c0 	ldrh.w	r3, [sp, #192]	; 0xc0
 80128d0:	920a      	str	r2, [sp, #40]	; 0x28
 80128d2:	9302      	str	r3, [sp, #8]
 80128d4:	b2ba      	uxth	r2, r7
 80128d6:	ee19 3a90 	vmov	r3, s19
 80128da:	ee19 1a10 	vmov	r1, s18
 80128de:	900f      	str	r0, [sp, #60]	; 0x3c
 80128e0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80128e2:	f001 fb43 	bl	8013f6c <forward_lite_conv2d_deep_sssa8_ch>
 80128e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80128e8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80128ea:	4293      	cmp	r3, r2
 80128ec:	f000 80b0 	beq.w	8012a50 <forward_conv2d_deep_sssa8_ch_nl_pool+0x4a8>
 80128f0:	1ad3      	subs	r3, r2, r3
 80128f2:	429f      	cmp	r7, r3
 80128f4:	463a      	mov	r2, r7
 80128f6:	bf28      	it	cs
 80128f8:	461a      	movcs	r2, r3
 80128fa:	931b      	str	r3, [sp, #108]	; 0x6c
 80128fc:	921d      	str	r2, [sp, #116]	; 0x74
 80128fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012900:	2b00      	cmp	r3, #0
 8012902:	f040 8096 	bne.w	8012a32 <forward_conv2d_deep_sssa8_ch_nl_pool+0x48a>
 8012906:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012908:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801290a:	4413      	add	r3, r2
 801290c:	9316      	str	r3, [sp, #88]	; 0x58
 801290e:	ee18 3a90 	vmov	r3, s17
 8012912:	ee18 2a10 	vmov	r2, s16
 8012916:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 8012918:	4641      	mov	r1, r8
 801291a:	4658      	mov	r0, fp
 801291c:	47b8      	blx	r7
 801291e:	3401      	adds	r4, #1
 8012920:	b224      	sxth	r4, r4
 8012922:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012924:	429c      	cmp	r4, r3
 8012926:	db32      	blt.n	801298e <forward_conv2d_deep_sssa8_ch_nl_pool+0x3e6>
 8012928:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801292a:	9308      	str	r3, [sp, #32]
 801292c:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8012930:	9305      	str	r3, [sp, #20]
 8012932:	1ae4      	subs	r4, r4, r3
 8012934:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8012938:	9303      	str	r3, [sp, #12]
 801293a:	2201      	movs	r2, #1
 801293c:	f8bd 30c8 	ldrh.w	r3, [sp, #200]	; 0xc8
 8012940:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012942:	9207      	str	r2, [sp, #28]
 8012944:	9306      	str	r3, [sp, #24]
 8012946:	4492      	add	sl, r2
 8012948:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	; 0xd0
 801294c:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 8012950:	9304      	str	r3, [sp, #16]
 8012952:	f8bd 30d4 	ldrh.w	r3, [sp, #212]	; 0xd4
 8012956:	9201      	str	r2, [sp, #4]
 8012958:	9302      	str	r3, [sp, #8]
 801295a:	1a52      	subs	r2, r2, r1
 801295c:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
 8012960:	9920      	ldr	r1, [sp, #128]	; 0x80
 8012962:	9300      	str	r3, [sp, #0]
 8012964:	b292      	uxth	r2, r2
 8012966:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8012968:	9f31      	ldr	r7, [sp, #196]	; 0xc4
 801296a:	a845      	add	r0, sp, #276	; 0x114
 801296c:	47b8      	blx	r7
 801296e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012970:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8012972:	695b      	ldr	r3, [r3, #20]
 8012974:	68da      	ldr	r2, [r3, #12]
 8012976:	688b      	ldr	r3, [r1, #8]
 8012978:	4413      	add	r3, r2
 801297a:	608b      	str	r3, [r1, #8]
 801297c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801297e:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8012982:	1ad3      	subs	r3, r2, r3
 8012984:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012988:	b21b      	sxth	r3, r3
 801298a:	b224      	sxth	r4, r4
 801298c:	9315      	str	r3, [sp, #84]	; 0x54
 801298e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8012992:	68aa      	ldr	r2, [r5, #8]
 8012994:	68db      	ldr	r3, [r3, #12]
 8012996:	4413      	add	r3, r2
 8012998:	60ab      	str	r3, [r5, #8]
 801299a:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 801299e:	b132      	cbz	r2, 80129ae <forward_conv2d_deep_sssa8_ch_nl_pool+0x406>
 80129a0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80129a4:	68da      	ldr	r2, [r3, #12]
 80129a6:	68b3      	ldr	r3, [r6, #8]
 80129a8:	4413      	add	r3, r2
 80129aa:	60b3      	str	r3, [r6, #8]
 80129ac:	68ab      	ldr	r3, [r5, #8]
 80129ae:	68ea      	ldr	r2, [r5, #12]
 80129b0:	9314      	str	r3, [sp, #80]	; 0x50
 80129b2:	4640      	mov	r0, r8
 80129b4:	9213      	str	r2, [sp, #76]	; 0x4c
 80129b6:	f008 f8cd 	bl	801ab54 <get_tensor_byte_size>
 80129ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80129bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80129be:	4410      	add	r0, r2
 80129c0:	4283      	cmp	r3, r0
 80129c2:	d306      	bcc.n	80129d2 <forward_conv2d_deep_sssa8_ch_nl_pool+0x42a>
 80129c4:	68eb      	ldr	r3, [r5, #12]
 80129c6:	60ab      	str	r3, [r5, #8]
 80129c8:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 80129cc:	b10b      	cbz	r3, 80129d2 <forward_conv2d_deep_sssa8_ch_nl_pool+0x42a>
 80129ce:	68f3      	ldr	r3, [r6, #12]
 80129d0:	60b3      	str	r3, [r6, #8]
 80129d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80129d4:	3b01      	subs	r3, #1
 80129d6:	9312      	str	r3, [sp, #72]	; 0x48
 80129d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80129da:	459a      	cmp	sl, r3
 80129dc:	d23c      	bcs.n	8012a58 <forward_conv2d_deep_sssa8_ch_nl_pool+0x4b0>
 80129de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80129e0:	3301      	adds	r3, #1
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	f73f af44 	bgt.w	8012870 <forward_conv2d_deep_sssa8_ch_nl_pool+0x2c8>
 80129e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	da99      	bge.n	8012922 <forward_conv2d_deep_sssa8_ch_nl_pool+0x37a>
 80129ee:	e9d6 1202 	ldrd	r1, r2, [r6, #8]
 80129f2:	ee18 3a10 	vmov	r3, s16
 80129f6:	fb03 1314 	mls	r3, r3, r4, r1
 80129fa:	429a      	cmp	r2, r3
 80129fc:	bf84      	itt	hi
 80129fe:	6870      	ldrhi	r0, [r6, #4]
 8012a00:	181b      	addhi	r3, r3, r0
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d202      	bcs.n	8012a0c <forward_conv2d_deep_sssa8_ch_nl_pool+0x464>
 8012a06:	981a      	ldr	r0, [sp, #104]	; 0x68
 8012a08:	42a0      	cmp	r0, r4
 8012a0a:	d137      	bne.n	8012a7c <forward_conv2d_deep_sssa8_ch_nl_pool+0x4d4>
 8012a0c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012a0e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012a10:	b2a4      	uxth	r4, r4
 8012a12:	4413      	add	r3, r2
 8012a14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012a16:	1b1b      	subs	r3, r3, r4
 8012a18:	b21b      	sxth	r3, r3
 8012a1a:	4414      	add	r4, r2
 8012a1c:	9318      	str	r3, [sp, #96]	; 0x60
 8012a1e:	b224      	sxth	r4, r4
 8012a20:	e77f      	b.n	8012922 <forward_conv2d_deep_sssa8_ch_nl_pool+0x37a>
 8012a22:	2300      	movs	r3, #0
 8012a24:	685b      	ldr	r3, [r3, #4]
 8012a26:	deff      	udf	#255	; 0xff
 8012a28:	685b      	ldr	r3, [r3, #4]
 8012a2a:	deff      	udf	#255	; 0xff
 8012a2c:	6848      	ldr	r0, [r1, #4]
 8012a2e:	9016      	str	r0, [sp, #88]	; 0x58
 8012a30:	e5e4      	b.n	80125fc <forward_conv2d_deep_sssa8_ch_nl_pool+0x54>
 8012a32:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012a34:	461a      	mov	r2, r3
 8012a36:	1a5b      	subs	r3, r3, r1
 8012a38:	d505      	bpl.n	8012a46 <forward_conv2d_deep_sssa8_ch_nl_pool+0x49e>
 8012a3a:	1a8a      	subs	r2, r1, r2
 8012a3c:	9837      	ldr	r0, [sp, #220]	; 0xdc
 8012a3e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012a40:	fb00 1202 	mla	r2, r0, r2, r1
 8012a44:	9216      	str	r2, [sp, #88]	; 0x58
 8012a46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012a4a:	b29b      	uxth	r3, r3
 8012a4c:	931e      	str	r3, [sp, #120]	; 0x78
 8012a4e:	e75e      	b.n	801290e <forward_conv2d_deep_sssa8_ch_nl_pool+0x366>
 8012a50:	2300      	movs	r3, #0
 8012a52:	931d      	str	r3, [sp, #116]	; 0x74
 8012a54:	931b      	str	r3, [sp, #108]	; 0x6c
 8012a56:	e752      	b.n	80128fe <forward_conv2d_deep_sssa8_ch_nl_pool+0x356>
 8012a58:	68eb      	ldr	r3, [r5, #12]
 8012a5a:	60ab      	str	r3, [r5, #8]
 8012a5c:	68f3      	ldr	r3, [r6, #12]
 8012a5e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8012a60:	60b3      	str	r3, [r6, #8]
 8012a62:	68d3      	ldr	r3, [r2, #12]
 8012a64:	6093      	str	r3, [r2, #8]
 8012a66:	b04d      	add	sp, #308	; 0x134
 8012a68:	ecbd 8b04 	vpop	{d8-d9}
 8012a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a70:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8012ae4 <forward_conv2d_deep_sssa8_ch_nl_pool+0x53c>
 8012a74:	e68b      	b.n	801278e <forward_conv2d_deep_sssa8_ch_nl_pool+0x1e6>
 8012a76:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8012ae4 <forward_conv2d_deep_sssa8_ch_nl_pool+0x53c>
 8012a7a:	e67a      	b.n	8012772 <forward_conv2d_deep_sssa8_ch_nl_pool+0x1ca>
 8012a7c:	6870      	ldr	r0, [r6, #4]
 8012a7e:	4402      	add	r2, r0
 8012a80:	4293      	cmp	r3, r2
 8012a82:	d2c3      	bcs.n	8012a0c <forward_conv2d_deep_sssa8_ch_nl_pool+0x464>
 8012a84:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8012a86:	3901      	subs	r1, #1
 8012a88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a8c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8012a90:	68f2      	ldr	r2, [r6, #12]
 8012a92:	6870      	ldr	r0, [r6, #4]
 8012a94:	4402      	add	r2, r0
 8012a96:	4293      	cmp	r3, r2
 8012a98:	d3f6      	bcc.n	8012a88 <forward_conv2d_deep_sssa8_ch_nl_pool+0x4e0>
 8012a9a:	9712      	str	r7, [sp, #72]	; 0x48
 8012a9c:	e7b6      	b.n	8012a0c <forward_conv2d_deep_sssa8_ch_nl_pool+0x464>
 8012a9e:	9329      	str	r3, [sp, #164]	; 0xa4
 8012aa0:	e6aa      	b.n	80127f8 <forward_conv2d_deep_sssa8_ch_nl_pool+0x250>
 8012aa2:	9228      	str	r2, [sp, #160]	; 0xa0
 8012aa4:	e699      	b.n	80127da <forward_conv2d_deep_sssa8_ch_nl_pool+0x232>
 8012aa6:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8012aaa:	ee08 1a90 	vmov	s17, r1
 8012aae:	2900      	cmp	r1, #0
 8012ab0:	f43f ae00 	beq.w	80126b4 <forward_conv2d_deep_sssa8_ch_nl_pool+0x10c>
 8012ab4:	6889      	ldr	r1, [r1, #8]
 8012ab6:	ee08 1a90 	vmov	s17, r1
 8012aba:	e5fb      	b.n	80126b4 <forward_conv2d_deep_sssa8_ch_nl_pool+0x10c>
 8012abc:	9128      	str	r1, [sp, #160]	; 0xa0
 8012abe:	e68c      	b.n	80127da <forward_conv2d_deep_sssa8_ch_nl_pool+0x232>
 8012ac0:	4b09      	ldr	r3, [pc, #36]	; (8012ae8 <forward_conv2d_deep_sssa8_ch_nl_pool+0x540>)
 8012ac2:	932d      	str	r3, [sp, #180]	; 0xb4
 8012ac4:	46c3      	mov	fp, r8
 8012ac6:	e5ac      	b.n	8012622 <forward_conv2d_deep_sssa8_ch_nl_pool+0x7a>
 8012ac8:	9229      	str	r2, [sp, #164]	; 0xa4
 8012aca:	e695      	b.n	80127f8 <forward_conv2d_deep_sssa8_ch_nl_pool+0x250>
 8012acc:	9114      	str	r1, [sp, #80]	; 0x50
 8012ace:	9116      	str	r1, [sp, #88]	; 0x58
 8012ad0:	e594      	b.n	80125fc <forward_conv2d_deep_sssa8_ch_nl_pool+0x54>
 8012ad2:	68db      	ldr	r3, [r3, #12]
 8012ad4:	deff      	udf	#255	; 0xff
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	685b      	ldr	r3, [r3, #4]
 8012ada:	deff      	udf	#255	; 0xff
 8012adc:	2300      	movs	r3, #0
 8012ade:	685b      	ldr	r3, [r3, #4]
 8012ae0:	deff      	udf	#255	; 0xff
 8012ae2:	bf00      	nop
 8012ae4:	00000000 	.word	0x00000000
 8012ae8:	080125a5 	.word	0x080125a5

08012aec <forward_conv2d_deep_3x3_sssa8_ch_nl_pool>:
 8012aec:	6982      	ldr	r2, [r0, #24]
 8012aee:	8813      	ldrh	r3, [r2, #0]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	f000 8213 	beq.w	8012f1c <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x430>
 8012af6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012afa:	ed2d 8b04 	vpush	{d8-d9}
 8012afe:	6852      	ldr	r2, [r2, #4]
 8012b00:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8012b04:	b0c1      	sub	sp, #260	; 0x104
 8012b06:	4681      	mov	r9, r0
 8012b08:	f1b8 0f00 	cmp.w	r8, #0
 8012b0c:	d001      	beq.n	8012b12 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x26>
 8012b0e:	f8d8 8000 	ldr.w	r8, [r8]
 8012b12:	2b01      	cmp	r3, #1
 8012b14:	f000 824e 	beq.w	8012fb4 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x4c8>
 8012b18:	6911      	ldr	r1, [r2, #16]
 8012b1a:	9112      	str	r1, [sp, #72]	; 0x48
 8012b1c:	b109      	cbz	r1, 8012b22 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x36>
 8012b1e:	6809      	ldr	r1, [r1, #0]
 8012b20:	9112      	str	r1, [sp, #72]	; 0x48
 8012b22:	2b02      	cmp	r3, #2
 8012b24:	f000 81f7 	beq.w	8012f16 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x42a>
 8012b28:	69d0      	ldr	r0, [r2, #28]
 8012b2a:	2800      	cmp	r0, #0
 8012b2c:	f000 823d 	beq.w	8012faa <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x4be>
 8012b30:	8b11      	ldrh	r1, [r2, #24]
 8012b32:	6804      	ldr	r4, [r0, #0]
 8012b34:	940d      	str	r4, [sp, #52]	; 0x34
 8012b36:	2901      	cmp	r1, #1
 8012b38:	f200 81f2 	bhi.w	8012f20 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x434>
 8012b3c:	2100      	movs	r1, #0
 8012b3e:	9113      	str	r1, [sp, #76]	; 0x4c
 8012b40:	2b03      	cmp	r3, #3
 8012b42:	f000 823a 	beq.w	8012fba <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x4ce>
 8012b46:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	f000 8231 	beq.w	8012fb0 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x4c4>
 8012b4e:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8012b52:	6819      	ldr	r1, [r3, #0]
 8012b54:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8012b58:	922a      	str	r2, [sp, #168]	; 0xa8
 8012b5a:	911e      	str	r1, [sp, #120]	; 0x78
 8012b5c:	2a00      	cmp	r2, #0
 8012b5e:	f000 821d 	beq.w	8012f9c <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x4b0>
 8012b62:	689b      	ldr	r3, [r3, #8]
 8012b64:	930e      	str	r3, [sp, #56]	; 0x38
 8012b66:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8012b6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012b6c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8012b70:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 8012b74:	68d5      	ldr	r5, [r2, #12]
 8012b76:	685b      	ldr	r3, [r3, #4]
 8012b78:	6862      	ldr	r2, [r4, #4]
 8012b7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8012b7c:	9211      	str	r2, [sp, #68]	; 0x44
 8012b7e:	688b      	ldr	r3, [r1, #8]
 8012b80:	680a      	ldr	r2, [r1, #0]
 8012b82:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012b84:	f8d9 6058 	ldr.w	r6, [r9, #88]	; 0x58
 8012b88:	68c9      	ldr	r1, [r1, #12]
 8012b8a:	f8d9 702c 	ldr.w	r7, [r9, #44]	; 0x2c
 8012b8e:	6889      	ldr	r1, [r1, #8]
 8012b90:	9116      	str	r1, [sp, #88]	; 0x58
 8012b92:	68e9      	ldr	r1, [r5, #12]
 8012b94:	9114      	str	r1, [sp, #80]	; 0x50
 8012b96:	68a9      	ldr	r1, [r5, #8]
 8012b98:	9121      	str	r1, [sp, #132]	; 0x84
 8012b9a:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 8012b9e:	912b      	str	r1, [sp, #172]	; 0xac
 8012ba0:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 8012ba4:	9122      	str	r1, [sp, #136]	; 0x88
 8012ba6:	f8d9 104c 	ldr.w	r1, [r9, #76]	; 0x4c
 8012baa:	9123      	str	r1, [sp, #140]	; 0x8c
 8012bac:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8012bb0:	9110      	str	r1, [sp, #64]	; 0x40
 8012bb2:	e9d6 4100 	ldrd	r4, r1, [r6]
 8012bb6:	9124      	str	r1, [sp, #144]	; 0x90
 8012bb8:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8012bbc:	ee09 1a10 	vmov	s18, r1
 8012bc0:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8012bc4:	ee08 1a10 	vmov	s16, r1
 8012bc8:	b291      	uxth	r1, r2
 8012bca:	911b      	str	r1, [sp, #108]	; 0x6c
 8012bcc:	2800      	cmp	r0, #0
 8012bce:	f000 81da 	beq.w	8012f86 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x49a>
 8012bd2:	6880      	ldr	r0, [r0, #8]
 8012bd4:	2800      	cmp	r0, #0
 8012bd6:	f000 81d6 	beq.w	8012f86 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x49a>
 8012bda:	6981      	ldr	r1, [r0, #24]
 8012bdc:	2900      	cmp	r1, #0
 8012bde:	bf18      	it	ne
 8012be0:	4601      	movne	r1, r0
 8012be2:	9120      	str	r1, [sp, #128]	; 0x80
 8012be4:	b292      	uxth	r2, r2
 8012be6:	fa12 f383 	uxtah	r3, r2, r3
 8012bea:	442a      	add	r2, r5
 8012bec:	9218      	str	r2, [sp, #96]	; 0x60
 8012bee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012bf0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012bf2:	442b      	add	r3, r5
 8012bf4:	1a9b      	subs	r3, r3, r2
 8012bf6:	aa31      	add	r2, sp, #196	; 0xc4
 8012bf8:	b2bf      	uxth	r7, r7
 8012bfa:	923e      	str	r2, [sp, #248]	; 0xf8
 8012bfc:	fbb3 f3f7 	udiv	r3, r3, r7
 8012c00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012c04:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8012c06:	930c      	str	r3, [sp, #48]	; 0x30
 8012c08:	f240 4501 	movw	r5, #1025	; 0x401
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	e9cd 253a 	strd	r2, r5, [sp, #232]	; 0xe8
 8012c12:	f240 4502 	movw	r5, #1026	; 0x402
 8012c16:	698e      	ldr	r6, [r1, #24]
 8012c18:	69bf      	ldr	r7, [r7, #24]
 8012c1a:	9339      	str	r3, [sp, #228]	; 0xe4
 8012c1c:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
 8012c20:	e9cd 3331 	strd	r3, r3, [sp, #196]	; 0xc4
 8012c24:	932f      	str	r3, [sp, #188]	; 0xbc
 8012c26:	9333      	str	r3, [sp, #204]	; 0xcc
 8012c28:	953d      	str	r5, [sp, #244]	; 0xf4
 8012c2a:	f8da 5018 	ldr.w	r5, [sl, #24]
 8012c2e:	9330      	str	r3, [sp, #192]	; 0xc0
 8012c30:	9334      	str	r3, [sp, #208]	; 0xd0
 8012c32:	933f      	str	r3, [sp, #252]	; 0xfc
 8012c34:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8012c38:	9315      	str	r3, [sp, #84]	; 0x54
 8012c3a:	f10d 0cb4 	add.w	ip, sp, #180	; 0xb4
 8012c3e:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 8012c42:	931f      	str	r3, [sp, #124]	; 0x7c
 8012c44:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 8012c48:	a839      	add	r0, sp, #228	; 0xe4
 8012c4a:	f8cd c0f0 	str.w	ip, [sp, #240]	; 0xf0
 8012c4e:	971c      	str	r7, [sp, #112]	; 0x70
 8012c50:	f007 ff98 	bl	801ab84 <core_tensor_clone>
 8012c54:	4631      	mov	r1, r6
 8012c56:	4658      	mov	r0, fp
 8012c58:	f007 ffc6 	bl	801abe8 <core_array_clone>
 8012c5c:	f8cd b0fc 	str.w	fp, [sp, #252]	; 0xfc
 8012c60:	f8da 300c 	ldr.w	r3, [sl, #12]
 8012c64:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012c66:	689b      	ldr	r3, [r3, #8]
 8012c68:	9317      	str	r3, [sp, #92]	; 0x5c
 8012c6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012c6c:	f8d8 2000 	ldr.w	r2, [r8]
 8012c70:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8012c74:	f8d1 b000 	ldr.w	fp, [r1]
 8012c78:	f8de 3008 	ldr.w	r3, [lr, #8]
 8012c7c:	931d      	str	r3, [sp, #116]	; 0x74
 8012c7e:	b224      	sxth	r4, r4
 8012c80:	f8da 3000 	ldr.w	r3, [sl]
 8012c84:	2a00      	cmp	r2, #0
 8012c86:	f000 8165 	beq.w	8012f54 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x468>
 8012c8a:	6851      	ldr	r1, [r2, #4]
 8012c8c:	2900      	cmp	r1, #0
 8012c8e:	f000 8161 	beq.w	8012f54 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x468>
 8012c92:	8850      	ldrh	r0, [r2, #2]
 8012c94:	2800      	cmp	r0, #0
 8012c96:	f000 815d 	beq.w	8012f54 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x468>
 8012c9a:	6809      	ldr	r1, [r1, #0]
 8012c9c:	ed91 0a00 	vldr	s0, [r1]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	f000 8154 	beq.w	8012f4e <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x462>
 8012ca6:	6859      	ldr	r1, [r3, #4]
 8012ca8:	2900      	cmp	r1, #0
 8012caa:	f000 8150 	beq.w	8012f4e <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x462>
 8012cae:	8858      	ldrh	r0, [r3, #2]
 8012cb0:	2800      	cmp	r0, #0
 8012cb2:	f000 814c 	beq.w	8012f4e <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x462>
 8012cb6:	6809      	ldr	r1, [r1, #0]
 8012cb8:	edd1 0a00 	vldr	s1, [r1]
 8012cbc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012cbe:	f8d8 c018 	ldr.w	ip, [r8, #24]
 8012cc2:	6988      	ldr	r0, [r1, #24]
 8012cc4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012cc6:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8012cca:	6989      	ldr	r1, [r1, #24]
 8012ccc:	6880      	ldr	r0, [r0, #8]
 8012cce:	6889      	ldr	r1, [r1, #8]
 8012cd0:	9129      	str	r1, [sp, #164]	; 0xa4
 8012cd2:	f899 1041 	ldrb.w	r1, [r9, #65]	; 0x41
 8012cd6:	9719      	str	r7, [sp, #100]	; 0x64
 8012cd8:	9028      	str	r0, [sp, #160]	; 0xa0
 8012cda:	9127      	str	r1, [sp, #156]	; 0x9c
 8012cdc:	f1bb 0f00 	cmp.w	fp, #0
 8012ce0:	d006      	beq.n	8012cf0 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x204>
 8012ce2:	f8db b004 	ldr.w	fp, [fp, #4]
 8012ce6:	f1bb 0f00 	cmp.w	fp, #0
 8012cea:	d001      	beq.n	8012cf0 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x204>
 8012cec:	f8db b000 	ldr.w	fp, [fp]
 8012cf0:	2a00      	cmp	r2, #0
 8012cf2:	f000 8146 	beq.w	8012f82 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x496>
 8012cf6:	6851      	ldr	r1, [r2, #4]
 8012cf8:	2900      	cmp	r1, #0
 8012cfa:	f000 814d 	beq.w	8012f98 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x4ac>
 8012cfe:	8852      	ldrh	r2, [r2, #2]
 8012d00:	2a00      	cmp	r2, #0
 8012d02:	f000 813e 	beq.w	8012f82 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x496>
 8012d06:	684a      	ldr	r2, [r1, #4]
 8012d08:	f992 2000 	ldrsb.w	r2, [r2]
 8012d0c:	9225      	str	r2, [sp, #148]	; 0x94
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	f000 8135 	beq.w	8012f7e <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x492>
 8012d14:	685a      	ldr	r2, [r3, #4]
 8012d16:	2a00      	cmp	r2, #0
 8012d18:	f000 8145 	beq.w	8012fa6 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x4ba>
 8012d1c:	885b      	ldrh	r3, [r3, #2]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	f000 812d 	beq.w	8012f7e <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x492>
 8012d24:	6853      	ldr	r3, [r2, #4]
 8012d26:	f993 3000 	ldrsb.w	r3, [r3]
 8012d2a:	9326      	str	r3, [sp, #152]	; 0x98
 8012d2c:	e9de 0100 	ldrd	r0, r1, [lr]
 8012d30:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
 8012d34:	edcd 0a13 	vstr	s1, [sp, #76]	; 0x4c
 8012d38:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 8012d3c:	f007 feca 	bl	801aad4 <ai_array_get_byte_size>
 8012d40:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012d42:	eddd 0a13 	vldr	s1, [sp, #76]	; 0x4c
 8012d46:	ed9d 0a0d 	vldr	s0, [sp, #52]	; 0x34
 8012d4a:	eba0 0048 	sub.w	r0, r0, r8, lsl #1
 8012d4e:	4613      	mov	r3, r2
 8012d50:	4403      	add	r3, r0
 8012d52:	ee18 1a10 	vmov	r1, s16
 8012d56:	4658      	mov	r0, fp
 8012d58:	f003 fc76 	bl	8016648 <align_factor_ch>
 8012d5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	f000 80e9 	beq.w	8012f36 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x44a>
 8012d64:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012d66:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012d6a:	940f      	str	r4, [sp, #60]	; 0x3c
 8012d6c:	fb02 f108 	mul.w	r1, r2, r8
 8012d70:	911a      	str	r1, [sp, #104]	; 0x68
 8012d72:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012d74:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8012d78:	fb01 f303 	mul.w	r3, r1, r3
 8012d7c:	932b      	str	r3, [sp, #172]	; 0xac
 8012d7e:	b28b      	uxth	r3, r1
 8012d80:	ee08 3a90 	vmov	s17, r3
 8012d84:	b293      	uxth	r3, r2
 8012d86:	9317      	str	r3, [sp, #92]	; 0x5c
 8012d88:	f04f 0b00 	mov.w	fp, #0
 8012d8c:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
 8012d90:	9313      	str	r3, [sp, #76]	; 0x4c
 8012d92:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8012d96:	e07a      	b.n	8012e8e <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x3a2>
 8012d98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	da18      	bge.n	8012dd0 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x2e4>
 8012d9e:	e9d6 1202 	ldrd	r1, r2, [r6, #8]
 8012da2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012da4:	fb03 1314 	mls	r3, r3, r4, r1
 8012da8:	429a      	cmp	r2, r3
 8012daa:	bf84      	itt	hi
 8012dac:	6870      	ldrhi	r0, [r6, #4]
 8012dae:	181b      	addhi	r3, r3, r0
 8012db0:	429a      	cmp	r2, r3
 8012db2:	d203      	bcs.n	8012dbc <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x2d0>
 8012db4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8012db6:	42a0      	cmp	r0, r4
 8012db8:	f040 80cf 	bne.w	8012f5a <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x46e>
 8012dbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012dbe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012dc0:	b2a4      	uxth	r4, r4
 8012dc2:	4413      	add	r3, r2
 8012dc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012dc6:	1b1b      	subs	r3, r3, r4
 8012dc8:	b21b      	sxth	r3, r3
 8012dca:	4414      	add	r4, r2
 8012dcc:	9311      	str	r3, [sp, #68]	; 0x44
 8012dce:	b224      	sxth	r4, r4
 8012dd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012dd2:	42a3      	cmp	r3, r4
 8012dd4:	dc33      	bgt.n	8012e3e <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x352>
 8012dd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012dd8:	9308      	str	r3, [sp, #32]
 8012dda:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012dde:	9305      	str	r3, [sp, #20]
 8012de0:	1ae4      	subs	r4, r4, r3
 8012de2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8012de6:	9303      	str	r3, [sp, #12]
 8012de8:	2201      	movs	r2, #1
 8012dea:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 8012dee:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012df0:	9207      	str	r2, [sp, #28]
 8012df2:	9306      	str	r3, [sp, #24]
 8012df4:	4493      	add	fp, r2
 8012df6:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8012dfa:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8012dfe:	9304      	str	r3, [sp, #16]
 8012e00:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8012e04:	9201      	str	r2, [sp, #4]
 8012e06:	9302      	str	r3, [sp, #8]
 8012e08:	1a52      	subs	r2, r2, r1
 8012e0a:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8012e0e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8012e10:	9300      	str	r3, [sp, #0]
 8012e12:	b292      	uxth	r2, r2
 8012e14:	ee18 3a10 	vmov	r3, s16
 8012e18:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8012e1a:	a839      	add	r0, sp, #228	; 0xe4
 8012e1c:	47b8      	blx	r7
 8012e1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012e20:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012e22:	695b      	ldr	r3, [r3, #20]
 8012e24:	68da      	ldr	r2, [r3, #12]
 8012e26:	688b      	ldr	r3, [r1, #8]
 8012e28:	4413      	add	r3, r2
 8012e2a:	608b      	str	r3, [r1, #8]
 8012e2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012e2e:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8012e32:	1ad3      	subs	r3, r2, r3
 8012e34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012e38:	b21b      	sxth	r3, r3
 8012e3a:	b224      	sxth	r4, r4
 8012e3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8012e3e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8012e42:	68aa      	ldr	r2, [r5, #8]
 8012e44:	68db      	ldr	r3, [r3, #12]
 8012e46:	4413      	add	r3, r2
 8012e48:	60ab      	str	r3, [r5, #8]
 8012e4a:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8012e4e:	b132      	cbz	r2, 8012e5e <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x372>
 8012e50:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8012e54:	68da      	ldr	r2, [r3, #12]
 8012e56:	68b3      	ldr	r3, [r6, #8]
 8012e58:	4413      	add	r3, r2
 8012e5a:	60b3      	str	r3, [r6, #8]
 8012e5c:	68ab      	ldr	r3, [r5, #8]
 8012e5e:	68ea      	ldr	r2, [r5, #12]
 8012e60:	930e      	str	r3, [sp, #56]	; 0x38
 8012e62:	4650      	mov	r0, sl
 8012e64:	920d      	str	r2, [sp, #52]	; 0x34
 8012e66:	f007 fe75 	bl	801ab54 <get_tensor_byte_size>
 8012e6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012e6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012e6e:	4410      	add	r0, r2
 8012e70:	4283      	cmp	r3, r0
 8012e72:	d306      	bcc.n	8012e82 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x396>
 8012e74:	68eb      	ldr	r3, [r5, #12]
 8012e76:	60ab      	str	r3, [r5, #8]
 8012e78:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8012e7c:	b10b      	cbz	r3, 8012e82 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x396>
 8012e7e:	68f3      	ldr	r3, [r6, #12]
 8012e80:	60b3      	str	r3, [r6, #8]
 8012e82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e84:	3b01      	subs	r3, #1
 8012e86:	930c      	str	r3, [sp, #48]	; 0x30
 8012e88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012e8a:	459b      	cmp	fp, r3
 8012e8c:	d253      	bcs.n	8012f36 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x44a>
 8012e8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e90:	3301      	adds	r3, #1
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	dd80      	ble.n	8012d98 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x2ac>
 8012e96:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012e98:	68aa      	ldr	r2, [r5, #8]
 8012e9a:	699b      	ldr	r3, [r3, #24]
 8012e9c:	920d      	str	r2, [sp, #52]	; 0x34
 8012e9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012ea2:	f007 fe17 	bl	801aad4 <ai_array_get_byte_size>
 8012ea6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012ea8:	930b      	str	r3, [sp, #44]	; 0x2c
 8012eaa:	2301      	movs	r3, #1
 8012eac:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8012eb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012eb2:	9307      	str	r3, [sp, #28]
 8012eb4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8012eb6:	9305      	str	r3, [sp, #20]
 8012eb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012eba:	9304      	str	r3, [sp, #16]
 8012ebc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012ebe:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8012ec0:	9303      	str	r3, [sp, #12]
 8012ec2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8012ec4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012ec6:	9302      	str	r3, [sp, #8]
 8012ec8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8012eca:	900a      	str	r0, [sp, #40]	; 0x28
 8012ecc:	9206      	str	r2, [sp, #24]
 8012ece:	9300      	str	r3, [sp, #0]
 8012ed0:	ee18 1a90 	vmov	r1, s17
 8012ed4:	ee19 3a10 	vmov	r3, s18
 8012ed8:	9819      	ldr	r0, [sp, #100]	; 0x64
 8012eda:	ed8d 8a01 	vstr	s16, [sp, #4]
 8012ede:	b2ba      	uxth	r2, r7
 8012ee0:	f000 ffea 	bl	8013eb8 <forward_lite_conv2d_deep_3x3_sssa8_ch>
 8012ee4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012ee6:	2b01      	cmp	r3, #1
 8012ee8:	d021      	beq.n	8012f2e <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x442>
 8012eea:	3b01      	subs	r3, #1
 8012eec:	429f      	cmp	r7, r3
 8012eee:	463a      	mov	r2, r7
 8012ef0:	bf28      	it	cs
 8012ef2:	461a      	movcs	r2, r3
 8012ef4:	9318      	str	r3, [sp, #96]	; 0x60
 8012ef6:	9216      	str	r2, [sp, #88]	; 0x58
 8012ef8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012efa:	b9a3      	cbnz	r3, 8012f26 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x43a>
 8012efc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012efe:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8012f00:	4413      	add	r3, r2
 8012f02:	9319      	str	r3, [sp, #100]	; 0x64
 8012f04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012f06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012f08:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 8012f0a:	4651      	mov	r1, sl
 8012f0c:	4640      	mov	r0, r8
 8012f0e:	3401      	adds	r4, #1
 8012f10:	47b8      	blx	r7
 8012f12:	b224      	sxth	r4, r4
 8012f14:	e75c      	b.n	8012dd0 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x2e4>
 8012f16:	2300      	movs	r3, #0
 8012f18:	685b      	ldr	r3, [r3, #4]
 8012f1a:	deff      	udf	#255	; 0xff
 8012f1c:	685b      	ldr	r3, [r3, #4]
 8012f1e:	deff      	udf	#255	; 0xff
 8012f20:	6841      	ldr	r1, [r0, #4]
 8012f22:	9113      	str	r1, [sp, #76]	; 0x4c
 8012f24:	e60c      	b.n	8012b40 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x54>
 8012f26:	3b01      	subs	r3, #1
 8012f28:	b29b      	uxth	r3, r3
 8012f2a:	931b      	str	r3, [sp, #108]	; 0x6c
 8012f2c:	e7ea      	b.n	8012f04 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x418>
 8012f2e:	2300      	movs	r3, #0
 8012f30:	9316      	str	r3, [sp, #88]	; 0x58
 8012f32:	9318      	str	r3, [sp, #96]	; 0x60
 8012f34:	e7e0      	b.n	8012ef8 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x40c>
 8012f36:	68eb      	ldr	r3, [r5, #12]
 8012f38:	60ab      	str	r3, [r5, #8]
 8012f3a:	68f3      	ldr	r3, [r6, #12]
 8012f3c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012f3e:	60b3      	str	r3, [r6, #8]
 8012f40:	68d3      	ldr	r3, [r2, #12]
 8012f42:	6093      	str	r3, [r2, #8]
 8012f44:	b041      	add	sp, #260	; 0x104
 8012f46:	ecbd 8b04 	vpop	{d8-d9}
 8012f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f4e:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8012fc0 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x4d4>
 8012f52:	e6b3      	b.n	8012cbc <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x1d0>
 8012f54:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8012fc0 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x4d4>
 8012f58:	e6a2      	b.n	8012ca0 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x1b4>
 8012f5a:	6870      	ldr	r0, [r6, #4]
 8012f5c:	4402      	add	r2, r0
 8012f5e:	4293      	cmp	r3, r2
 8012f60:	f4bf af2c 	bcs.w	8012dbc <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x2d0>
 8012f64:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8012f66:	3901      	subs	r1, #1
 8012f68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012f6c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8012f70:	68f2      	ldr	r2, [r6, #12]
 8012f72:	6870      	ldr	r0, [r6, #4]
 8012f74:	4402      	add	r2, r0
 8012f76:	4293      	cmp	r3, r2
 8012f78:	d3f6      	bcc.n	8012f68 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x47c>
 8012f7a:	970c      	str	r7, [sp, #48]	; 0x30
 8012f7c:	e71e      	b.n	8012dbc <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x2d0>
 8012f7e:	9326      	str	r3, [sp, #152]	; 0x98
 8012f80:	e6d4      	b.n	8012d2c <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x240>
 8012f82:	9225      	str	r2, [sp, #148]	; 0x94
 8012f84:	e6c3      	b.n	8012d0e <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x222>
 8012f86:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8012f8a:	9120      	str	r1, [sp, #128]	; 0x80
 8012f8c:	2900      	cmp	r1, #0
 8012f8e:	f43f ae29 	beq.w	8012be4 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0xf8>
 8012f92:	6889      	ldr	r1, [r1, #8]
 8012f94:	9120      	str	r1, [sp, #128]	; 0x80
 8012f96:	e625      	b.n	8012be4 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0xf8>
 8012f98:	9125      	str	r1, [sp, #148]	; 0x94
 8012f9a:	e6b8      	b.n	8012d0e <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x222>
 8012f9c:	4b09      	ldr	r3, [pc, #36]	; (8012fc4 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x4d8>)
 8012f9e:	932a      	str	r3, [sp, #168]	; 0xa8
 8012fa0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8012fa4:	e5df      	b.n	8012b66 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x7a>
 8012fa6:	9226      	str	r2, [sp, #152]	; 0x98
 8012fa8:	e6c0      	b.n	8012d2c <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x240>
 8012faa:	900d      	str	r0, [sp, #52]	; 0x34
 8012fac:	9013      	str	r0, [sp, #76]	; 0x4c
 8012fae:	e5c7      	b.n	8012b40 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x54>
 8012fb0:	68db      	ldr	r3, [r3, #12]
 8012fb2:	deff      	udf	#255	; 0xff
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	685b      	ldr	r3, [r3, #4]
 8012fb8:	deff      	udf	#255	; 0xff
 8012fba:	2300      	movs	r3, #0
 8012fbc:	685b      	ldr	r3, [r3, #4]
 8012fbe:	deff      	udf	#255	; 0xff
 8012fc0:	00000000 	.word	0x00000000
 8012fc4:	080125a5 	.word	0x080125a5

08012fc8 <forward_conv2d_sssa8_ch_nl_pool>:
 8012fc8:	6982      	ldr	r2, [r0, #24]
 8012fca:	8813      	ldrh	r3, [r2, #0]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	f000 8240 	beq.w	8013452 <forward_conv2d_sssa8_ch_nl_pool+0x48a>
 8012fd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fd6:	ed2d 8b04 	vpush	{d8-d9}
 8012fda:	6852      	ldr	r2, [r2, #4]
 8012fdc:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8012fe0:	b0cf      	sub	sp, #316	; 0x13c
 8012fe2:	4681      	mov	r9, r0
 8012fe4:	f1ba 0f00 	cmp.w	sl, #0
 8012fe8:	d001      	beq.n	8012fee <forward_conv2d_sssa8_ch_nl_pool+0x26>
 8012fea:	f8da a000 	ldr.w	sl, [sl]
 8012fee:	2b01      	cmp	r3, #1
 8012ff0:	f000 8286 	beq.w	8013500 <forward_conv2d_sssa8_ch_nl_pool+0x538>
 8012ff4:	6911      	ldr	r1, [r2, #16]
 8012ff6:	911b      	str	r1, [sp, #108]	; 0x6c
 8012ff8:	b109      	cbz	r1, 8012ffe <forward_conv2d_sssa8_ch_nl_pool+0x36>
 8012ffa:	6809      	ldr	r1, [r1, #0]
 8012ffc:	911b      	str	r1, [sp, #108]	; 0x6c
 8012ffe:	2b02      	cmp	r3, #2
 8013000:	f000 8224 	beq.w	801344c <forward_conv2d_sssa8_ch_nl_pool+0x484>
 8013004:	69d1      	ldr	r1, [r2, #28]
 8013006:	2900      	cmp	r1, #0
 8013008:	f000 8275 	beq.w	80134f6 <forward_conv2d_sssa8_ch_nl_pool+0x52e>
 801300c:	8b10      	ldrh	r0, [r2, #24]
 801300e:	680c      	ldr	r4, [r1, #0]
 8013010:	9415      	str	r4, [sp, #84]	; 0x54
 8013012:	2801      	cmp	r0, #1
 8013014:	f200 821f 	bhi.w	8013456 <forward_conv2d_sssa8_ch_nl_pool+0x48e>
 8013018:	2000      	movs	r0, #0
 801301a:	9018      	str	r0, [sp, #96]	; 0x60
 801301c:	2b03      	cmp	r3, #3
 801301e:	f000 8272 	beq.w	8013506 <forward_conv2d_sssa8_ch_nl_pool+0x53e>
 8013022:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8013024:	2b00      	cmp	r3, #0
 8013026:	f000 8269 	beq.w	80134fc <forward_conv2d_sssa8_ch_nl_pool+0x534>
 801302a:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 801302e:	6818      	ldr	r0, [r3, #0]
 8013030:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8013034:	922e      	str	r2, [sp, #184]	; 0xb8
 8013036:	9026      	str	r0, [sp, #152]	; 0x98
 8013038:	2a00      	cmp	r2, #0
 801303a:	f000 8256 	beq.w	80134ea <forward_conv2d_sssa8_ch_nl_pool+0x522>
 801303e:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8013042:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013044:	f8da 500c 	ldr.w	r5, [sl, #12]
 8013048:	68c4      	ldr	r4, [r0, #12]
 801304a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801304c:	68e6      	ldr	r6, [r4, #12]
 801304e:	68a4      	ldr	r4, [r4, #8]
 8013050:	68c7      	ldr	r7, [r0, #12]
 8013052:	9434      	str	r4, [sp, #208]	; 0xd0
 8013054:	6868      	ldr	r0, [r5, #4]
 8013056:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 801305a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801305e:	f8d9 c058 	ldr.w	ip, [r9, #88]	; 0x58
 8013062:	6852      	ldr	r2, [r2, #4]
 8013064:	9217      	str	r2, [sp, #92]	; 0x5c
 8013066:	e9d5 5402 	ldrd	r5, r4, [r5, #8]
 801306a:	9538      	str	r5, [sp, #224]	; 0xe0
 801306c:	f8b9 5028 	ldrh.w	r5, [r9, #40]	; 0x28
 8013070:	952f      	str	r5, [sp, #188]	; 0xbc
 8013072:	889d      	ldrh	r5, [r3, #4]
 8013074:	9531      	str	r5, [sp, #196]	; 0xc4
 8013076:	68bd      	ldr	r5, [r7, #8]
 8013078:	9524      	str	r5, [sp, #144]	; 0x90
 801307a:	687d      	ldr	r5, [r7, #4]
 801307c:	9532      	str	r5, [sp, #200]	; 0xc8
 801307e:	f8d9 5044 	ldr.w	r5, [r9, #68]	; 0x44
 8013082:	681a      	ldr	r2, [r3, #0]
 8013084:	901a      	str	r0, [sp, #104]	; 0x68
 8013086:	689b      	ldr	r3, [r3, #8]
 8013088:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 801308c:	9620      	str	r6, [sp, #128]	; 0x80
 801308e:	9535      	str	r5, [sp, #212]	; 0xd4
 8013090:	f8d9 504c 	ldr.w	r5, [r9, #76]	; 0x4c
 8013094:	9536      	str	r5, [sp, #216]	; 0xd8
 8013096:	f8d9 5050 	ldr.w	r5, [r9, #80]	; 0x50
 801309a:	9519      	str	r5, [sp, #100]	; 0x64
 801309c:	f8dc 5000 	ldr.w	r5, [ip]
 80130a0:	9527      	str	r5, [sp, #156]	; 0x9c
 80130a2:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80130a6:	9537      	str	r5, [sp, #220]	; 0xdc
 80130a8:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 80130ac:	ee09 5a90 	vmov	s19, r5
 80130b0:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 80130b4:	951e      	str	r5, [sp, #120]	; 0x78
 80130b6:	b285      	uxth	r5, r0
 80130b8:	9530      	str	r5, [sp, #192]	; 0xc0
 80130ba:	b295      	uxth	r5, r2
 80130bc:	9516      	str	r5, [sp, #88]	; 0x58
 80130be:	2900      	cmp	r1, #0
 80130c0:	f000 8206 	beq.w	80134d0 <forward_conv2d_sssa8_ch_nl_pool+0x508>
 80130c4:	6889      	ldr	r1, [r1, #8]
 80130c6:	2900      	cmp	r1, #0
 80130c8:	f000 8202 	beq.w	80134d0 <forward_conv2d_sssa8_ch_nl_pool+0x508>
 80130cc:	698d      	ldr	r5, [r1, #24]
 80130ce:	2d00      	cmp	r5, #0
 80130d0:	bf08      	it	eq
 80130d2:	4629      	moveq	r1, r5
 80130d4:	ee08 1a90 	vmov	s17, r1
 80130d8:	b292      	uxth	r2, r2
 80130da:	9924      	ldr	r1, [sp, #144]	; 0x90
 80130dc:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80130de:	f8db 6018 	ldr.w	r6, [fp, #24]
 80130e2:	69bf      	ldr	r7, [r7, #24]
 80130e4:	9728      	str	r7, [sp, #160]	; 0xa0
 80130e6:	fa12 f383 	uxtah	r3, r2, r3
 80130ea:	4422      	add	r2, r4
 80130ec:	4423      	add	r3, r4
 80130ee:	921d      	str	r2, [sp, #116]	; 0x74
 80130f0:	b282      	uxth	r2, r0
 80130f2:	9223      	str	r2, [sp, #140]	; 0x8c
 80130f4:	1a5b      	subs	r3, r3, r1
 80130f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80130fa:	aa3f      	add	r2, sp, #252	; 0xfc
 80130fc:	924c      	str	r2, [sp, #304]	; 0x130
 80130fe:	f240 4501 	movw	r5, #1025	; 0x401
 8013102:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013106:	e9cd 2548 	strd	r2, r5, [sp, #288]	; 0x120
 801310a:	9313      	str	r3, [sp, #76]	; 0x4c
 801310c:	f240 4502 	movw	r5, #1026	; 0x402
 8013110:	2300      	movs	r3, #0
 8013112:	e9cd 333b 	strd	r3, r3, [sp, #236]	; 0xec
 8013116:	e9cd 333f 	strd	r3, r3, [sp, #252]	; 0xfc
 801311a:	9347      	str	r3, [sp, #284]	; 0x11c
 801311c:	933d      	str	r3, [sp, #244]	; 0xf4
 801311e:	9341      	str	r3, [sp, #260]	; 0x104
 8013120:	954b      	str	r5, [sp, #300]	; 0x12c
 8013122:	f8d8 5018 	ldr.w	r5, [r8, #24]
 8013126:	933e      	str	r3, [sp, #248]	; 0xf8
 8013128:	9342      	str	r3, [sp, #264]	; 0x108
 801312a:	934d      	str	r3, [sp, #308]	; 0x134
 801312c:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8013130:	9322      	str	r3, [sp, #136]	; 0x88
 8013132:	f10d 0cec 	add.w	ip, sp, #236	; 0xec
 8013136:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 801313a:	9333      	str	r3, [sp, #204]	; 0xcc
 801313c:	ac43      	add	r4, sp, #268	; 0x10c
 801313e:	4659      	mov	r1, fp
 8013140:	a847      	add	r0, sp, #284	; 0x11c
 8013142:	f8cd c128 	str.w	ip, [sp, #296]	; 0x128
 8013146:	f007 fd1d 	bl	801ab84 <core_tensor_clone>
 801314a:	4631      	mov	r1, r6
 801314c:	4620      	mov	r0, r4
 801314e:	f007 fd4b 	bl	801abe8 <core_array_clone>
 8013152:	944d      	str	r4, [sp, #308]	; 0x134
 8013154:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013158:	9915      	ldr	r1, [sp, #84]	; 0x54
 801315a:	689b      	ldr	r3, [r3, #8]
 801315c:	931f      	str	r3, [sp, #124]	; 0x7c
 801315e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013160:	f8da 2000 	ldr.w	r2, [sl]
 8013164:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8013168:	6809      	ldr	r1, [r1, #0]
 801316a:	f8de 3008 	ldr.w	r3, [lr, #8]
 801316e:	9325      	str	r3, [sp, #148]	; 0x94
 8013170:	f9bd 409c 	ldrsh.w	r4, [sp, #156]	; 0x9c
 8013174:	f8d8 3000 	ldr.w	r3, [r8]
 8013178:	9114      	str	r1, [sp, #80]	; 0x50
 801317a:	2a00      	cmp	r2, #0
 801317c:	f000 8190 	beq.w	80134a0 <forward_conv2d_sssa8_ch_nl_pool+0x4d8>
 8013180:	6851      	ldr	r1, [r2, #4]
 8013182:	2900      	cmp	r1, #0
 8013184:	f000 818c 	beq.w	80134a0 <forward_conv2d_sssa8_ch_nl_pool+0x4d8>
 8013188:	8850      	ldrh	r0, [r2, #2]
 801318a:	2800      	cmp	r0, #0
 801318c:	f000 8188 	beq.w	80134a0 <forward_conv2d_sssa8_ch_nl_pool+0x4d8>
 8013190:	6809      	ldr	r1, [r1, #0]
 8013192:	ed91 0a00 	vldr	s0, [r1]
 8013196:	2b00      	cmp	r3, #0
 8013198:	f000 817f 	beq.w	801349a <forward_conv2d_sssa8_ch_nl_pool+0x4d2>
 801319c:	6859      	ldr	r1, [r3, #4]
 801319e:	2900      	cmp	r1, #0
 80131a0:	f000 817b 	beq.w	801349a <forward_conv2d_sssa8_ch_nl_pool+0x4d2>
 80131a4:	8858      	ldrh	r0, [r3, #2]
 80131a6:	2800      	cmp	r0, #0
 80131a8:	f000 8177 	beq.w	801349a <forward_conv2d_sssa8_ch_nl_pool+0x4d2>
 80131ac:	6809      	ldr	r1, [r1, #0]
 80131ae:	edd1 0a00 	vldr	s1, [r1]
 80131b2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80131b4:	f8da c018 	ldr.w	ip, [sl, #24]
 80131b8:	6988      	ldr	r0, [r1, #24]
 80131ba:	9918      	ldr	r1, [sp, #96]	; 0x60
 80131bc:	f8dc 7008 	ldr.w	r7, [ip, #8]
 80131c0:	6989      	ldr	r1, [r1, #24]
 80131c2:	6880      	ldr	r0, [r0, #8]
 80131c4:	6889      	ldr	r1, [r1, #8]
 80131c6:	912d      	str	r1, [sp, #180]	; 0xb4
 80131c8:	f899 1041 	ldrb.w	r1, [r9, #65]	; 0x41
 80131cc:	912b      	str	r1, [sp, #172]	; 0xac
 80131ce:	9914      	ldr	r1, [sp, #80]	; 0x50
 80131d0:	9718      	str	r7, [sp, #96]	; 0x60
 80131d2:	902c      	str	r0, [sp, #176]	; 0xb0
 80131d4:	b121      	cbz	r1, 80131e0 <forward_conv2d_sssa8_ch_nl_pool+0x218>
 80131d6:	6849      	ldr	r1, [r1, #4]
 80131d8:	9114      	str	r1, [sp, #80]	; 0x50
 80131da:	b109      	cbz	r1, 80131e0 <forward_conv2d_sssa8_ch_nl_pool+0x218>
 80131dc:	6809      	ldr	r1, [r1, #0]
 80131de:	9114      	str	r1, [sp, #80]	; 0x50
 80131e0:	2a00      	cmp	r2, #0
 80131e2:	f000 8173 	beq.w	80134cc <forward_conv2d_sssa8_ch_nl_pool+0x504>
 80131e6:	6851      	ldr	r1, [r2, #4]
 80131e8:	2900      	cmp	r1, #0
 80131ea:	f000 817c 	beq.w	80134e6 <forward_conv2d_sssa8_ch_nl_pool+0x51e>
 80131ee:	8852      	ldrh	r2, [r2, #2]
 80131f0:	2a00      	cmp	r2, #0
 80131f2:	f000 816b 	beq.w	80134cc <forward_conv2d_sssa8_ch_nl_pool+0x504>
 80131f6:	684a      	ldr	r2, [r1, #4]
 80131f8:	f992 2000 	ldrsb.w	r2, [r2]
 80131fc:	9229      	str	r2, [sp, #164]	; 0xa4
 80131fe:	2b00      	cmp	r3, #0
 8013200:	f000 8162 	beq.w	80134c8 <forward_conv2d_sssa8_ch_nl_pool+0x500>
 8013204:	685a      	ldr	r2, [r3, #4]
 8013206:	2a00      	cmp	r2, #0
 8013208:	f000 8173 	beq.w	80134f2 <forward_conv2d_sssa8_ch_nl_pool+0x52a>
 801320c:	885b      	ldrh	r3, [r3, #2]
 801320e:	2b00      	cmp	r3, #0
 8013210:	f000 815a 	beq.w	80134c8 <forward_conv2d_sssa8_ch_nl_pool+0x500>
 8013214:	6853      	ldr	r3, [r2, #4]
 8013216:	f993 3000 	ldrsb.w	r3, [r3]
 801321a:	932a      	str	r3, [sp, #168]	; 0xa8
 801321c:	e9de 0100 	ldrd	r0, r1, [lr]
 8013220:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8013224:	edcd 0a1c 	vstr	s1, [sp, #112]	; 0x70
 8013228:	ed8d 0a15 	vstr	s0, [sp, #84]	; 0x54
 801322c:	f007 fc52 	bl	801aad4 <ai_array_get_byte_size>
 8013230:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8013232:	eddd 0a1c 	vldr	s1, [sp, #112]	; 0x70
 8013236:	ed9d 0a15 	vldr	s0, [sp, #84]	; 0x54
 801323a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801323c:	eba0 004a 	sub.w	r0, r0, sl, lsl #1
 8013240:	4613      	mov	r3, r2
 8013242:	4403      	add	r3, r0
 8013244:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013246:	f003 f9ff 	bl	8016648 <align_factor_ch>
 801324a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801324c:	2b00      	cmp	r3, #0
 801324e:	f000 8118 	beq.w	8013482 <forward_conv2d_sssa8_ch_nl_pool+0x4ba>
 8013252:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013254:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8013258:	9417      	str	r4, [sp, #92]	; 0x5c
 801325a:	fb02 f10a 	mul.w	r1, r2, sl
 801325e:	b292      	uxth	r2, r2
 8013260:	ee08 1a10 	vmov	s16, r1
 8013264:	9221      	str	r2, [sp, #132]	; 0x84
 8013266:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8013268:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801326a:	fb01 f202 	mul.w	r2, r1, r2
 801326e:	fb03 f202 	mul.w	r2, r3, r2
 8013272:	fb01 f303 	mul.w	r3, r1, r3
 8013276:	9339      	str	r3, [sp, #228]	; 0xe4
 8013278:	b28b      	uxth	r3, r1
 801327a:	ee09 3a10 	vmov	s18, r3
 801327e:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
 8013282:	931c      	str	r3, [sp, #112]	; 0x70
 8013284:	f04f 0a00 	mov.w	sl, #0
 8013288:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801328a:	9238      	str	r2, [sp, #224]	; 0xe0
 801328c:	931f      	str	r3, [sp, #124]	; 0x7c
 801328e:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
 8013292:	e0b9      	b.n	8013408 <forward_conv2d_sssa8_ch_nl_pool+0x440>
 8013294:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8013296:	68aa      	ldr	r2, [r5, #8]
 8013298:	9214      	str	r2, [sp, #80]	; 0x50
 801329a:	429c      	cmp	r4, r3
 801329c:	bf06      	itte	eq
 801329e:	faba f38a 	clzeq	r3, sl
 80132a2:	095b      	lsreq	r3, r3, #5
 80132a4:	2300      	movne	r3, #0
 80132a6:	9315      	str	r3, [sp, #84]	; 0x54
 80132a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80132aa:	6998      	ldr	r0, [r3, #24]
 80132ac:	e9d0 0100 	ldrd	r0, r1, [r0]
 80132b0:	f007 fc10 	bl	801aad4 <ai_array_get_byte_size>
 80132b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80132b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80132b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80132ba:	930d      	str	r3, [sp, #52]	; 0x34
 80132bc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80132be:	930b      	str	r3, [sp, #44]	; 0x2c
 80132c0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80132c2:	930a      	str	r3, [sp, #40]	; 0x28
 80132c4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80132c6:	9309      	str	r3, [sp, #36]	; 0x24
 80132c8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80132ca:	9308      	str	r3, [sp, #32]
 80132cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80132ce:	9307      	str	r3, [sp, #28]
 80132d0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80132d2:	9306      	str	r3, [sp, #24]
 80132d4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80132d6:	9305      	str	r3, [sp, #20]
 80132d8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80132da:	9304      	str	r3, [sp, #16]
 80132dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80132de:	9301      	str	r3, [sp, #4]
 80132e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80132e2:	9300      	str	r3, [sp, #0]
 80132e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80132e6:	9311      	str	r3, [sp, #68]	; 0x44
 80132e8:	2301      	movs	r3, #1
 80132ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80132ec:	930e      	str	r3, [sp, #56]	; 0x38
 80132ee:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 80132f2:	920c      	str	r2, [sp, #48]	; 0x30
 80132f4:	9010      	str	r0, [sp, #64]	; 0x40
 80132f6:	9303      	str	r3, [sp, #12]
 80132f8:	f8bd 30c8 	ldrh.w	r3, [sp, #200]	; 0xc8
 80132fc:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 80132fe:	9302      	str	r3, [sp, #8]
 8013300:	b2ba      	uxth	r2, r7
 8013302:	ee19 3a90 	vmov	r3, s19
 8013306:	ee19 1a10 	vmov	r1, s18
 801330a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801330c:	f000 fed4 	bl	80140b8 <forward_lite_conv2d_sssa8_ch>
 8013310:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013312:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013314:	4293      	cmp	r3, r2
 8013316:	f000 80b0 	beq.w	801347a <forward_conv2d_sssa8_ch_nl_pool+0x4b2>
 801331a:	1ad3      	subs	r3, r2, r3
 801331c:	429f      	cmp	r7, r3
 801331e:	463a      	mov	r2, r7
 8013320:	bf28      	it	cs
 8013322:	461a      	movcs	r2, r3
 8013324:	931d      	str	r3, [sp, #116]	; 0x74
 8013326:	921f      	str	r2, [sp, #124]	; 0x7c
 8013328:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801332a:	2b00      	cmp	r3, #0
 801332c:	f040 8096 	bne.w	801345c <forward_conv2d_sssa8_ch_nl_pool+0x494>
 8013330:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013332:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8013334:	4413      	add	r3, r2
 8013336:	9318      	str	r3, [sp, #96]	; 0x60
 8013338:	ee18 3a90 	vmov	r3, s17
 801333c:	ee18 2a10 	vmov	r2, s16
 8013340:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8013342:	4641      	mov	r1, r8
 8013344:	4658      	mov	r0, fp
 8013346:	47b8      	blx	r7
 8013348:	3401      	adds	r4, #1
 801334a:	b224      	sxth	r4, r4
 801334c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801334e:	429c      	cmp	r4, r3
 8013350:	db32      	blt.n	80133b8 <forward_conv2d_sssa8_ch_nl_pool+0x3f0>
 8013352:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013354:	9308      	str	r3, [sp, #32]
 8013356:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801335a:	9305      	str	r3, [sp, #20]
 801335c:	1ae4      	subs	r4, r4, r3
 801335e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8013362:	9303      	str	r3, [sp, #12]
 8013364:	2201      	movs	r2, #1
 8013366:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	; 0xd0
 801336a:	991a      	ldr	r1, [sp, #104]	; 0x68
 801336c:	9207      	str	r2, [sp, #28]
 801336e:	9306      	str	r3, [sp, #24]
 8013370:	4492      	add	sl, r2
 8013372:	f8bd 30d8 	ldrh.w	r3, [sp, #216]	; 0xd8
 8013376:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
 801337a:	9304      	str	r3, [sp, #16]
 801337c:	f8bd 30dc 	ldrh.w	r3, [sp, #220]	; 0xdc
 8013380:	9201      	str	r2, [sp, #4]
 8013382:	9302      	str	r3, [sp, #8]
 8013384:	1a52      	subs	r2, r2, r1
 8013386:	f8bd 30d4 	ldrh.w	r3, [sp, #212]	; 0xd4
 801338a:	9921      	ldr	r1, [sp, #132]	; 0x84
 801338c:	9300      	str	r3, [sp, #0]
 801338e:	b292      	uxth	r2, r2
 8013390:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013392:	9f33      	ldr	r7, [sp, #204]	; 0xcc
 8013394:	a847      	add	r0, sp, #284	; 0x11c
 8013396:	47b8      	blx	r7
 8013398:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801339a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801339c:	695b      	ldr	r3, [r3, #20]
 801339e:	68da      	ldr	r2, [r3, #12]
 80133a0:	688b      	ldr	r3, [r1, #8]
 80133a2:	4413      	add	r3, r2
 80133a4:	608b      	str	r3, [r1, #8]
 80133a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80133a8:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 80133ac:	1ad3      	subs	r3, r2, r3
 80133ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80133b2:	b21b      	sxth	r3, r3
 80133b4:	b224      	sxth	r4, r4
 80133b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80133b8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80133bc:	68aa      	ldr	r2, [r5, #8]
 80133be:	68db      	ldr	r3, [r3, #12]
 80133c0:	4413      	add	r3, r2
 80133c2:	60ab      	str	r3, [r5, #8]
 80133c4:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 80133c8:	b132      	cbz	r2, 80133d8 <forward_conv2d_sssa8_ch_nl_pool+0x410>
 80133ca:	f8db 3014 	ldr.w	r3, [fp, #20]
 80133ce:	68da      	ldr	r2, [r3, #12]
 80133d0:	68b3      	ldr	r3, [r6, #8]
 80133d2:	4413      	add	r3, r2
 80133d4:	60b3      	str	r3, [r6, #8]
 80133d6:	68ab      	ldr	r3, [r5, #8]
 80133d8:	68ea      	ldr	r2, [r5, #12]
 80133da:	9315      	str	r3, [sp, #84]	; 0x54
 80133dc:	4640      	mov	r0, r8
 80133de:	9214      	str	r2, [sp, #80]	; 0x50
 80133e0:	f007 fbb8 	bl	801ab54 <get_tensor_byte_size>
 80133e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80133e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80133e8:	4410      	add	r0, r2
 80133ea:	4283      	cmp	r3, r0
 80133ec:	d306      	bcc.n	80133fc <forward_conv2d_sssa8_ch_nl_pool+0x434>
 80133ee:	68eb      	ldr	r3, [r5, #12]
 80133f0:	60ab      	str	r3, [r5, #8]
 80133f2:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 80133f6:	b10b      	cbz	r3, 80133fc <forward_conv2d_sssa8_ch_nl_pool+0x434>
 80133f8:	68f3      	ldr	r3, [r6, #12]
 80133fa:	60b3      	str	r3, [r6, #8]
 80133fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80133fe:	3b01      	subs	r3, #1
 8013400:	9313      	str	r3, [sp, #76]	; 0x4c
 8013402:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013404:	459a      	cmp	sl, r3
 8013406:	d23c      	bcs.n	8013482 <forward_conv2d_sssa8_ch_nl_pool+0x4ba>
 8013408:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801340a:	3301      	adds	r3, #1
 801340c:	2b00      	cmp	r3, #0
 801340e:	f73f af41 	bgt.w	8013294 <forward_conv2d_sssa8_ch_nl_pool+0x2cc>
 8013412:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013414:	2b00      	cmp	r3, #0
 8013416:	da99      	bge.n	801334c <forward_conv2d_sssa8_ch_nl_pool+0x384>
 8013418:	e9d6 1202 	ldrd	r1, r2, [r6, #8]
 801341c:	ee18 3a10 	vmov	r3, s16
 8013420:	fb03 1314 	mls	r3, r3, r4, r1
 8013424:	429a      	cmp	r2, r3
 8013426:	bf84      	itt	hi
 8013428:	6870      	ldrhi	r0, [r6, #4]
 801342a:	181b      	addhi	r3, r3, r0
 801342c:	429a      	cmp	r2, r3
 801342e:	d202      	bcs.n	8013436 <forward_conv2d_sssa8_ch_nl_pool+0x46e>
 8013430:	981c      	ldr	r0, [sp, #112]	; 0x70
 8013432:	42a0      	cmp	r0, r4
 8013434:	d137      	bne.n	80134a6 <forward_conv2d_sssa8_ch_nl_pool+0x4de>
 8013436:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013438:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801343a:	b2a4      	uxth	r4, r4
 801343c:	4413      	add	r3, r2
 801343e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013440:	1b1b      	subs	r3, r3, r4
 8013442:	b21b      	sxth	r3, r3
 8013444:	4414      	add	r4, r2
 8013446:	931a      	str	r3, [sp, #104]	; 0x68
 8013448:	b224      	sxth	r4, r4
 801344a:	e77f      	b.n	801334c <forward_conv2d_sssa8_ch_nl_pool+0x384>
 801344c:	2300      	movs	r3, #0
 801344e:	685b      	ldr	r3, [r3, #4]
 8013450:	deff      	udf	#255	; 0xff
 8013452:	685b      	ldr	r3, [r3, #4]
 8013454:	deff      	udf	#255	; 0xff
 8013456:	6848      	ldr	r0, [r1, #4]
 8013458:	9018      	str	r0, [sp, #96]	; 0x60
 801345a:	e5df      	b.n	801301c <forward_conv2d_sssa8_ch_nl_pool+0x54>
 801345c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801345e:	461a      	mov	r2, r3
 8013460:	1a5b      	subs	r3, r3, r1
 8013462:	d505      	bpl.n	8013470 <forward_conv2d_sssa8_ch_nl_pool+0x4a8>
 8013464:	1a8a      	subs	r2, r1, r2
 8013466:	9839      	ldr	r0, [sp, #228]	; 0xe4
 8013468:	9918      	ldr	r1, [sp, #96]	; 0x60
 801346a:	fb00 1202 	mla	r2, r0, r2, r1
 801346e:	9218      	str	r2, [sp, #96]	; 0x60
 8013470:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013474:	b29b      	uxth	r3, r3
 8013476:	9316      	str	r3, [sp, #88]	; 0x58
 8013478:	e75e      	b.n	8013338 <forward_conv2d_sssa8_ch_nl_pool+0x370>
 801347a:	2300      	movs	r3, #0
 801347c:	931f      	str	r3, [sp, #124]	; 0x7c
 801347e:	931d      	str	r3, [sp, #116]	; 0x74
 8013480:	e752      	b.n	8013328 <forward_conv2d_sssa8_ch_nl_pool+0x360>
 8013482:	68eb      	ldr	r3, [r5, #12]
 8013484:	60ab      	str	r3, [r5, #8]
 8013486:	68f3      	ldr	r3, [r6, #12]
 8013488:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801348a:	60b3      	str	r3, [r6, #8]
 801348c:	68d3      	ldr	r3, [r2, #12]
 801348e:	6093      	str	r3, [r2, #8]
 8013490:	b04f      	add	sp, #316	; 0x13c
 8013492:	ecbd 8b04 	vpop	{d8-d9}
 8013496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801349a:	eddf 0a1c 	vldr	s1, [pc, #112]	; 801350c <forward_conv2d_sssa8_ch_nl_pool+0x544>
 801349e:	e688      	b.n	80131b2 <forward_conv2d_sssa8_ch_nl_pool+0x1ea>
 80134a0:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 801350c <forward_conv2d_sssa8_ch_nl_pool+0x544>
 80134a4:	e677      	b.n	8013196 <forward_conv2d_sssa8_ch_nl_pool+0x1ce>
 80134a6:	6870      	ldr	r0, [r6, #4]
 80134a8:	4402      	add	r2, r0
 80134aa:	4293      	cmp	r3, r2
 80134ac:	d2c3      	bcs.n	8013436 <forward_conv2d_sssa8_ch_nl_pool+0x46e>
 80134ae:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80134b0:	3901      	subs	r1, #1
 80134b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80134b6:	f801 2f01 	strb.w	r2, [r1, #1]!
 80134ba:	68f2      	ldr	r2, [r6, #12]
 80134bc:	6870      	ldr	r0, [r6, #4]
 80134be:	4402      	add	r2, r0
 80134c0:	4293      	cmp	r3, r2
 80134c2:	d3f6      	bcc.n	80134b2 <forward_conv2d_sssa8_ch_nl_pool+0x4ea>
 80134c4:	9713      	str	r7, [sp, #76]	; 0x4c
 80134c6:	e7b6      	b.n	8013436 <forward_conv2d_sssa8_ch_nl_pool+0x46e>
 80134c8:	932a      	str	r3, [sp, #168]	; 0xa8
 80134ca:	e6a7      	b.n	801321c <forward_conv2d_sssa8_ch_nl_pool+0x254>
 80134cc:	9229      	str	r2, [sp, #164]	; 0xa4
 80134ce:	e696      	b.n	80131fe <forward_conv2d_sssa8_ch_nl_pool+0x236>
 80134d0:	f8d9 1020 	ldr.w	r1, [r9, #32]
 80134d4:	ee08 1a90 	vmov	s17, r1
 80134d8:	2900      	cmp	r1, #0
 80134da:	f43f adfd 	beq.w	80130d8 <forward_conv2d_sssa8_ch_nl_pool+0x110>
 80134de:	6889      	ldr	r1, [r1, #8]
 80134e0:	ee08 1a90 	vmov	s17, r1
 80134e4:	e5f8      	b.n	80130d8 <forward_conv2d_sssa8_ch_nl_pool+0x110>
 80134e6:	9129      	str	r1, [sp, #164]	; 0xa4
 80134e8:	e689      	b.n	80131fe <forward_conv2d_sssa8_ch_nl_pool+0x236>
 80134ea:	4b09      	ldr	r3, [pc, #36]	; (8013510 <forward_conv2d_sssa8_ch_nl_pool+0x548>)
 80134ec:	932e      	str	r3, [sp, #184]	; 0xb8
 80134ee:	46c3      	mov	fp, r8
 80134f0:	e5a7      	b.n	8013042 <forward_conv2d_sssa8_ch_nl_pool+0x7a>
 80134f2:	922a      	str	r2, [sp, #168]	; 0xa8
 80134f4:	e692      	b.n	801321c <forward_conv2d_sssa8_ch_nl_pool+0x254>
 80134f6:	9115      	str	r1, [sp, #84]	; 0x54
 80134f8:	9118      	str	r1, [sp, #96]	; 0x60
 80134fa:	e58f      	b.n	801301c <forward_conv2d_sssa8_ch_nl_pool+0x54>
 80134fc:	68db      	ldr	r3, [r3, #12]
 80134fe:	deff      	udf	#255	; 0xff
 8013500:	2300      	movs	r3, #0
 8013502:	685b      	ldr	r3, [r3, #4]
 8013504:	deff      	udf	#255	; 0xff
 8013506:	2300      	movs	r3, #0
 8013508:	685b      	ldr	r3, [r3, #4]
 801350a:	deff      	udf	#255	; 0xff
 801350c:	00000000 	.word	0x00000000
 8013510:	080125a5 	.word	0x080125a5

08013514 <forward_dense_integer_SSSA>:
 8013514:	6982      	ldr	r2, [r0, #24]
 8013516:	8813      	ldrh	r3, [r2, #0]
 8013518:	2b00      	cmp	r3, #0
 801351a:	f000 80c8 	beq.w	80136ae <forward_dense_integer_SSSA+0x19a>
 801351e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013522:	6852      	ldr	r2, [r2, #4]
 8013524:	6854      	ldr	r4, [r2, #4]
 8013526:	b093      	sub	sp, #76	; 0x4c
 8013528:	b104      	cbz	r4, 801352c <forward_dense_integer_SSSA+0x18>
 801352a:	6824      	ldr	r4, [r4, #0]
 801352c:	2b01      	cmp	r3, #1
 801352e:	f000 815f 	beq.w	80137f0 <forward_dense_integer_SSSA+0x2dc>
 8013532:	6911      	ldr	r1, [r2, #16]
 8013534:	b101      	cbz	r1, 8013538 <forward_dense_integer_SSSA+0x24>
 8013536:	6809      	ldr	r1, [r1, #0]
 8013538:	2b02      	cmp	r3, #2
 801353a:	f000 815c 	beq.w	80137f6 <forward_dense_integer_SSSA+0x2e2>
 801353e:	69d5      	ldr	r5, [r2, #28]
 8013540:	2d00      	cmp	r5, #0
 8013542:	f000 8108 	beq.w	8013756 <forward_dense_integer_SSSA+0x242>
 8013546:	8b16      	ldrh	r6, [r2, #24]
 8013548:	6828      	ldr	r0, [r5, #0]
 801354a:	2e01      	cmp	r6, #1
 801354c:	f240 812d 	bls.w	80137aa <forward_dense_integer_SSSA+0x296>
 8013550:	686d      	ldr	r5, [r5, #4]
 8013552:	2b03      	cmp	r3, #3
 8013554:	f000 8152 	beq.w	80137fc <forward_dense_integer_SSSA+0x2e8>
 8013558:	f8d2 9028 	ldr.w	r9, [r2, #40]	; 0x28
 801355c:	69ab      	ldr	r3, [r5, #24]
 801355e:	f1b9 0f00 	cmp.w	r9, #0
 8013562:	f000 810f 	beq.w	8013784 <forward_dense_integer_SSSA+0x270>
 8013566:	689b      	ldr	r3, [r3, #8]
 8013568:	68e2      	ldr	r2, [r4, #12]
 801356a:	930b      	str	r3, [sp, #44]	; 0x2c
 801356c:	68cb      	ldr	r3, [r1, #12]
 801356e:	6856      	ldr	r6, [r2, #4]
 8013570:	f8d9 9000 	ldr.w	r9, [r9]
 8013574:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8013578:	698d      	ldr	r5, [r1, #24]
 801357a:	960f      	str	r6, [sp, #60]	; 0x3c
 801357c:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 8013580:	68db      	ldr	r3, [r3, #12]
 8013582:	fb03 f302 	mul.w	r3, r3, r2
 8013586:	930c      	str	r3, [sp, #48]	; 0x30
 8013588:	b2b2      	uxth	r2, r6
 801358a:	fa1f f38a 	uxth.w	r3, sl
 801358e:	f1b9 0f00 	cmp.w	r9, #0
 8013592:	d003      	beq.n	801359c <forward_dense_integer_SSSA+0x88>
 8013594:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8013598:	f8d6 9008 	ldr.w	r9, [r6, #8]
 801359c:	6827      	ldr	r7, [r4, #0]
 801359e:	f8d0 b000 	ldr.w	fp, [r0]
 80135a2:	680c      	ldr	r4, [r1, #0]
 80135a4:	6981      	ldr	r1, [r0, #24]
 80135a6:	2f00      	cmp	r7, #0
 80135a8:	f000 8083 	beq.w	80136b2 <forward_dense_integer_SSSA+0x19e>
 80135ac:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80135b0:	f1bc 0f00 	cmp.w	ip, #0
 80135b4:	f000 80b1 	beq.w	801371a <forward_dense_integer_SSSA+0x206>
 80135b8:	8878      	ldrh	r0, [r7, #2]
 80135ba:	2800      	cmp	r0, #0
 80135bc:	f000 809c 	beq.w	80136f8 <forward_dense_integer_SSSA+0x1e4>
 80135c0:	f8dc 6000 	ldr.w	r6, [ip]
 80135c4:	edd6 7a00 	vldr	s15, [r6]
 80135c8:	2c00      	cmp	r4, #0
 80135ca:	f000 809a 	beq.w	8013702 <forward_dense_integer_SSSA+0x1ee>
 80135ce:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80135d2:	f1b8 0f00 	cmp.w	r8, #0
 80135d6:	f000 80a9 	beq.w	801372c <forward_dense_integer_SSSA+0x218>
 80135da:	8860      	ldrh	r0, [r4, #2]
 80135dc:	2800      	cmp	r0, #0
 80135de:	d074      	beq.n	80136ca <forward_dense_integer_SSSA+0x1b6>
 80135e0:	68ae      	ldr	r6, [r5, #8]
 80135e2:	f8de 5008 	ldr.w	r5, [lr, #8]
 80135e6:	950d      	str	r5, [sp, #52]	; 0x34
 80135e8:	f8d8 5000 	ldr.w	r5, [r8]
 80135ec:	6889      	ldr	r1, [r1, #8]
 80135ee:	ed95 0a00 	vldr	s0, [r5]
 80135f2:	f1bc 0f00 	cmp.w	ip, #0
 80135f6:	d076      	beq.n	80136e6 <forward_dense_integer_SSSA+0x1d2>
 80135f8:	8878      	ldrh	r0, [r7, #2]
 80135fa:	2800      	cmp	r0, #0
 80135fc:	f000 80a3 	beq.w	8013746 <forward_dense_integer_SSSA+0x232>
 8013600:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8013604:	f990 7000 	ldrsb.w	r7, [r0]
 8013608:	2c00      	cmp	r4, #0
 801360a:	f000 80d6 	beq.w	80137ba <forward_dense_integer_SSSA+0x2a6>
 801360e:	f1b8 0f00 	cmp.w	r8, #0
 8013612:	f000 809d 	beq.w	8013750 <forward_dense_integer_SSSA+0x23c>
 8013616:	8860      	ldrh	r0, [r4, #2]
 8013618:	2800      	cmp	r0, #0
 801361a:	d167      	bne.n	80136ec <forward_dense_integer_SSSA+0x1d8>
 801361c:	900a      	str	r0, [sp, #40]	; 0x28
 801361e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013622:	910e      	str	r1, [sp, #56]	; 0x38
 8013624:	f1bb 0f00 	cmp.w	fp, #0
 8013628:	f000 80dc 	beq.w	80137e4 <forward_dense_integer_SSSA+0x2d0>
 801362c:	f8db 0004 	ldr.w	r0, [fp, #4]
 8013630:	2800      	cmp	r0, #0
 8013632:	f000 80d7 	beq.w	80137e4 <forward_dense_integer_SSSA+0x2d0>
 8013636:	6800      	ldr	r0, [r0, #0]
 8013638:	2400      	movs	r4, #0
 801363a:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 801363e:	9411      	str	r4, [sp, #68]	; 0x44
 8013640:	ed90 7a00 	vldr	s14, [r0]
 8013644:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013648:	f10d 0842 	add.w	r8, sp, #66	; 0x42
 801364c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8013650:	4640      	mov	r0, r8
 8013652:	f002 ffa5 	bl	80165a0 <align_factor>
 8013656:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013658:	9011      	str	r0, [sp, #68]	; 0x44
 801365a:	b32b      	cbz	r3, 80136a8 <forward_dense_integer_SSSA+0x194>
 801365c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8013660:	4699      	mov	r9, r3
 8013662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013664:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 8013668:	9a08      	ldr	r2, [sp, #32]
 801366a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801366c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801366e:	970d      	str	r7, [sp, #52]	; 0x34
 8013670:	fa1f fa8a 	uxth.w	sl, sl
 8013674:	461f      	mov	r7, r3
 8013676:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013678:	9306      	str	r3, [sp, #24]
 801367a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801367c:	9304      	str	r3, [sp, #16]
 801367e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013680:	9303      	str	r3, [sp, #12]
 8013682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013684:	9605      	str	r6, [sp, #20]
 8013686:	e9cd 8301 	strd	r8, r3, [sp, #4]
 801368a:	ab11      	add	r3, sp, #68	; 0x44
 801368c:	9300      	str	r3, [sp, #0]
 801368e:	4628      	mov	r0, r5
 8013690:	3401      	adds	r4, #1
 8013692:	463b      	mov	r3, r7
 8013694:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8013698:	f003 f894 	bl	80167c4 <st_sssa8_fully_connected>
 801369c:	454c      	cmp	r4, r9
 801369e:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80136a2:	4456      	add	r6, sl
 80136a4:	445d      	add	r5, fp
 80136a6:	d1e6      	bne.n	8013676 <forward_dense_integer_SSSA+0x162>
 80136a8:	b013      	add	sp, #76	; 0x4c
 80136aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136ae:	685b      	ldr	r3, [r3, #4]
 80136b0:	deff      	udf	#255	; 0xff
 80136b2:	2c00      	cmp	r4, #0
 80136b4:	d056      	beq.n	8013764 <forward_dense_integer_SSSA+0x250>
 80136b6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80136ba:	f1b8 0f00 	cmp.w	r8, #0
 80136be:	d05d      	beq.n	801377c <forward_dense_integer_SSSA+0x268>
 80136c0:	8860      	ldrh	r0, [r4, #2]
 80136c2:	2800      	cmp	r0, #0
 80136c4:	d17b      	bne.n	80137be <forward_dense_integer_SSSA+0x2aa>
 80136c6:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8013804 <forward_dense_integer_SSSA+0x2f0>
 80136ca:	68ae      	ldr	r6, [r5, #8]
 80136cc:	f8de 5008 	ldr.w	r5, [lr, #8]
 80136d0:	6889      	ldr	r1, [r1, #8]
 80136d2:	950d      	str	r5, [sp, #52]	; 0x34
 80136d4:	2f00      	cmp	r7, #0
 80136d6:	d041      	beq.n	801375c <forward_dense_integer_SSSA+0x248>
 80136d8:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80136dc:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8013804 <forward_dense_integer_SSSA+0x2f0>
 80136e0:	f1bc 0f00 	cmp.w	ip, #0
 80136e4:	d188      	bne.n	80135f8 <forward_dense_integer_SSSA+0xe4>
 80136e6:	4667      	mov	r7, ip
 80136e8:	2800      	cmp	r0, #0
 80136ea:	d097      	beq.n	801361c <forward_dense_integer_SSSA+0x108>
 80136ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80136f0:	f990 0000 	ldrsb.w	r0, [r0]
 80136f4:	900a      	str	r0, [sp, #40]	; 0x28
 80136f6:	e792      	b.n	801361e <forward_dense_integer_SSSA+0x10a>
 80136f8:	eddf 7a42 	vldr	s15, [pc, #264]	; 8013804 <forward_dense_integer_SSSA+0x2f0>
 80136fc:	2c00      	cmp	r4, #0
 80136fe:	f47f af66 	bne.w	80135ce <forward_dense_integer_SSSA+0xba>
 8013702:	68ae      	ldr	r6, [r5, #8]
 8013704:	f8de 5008 	ldr.w	r5, [lr, #8]
 8013708:	6889      	ldr	r1, [r1, #8]
 801370a:	950d      	str	r5, [sp, #52]	; 0x34
 801370c:	2800      	cmp	r0, #0
 801370e:	d14e      	bne.n	80137ae <forward_dense_integer_SSSA+0x29a>
 8013710:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8013804 <forward_dense_integer_SSSA+0x2f0>
 8013714:	900a      	str	r0, [sp, #40]	; 0x28
 8013716:	4607      	mov	r7, r0
 8013718:	e781      	b.n	801361e <forward_dense_integer_SSSA+0x10a>
 801371a:	b31c      	cbz	r4, 8013764 <forward_dense_integer_SSSA+0x250>
 801371c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013720:	eddf 7a38 	vldr	s15, [pc, #224]	; 8013804 <forward_dense_integer_SSSA+0x2f0>
 8013724:	f1b8 0f00 	cmp.w	r8, #0
 8013728:	f47f af57 	bne.w	80135da <forward_dense_integer_SSSA+0xc6>
 801372c:	f8de 0008 	ldr.w	r0, [lr, #8]
 8013730:	68ae      	ldr	r6, [r5, #8]
 8013732:	6889      	ldr	r1, [r1, #8]
 8013734:	900d      	str	r0, [sp, #52]	; 0x34
 8013736:	f1bc 0f00 	cmp.w	ip, #0
 801373a:	d00e      	beq.n	801375a <forward_dense_integer_SSSA+0x246>
 801373c:	8878      	ldrh	r0, [r7, #2]
 801373e:	2800      	cmp	r0, #0
 8013740:	d149      	bne.n	80137d6 <forward_dense_integer_SSSA+0x2c2>
 8013742:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8013804 <forward_dense_integer_SSSA+0x2f0>
 8013746:	2700      	movs	r7, #0
 8013748:	f1b8 0f00 	cmp.w	r8, #0
 801374c:	f47f af63 	bne.w	8013616 <forward_dense_integer_SSSA+0x102>
 8013750:	2000      	movs	r0, #0
 8013752:	900a      	str	r0, [sp, #40]	; 0x28
 8013754:	e763      	b.n	801361e <forward_dense_integer_SSSA+0x10a>
 8013756:	4628      	mov	r0, r5
 8013758:	e6fb      	b.n	8013552 <forward_dense_integer_SSSA+0x3e>
 801375a:	4667      	mov	r7, ip
 801375c:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8013804 <forward_dense_integer_SSSA+0x2f0>
 8013760:	970a      	str	r7, [sp, #40]	; 0x28
 8013762:	e75c      	b.n	801361e <forward_dense_integer_SSSA+0x10a>
 8013764:	eddf 7a27 	vldr	s15, [pc, #156]	; 8013804 <forward_dense_integer_SSSA+0x2f0>
 8013768:	4627      	mov	r7, r4
 801376a:	f8de 0008 	ldr.w	r0, [lr, #8]
 801376e:	68ae      	ldr	r6, [r5, #8]
 8013770:	6889      	ldr	r1, [r1, #8]
 8013772:	900d      	str	r0, [sp, #52]	; 0x34
 8013774:	eeb0 0a67 	vmov.f32	s0, s15
 8013778:	970a      	str	r7, [sp, #40]	; 0x28
 801377a:	e750      	b.n	801361e <forward_dense_integer_SSSA+0x10a>
 801377c:	eddf 7a21 	vldr	s15, [pc, #132]	; 8013804 <forward_dense_integer_SSSA+0x2f0>
 8013780:	4647      	mov	r7, r8
 8013782:	e7f2      	b.n	801376a <forward_dense_integer_SSSA+0x256>
 8013784:	689b      	ldr	r3, [r3, #8]
 8013786:	68e2      	ldr	r2, [r4, #12]
 8013788:	930b      	str	r3, [sp, #44]	; 0x2c
 801378a:	68cb      	ldr	r3, [r1, #12]
 801378c:	6856      	ldr	r6, [r2, #4]
 801378e:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8013792:	698d      	ldr	r5, [r1, #24]
 8013794:	960f      	str	r6, [sp, #60]	; 0x3c
 8013796:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 801379a:	68db      	ldr	r3, [r3, #12]
 801379c:	fb03 f302 	mul.w	r3, r3, r2
 80137a0:	930c      	str	r3, [sp, #48]	; 0x30
 80137a2:	b2b2      	uxth	r2, r6
 80137a4:	fa1f f38a 	uxth.w	r3, sl
 80137a8:	e6f8      	b.n	801359c <forward_dense_integer_SSSA+0x88>
 80137aa:	2500      	movs	r5, #0
 80137ac:	e6d1      	b.n	8013552 <forward_dense_integer_SSSA+0x3e>
 80137ae:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80137b2:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8013804 <forward_dense_integer_SSSA+0x2f0>
 80137b6:	f990 7000 	ldrsb.w	r7, [r0]
 80137ba:	940a      	str	r4, [sp, #40]	; 0x28
 80137bc:	e72f      	b.n	801361e <forward_dense_integer_SSSA+0x10a>
 80137be:	f8de 0008 	ldr.w	r0, [lr, #8]
 80137c2:	900d      	str	r0, [sp, #52]	; 0x34
 80137c4:	f8d8 0000 	ldr.w	r0, [r8]
 80137c8:	68ae      	ldr	r6, [r5, #8]
 80137ca:	6889      	ldr	r1, [r1, #8]
 80137cc:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8013804 <forward_dense_integer_SSSA+0x2f0>
 80137d0:	ed90 0a00 	vldr	s0, [r0]
 80137d4:	e78a      	b.n	80136ec <forward_dense_integer_SSSA+0x1d8>
 80137d6:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80137da:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8013804 <forward_dense_integer_SSSA+0x2f0>
 80137de:	f990 7000 	ldrsb.w	r7, [r0]
 80137e2:	e7b5      	b.n	8013750 <forward_dense_integer_SSSA+0x23c>
 80137e4:	2300      	movs	r3, #0
 80137e6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80137ea:	9311      	str	r3, [sp, #68]	; 0x44
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	deff      	udf	#255	; 0xff
 80137f0:	2300      	movs	r3, #0
 80137f2:	685b      	ldr	r3, [r3, #4]
 80137f4:	deff      	udf	#255	; 0xff
 80137f6:	2300      	movs	r3, #0
 80137f8:	685b      	ldr	r3, [r3, #4]
 80137fa:	deff      	udf	#255	; 0xff
 80137fc:	2300      	movs	r3, #0
 80137fe:	685b      	ldr	r3, [r3, #4]
 8013800:	deff      	udf	#255	; 0xff
 8013802:	bf00      	nop
 8013804:	00000000 	.word	0x00000000

08013808 <forward_pad>:
 8013808:	7f03      	ldrb	r3, [r0, #28]
 801380a:	2b03      	cmp	r3, #3
 801380c:	d80b      	bhi.n	8013826 <forward_pad+0x1e>
 801380e:	e8df f003 	tbb	[pc, r3]
 8013812:	0608      	.short	0x0608
 8013814:	0204      	.short	0x0204
 8013816:	f000 b863 	b.w	80138e0 <forward_pad_8bit_ch1st_3x3_constant>
 801381a:	f000 b8dd 	b.w	80139d8 <forward_pad_edge>
 801381e:	f000 b91d 	b.w	8013a5c <forward_pad_reflect>
 8013822:	f000 b88f 	b.w	8013944 <forward_pad_constant>
 8013826:	4770      	bx	lr

08013828 <forward_sm_integer>:
 8013828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801382c:	6983      	ldr	r3, [r0, #24]
 801382e:	881f      	ldrh	r7, [r3, #0]
 8013830:	b086      	sub	sp, #24
 8013832:	2f00      	cmp	r7, #0
 8013834:	d042      	beq.n	80138bc <forward_sm_integer+0x94>
 8013836:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801383a:	f8d8 6004 	ldr.w	r6, [r8, #4]
 801383e:	b106      	cbz	r6, 8013842 <forward_sm_integer+0x1a>
 8013840:	6836      	ldr	r6, [r6, #0]
 8013842:	2f01      	cmp	r7, #1
 8013844:	d043      	beq.n	80138ce <forward_sm_integer+0xa6>
 8013846:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d044      	beq.n	80138d8 <forward_sm_integer+0xb0>
 801384e:	f8d3 e000 	ldr.w	lr, [r3]
 8013852:	68b1      	ldr	r1, [r6, #8]
 8013854:	f8de 300c 	ldr.w	r3, [lr, #12]
 8013858:	68f5      	ldr	r5, [r6, #12]
 801385a:	f8d3 c004 	ldr.w	ip, [r3, #4]
 801385e:	686b      	ldr	r3, [r5, #4]
 8013860:	0a09      	lsrs	r1, r1, #8
 8013862:	d032      	beq.n	80138ca <forward_sm_integer+0xa2>
 8013864:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8013868:	2201      	movs	r2, #1
 801386a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801386e:	428d      	cmp	r5, r1
 8013870:	fb04 f202 	mul.w	r2, r4, r2
 8013874:	d1f9      	bne.n	801386a <forward_sm_integer+0x42>
 8013876:	69c1      	ldr	r1, [r0, #28]
 8013878:	2f03      	cmp	r7, #3
 801387a:	688c      	ldr	r4, [r1, #8]
 801387c:	d927      	bls.n	80138ce <forward_sm_integer+0xa6>
 801387e:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8013882:	b339      	cbz	r1, 80138d4 <forward_sm_integer+0xac>
 8013884:	6809      	ldr	r1, [r1, #0]
 8013886:	69b0      	ldr	r0, [r6, #24]
 8013888:	6989      	ldr	r1, [r1, #24]
 801388a:	4e14      	ldr	r6, [pc, #80]	; (80138dc <forward_sm_integer+0xb4>)
 801388c:	688d      	ldr	r5, [r1, #8]
 801388e:	6801      	ldr	r1, [r0, #0]
 8013890:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8013894:	42b1      	cmp	r1, r6
 8013896:	f8de 6018 	ldr.w	r6, [lr, #24]
 801389a:	6881      	ldr	r1, [r0, #8]
 801389c:	68b0      	ldr	r0, [r6, #8]
 801389e:	9505      	str	r5, [sp, #20]
 80138a0:	68a5      	ldr	r5, [r4, #8]
 80138a2:	9504      	str	r5, [sp, #16]
 80138a4:	6865      	ldr	r5, [r4, #4]
 80138a6:	9503      	str	r5, [sp, #12]
 80138a8:	6824      	ldr	r4, [r4, #0]
 80138aa:	9300      	str	r3, [sp, #0]
 80138ac:	e9cd c401 	strd	ip, r4, [sp, #4]
 80138b0:	d006      	beq.n	80138c0 <forward_sm_integer+0x98>
 80138b2:	f001 ffc7 	bl	8015844 <forward_lite_nl_softmax_iu8ou8>
 80138b6:	b006      	add	sp, #24
 80138b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	deff      	udf	#255	; 0xff
 80138c0:	f001 fb86 	bl	8014fd0 <forward_lite_nl_softmax_is8os8>
 80138c4:	b006      	add	sp, #24
 80138c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138ca:	2201      	movs	r2, #1
 80138cc:	e7d3      	b.n	8013876 <forward_sm_integer+0x4e>
 80138ce:	2300      	movs	r3, #0
 80138d0:	685b      	ldr	r3, [r3, #4]
 80138d2:	deff      	udf	#255	; 0xff
 80138d4:	698b      	ldr	r3, [r1, #24]
 80138d6:	deff      	udf	#255	; 0xff
 80138d8:	68db      	ldr	r3, [r3, #12]
 80138da:	deff      	udf	#255	; 0xff
 80138dc:	00840440 	.word	0x00840440

080138e0 <forward_pad_8bit_ch1st_3x3_constant>:
 80138e0:	6982      	ldr	r2, [r0, #24]
 80138e2:	8811      	ldrh	r1, [r2, #0]
 80138e4:	b331      	cbz	r1, 8013934 <forward_pad_8bit_ch1st_3x3_constant+0x54>
 80138e6:	4603      	mov	r3, r0
 80138e8:	6850      	ldr	r0, [r2, #4]
 80138ea:	6842      	ldr	r2, [r0, #4]
 80138ec:	b102      	cbz	r2, 80138f0 <forward_pad_8bit_ch1st_3x3_constant+0x10>
 80138ee:	6812      	ldr	r2, [r2, #0]
 80138f0:	2901      	cmp	r1, #1
 80138f2:	d021      	beq.n	8013938 <forward_pad_8bit_ch1st_3x3_constant+0x58>
 80138f4:	6901      	ldr	r1, [r0, #16]
 80138f6:	b311      	cbz	r1, 801393e <forward_pad_8bit_ch1st_3x3_constant+0x5e>
 80138f8:	b570      	push	{r4, r5, r6, lr}
 80138fa:	68d5      	ldr	r5, [r2, #12]
 80138fc:	6809      	ldr	r1, [r1, #0]
 80138fe:	e9d2 6205 	ldrd	r6, r2, [r2, #20]
 8013902:	e9d3 4309 	ldrd	r4, r3, [r3, #36]	; 0x24
 8013906:	6890      	ldr	r0, [r2, #8]
 8013908:	f9b4 4000 	ldrsh.w	r4, [r4]
 801390c:	e9d1 2105 	ldrd	r2, r1, [r1, #20]
 8013910:	68d2      	ldr	r2, [r2, #12]
 8013912:	6889      	ldr	r1, [r1, #8]
 8013914:	b084      	sub	sp, #16
 8013916:	fb02 f404 	mul.w	r4, r2, r4
 801391a:	689a      	ldr	r2, [r3, #8]
 801391c:	68eb      	ldr	r3, [r5, #12]
 801391e:	9403      	str	r4, [sp, #12]
 8013920:	68f4      	ldr	r4, [r6, #12]
 8013922:	9402      	str	r4, [sp, #8]
 8013924:	6874      	ldr	r4, [r6, #4]
 8013926:	9401      	str	r4, [sp, #4]
 8013928:	686c      	ldr	r4, [r5, #4]
 801392a:	9400      	str	r4, [sp, #0]
 801392c:	f002 fbbe 	bl	80160ac <forward_lite_pad_8bit_ch1st_3x3_constant>
 8013930:	b004      	add	sp, #16
 8013932:	bd70      	pop	{r4, r5, r6, pc}
 8013934:	684b      	ldr	r3, [r1, #4]
 8013936:	deff      	udf	#255	; 0xff
 8013938:	2300      	movs	r3, #0
 801393a:	685b      	ldr	r3, [r3, #4]
 801393c:	deff      	udf	#255	; 0xff
 801393e:	698b      	ldr	r3, [r1, #24]
 8013940:	deff      	udf	#255	; 0xff
 8013942:	bf00      	nop

08013944 <forward_pad_constant>:
 8013944:	6982      	ldr	r2, [r0, #24]
 8013946:	8813      	ldrh	r3, [r2, #0]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d03d      	beq.n	80139c8 <forward_pad_constant+0x84>
 801394c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013950:	6852      	ldr	r2, [r2, #4]
 8013952:	6854      	ldr	r4, [r2, #4]
 8013954:	b088      	sub	sp, #32
 8013956:	b104      	cbz	r4, 801395a <forward_pad_constant+0x16>
 8013958:	6824      	ldr	r4, [r4, #0]
 801395a:	2b01      	cmp	r3, #1
 801395c:	d036      	beq.n	80139cc <forward_pad_constant+0x88>
 801395e:	6913      	ldr	r3, [r2, #16]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d036      	beq.n	80139d2 <forward_pad_constant+0x8e>
 8013964:	6819      	ldr	r1, [r3, #0]
 8013966:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013968:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801396a:	689a      	ldr	r2, [r3, #8]
 801396c:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 8013970:	69a6      	ldr	r6, [r4, #24]
 8013972:	f8d4 c014 	ldr.w	ip, [r4, #20]
 8013976:	68b0      	ldr	r0, [r6, #8]
 8013978:	e9d1 3105 	ldrd	r3, r1, [r1, #20]
 801397c:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
 8013980:	fb08 f707 	mul.w	r7, r8, r7
 8013984:	6833      	ldr	r3, [r6, #0]
 8013986:	6889      	ldr	r1, [r1, #8]
 8013988:	9706      	str	r7, [sp, #24]
 801398a:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 801398e:	fb08 f606 	mul.w	r6, r8, r6
 8013992:	9605      	str	r6, [sp, #20]
 8013994:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 8013998:	fb0e f606 	mul.w	r6, lr, r6
 801399c:	9604      	str	r6, [sp, #16]
 801399e:	f9b5 5000 	ldrsh.w	r5, [r5]
 80139a2:	fb0e f505 	mul.w	r5, lr, r5
 80139a6:	9503      	str	r5, [sp, #12]
 80139a8:	f8dc 500c 	ldr.w	r5, [ip, #12]
 80139ac:	9502      	str	r5, [sp, #8]
 80139ae:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80139b2:	9501      	str	r5, [sp, #4]
 80139b4:	68e4      	ldr	r4, [r4, #12]
 80139b6:	68e4      	ldr	r4, [r4, #12]
 80139b8:	9400      	str	r4, [sp, #0]
 80139ba:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 80139be:	f002 fc33 	bl	8016228 <forward_lite_pad_constant>
 80139c2:	b008      	add	sp, #32
 80139c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139c8:	685b      	ldr	r3, [r3, #4]
 80139ca:	deff      	udf	#255	; 0xff
 80139cc:	2300      	movs	r3, #0
 80139ce:	685b      	ldr	r3, [r3, #4]
 80139d0:	deff      	udf	#255	; 0xff
 80139d2:	699b      	ldr	r3, [r3, #24]
 80139d4:	deff      	udf	#255	; 0xff
 80139d6:	bf00      	nop

080139d8 <forward_pad_edge>:
 80139d8:	6982      	ldr	r2, [r0, #24]
 80139da:	8813      	ldrh	r3, [r2, #0]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d035      	beq.n	8013a4c <forward_pad_edge+0x74>
 80139e0:	6851      	ldr	r1, [r2, #4]
 80139e2:	684a      	ldr	r2, [r1, #4]
 80139e4:	b102      	cbz	r2, 80139e8 <forward_pad_edge+0x10>
 80139e6:	6812      	ldr	r2, [r2, #0]
 80139e8:	2b01      	cmp	r3, #1
 80139ea:	d031      	beq.n	8013a50 <forward_pad_edge+0x78>
 80139ec:	690b      	ldr	r3, [r1, #16]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d031      	beq.n	8013a56 <forward_pad_edge+0x7e>
 80139f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80139f8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80139fc:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 8013a00:	6990      	ldr	r0, [r2, #24]
 8013a02:	6957      	ldr	r7, [r2, #20]
 8013a04:	6880      	ldr	r0, [r0, #8]
 8013a06:	f8de 200c 	ldr.w	r2, [lr, #12]
 8013a0a:	e9d3 c105 	ldrd	ip, r1, [r3, #20]
 8013a0e:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8013a12:	f9b5 3000 	ldrsh.w	r3, [r5]
 8013a16:	6889      	ldr	r1, [r1, #8]
 8013a18:	b089      	sub	sp, #36	; 0x24
 8013a1a:	fb04 f606 	mul.w	r6, r4, r6
 8013a1e:	9606      	str	r6, [sp, #24]
 8013a20:	f8dc c008 	ldr.w	ip, [ip, #8]
 8013a24:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 8013a28:	9403      	str	r4, [sp, #12]
 8013a2a:	fb0c f606 	mul.w	r6, ip, r6
 8013a2e:	fb03 f404 	mul.w	r4, r3, r4
 8013a32:	9605      	str	r6, [sp, #20]
 8013a34:	9404      	str	r4, [sp, #16]
 8013a36:	68bc      	ldr	r4, [r7, #8]
 8013a38:	9402      	str	r4, [sp, #8]
 8013a3a:	68fc      	ldr	r4, [r7, #12]
 8013a3c:	9401      	str	r4, [sp, #4]
 8013a3e:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
 8013a42:	9400      	str	r4, [sp, #0]
 8013a44:	f002 fc92 	bl	801636c <forward_lite_pad_edge>
 8013a48:	b009      	add	sp, #36	; 0x24
 8013a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a4c:	685b      	ldr	r3, [r3, #4]
 8013a4e:	deff      	udf	#255	; 0xff
 8013a50:	2300      	movs	r3, #0
 8013a52:	685b      	ldr	r3, [r3, #4]
 8013a54:	deff      	udf	#255	; 0xff
 8013a56:	699b      	ldr	r3, [r3, #24]
 8013a58:	deff      	udf	#255	; 0xff
 8013a5a:	bf00      	nop

08013a5c <forward_pad_reflect>:
 8013a5c:	6982      	ldr	r2, [r0, #24]
 8013a5e:	8813      	ldrh	r3, [r2, #0]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d045      	beq.n	8013af0 <forward_pad_reflect+0x94>
 8013a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a68:	6852      	ldr	r2, [r2, #4]
 8013a6a:	6857      	ldr	r7, [r2, #4]
 8013a6c:	b08f      	sub	sp, #60	; 0x3c
 8013a6e:	b107      	cbz	r7, 8013a72 <forward_pad_reflect+0x16>
 8013a70:	683f      	ldr	r7, [r7, #0]
 8013a72:	2b01      	cmp	r3, #1
 8013a74:	d03e      	beq.n	8013af4 <forward_pad_reflect+0x98>
 8013a76:	6913      	ldr	r3, [r2, #16]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d03e      	beq.n	8013afa <forward_pad_reflect+0x9e>
 8013a7c:	6819      	ldr	r1, [r3, #0]
 8013a7e:	68fa      	ldr	r2, [r7, #12]
 8013a80:	e9d2 8302 	ldrd	r8, r3, [r2, #8]
 8013a84:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 8013a88:	f5b4 6fa0 	cmp.w	r4, #1280	; 0x500
 8013a8c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013a8e:	e9d1 0105 	ldrd	r0, r1, [r1, #20]
 8013a92:	e9d0 5c02 	ldrd	r5, ip, [r0, #8]
 8013a96:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8013a9a:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 8013a9e:	f9b4 b000 	ldrsh.w	fp, [r4]
 8013aa2:	6889      	ldr	r1, [r1, #8]
 8013aa4:	e9d7 7005 	ldrd	r7, r0, [r7, #20]
 8013aa8:	fb05 f606 	mul.w	r6, r5, r6
 8013aac:	e9d2 a902 	ldrd	sl, r9, [r2, #8]
 8013ab0:	6880      	ldr	r0, [r0, #8]
 8013ab2:	bf28      	it	cs
 8013ab4:	6912      	ldrcs	r2, [r2, #16]
 8013ab6:	960c      	str	r6, [sp, #48]	; 0x30
 8013ab8:	fb05 f60e 	mul.w	r6, r5, lr
 8013abc:	960b      	str	r6, [sp, #44]	; 0x2c
 8013abe:	fb0c f60b 	mul.w	r6, ip, fp
 8013ac2:	960a      	str	r6, [sp, #40]	; 0x28
 8013ac4:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
 8013ac8:	f8cd c014 	str.w	ip, [sp, #20]
 8013acc:	e9cd 5e06 	strd	r5, lr, [sp, #24]
 8013ad0:	e9cd b408 	strd	fp, r4, [sp, #32]
 8013ad4:	68bc      	ldr	r4, [r7, #8]
 8013ad6:	9404      	str	r4, [sp, #16]
 8013ad8:	68fc      	ldr	r4, [r7, #12]
 8013ada:	bf38      	it	cc
 8013adc:	2201      	movcc	r2, #1
 8013ade:	e9cd a402 	strd	sl, r4, [sp, #8]
 8013ae2:	e9cd 8900 	strd	r8, r9, [sp]
 8013ae6:	f002 fcb5 	bl	8016454 <forward_lite_pad_reflect>
 8013aea:	b00f      	add	sp, #60	; 0x3c
 8013aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013af0:	685b      	ldr	r3, [r3, #4]
 8013af2:	deff      	udf	#255	; 0xff
 8013af4:	2300      	movs	r3, #0
 8013af6:	685b      	ldr	r3, [r3, #4]
 8013af8:	deff      	udf	#255	; 0xff
 8013afa:	68db      	ldr	r3, [r3, #12]
 8013afc:	deff      	udf	#255	; 0xff
 8013afe:	bf00      	nop

08013b00 <pool_func_mp_array_integer_INT8>:
 8013b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b04:	b093      	sub	sp, #76	; 0x4c
 8013b06:	468c      	mov	ip, r1
 8013b08:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8013b0c:	f8bd 1074 	ldrh.w	r1, [sp, #116]	; 0x74
 8013b10:	940d      	str	r4, [sp, #52]	; 0x34
 8013b12:	469a      	mov	sl, r3
 8013b14:	6804      	ldr	r4, [r0, #0]
 8013b16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013b18:	910e      	str	r1, [sp, #56]	; 0x38
 8013b1a:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 8013b1e:	910f      	str	r1, [sp, #60]	; 0x3c
 8013b20:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 8013b24:	9110      	str	r1, [sp, #64]	; 0x40
 8013b26:	6980      	ldr	r0, [r0, #24]
 8013b28:	f8bd b080 	ldrh.w	fp, [sp, #128]	; 0x80
 8013b2c:	f8bd 7084 	ldrh.w	r7, [sp, #132]	; 0x84
 8013b30:	f8bd e088 	ldrh.w	lr, [sp, #136]	; 0x88
 8013b34:	f8bd 808c 	ldrh.w	r8, [sp, #140]	; 0x8c
 8013b38:	6999      	ldr	r1, [r3, #24]
 8013b3a:	681d      	ldr	r5, [r3, #0]
 8013b3c:	2c00      	cmp	r4, #0
 8013b3e:	d067      	beq.n	8013c10 <pool_func_mp_array_integer_INT8+0x110>
 8013b40:	6866      	ldr	r6, [r4, #4]
 8013b42:	2e00      	cmp	r6, #0
 8013b44:	d04b      	beq.n	8013bde <pool_func_mp_array_integer_INT8+0xde>
 8013b46:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8013b4a:	f1b9 0f00 	cmp.w	r9, #0
 8013b4e:	d079      	beq.n	8013c44 <pool_func_mp_array_integer_INT8+0x144>
 8013b50:	6833      	ldr	r3, [r6, #0]
 8013b52:	edd3 7a00 	vldr	s15, [r3]
 8013b56:	2d00      	cmp	r5, #0
 8013b58:	d078      	beq.n	8013c4c <pool_func_mp_array_integer_INT8+0x14c>
 8013b5a:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8013b5e:	f1b9 0f00 	cmp.w	r9, #0
 8013b62:	d045      	beq.n	8013bf0 <pool_func_mp_array_integer_INT8+0xf0>
 8013b64:	886b      	ldrh	r3, [r5, #2]
 8013b66:	9311      	str	r3, [sp, #68]	; 0x44
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d05e      	beq.n	8013c2a <pool_func_mp_array_integer_INT8+0x12a>
 8013b6c:	f8d9 3000 	ldr.w	r3, [r9]
 8013b70:	6880      	ldr	r0, [r0, #8]
 8013b72:	ed93 7a00 	vldr	s14, [r3]
 8013b76:	6889      	ldr	r1, [r1, #8]
 8013b78:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8013b7c:	2e00      	cmp	r6, #0
 8013b7e:	d05f      	beq.n	8013c40 <pool_func_mp_array_integer_INT8+0x140>
 8013b80:	8863      	ldrh	r3, [r4, #2]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	f000 808a 	beq.w	8013c9c <pool_func_mp_array_integer_INT8+0x19c>
 8013b88:	6873      	ldr	r3, [r6, #4]
 8013b8a:	f993 4000 	ldrsb.w	r4, [r3]
 8013b8e:	2d00      	cmp	r5, #0
 8013b90:	d03c      	beq.n	8013c0c <pool_func_mp_array_integer_INT8+0x10c>
 8013b92:	f1b9 0f00 	cmp.w	r9, #0
 8013b96:	d039      	beq.n	8013c0c <pool_func_mp_array_integer_INT8+0x10c>
 8013b98:	886b      	ldrh	r3, [r5, #2]
 8013b9a:	9311      	str	r3, [sp, #68]	; 0x44
 8013b9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013b9e:	b11b      	cbz	r3, 8013ba8 <pool_func_mp_array_integer_INT8+0xa8>
 8013ba0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013ba4:	f993 3000 	ldrsb.w	r3, [r3]
 8013ba8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bb0:	da5e      	bge.n	8013c70 <pool_func_mp_array_integer_INT8+0x170>
 8013bb2:	e9cd 4309 	strd	r4, r3, [sp, #36]	; 0x24
 8013bb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013bb8:	9304      	str	r3, [sp, #16]
 8013bba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013bbc:	9303      	str	r3, [sp, #12]
 8013bbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013bc0:	9302      	str	r3, [sp, #8]
 8013bc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013bc4:	e9cd e807 	strd	lr, r8, [sp, #28]
 8013bc8:	e9cd a300 	strd	sl, r3, [sp]
 8013bcc:	e9cd b705 	strd	fp, r7, [sp, #20]
 8013bd0:	4613      	mov	r3, r2
 8013bd2:	4662      	mov	r2, ip
 8013bd4:	f001 f91c 	bl	8014e10 <forward_lite_maxpool_is8os8_scaleneg>
 8013bd8:	b013      	add	sp, #76	; 0x4c
 8013bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bde:	2d00      	cmp	r5, #0
 8013be0:	d040      	beq.n	8013c64 <pool_func_mp_array_integer_INT8+0x164>
 8013be2:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8013be6:	eddf 7a39 	vldr	s15, [pc, #228]	; 8013ccc <pool_func_mp_array_integer_INT8+0x1cc>
 8013bea:	f1b9 0f00 	cmp.w	r9, #0
 8013bee:	d1b9      	bne.n	8013b64 <pool_func_mp_array_integer_INT8+0x64>
 8013bf0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8013ccc <pool_func_mp_array_integer_INT8+0x1cc>
 8013bf4:	6880      	ldr	r0, [r0, #8]
 8013bf6:	6889      	ldr	r1, [r1, #8]
 8013bf8:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8013bfc:	2e00      	cmp	r6, #0
 8013bfe:	d062      	beq.n	8013cc6 <pool_func_mp_array_integer_INT8+0x1c6>
 8013c00:	8863      	ldrh	r3, [r4, #2]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d04a      	beq.n	8013c9c <pool_func_mp_array_integer_INT8+0x19c>
 8013c06:	6873      	ldr	r3, [r6, #4]
 8013c08:	f993 4000 	ldrsb.w	r4, [r3]
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	e7cb      	b.n	8013ba8 <pool_func_mp_array_integer_INT8+0xa8>
 8013c10:	2d00      	cmp	r5, #0
 8013c12:	d045      	beq.n	8013ca0 <pool_func_mp_array_integer_INT8+0x1a0>
 8013c14:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8013c18:	f1b9 0f00 	cmp.w	r9, #0
 8013c1c:	d022      	beq.n	8013c64 <pool_func_mp_array_integer_INT8+0x164>
 8013c1e:	886b      	ldrh	r3, [r5, #2]
 8013c20:	9311      	str	r3, [sp, #68]	; 0x44
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d143      	bne.n	8013cae <pool_func_mp_array_integer_INT8+0x1ae>
 8013c26:	eddf 7a29 	vldr	s15, [pc, #164]	; 8013ccc <pool_func_mp_array_integer_INT8+0x1cc>
 8013c2a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8013ccc <pool_func_mp_array_integer_INT8+0x1cc>
 8013c2e:	6880      	ldr	r0, [r0, #8]
 8013c30:	6889      	ldr	r1, [r1, #8]
 8013c32:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8013c36:	2c00      	cmp	r4, #0
 8013c38:	d0e8      	beq.n	8013c0c <pool_func_mp_array_integer_INT8+0x10c>
 8013c3a:	6866      	ldr	r6, [r4, #4]
 8013c3c:	2e00      	cmp	r6, #0
 8013c3e:	d19f      	bne.n	8013b80 <pool_func_mp_array_integer_INT8+0x80>
 8013c40:	4634      	mov	r4, r6
 8013c42:	e7ab      	b.n	8013b9c <pool_func_mp_array_integer_INT8+0x9c>
 8013c44:	eddf 7a21 	vldr	s15, [pc, #132]	; 8013ccc <pool_func_mp_array_integer_INT8+0x1cc>
 8013c48:	2d00      	cmp	r5, #0
 8013c4a:	d186      	bne.n	8013b5a <pool_func_mp_array_integer_INT8+0x5a>
 8013c4c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8013ccc <pool_func_mp_array_integer_INT8+0x1cc>
 8013c50:	6880      	ldr	r0, [r0, #8]
 8013c52:	6889      	ldr	r1, [r1, #8]
 8013c54:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8013c58:	f1b9 0f00 	cmp.w	r9, #0
 8013c5c:	d12e      	bne.n	8013cbc <pool_func_mp_array_integer_INT8+0x1bc>
 8013c5e:	464c      	mov	r4, r9
 8013c60:	464b      	mov	r3, r9
 8013c62:	e7a1      	b.n	8013ba8 <pool_func_mp_array_integer_INT8+0xa8>
 8013c64:	2400      	movs	r4, #0
 8013c66:	6880      	ldr	r0, [r0, #8]
 8013c68:	6889      	ldr	r1, [r1, #8]
 8013c6a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8013cd0 <pool_func_mp_array_integer_INT8+0x1d0>
 8013c6e:	4623      	mov	r3, r4
 8013c70:	e9cd 4309 	strd	r4, r3, [sp, #36]	; 0x24
 8013c74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013c76:	9304      	str	r3, [sp, #16]
 8013c78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013c7a:	9303      	str	r3, [sp, #12]
 8013c7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c7e:	9302      	str	r3, [sp, #8]
 8013c80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c82:	e9cd e807 	strd	lr, r8, [sp, #28]
 8013c86:	e9cd a300 	strd	sl, r3, [sp]
 8013c8a:	e9cd b705 	strd	fp, r7, [sp, #20]
 8013c8e:	4613      	mov	r3, r2
 8013c90:	4662      	mov	r2, ip
 8013c92:	f000 ffdb 	bl	8014c4c <forward_lite_maxpool_is8os8_scalepos>
 8013c96:	b013      	add	sp, #76	; 0x4c
 8013c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c9c:	2400      	movs	r4, #0
 8013c9e:	e778      	b.n	8013b92 <pool_func_mp_array_integer_INT8+0x92>
 8013ca0:	6880      	ldr	r0, [r0, #8]
 8013ca2:	6889      	ldr	r1, [r1, #8]
 8013ca4:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8013cd0 <pool_func_mp_array_integer_INT8+0x1d0>
 8013ca8:	462c      	mov	r4, r5
 8013caa:	462b      	mov	r3, r5
 8013cac:	e7e0      	b.n	8013c70 <pool_func_mp_array_integer_INT8+0x170>
 8013cae:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8013ccc <pool_func_mp_array_integer_INT8+0x1cc>
 8013cb2:	6880      	ldr	r0, [r0, #8]
 8013cb4:	6889      	ldr	r1, [r1, #8]
 8013cb6:	eef0 7a40 	vmov.f32	s15, s0
 8013cba:	e771      	b.n	8013ba0 <pool_func_mp_array_integer_INT8+0xa0>
 8013cbc:	6874      	ldr	r4, [r6, #4]
 8013cbe:	462b      	mov	r3, r5
 8013cc0:	f994 4000 	ldrsb.w	r4, [r4]
 8013cc4:	e770      	b.n	8013ba8 <pool_func_mp_array_integer_INT8+0xa8>
 8013cc6:	4634      	mov	r4, r6
 8013cc8:	4633      	mov	r3, r6
 8013cca:	e76d      	b.n	8013ba8 <pool_func_mp_array_integer_INT8+0xa8>
 8013ccc:	00000000 	.word	0x00000000
 8013cd0:	7fc00000 	.word	0x7fc00000

08013cd4 <forward_ap_integer_INT8>:
 8013cd4:	6983      	ldr	r3, [r0, #24]
 8013cd6:	881a      	ldrh	r2, [r3, #0]
 8013cd8:	2a00      	cmp	r2, #0
 8013cda:	d074      	beq.n	8013dc6 <forward_ap_integer_INT8+0xf2>
 8013cdc:	6859      	ldr	r1, [r3, #4]
 8013cde:	684b      	ldr	r3, [r1, #4]
 8013ce0:	b103      	cbz	r3, 8013ce4 <forward_ap_integer_INT8+0x10>
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	2a01      	cmp	r2, #1
 8013ce6:	f000 80e0 	beq.w	8013eaa <forward_ap_integer_INT8+0x1d6>
 8013cea:	690a      	ldr	r2, [r1, #16]
 8013cec:	2a00      	cmp	r2, #0
 8013cee:	f000 80df 	beq.w	8013eb0 <forward_ap_integer_INT8+0x1dc>
 8013cf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cf6:	68de      	ldr	r6, [r3, #12]
 8013cf8:	6811      	ldr	r1, [r2, #0]
 8013cfa:	6b07      	ldr	r7, [r0, #48]	; 0x30
 8013cfc:	681c      	ldr	r4, [r3, #0]
 8013cfe:	f8d3 b018 	ldr.w	fp, [r3, #24]
 8013d02:	f8b6 8004 	ldrh.w	r8, [r6, #4]
 8013d06:	8932      	ldrh	r2, [r6, #8]
 8013d08:	89b3      	ldrh	r3, [r6, #12]
 8013d0a:	8b86      	ldrh	r6, [r0, #28]
 8013d0c:	68cd      	ldr	r5, [r1, #12]
 8013d0e:	f8d1 a018 	ldr.w	sl, [r1, #24]
 8013d12:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 8013d16:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
 8013d1a:	b095      	sub	sp, #84	; 0x54
 8013d1c:	960d      	str	r6, [sp, #52]	; 0x34
 8013d1e:	8c06      	ldrh	r6, [r0, #32]
 8013d20:	960e      	str	r6, [sp, #56]	; 0x38
 8013d22:	88be      	ldrh	r6, [r7, #4]
 8013d24:	960f      	str	r6, [sp, #60]	; 0x3c
 8013d26:	883e      	ldrh	r6, [r7, #0]
 8013d28:	9610      	str	r6, [sp, #64]	; 0x40
 8013d2a:	8c86      	ldrh	r6, [r0, #36]	; 0x24
 8013d2c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 8013d2e:	9611      	str	r6, [sp, #68]	; 0x44
 8013d30:	9012      	str	r0, [sp, #72]	; 0x48
 8013d32:	680e      	ldr	r6, [r1, #0]
 8013d34:	2c00      	cmp	r4, #0
 8013d36:	d060      	beq.n	8013dfa <forward_ap_integer_INT8+0x126>
 8013d38:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013d3c:	f1b9 0f00 	cmp.w	r9, #0
 8013d40:	d043      	beq.n	8013dca <forward_ap_integer_INT8+0xf6>
 8013d42:	8865      	ldrh	r5, [r4, #2]
 8013d44:	2d00      	cmp	r5, #0
 8013d46:	d06e      	beq.n	8013e26 <forward_ap_integer_INT8+0x152>
 8013d48:	f8d9 1000 	ldr.w	r1, [r9]
 8013d4c:	ed91 0a00 	vldr	s0, [r1]
 8013d50:	2e00      	cmp	r6, #0
 8013d52:	d06c      	beq.n	8013e2e <forward_ap_integer_INT8+0x15a>
 8013d54:	6877      	ldr	r7, [r6, #4]
 8013d56:	2f00      	cmp	r7, #0
 8013d58:	d03e      	beq.n	8013dd8 <forward_ap_integer_INT8+0x104>
 8013d5a:	8871      	ldrh	r1, [r6, #2]
 8013d5c:	9113      	str	r1, [sp, #76]	; 0x4c
 8013d5e:	2900      	cmp	r1, #0
 8013d60:	d053      	beq.n	8013e0a <forward_ap_integer_INT8+0x136>
 8013d62:	683d      	ldr	r5, [r7, #0]
 8013d64:	f8db 0008 	ldr.w	r0, [fp, #8]
 8013d68:	f8da 1008 	ldr.w	r1, [sl, #8]
 8013d6c:	edd5 0a00 	vldr	s1, [r5]
 8013d70:	f1b9 0f00 	cmp.w	r9, #0
 8013d74:	d055      	beq.n	8013e22 <forward_ap_integer_INT8+0x14e>
 8013d76:	8864      	ldrh	r4, [r4, #2]
 8013d78:	2c00      	cmp	r4, #0
 8013d7a:	d039      	beq.n	8013df0 <forward_ap_integer_INT8+0x11c>
 8013d7c:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8013d80:	f994 4000 	ldrsb.w	r4, [r4]
 8013d84:	2e00      	cmp	r6, #0
 8013d86:	d036      	beq.n	8013df6 <forward_ap_integer_INT8+0x122>
 8013d88:	2f00      	cmp	r7, #0
 8013d8a:	d034      	beq.n	8013df6 <forward_ap_integer_INT8+0x122>
 8013d8c:	8875      	ldrh	r5, [r6, #2]
 8013d8e:	9513      	str	r5, [sp, #76]	; 0x4c
 8013d90:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8013d92:	b115      	cbz	r5, 8013d9a <forward_ap_integer_INT8+0xc6>
 8013d94:	687d      	ldr	r5, [r7, #4]
 8013d96:	f995 5000 	ldrsb.w	r5, [r5]
 8013d9a:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 8013d9e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8013da0:	9406      	str	r4, [sp, #24]
 8013da2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8013da4:	9405      	str	r4, [sp, #20]
 8013da6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8013da8:	9404      	str	r4, [sp, #16]
 8013daa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8013dac:	9403      	str	r4, [sp, #12]
 8013dae:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8013db0:	9402      	str	r4, [sp, #8]
 8013db2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8013db4:	e9cd ce07 	strd	ip, lr, [sp, #28]
 8013db8:	e9cd 8400 	strd	r8, r4, [sp]
 8013dbc:	f006 f982 	bl	801a0c4 <st_int8_avepool>
 8013dc0:	b015      	add	sp, #84	; 0x54
 8013dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dc6:	6853      	ldr	r3, [r2, #4]
 8013dc8:	deff      	udf	#255	; 0xff
 8013dca:	2e00      	cmp	r6, #0
 8013dcc:	d039      	beq.n	8013e42 <forward_ap_integer_INT8+0x16e>
 8013dce:	6877      	ldr	r7, [r6, #4]
 8013dd0:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8013eb4 <forward_ap_integer_INT8+0x1e0>
 8013dd4:	2f00      	cmp	r7, #0
 8013dd6:	d1c0      	bne.n	8013d5a <forward_ap_integer_INT8+0x86>
 8013dd8:	f8db 0008 	ldr.w	r0, [fp, #8]
 8013ddc:	f8da 1008 	ldr.w	r1, [sl, #8]
 8013de0:	f1b9 0f00 	cmp.w	r9, #0
 8013de4:	d05c      	beq.n	8013ea0 <forward_ap_integer_INT8+0x1cc>
 8013de6:	8864      	ldrh	r4, [r4, #2]
 8013de8:	2c00      	cmp	r4, #0
 8013dea:	d152      	bne.n	8013e92 <forward_ap_integer_INT8+0x1be>
 8013dec:	eddf 0a31 	vldr	s1, [pc, #196]	; 8013eb4 <forward_ap_integer_INT8+0x1e0>
 8013df0:	2400      	movs	r4, #0
 8013df2:	2f00      	cmp	r7, #0
 8013df4:	d1ca      	bne.n	8013d8c <forward_ap_integer_INT8+0xb8>
 8013df6:	2500      	movs	r5, #0
 8013df8:	e7cf      	b.n	8013d9a <forward_ap_integer_INT8+0xc6>
 8013dfa:	b316      	cbz	r6, 8013e42 <forward_ap_integer_INT8+0x16e>
 8013dfc:	6877      	ldr	r7, [r6, #4]
 8013dfe:	b35f      	cbz	r7, 8013e58 <forward_ap_integer_INT8+0x184>
 8013e00:	8871      	ldrh	r1, [r6, #2]
 8013e02:	9113      	str	r1, [sp, #76]	; 0x4c
 8013e04:	bb99      	cbnz	r1, 8013e6e <forward_ap_integer_INT8+0x19a>
 8013e06:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8013eb4 <forward_ap_integer_INT8+0x1e0>
 8013e0a:	f8db 0008 	ldr.w	r0, [fp, #8]
 8013e0e:	f8da 1008 	ldr.w	r1, [sl, #8]
 8013e12:	b194      	cbz	r4, 8013e3a <forward_ap_integer_INT8+0x166>
 8013e14:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013e18:	eddf 0a26 	vldr	s1, [pc, #152]	; 8013eb4 <forward_ap_integer_INT8+0x1e0>
 8013e1c:	f1b9 0f00 	cmp.w	r9, #0
 8013e20:	d1a9      	bne.n	8013d76 <forward_ap_integer_INT8+0xa2>
 8013e22:	464c      	mov	r4, r9
 8013e24:	e7b4      	b.n	8013d90 <forward_ap_integer_INT8+0xbc>
 8013e26:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8013eb4 <forward_ap_integer_INT8+0x1e0>
 8013e2a:	2e00      	cmp	r6, #0
 8013e2c:	d192      	bne.n	8013d54 <forward_ap_integer_INT8+0x80>
 8013e2e:	f8db 0008 	ldr.w	r0, [fp, #8]
 8013e32:	f8da 1008 	ldr.w	r1, [sl, #8]
 8013e36:	bb25      	cbnz	r5, 8013e82 <forward_ap_integer_INT8+0x1ae>
 8013e38:	462c      	mov	r4, r5
 8013e3a:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8013eb4 <forward_ap_integer_INT8+0x1e0>
 8013e3e:	4625      	mov	r5, r4
 8013e40:	e7ab      	b.n	8013d9a <forward_ap_integer_INT8+0xc6>
 8013e42:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8013eb4 <forward_ap_integer_INT8+0x1e0>
 8013e46:	f8db 0008 	ldr.w	r0, [fp, #8]
 8013e4a:	f8da 1008 	ldr.w	r1, [sl, #8]
 8013e4e:	4634      	mov	r4, r6
 8013e50:	eef0 0a40 	vmov.f32	s1, s0
 8013e54:	4635      	mov	r5, r6
 8013e56:	e7a0      	b.n	8013d9a <forward_ap_integer_INT8+0xc6>
 8013e58:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8013eb4 <forward_ap_integer_INT8+0x1e0>
 8013e5c:	f8db 0008 	ldr.w	r0, [fp, #8]
 8013e60:	f8da 1008 	ldr.w	r1, [sl, #8]
 8013e64:	463c      	mov	r4, r7
 8013e66:	eef0 0a40 	vmov.f32	s1, s0
 8013e6a:	463d      	mov	r5, r7
 8013e6c:	e795      	b.n	8013d9a <forward_ap_integer_INT8+0xc6>
 8013e6e:	683d      	ldr	r5, [r7, #0]
 8013e70:	f8db 0008 	ldr.w	r0, [fp, #8]
 8013e74:	f8da 1008 	ldr.w	r1, [sl, #8]
 8013e78:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8013eb4 <forward_ap_integer_INT8+0x1e0>
 8013e7c:	edd5 0a00 	vldr	s1, [r5]
 8013e80:	e788      	b.n	8013d94 <forward_ap_integer_INT8+0xc0>
 8013e82:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8013e86:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8013eb4 <forward_ap_integer_INT8+0x1e0>
 8013e8a:	f994 4000 	ldrsb.w	r4, [r4]
 8013e8e:	4635      	mov	r5, r6
 8013e90:	e783      	b.n	8013d9a <forward_ap_integer_INT8+0xc6>
 8013e92:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8013e96:	eddf 0a07 	vldr	s1, [pc, #28]	; 8013eb4 <forward_ap_integer_INT8+0x1e0>
 8013e9a:	f994 4000 	ldrsb.w	r4, [r4]
 8013e9e:	e7aa      	b.n	8013df6 <forward_ap_integer_INT8+0x122>
 8013ea0:	eddf 0a04 	vldr	s1, [pc, #16]	; 8013eb4 <forward_ap_integer_INT8+0x1e0>
 8013ea4:	464c      	mov	r4, r9
 8013ea6:	464d      	mov	r5, r9
 8013ea8:	e777      	b.n	8013d9a <forward_ap_integer_INT8+0xc6>
 8013eaa:	2300      	movs	r3, #0
 8013eac:	685b      	ldr	r3, [r3, #4]
 8013eae:	deff      	udf	#255	; 0xff
 8013eb0:	68d3      	ldr	r3, [r2, #12]
 8013eb2:	deff      	udf	#255	; 0xff
 8013eb4:	00000000 	.word	0x00000000

08013eb8 <forward_lite_conv2d_deep_3x3_sssa8_ch>:
 8013eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ebc:	b097      	sub	sp, #92	; 0x5c
 8013ebe:	461d      	mov	r5, r3
 8013ec0:	9311      	str	r3, [sp, #68]	; 0x44
 8013ec2:	f99d 3090 	ldrsb.w	r3, [sp, #144]	; 0x90
 8013ec6:	f8bd 8084 	ldrh.w	r8, [sp, #132]	; 0x84
 8013eca:	f8dd 90ac 	ldr.w	r9, [sp, #172]	; 0xac
 8013ece:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8013ed0:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8013ed2:	4604      	mov	r4, r0
 8013ed4:	005b      	lsls	r3, r3, #1
 8013ed6:	f8bd 00a0 	ldrh.w	r0, [sp, #160]	; 0xa0
 8013eda:	9015      	str	r0, [sp, #84]	; 0x54
 8013edc:	3301      	adds	r3, #1
 8013ede:	eb09 00c8 	add.w	r0, r9, r8, lsl #3
 8013ee2:	f849 3028 	str.w	r3, [r9, r8, lsl #2]
 8013ee6:	900f      	str	r0, [sp, #60]	; 0x3c
 8013ee8:	f99d 308c 	ldrsb.w	r3, [sp, #140]	; 0x8c
 8013eec:	9312      	str	r3, [sp, #72]	; 0x48
 8013eee:	eb09 0088 	add.w	r0, r9, r8, lsl #2
 8013ef2:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8013ef6:	9010      	str	r0, [sp, #64]	; 0x40
 8013ef8:	eba2 0248 	sub.w	r2, r2, r8, lsl #1
 8013efc:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8013efe:	9313      	str	r3, [sp, #76]	; 0x4c
 8013f00:	468a      	mov	sl, r1
 8013f02:	444a      	add	r2, r9
 8013f04:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 8013f08:	920e      	str	r2, [sp, #56]	; 0x38
 8013f0a:	9920      	ldr	r1, [sp, #128]	; 0x80
 8013f0c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013f0e:	9314      	str	r3, [sp, #80]	; 0x50
 8013f10:	fb15 f70a 	smulbb	r7, r5, sl
 8013f14:	b338      	cbz	r0, 8013f66 <forward_lite_conv2d_deep_3x3_sssa8_ch+0xae>
 8013f16:	b2bf      	uxth	r7, r7
 8013f18:	2500      	movs	r5, #0
 8013f1a:	fb08 fb03 	mul.w	fp, r8, r3
 8013f1e:	2300      	movs	r3, #0
 8013f20:	930c      	str	r3, [sp, #48]	; 0x30
 8013f22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f24:	930b      	str	r3, [sp, #44]	; 0x2c
 8013f26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013f28:	9222      	str	r2, [sp, #136]	; 0x88
 8013f2a:	e9cd a309 	strd	sl, r3, [sp, #36]	; 0x24
 8013f2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013f30:	9308      	str	r3, [sp, #32]
 8013f32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013f34:	9120      	str	r1, [sp, #128]	; 0x80
 8013f36:	e9cd 7306 	strd	r7, r3, [sp, #24]
 8013f3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013f3c:	9305      	str	r3, [sp, #20]
 8013f3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013f40:	9304      	str	r3, [sp, #16]
 8013f42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013f44:	e9cd 8302 	strd	r8, r3, [sp, #8]
 8013f48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f4a:	4620      	mov	r0, r4
 8013f4c:	e9cd 9300 	strd	r9, r3, [sp]
 8013f50:	4633      	mov	r3, r6
 8013f52:	f005 f9b5 	bl	80192c0 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t>
 8013f56:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8013f58:	9920      	ldr	r1, [sp, #128]	; 0x80
 8013f5a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013f5c:	3501      	adds	r5, #1
 8013f5e:	42ab      	cmp	r3, r5
 8013f60:	445e      	add	r6, fp
 8013f62:	443c      	add	r4, r7
 8013f64:	d1db      	bne.n	8013f1e <forward_lite_conv2d_deep_3x3_sssa8_ch+0x66>
 8013f66:	b017      	add	sp, #92	; 0x5c
 8013f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013f6c <forward_lite_conv2d_deep_sssa8_ch>:
 8013f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f70:	b0a3      	sub	sp, #140	; 0x8c
 8013f72:	e9dd 2a3b 	ldrd	r2, sl, [sp, #236]	; 0xec
 8013f76:	f8bd 70b4 	ldrh.w	r7, [sp, #180]	; 0xb4
 8013f7a:	911c      	str	r1, [sp, #112]	; 0x70
 8013f7c:	461d      	mov	r5, r3
 8013f7e:	460e      	mov	r6, r1
 8013f80:	eba2 0147 	sub.w	r1, r2, r7, lsl #1
 8013f84:	4604      	mov	r4, r0
 8013f86:	eb0a 0001 	add.w	r0, sl, r1
 8013f8a:	fb15 f106 	smulbb	r1, r5, r6
 8013f8e:	b289      	uxth	r1, r1
 8013f90:	9113      	str	r1, [sp, #76]	; 0x4c
 8013f92:	f8bd 10b8 	ldrh.w	r1, [sp, #184]	; 0xb8
 8013f96:	9117      	str	r1, [sp, #92]	; 0x5c
 8013f98:	f8bd 10bc 	ldrh.w	r1, [sp, #188]	; 0xbc
 8013f9c:	9118      	str	r1, [sp, #96]	; 0x60
 8013f9e:	f8bd 10c0 	ldrh.w	r1, [sp, #192]	; 0xc0
 8013fa2:	9316      	str	r3, [sp, #88]	; 0x58
 8013fa4:	911d      	str	r1, [sp, #116]	; 0x74
 8013fa6:	f99d 30d0 	ldrsb.w	r3, [sp, #208]	; 0xd0
 8013faa:	f8bd 10c4 	ldrh.w	r1, [sp, #196]	; 0xc4
 8013fae:	9114      	str	r1, [sp, #80]	; 0x50
 8013fb0:	f99d 10cc 	ldrsb.w	r1, [sp, #204]	; 0xcc
 8013fb4:	911e      	str	r1, [sp, #120]	; 0x78
 8013fb6:	005b      	lsls	r3, r3, #1
 8013fb8:	f89d 10d4 	ldrb.w	r1, [sp, #212]	; 0xd4
 8013fbc:	911f      	str	r1, [sp, #124]	; 0x7c
 8013fbe:	3301      	adds	r3, #1
 8013fc0:	f8bd 10dc 	ldrh.w	r1, [sp, #220]	; 0xdc
 8013fc4:	f84a 3027 	str.w	r3, [sl, r7, lsl #2]
 8013fc8:	9115      	str	r1, [sp, #84]	; 0x54
 8013fca:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
 8013fce:	f8bd 10e0 	ldrh.w	r1, [sp, #224]	; 0xe0
 8013fd2:	9120      	str	r1, [sp, #128]	; 0x80
 8013fd4:	eb0a 01c7 	add.w	r1, sl, r7, lsl #3
 8013fd8:	9119      	str	r1, [sp, #100]	; 0x64
 8013fda:	2b01      	cmp	r3, #1
 8013fdc:	eb0a 0187 	add.w	r1, sl, r7, lsl #2
 8013fe0:	901a      	str	r0, [sp, #104]	; 0x68
 8013fe2:	f8dd 80b0 	ldr.w	r8, [sp, #176]	; 0xb0
 8013fe6:	f8dd 90c8 	ldr.w	r9, [sp, #200]	; 0xc8
 8013fea:	911b      	str	r1, [sp, #108]	; 0x6c
 8013fec:	4628      	mov	r0, r5
 8013fee:	9d36      	ldr	r5, [sp, #216]	; 0xd8
 8013ff0:	d043      	beq.n	801407a <forward_lite_conv2d_deep_sssa8_ch+0x10e>
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	9321      	str	r3, [sp, #132]	; 0x84
 8013ff6:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d03b      	beq.n	8014074 <forward_lite_conv2d_deep_sssa8_ch+0x108>
 8013ffc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013ffe:	fb07 fb03 	mul.w	fp, r7, r3
 8014002:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8014006:	4641      	mov	r1, r8
 8014008:	fb02 f303 	mul.w	r3, r2, r3
 801400c:	f8dd 80e4 	ldr.w	r8, [sp, #228]	; 0xe4
 8014010:	464a      	mov	r2, r9
 8014012:	2600      	movs	r6, #0
 8014014:	46d1      	mov	r9, sl
 8014016:	46ba      	mov	sl, r7
 8014018:	461f      	mov	r7, r3
 801401a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801401c:	930e      	str	r3, [sp, #56]	; 0x38
 801401e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014020:	930d      	str	r3, [sp, #52]	; 0x34
 8014022:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014024:	930c      	str	r3, [sp, #48]	; 0x30
 8014026:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014028:	930b      	str	r3, [sp, #44]	; 0x2c
 801402a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801402c:	930a      	str	r3, [sp, #40]	; 0x28
 801402e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014030:	9309      	str	r3, [sp, #36]	; 0x24
 8014032:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014034:	9308      	str	r3, [sp, #32]
 8014036:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014038:	9307      	str	r3, [sp, #28]
 801403a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801403c:	9306      	str	r3, [sp, #24]
 801403e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014040:	9305      	str	r3, [sp, #20]
 8014042:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014044:	9304      	str	r3, [sp, #16]
 8014046:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014048:	e9cd a302 	strd	sl, r3, [sp, #8]
 801404c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801404e:	e9cd 9300 	strd	r9, r3, [sp]
 8014052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014054:	9310      	str	r3, [sp, #64]	; 0x40
 8014056:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014058:	930f      	str	r3, [sp, #60]	; 0x3c
 801405a:	4620      	mov	r0, r4
 801405c:	462b      	mov	r3, r5
 801405e:	3601      	adds	r6, #1
 8014060:	9232      	str	r2, [sp, #200]	; 0xc8
 8014062:	912c      	str	r1, [sp, #176]	; 0xb0
 8014064:	f004 fbc0 	bl	80187e8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t>
 8014068:	45b0      	cmp	r8, r6
 801406a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801406c:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801406e:	445d      	add	r5, fp
 8014070:	443c      	add	r4, r7
 8014072:	d1d2      	bne.n	801401a <forward_lite_conv2d_deep_sssa8_ch+0xae>
 8014074:	b023      	add	sp, #140	; 0x8c
 8014076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801407a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801407c:	fb00 f307 	mul.w	r3, r0, r7
 8014080:	fb01 f303 	mul.w	r3, r1, r3
 8014084:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014086:	fb01 f303 	mul.w	r3, r1, r3
 801408a:	f06f 0109 	mvn.w	r1, #9
 801408e:	fb01 2207 	mla	r2, r1, r7, r2
 8014092:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8014096:	dbac      	blt.n	8013ff2 <forward_lite_conv2d_deep_sssa8_ch+0x86>
 8014098:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801409a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801409c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801409e:	9601      	str	r6, [sp, #4]
 80140a0:	fb00 f303 	mul.w	r3, r0, r3
 80140a4:	fb03 f201 	mul.w	r2, r3, r1
 80140a8:	9200      	str	r2, [sp, #0]
 80140aa:	4640      	mov	r0, r8
 80140ac:	460a      	mov	r2, r1
 80140ae:	4639      	mov	r1, r7
 80140b0:	f004 fb5a 	bl	8018768 <st_sssa8_ch_fullW_prefetch>
 80140b4:	9621      	str	r6, [sp, #132]	; 0x84
 80140b6:	e79e      	b.n	8013ff6 <forward_lite_conv2d_deep_sssa8_ch+0x8a>

080140b8 <forward_lite_conv2d_sssa8_ch>:
 80140b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140bc:	ed2d 8b08 	vpush	{d8-d11}
 80140c0:	b0d5      	sub	sp, #340	; 0x154
 80140c2:	4699      	mov	r9, r3
 80140c4:	f8dd a1d8 	ldr.w	sl, [sp, #472]	; 0x1d8
 80140c8:	f8bd 319c 	ldrh.w	r3, [sp, #412]	; 0x19c
 80140cc:	9215      	str	r2, [sp, #84]	; 0x54
 80140ce:	9a77      	ldr	r2, [sp, #476]	; 0x1dc
 80140d0:	f8bd 61d0 	ldrh.w	r6, [sp, #464]	; 0x1d0
 80140d4:	9013      	str	r0, [sp, #76]	; 0x4c
 80140d6:	ebaa 0543 	sub.w	r5, sl, r3, lsl #1
 80140da:	4415      	add	r5, r2
 80140dc:	f8bd 21a0 	ldrh.w	r2, [sp, #416]	; 0x1a0
 80140e0:	9226      	str	r2, [sp, #152]	; 0x98
 80140e2:	f8bd 21a4 	ldrh.w	r2, [sp, #420]	; 0x1a4
 80140e6:	9229      	str	r2, [sp, #164]	; 0xa4
 80140e8:	f8bd 21a8 	ldrh.w	r2, [sp, #424]	; 0x1a8
 80140ec:	9211      	str	r2, [sp, #68]	; 0x44
 80140ee:	4688      	mov	r8, r1
 80140f0:	f8bd 21ac 	ldrh.w	r2, [sp, #428]	; 0x1ac
 80140f4:	f89d 11c4 	ldrb.w	r1, [sp, #452]	; 0x1c4
 80140f8:	9225      	str	r2, [sp, #148]	; 0x94
 80140fa:	f8bd 21b0 	ldrh.w	r2, [sp, #432]	; 0x1b0
 80140fe:	f8bd 01cc 	ldrh.w	r0, [sp, #460]	; 0x1cc
 8014102:	9220      	str	r2, [sp, #128]	; 0x80
 8014104:	ee09 3a90 	vmov	s19, r3
 8014108:	f8bd 21b4 	ldrh.w	r2, [sp, #436]	; 0x1b4
 801410c:	9628      	str	r6, [sp, #160]	; 0xa0
 801410e:	005e      	lsls	r6, r3, #1
 8014110:	07cb      	lsls	r3, r1, #31
 8014112:	922a      	str	r2, [sp, #168]	; 0xa8
 8014114:	f99d b1bc 	ldrsb.w	fp, [sp, #444]	; 0x1bc
 8014118:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
 801411a:	f99d 41c0 	ldrsb.w	r4, [sp, #448]	; 0x1c0
 801411e:	f8bd 71d4 	ldrh.w	r7, [sp, #468]	; 0x1d4
 8014122:	9124      	str	r1, [sp, #144]	; 0x90
 8014124:	9010      	str	r0, [sp, #64]	; 0x40
 8014126:	f140 8463 	bpl.w	80149f0 <forward_lite_conv2d_sssa8_ch+0x938>
 801412a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801412c:	1c83      	adds	r3, r0, #2
 801412e:	3102      	adds	r1, #2
 8014130:	fb01 f303 	mul.w	r3, r1, r3
 8014134:	931c      	str	r3, [sp, #112]	; 0x70
 8014136:	9b77      	ldr	r3, [sp, #476]	; 0x1dc
 8014138:	9966      	ldr	r1, [sp, #408]	; 0x198
 801413a:	9201      	str	r2, [sp, #4]
 801413c:	e9cd b302 	strd	fp, r3, [sp, #8]
 8014140:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014142:	9300      	str	r3, [sp, #0]
 8014144:	ee19 2a90 	vmov	r2, s19
 8014148:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801414a:	4648      	mov	r0, r9
 801414c:	f002 faac 	bl	80166a8 <st_sssa8_ch_convolve_rank1upd>
 8014150:	ee19 2a90 	vmov	r2, s19
 8014154:	9977      	ldr	r1, [sp, #476]	; 0x1dc
 8014156:	9826      	ldr	r0, [sp, #152]	; 0x98
 8014158:	18b3      	adds	r3, r6, r2
 801415a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801415e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014160:	9119      	str	r1, [sp, #100]	; 0x64
 8014162:	fb10 f303 	smulbb	r3, r0, r3
 8014166:	fb13 f309 	smulbb	r3, r3, r9
 801416a:	b29b      	uxth	r3, r3
 801416c:	931b      	str	r3, [sp, #108]	; 0x6c
 801416e:	ebc2 7342 	rsb	r3, r2, r2, lsl #29
 8014172:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8014176:	ee0a 3a90 	vmov	s21, r3
 801417a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801417e:	9323      	str	r3, [sp, #140]	; 0x8c
 8014180:	b1d2      	cbz	r2, 80141b8 <forward_lite_conv2d_sssa8_ch+0x100>
 8014182:	1d19      	adds	r1, r3, #4
 8014184:	eb05 0c06 	add.w	ip, r5, r6
 8014188:	f04f 0e01 	mov.w	lr, #1
 801418c:	f935 3b02 	ldrsh.w	r3, [r5], #2
 8014190:	1e5a      	subs	r2, r3, #1
 8014192:	b292      	uxth	r2, r2
 8014194:	fa0e f003 	lsl.w	r0, lr, r3
 8014198:	2a14      	cmp	r2, #20
 801419a:	fa04 f303 	lsl.w	r3, r4, r3
 801419e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 80141a2:	f200 818f 	bhi.w	80144c4 <forward_lite_conv2d_sssa8_ch+0x40c>
 80141a6:	4565      	cmp	r5, ip
 80141a8:	f841 3c04 	str.w	r3, [r1, #-4]
 80141ac:	f101 0104 	add.w	r1, r1, #4
 80141b0:	d1ec      	bne.n	801418c <forward_lite_conv2d_sssa8_ch+0xd4>
 80141b2:	9b77      	ldr	r3, [sp, #476]	; 0x1dc
 80141b4:	eb03 050a 	add.w	r5, r3, sl
 80141b8:	1bab      	subs	r3, r5, r6
 80141ba:	9322      	str	r3, [sp, #136]	; 0x88
 80141bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80141be:	9335      	str	r3, [sp, #212]	; 0xd4
 80141c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80141c2:	933a      	str	r3, [sp, #232]	; 0xe8
 80141c4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80141c6:	9339      	str	r3, [sp, #228]	; 0xe4
 80141c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80141ca:	934c      	str	r3, [sp, #304]	; 0x130
 80141cc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80141ce:	934d      	str	r3, [sp, #308]	; 0x134
 80141d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80141d2:	934e      	str	r3, [sp, #312]	; 0x138
 80141d4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80141d6:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80141d8:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80141da:	934f      	str	r3, [sp, #316]	; 0x13c
 80141dc:	ab3c      	add	r3, sp, #240	; 0xf0
 80141de:	9300      	str	r3, [sp, #0]
 80141e0:	aa34      	add	r2, sp, #208	; 0xd0
 80141e2:	ab38      	add	r3, sp, #224	; 0xe0
 80141e4:	a94a      	add	r1, sp, #296	; 0x128
 80141e6:	a840      	add	r0, sp, #256	; 0x100
 80141e8:	943e      	str	r4, [sp, #248]	; 0xf8
 80141ea:	953d      	str	r5, [sp, #244]	; 0xf4
 80141ec:	f8cd 80d8 	str.w	r8, [sp, #216]	; 0xd8
 80141f0:	f003 f93e 	bl	8017470 <ai_padding_opt_init>
 80141f4:	ee19 2a90 	vmov	r2, s19
 80141f8:	462b      	mov	r3, r5
 80141fa:	fb05 f504 	mul.w	r5, r5, r4
 80141fe:	fb09 fa04 	mul.w	sl, r9, r4
 8014202:	fb09 f405 	mul.w	r4, r9, r5
 8014206:	fb02 f404 	mul.w	r4, r2, r4
 801420a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801420c:	fb0a f303 	mul.w	r3, sl, r3
 8014210:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014214:	ee0a 3a10 	vmov	s20, r3
 8014218:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801421a:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 801421e:	f003 0202 	and.w	r2, r3, #2
 8014222:	bfa8      	it	ge
 8014224:	f44f 6420 	movge.w	r4, #2560	; 0xa00
 8014228:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801422c:	2f01      	cmp	r7, #1
 801422e:	922f      	str	r2, [sp, #188]	; 0xbc
 8014230:	931e      	str	r3, [sp, #120]	; 0x78
 8014232:	f000 83c8 	beq.w	80149c6 <forward_lite_conv2d_sssa8_ch+0x90e>
 8014236:	2300      	movs	r3, #0
 8014238:	932e      	str	r3, [sp, #184]	; 0xb8
 801423a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801423c:	2b01      	cmp	r3, #1
 801423e:	f240 8273 	bls.w	8014728 <forward_lite_conv2d_sssa8_ch+0x670>
 8014242:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014244:	fbb4 f3f3 	udiv	r3, r4, r3
 8014248:	b29b      	uxth	r3, r3
 801424a:	4619      	mov	r1, r3
 801424c:	ee19 3a90 	vmov	r3, s19
 8014250:	4299      	cmp	r1, r3
 8014252:	bf28      	it	cs
 8014254:	4619      	movcs	r1, r3
 8014256:	fbb3 f2f1 	udiv	r2, r3, r1
 801425a:	fb01 3312 	mls	r3, r1, r2, r3
 801425e:	b29b      	uxth	r3, r3
 8014260:	b292      	uxth	r2, r2
 8014262:	911f      	str	r1, [sp, #124]	; 0x7c
 8014264:	922c      	str	r2, [sp, #176]	; 0xb0
 8014266:	2b00      	cmp	r3, #0
 8014268:	f040 8141 	bne.w	80144ee <forward_lite_conv2d_sssa8_ch+0x436>
 801426c:	4613      	mov	r3, r2
 801426e:	3a01      	subs	r2, #1
 8014270:	b292      	uxth	r2, r2
 8014272:	922c      	str	r2, [sp, #176]	; 0xb0
 8014274:	2b00      	cmp	r3, #0
 8014276:	f000 823e 	beq.w	80146f6 <forward_lite_conv2d_sssa8_ch+0x63e>
 801427a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801427c:	edcd 9a2d 	vstr	s19, [sp, #180]	; 0xb4
 8014280:	fb09 f505 	mul.w	r5, r9, r5
 8014284:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8014288:	fa0f f68b 	sxth.w	r6, fp
 801428c:	9317      	str	r3, [sp, #92]	; 0x5c
 801428e:	f009 0303 	and.w	r3, r9, #3
 8014292:	9312      	str	r3, [sp, #72]	; 0x48
 8014294:	ea4f 0b49 	mov.w	fp, r9, lsl #1
 8014298:	ea4f 034a 	mov.w	r3, sl, lsl #1
 801429c:	ee09 9a10 	vmov	s18, r9
 80142a0:	ee0b 6a10 	vmov	s22, r6
 80142a4:	9318      	str	r3, [sp, #96]	; 0x60
 80142a6:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 80142aa:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80142ae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80142b0:	b953      	cbnz	r3, 80142c8 <forward_lite_conv2d_sssa8_ch+0x210>
 80142b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	f040 822f 	bne.w	8014718 <forward_lite_conv2d_sssa8_ch+0x660>
 80142ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80142bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80142be:	9866      	ldr	r0, [sp, #408]	; 0x198
 80142c0:	ee1a 1a10 	vmov	r1, s20
 80142c4:	f003 f81c 	bl	8017300 <st_int8_to16_dual_interleaved>
 80142c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80142ca:	2b03      	cmp	r3, #3
 80142cc:	f000 8218 	beq.w	8014700 <forward_lite_conv2d_sssa8_ch+0x648>
 80142d0:	9b72      	ldr	r3, [sp, #456]	; 0x1c8
 80142d2:	931a      	str	r3, [sp, #104]	; 0x68
 80142d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	f000 80bf 	beq.w	801445a <forward_lite_conv2d_sssa8_ch+0x3a2>
 80142dc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80142de:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80142e0:	425b      	negs	r3, r3
 80142e2:	b29b      	uxth	r3, r3
 80142e4:	2400      	movs	r4, #0
 80142e6:	ee08 aa90 	vmov	s17, sl
 80142ea:	9321      	str	r3, [sp, #132]	; 0x84
 80142ec:	4626      	mov	r6, r4
 80142ee:	a840      	add	r0, sp, #256	; 0x100
 80142f0:	f003 f916 	bl	8017520 <ai_padding_opt_phase1>
 80142f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	f000 81f3 	beq.w	80146e2 <forward_lite_conv2d_sssa8_ch+0x62a>
 80142fc:	b2a3      	uxth	r3, r4
 80142fe:	9327      	str	r3, [sp, #156]	; 0x9c
 8014300:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8014304:	1a9b      	subs	r3, r3, r2
 8014306:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8014308:	fb06 3302 	mla	r3, r6, r2, r3
 801430c:	930d      	str	r3, [sp, #52]	; 0x34
 801430e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014310:	f9bd 2084 	ldrsh.w	r2, [sp, #132]	; 0x84
 8014314:	9216      	str	r2, [sp, #88]	; 0x58
 8014316:	425b      	negs	r3, r3
 8014318:	b29b      	uxth	r3, r3
 801431a:	930b      	str	r3, [sp, #44]	; 0x2c
 801431c:	2300      	movs	r3, #0
 801431e:	930e      	str	r3, [sp, #56]	; 0x38
 8014320:	9314      	str	r3, [sp, #80]	; 0x50
 8014322:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8014324:	2b00      	cmp	r3, #0
 8014326:	f000 80e6 	beq.w	80144f6 <forward_lite_conv2d_sssa8_ch+0x43e>
 801432a:	3b01      	subs	r3, #1
 801432c:	9340      	str	r3, [sp, #256]	; 0x100
 801432e:	2301      	movs	r3, #1
 8014330:	f8ad 3126 	strh.w	r3, [sp, #294]	; 0x126
 8014334:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014336:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014338:	4293      	cmp	r3, r2
 801433a:	f280 80ea 	bge.w	8014512 <forward_lite_conv2d_sssa8_ch+0x45a>
 801433e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014340:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014342:	9914      	ldr	r1, [sp, #80]	; 0x50
 8014344:	f8dd 90ac 	ldr.w	r9, [sp, #172]	; 0xac
 8014348:	fb01 3402 	mla	r4, r1, r2, r3
 801434c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801434e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8014352:	1ae4      	subs	r4, r4, r3
 8014354:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8014358:	930f      	str	r3, [sp, #60]	; 0x3c
 801435a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801435c:	ee19 7a10 	vmov	r7, s18
 8014360:	ee1b 8a10 	vmov	r8, s22
 8014364:	461e      	mov	r6, r3
 8014366:	4693      	mov	fp, r2
 8014368:	455c      	cmp	r4, fp
 801436a:	dd35      	ble.n	80143d8 <forward_lite_conv2d_sssa8_ch+0x320>
 801436c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801436e:	2e00      	cmp	r6, #0
 8014370:	fb02 f203 	mul.w	r2, r2, r3
 8014374:	920a      	str	r2, [sp, #40]	; 0x28
 8014376:	f2c0 817c 	blt.w	8014672 <forward_lite_conv2d_sssa8_ch+0x5ba>
 801437a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801437c:	2a00      	cmp	r2, #0
 801437e:	f000 8125 	beq.w	80145cc <forward_lite_conv2d_sssa8_ch+0x514>
 8014382:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014384:	429a      	cmp	r2, r3
 8014386:	46da      	mov	sl, fp
 8014388:	f340 80a4 	ble.w	80144d4 <forward_lite_conv2d_sssa8_ch+0x41c>
 801438c:	46dc      	mov	ip, fp
 801438e:	961d      	str	r6, [sp, #116]	; 0x74
 8014390:	e011      	b.n	80143b6 <forward_lite_conv2d_sssa8_ch+0x2fe>
 8014392:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8014394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014396:	4566      	cmp	r6, ip
 8014398:	4463      	add	r3, ip
 801439a:	dd12      	ble.n	80143c2 <forward_lite_conv2d_sssa8_ch+0x30a>
 801439c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801439e:	f10a 0a01 	add.w	sl, sl, #1
 80143a2:	fa0f fa8a 	sxth.w	sl, sl
 80143a6:	fb07 0003 	mla	r0, r7, r3, r0
 80143aa:	f002 fe1d 	bl	8016fe8 <st_int8_to16_no_shift>
 80143ae:	45a2      	cmp	sl, r4
 80143b0:	444d      	add	r5, r9
 80143b2:	46d4      	mov	ip, sl
 80143b4:	da0f      	bge.n	80143d6 <forward_lite_conv2d_sssa8_ch+0x31e>
 80143b6:	f1ba 0f00 	cmp.w	sl, #0
 80143ba:	463a      	mov	r2, r7
 80143bc:	4629      	mov	r1, r5
 80143be:	4640      	mov	r0, r8
 80143c0:	dae7      	bge.n	8014392 <forward_lite_conv2d_sssa8_ch+0x2da>
 80143c2:	f10a 0a01 	add.w	sl, sl, #1
 80143c6:	fa0f fa8a 	sxth.w	sl, sl
 80143ca:	f006 f879 	bl	801a4c0 <arm_fill_q15>
 80143ce:	45a2      	cmp	sl, r4
 80143d0:	444d      	add	r5, r9
 80143d2:	46d4      	mov	ip, sl
 80143d4:	dbef      	blt.n	80143b6 <forward_lite_conv2d_sssa8_ch+0x2fe>
 80143d6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80143d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80143da:	3601      	adds	r6, #1
 80143dc:	b236      	sxth	r6, r6
 80143de:	4296      	cmp	r6, r2
 80143e0:	4633      	mov	r3, r6
 80143e2:	dbc1      	blt.n	8014368 <forward_lite_conv2d_sssa8_ch+0x2b0>
 80143e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80143e6:	42ab      	cmp	r3, r5
 80143e8:	f000 809a 	beq.w	8014520 <forward_lite_conv2d_sssa8_ch+0x468>
 80143ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80143ee:	9911      	ldr	r1, [sp, #68]	; 0x44
 80143f0:	3301      	adds	r3, #1
 80143f2:	b21a      	sxth	r2, r3
 80143f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80143f6:	920e      	str	r2, [sp, #56]	; 0x38
 80143f8:	440b      	add	r3, r1
 80143fa:	b29b      	uxth	r3, r3
 80143fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80143fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014400:	9214      	str	r2, [sp, #80]	; 0x50
 8014402:	4293      	cmp	r3, r2
 8014404:	dc8d      	bgt.n	8014322 <forward_lite_conv2d_sssa8_ch+0x26a>
 8014406:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014408:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801440a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801440c:	4413      	add	r3, r2
 801440e:	b29b      	uxth	r3, r3
 8014410:	3401      	adds	r4, #1
 8014412:	9321      	str	r3, [sp, #132]	; 0x84
 8014414:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014416:	b224      	sxth	r4, r4
 8014418:	42a3      	cmp	r3, r4
 801441a:	4626      	mov	r6, r4
 801441c:	f73f af67 	bgt.w	80142ee <forward_lite_conv2d_sssa8_ch+0x236>
 8014420:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014422:	42a9      	cmp	r1, r5
 8014424:	ee18 aa90 	vmov	sl, s17
 8014428:	d017      	beq.n	801445a <forward_lite_conv2d_sssa8_ch+0x3a2>
 801442a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801442c:	9307      	str	r3, [sp, #28]
 801442e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014430:	9306      	str	r3, [sp, #24]
 8014432:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014434:	9305      	str	r3, [sp, #20]
 8014436:	9b77      	ldr	r3, [sp, #476]	; 0x1dc
 8014438:	9304      	str	r3, [sp, #16]
 801443a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801443c:	9303      	str	r3, [sp, #12]
 801443e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014440:	9302      	str	r3, [sp, #8]
 8014442:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014444:	9301      	str	r3, [sp, #4]
 8014446:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014448:	9300      	str	r3, [sp, #0]
 801444a:	ee1a 2a90 	vmov	r2, s21
 801444e:	ee19 3a90 	vmov	r3, s19
 8014452:	ee1a 0a10 	vmov	r0, s20
 8014456:	f003 fc79 	bl	8017d4c <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 801445a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801445c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801445e:	1a9b      	subs	r3, r3, r2
 8014460:	b299      	uxth	r1, r3
 8014462:	428a      	cmp	r2, r1
 8014464:	4613      	mov	r3, r2
 8014466:	bf28      	it	cs
 8014468:	460b      	movcs	r3, r1
 801446a:	912d      	str	r1, [sp, #180]	; 0xb4
 801446c:	2b00      	cmp	r3, #0
 801446e:	f000 813b 	beq.w	80146e8 <forward_lite_conv2d_sssa8_ch+0x630>
 8014472:	9966      	ldr	r1, [sp, #408]	; 0x198
 8014474:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8014476:	fb02 1100 	mla	r1, r2, r0, r1
 801447a:	9166      	str	r1, [sp, #408]	; 0x198
 801447c:	ee1a 1a90 	vmov	r1, s21
 8014480:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014484:	ee0a 1a90 	vmov	s21, r1
 8014488:	9922      	ldr	r1, [sp, #136]	; 0x88
 801448a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 801448e:	9122      	str	r1, [sp, #136]	; 0x88
 8014490:	9977      	ldr	r1, [sp, #476]	; 0x1dc
 8014492:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014496:	9177      	str	r1, [sp, #476]	; 0x1dc
 8014498:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801449a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801449e:	9123      	str	r1, [sp, #140]	; 0x8c
 80144a0:	992f      	ldr	r1, [sp, #188]	; 0xbc
 80144a2:	2900      	cmp	r1, #0
 80144a4:	f000 8132 	beq.w	801470c <forward_lite_conv2d_sssa8_ch+0x654>
 80144a8:	9972      	ldr	r1, [sp, #456]	; 0x1c8
 80144aa:	981c      	ldr	r0, [sp, #112]	; 0x70
 80144ac:	931f      	str	r3, [sp, #124]	; 0x7c
 80144ae:	fb00 1202 	mla	r2, r0, r2, r1
 80144b2:	9272      	str	r2, [sp, #456]	; 0x1c8
 80144b4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80144b6:	1e53      	subs	r3, r2, #1
 80144b8:	b29b      	uxth	r3, r3
 80144ba:	2a00      	cmp	r2, #0
 80144bc:	f000 811b 	beq.w	80146f6 <forward_lite_conv2d_sssa8_ch+0x63e>
 80144c0:	932c      	str	r3, [sp, #176]	; 0xb0
 80144c2:	e6f4      	b.n	80142ae <forward_lite_conv2d_sssa8_ch+0x1f6>
 80144c4:	4565      	cmp	r5, ip
 80144c6:	f841 4c04 	str.w	r4, [r1, #-4]
 80144ca:	f101 0104 	add.w	r1, r1, #4
 80144ce:	f47f ae5d 	bne.w	801418c <forward_lite_conv2d_sssa8_ch+0xd4>
 80144d2:	e66e      	b.n	80141b2 <forward_lite_conv2d_sssa8_ch+0xfa>
 80144d4:	f10a 0a01 	add.w	sl, sl, #1
 80144d8:	4629      	mov	r1, r5
 80144da:	463a      	mov	r2, r7
 80144dc:	4640      	mov	r0, r8
 80144de:	fa0f fa8a 	sxth.w	sl, sl
 80144e2:	f005 ffed 	bl	801a4c0 <arm_fill_q15>
 80144e6:	45a2      	cmp	sl, r4
 80144e8:	444d      	add	r5, r9
 80144ea:	dbf3      	blt.n	80144d4 <forward_lite_conv2d_sssa8_ch+0x41c>
 80144ec:	e774      	b.n	80143d8 <forward_lite_conv2d_sssa8_ch+0x320>
 80144ee:	4613      	mov	r3, r2
 80144f0:	3301      	adds	r3, #1
 80144f2:	b29b      	uxth	r3, r3
 80144f4:	e6be      	b.n	8014274 <forward_lite_conv2d_sssa8_ch+0x1bc>
 80144f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d133      	bne.n	8014564 <forward_lite_conv2d_sssa8_ch+0x4ac>
 80144fc:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80144fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014500:	3b01      	subs	r3, #1
 8014502:	9342      	str	r3, [sp, #264]	; 0x108
 8014504:	2301      	movs	r3, #1
 8014506:	f8ad 3126 	strh.w	r3, [sp, #294]	; 0x126
 801450a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801450c:	4293      	cmp	r3, r2
 801450e:	f6ff af16 	blt.w	801433e <forward_lite_conv2d_sssa8_ch+0x286>
 8014512:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8014516:	930f      	str	r3, [sp, #60]	; 0x3c
 8014518:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801451a:	42ab      	cmp	r3, r5
 801451c:	f47f af66 	bne.w	80143ec <forward_lite_conv2d_sssa8_ch+0x334>
 8014520:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014522:	2b03      	cmp	r3, #3
 8014524:	f000 80b3 	beq.w	801468e <forward_lite_conv2d_sssa8_ch+0x5d6>
 8014528:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801452a:	9308      	str	r3, [sp, #32]
 801452c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801452e:	9307      	str	r3, [sp, #28]
 8014530:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014532:	9306      	str	r3, [sp, #24]
 8014534:	9b77      	ldr	r3, [sp, #476]	; 0x1dc
 8014536:	9305      	str	r3, [sp, #20]
 8014538:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801453a:	9304      	str	r3, [sp, #16]
 801453c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801453e:	9303      	str	r3, [sp, #12]
 8014540:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014542:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8014544:	9302      	str	r3, [sp, #8]
 8014546:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014548:	9300      	str	r3, [sp, #0]
 801454a:	2300      	movs	r3, #0
 801454c:	9301      	str	r3, [sp, #4]
 801454e:	ee1a 2a90 	vmov	r2, s21
 8014552:	ee19 3a90 	vmov	r3, s19
 8014556:	ee1a 0a10 	vmov	r0, s20
 801455a:	4629      	mov	r1, r5
 801455c:	f002 fffa 	bl	8017554 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8014560:	901a      	str	r0, [sp, #104]	; 0x68
 8014562:	e743      	b.n	80143ec <forward_lite_conv2d_sssa8_ch+0x334>
 8014564:	3b01      	subs	r3, #1
 8014566:	9341      	str	r3, [sp, #260]	; 0x104
 8014568:	f8bd 3124 	ldrh.w	r3, [sp, #292]	; 0x124
 801456c:	f8ad 3126 	strh.w	r3, [sp, #294]	; 0x126
 8014570:	2b01      	cmp	r3, #1
 8014572:	f43f aedf 	beq.w	8014334 <forward_lite_conv2d_sssa8_ch+0x27c>
 8014576:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801457a:	930f      	str	r3, [sp, #60]	; 0x3c
 801457c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801457e:	f9bd 402c 	ldrsh.w	r4, [sp, #44]	; 0x2c
 8014582:	2b00      	cmp	r3, #0
 8014584:	d152      	bne.n	801462c <forward_lite_conv2d_sssa8_ch+0x574>
 8014586:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014588:	990d      	ldr	r1, [sp, #52]	; 0x34
 801458a:	428b      	cmp	r3, r1
 801458c:	f6bf af2a 	bge.w	80143e4 <forward_lite_conv2d_sssa8_ch+0x32c>
 8014590:	ee18 2a90 	vmov	r2, s17
 8014594:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8014598:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 801459c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801459e:	ee19 8a10 	vmov	r8, s18
 80145a2:	46aa      	mov	sl, r5
 80145a4:	461e      	mov	r6, r3
 80145a6:	4618      	mov	r0, r3
 80145a8:	460d      	mov	r5, r1
 80145aa:	fb00 4007 	mla	r0, r0, r7, r4
 80145ae:	3601      	adds	r6, #1
 80145b0:	fb08 9000 	mla	r0, r8, r0, r9
 80145b4:	4651      	mov	r1, sl
 80145b6:	b236      	sxth	r6, r6
 80145b8:	920a      	str	r2, [sp, #40]	; 0x28
 80145ba:	f002 fd75 	bl	80170a8 <st_int8_to16_no_shift_interleaved>
 80145be:	42ae      	cmp	r6, r5
 80145c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80145c2:	44da      	add	sl, fp
 80145c4:	4630      	mov	r0, r6
 80145c6:	dbf0      	blt.n	80145aa <forward_lite_conv2d_sssa8_ch+0x4f2>
 80145c8:	4655      	mov	r5, sl
 80145ca:	e70b      	b.n	80143e4 <forward_lite_conv2d_sssa8_ch+0x32c>
 80145cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80145ce:	429a      	cmp	r2, r3
 80145d0:	46da      	mov	sl, fp
 80145d2:	dd1e      	ble.n	8014612 <forward_lite_conv2d_sssa8_ch+0x55a>
 80145d4:	46dc      	mov	ip, fp
 80145d6:	961d      	str	r6, [sp, #116]	; 0x74
 80145d8:	e012      	b.n	8014600 <forward_lite_conv2d_sssa8_ch+0x548>
 80145da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80145dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145de:	4566      	cmp	r6, ip
 80145e0:	4463      	add	r3, ip
 80145e2:	dd13      	ble.n	801460c <forward_lite_conv2d_sssa8_ch+0x554>
 80145e4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80145e6:	fb07 0003 	mla	r0, r7, r3, r0
 80145ea:	f002 fd5d 	bl	80170a8 <st_int8_to16_no_shift_interleaved>
 80145ee:	f10a 0a01 	add.w	sl, sl, #1
 80145f2:	fa0f fa8a 	sxth.w	sl, sl
 80145f6:	4554      	cmp	r4, sl
 80145f8:	444d      	add	r5, r9
 80145fa:	46d4      	mov	ip, sl
 80145fc:	f77f aeeb 	ble.w	80143d6 <forward_lite_conv2d_sssa8_ch+0x31e>
 8014600:	f1ba 0f00 	cmp.w	sl, #0
 8014604:	4629      	mov	r1, r5
 8014606:	463a      	mov	r2, r7
 8014608:	4640      	mov	r0, r8
 801460a:	dae6      	bge.n	80145da <forward_lite_conv2d_sssa8_ch+0x522>
 801460c:	f005 ff58 	bl	801a4c0 <arm_fill_q15>
 8014610:	e7ed      	b.n	80145ee <forward_lite_conv2d_sssa8_ch+0x536>
 8014612:	f10a 0a01 	add.w	sl, sl, #1
 8014616:	4629      	mov	r1, r5
 8014618:	463a      	mov	r2, r7
 801461a:	4640      	mov	r0, r8
 801461c:	fa0f fa8a 	sxth.w	sl, sl
 8014620:	f005 ff4e 	bl	801a4c0 <arm_fill_q15>
 8014624:	45a2      	cmp	sl, r4
 8014626:	444d      	add	r5, r9
 8014628:	dbf3      	blt.n	8014612 <forward_lite_conv2d_sssa8_ch+0x55a>
 801462a:	e6d5      	b.n	80143d8 <forward_lite_conv2d_sssa8_ch+0x320>
 801462c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801462e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014630:	428b      	cmp	r3, r1
 8014632:	f6bf aed7 	bge.w	80143e4 <forward_lite_conv2d_sssa8_ch+0x32c>
 8014636:	ee18 2a90 	vmov	r2, s17
 801463a:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801463e:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8014642:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8014644:	ee19 8a10 	vmov	r8, s18
 8014648:	46aa      	mov	sl, r5
 801464a:	461e      	mov	r6, r3
 801464c:	4618      	mov	r0, r3
 801464e:	460d      	mov	r5, r1
 8014650:	fb00 4007 	mla	r0, r0, r7, r4
 8014654:	3601      	adds	r6, #1
 8014656:	fb08 9000 	mla	r0, r8, r0, r9
 801465a:	4651      	mov	r1, sl
 801465c:	b236      	sxth	r6, r6
 801465e:	920a      	str	r2, [sp, #40]	; 0x28
 8014660:	f002 fcc2 	bl	8016fe8 <st_int8_to16_no_shift>
 8014664:	42ae      	cmp	r6, r5
 8014666:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014668:	44da      	add	sl, fp
 801466a:	4630      	mov	r0, r6
 801466c:	dbf0      	blt.n	8014650 <forward_lite_conv2d_sssa8_ch+0x598>
 801466e:	4655      	mov	r5, sl
 8014670:	e6b8      	b.n	80143e4 <forward_lite_conv2d_sssa8_ch+0x32c>
 8014672:	46da      	mov	sl, fp
 8014674:	f10a 0a01 	add.w	sl, sl, #1
 8014678:	4629      	mov	r1, r5
 801467a:	463a      	mov	r2, r7
 801467c:	4640      	mov	r0, r8
 801467e:	fa0f fa8a 	sxth.w	sl, sl
 8014682:	f005 ff1d 	bl	801a4c0 <arm_fill_q15>
 8014686:	45a2      	cmp	sl, r4
 8014688:	444d      	add	r5, r9
 801468a:	dbf3      	blt.n	8014674 <forward_lite_conv2d_sssa8_ch+0x5bc>
 801468c:	e6a4      	b.n	80143d8 <forward_lite_conv2d_sssa8_ch+0x320>
 801468e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014690:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014692:	2b00      	cmp	r3, #0
 8014694:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014696:	9308      	str	r3, [sp, #32]
 8014698:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801469a:	9307      	str	r3, [sp, #28]
 801469c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801469e:	9306      	str	r3, [sp, #24]
 80146a0:	9b77      	ldr	r3, [sp, #476]	; 0x1dc
 80146a2:	9305      	str	r3, [sp, #20]
 80146a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80146a6:	9304      	str	r3, [sp, #16]
 80146a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80146aa:	9303      	str	r3, [sp, #12]
 80146ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80146ae:	9302      	str	r3, [sp, #8]
 80146b0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80146b2:	9300      	str	r3, [sp, #0]
 80146b4:	bf0c      	ite	eq
 80146b6:	2302      	moveq	r3, #2
 80146b8:	2300      	movne	r3, #0
 80146ba:	ee1a 2a90 	vmov	r2, s21
 80146be:	9301      	str	r3, [sp, #4]
 80146c0:	ee1a 0a10 	vmov	r0, s20
 80146c4:	ee19 3a90 	vmov	r3, s19
 80146c8:	f002 ff44 	bl	8017554 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 80146cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80146ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80146d0:	901a      	str	r0, [sp, #104]	; 0x68
 80146d2:	3b01      	subs	r3, #1
 80146d4:	4293      	cmp	r3, r2
 80146d6:	d102      	bne.n	80146de <forward_lite_conv2d_sssa8_ch+0x626>
 80146d8:	4603      	mov	r3, r0
 80146da:	3302      	adds	r3, #2
 80146dc:	931a      	str	r3, [sp, #104]	; 0x68
 80146de:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80146e0:	e684      	b.n	80143ec <forward_lite_conv2d_sssa8_ch+0x334>
 80146e2:	b2a3      	uxth	r3, r4
 80146e4:	9327      	str	r3, [sp, #156]	; 0x9c
 80146e6:	e68e      	b.n	8014406 <forward_lite_conv2d_sssa8_ch+0x34e>
 80146e8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80146ea:	931f      	str	r3, [sp, #124]	; 0x7c
 80146ec:	1e53      	subs	r3, r2, #1
 80146ee:	b29b      	uxth	r3, r3
 80146f0:	2a00      	cmp	r2, #0
 80146f2:	f47f aee5 	bne.w	80144c0 <forward_lite_conv2d_sssa8_ch+0x408>
 80146f6:	b055      	add	sp, #340	; 0x154
 80146f8:	ecbd 8b08 	vpop	{d8-d11}
 80146fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014700:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014702:	9a72      	ldr	r2, [sp, #456]	; 0x1c8
 8014704:	3303      	adds	r3, #3
 8014706:	18d3      	adds	r3, r2, r3
 8014708:	931a      	str	r3, [sp, #104]	; 0x68
 801470a:	e5e3      	b.n	80142d4 <forward_lite_conv2d_sssa8_ch+0x21c>
 801470c:	4611      	mov	r1, r2
 801470e:	9a72      	ldr	r2, [sp, #456]	; 0x1c8
 8014710:	931f      	str	r3, [sp, #124]	; 0x7c
 8014712:	440a      	add	r2, r1
 8014714:	9272      	str	r2, [sp, #456]	; 0x1c8
 8014716:	e6cd      	b.n	80144b4 <forward_lite_conv2d_sssa8_ch+0x3fc>
 8014718:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801471a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801471c:	9866      	ldr	r0, [sp, #408]	; 0x198
 801471e:	ee1a 1a10 	vmov	r1, s20
 8014722:	f002 fd03 	bl	801712c <st_int8_to16_dual>
 8014726:	e5cf      	b.n	80142c8 <forward_lite_conv2d_sssa8_ch+0x210>
 8014728:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801472a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801472c:	ee19 1a90 	vmov	r1, s19
 8014730:	fb02 f303 	mul.w	r3, r2, r3
 8014734:	9a72      	ldr	r2, [sp, #456]	; 0x1c8
 8014736:	fb01 2303 	mla	r3, r1, r3, r2
 801473a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801473c:	429a      	cmp	r2, r3
 801473e:	f4bf ad80 	bcs.w	8014242 <forward_lite_conv2d_sssa8_ch+0x18a>
 8014742:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014744:	fb03 f308 	mul.w	r3, r3, r8
 8014748:	fb09 2303 	mla	r3, r9, r3, r2
 801474c:	9a72      	ldr	r2, [sp, #456]	; 0x1c8
 801474e:	429a      	cmp	r2, r3
 8014750:	f4bf ad77 	bcs.w	8014242 <forward_lite_conv2d_sssa8_ch+0x18a>
 8014754:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014756:	fbb4 f3f3 	udiv	r3, r4, r3
 801475a:	b29b      	uxth	r3, r3
 801475c:	4619      	mov	r1, r3
 801475e:	ee19 3a90 	vmov	r3, s19
 8014762:	4299      	cmp	r1, r3
 8014764:	bf28      	it	cs
 8014766:	4619      	movcs	r1, r3
 8014768:	fbb3 f2f1 	udiv	r2, r3, r1
 801476c:	fb01 3312 	mls	r3, r1, r2, r3
 8014770:	b29b      	uxth	r3, r3
 8014772:	b292      	uxth	r2, r2
 8014774:	9131      	str	r1, [sp, #196]	; 0xc4
 8014776:	922f      	str	r2, [sp, #188]	; 0xbc
 8014778:	b11b      	cbz	r3, 8014782 <forward_lite_conv2d_sssa8_ch+0x6ca>
 801477a:	4613      	mov	r3, r2
 801477c:	3301      	adds	r3, #1
 801477e:	b29b      	uxth	r3, r3
 8014780:	932f      	str	r3, [sp, #188]	; 0xbc
 8014782:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014784:	2b00      	cmp	r3, #0
 8014786:	d0b6      	beq.n	80146f6 <forward_lite_conv2d_sssa8_ch+0x63e>
 8014788:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801478a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 801478e:	fb09 f505 	mul.w	r5, r9, r5
 8014792:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8014796:	9314      	str	r3, [sp, #80]	; 0x50
 8014798:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801479a:	3b01      	subs	r3, #1
 801479c:	b29b      	uxth	r3, r3
 801479e:	9333      	str	r3, [sp, #204]	; 0xcc
 80147a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80147a2:	425b      	negs	r3, r3
 80147a4:	b29b      	uxth	r3, r3
 80147a6:	9330      	str	r3, [sp, #192]	; 0xc0
 80147a8:	f009 0303 	and.w	r3, r9, #3
 80147ac:	fa0f f68b 	sxth.w	r6, fp
 80147b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80147b2:	ea4f 034a 	mov.w	r3, sl, lsl #1
 80147b6:	2400      	movs	r4, #0
 80147b8:	9316      	str	r3, [sp, #88]	; 0x58
 80147ba:	ee08 aa90 	vmov	s17, sl
 80147be:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80147c2:	ee09 9a10 	vmov	s18, r9
 80147c6:	ee0b 6a90 	vmov	s23, r6
 80147ca:	932c      	str	r3, [sp, #176]	; 0xb0
 80147cc:	4625      	mov	r5, r4
 80147ce:	a840      	add	r0, sp, #256	; 0x100
 80147d0:	f002 fea6 	bl	8017520 <ai_padding_opt_phase1>
 80147d4:	ee19 3a90 	vmov	r3, s19
 80147d8:	9a72      	ldr	r2, [sp, #456]	; 0x1c8
 80147da:	9910      	ldr	r1, [sp, #64]	; 0x40
 80147dc:	fb03 f305 	mul.w	r3, r3, r5
 80147e0:	fb01 2303 	mla	r3, r1, r3, r2
 80147e4:	931d      	str	r3, [sp, #116]	; 0x74
 80147e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80147e8:	b953      	cbnz	r3, 8014800 <forward_lite_conv2d_sssa8_ch+0x748>
 80147ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	f040 8216 	bne.w	8014c1e <forward_lite_conv2d_sssa8_ch+0xb66>
 80147f2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80147f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80147f6:	9866      	ldr	r0, [sp, #408]	; 0x198
 80147f8:	ee1a 1a10 	vmov	r1, s20
 80147fc:	f002 fd80 	bl	8017300 <st_int8_to16_dual_interleaved>
 8014800:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8014802:	2b00      	cmp	r3, #0
 8014804:	f000 8216 	beq.w	8014c34 <forward_lite_conv2d_sssa8_ch+0xb7c>
 8014808:	b2a3      	uxth	r3, r4
 801480a:	9332      	str	r3, [sp, #200]	; 0xc8
 801480c:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8014810:	1a9b      	subs	r3, r3, r2
 8014812:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8014814:	edcd 9a2b 	vstr	s19, [sp, #172]	; 0xac
 8014818:	fb05 3302 	mla	r3, r5, r2, r3
 801481c:	930d      	str	r3, [sp, #52]	; 0x34
 801481e:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8014822:	9312      	str	r3, [sp, #72]	; 0x48
 8014824:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8014826:	9327      	str	r3, [sp, #156]	; 0x9c
 8014828:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801482a:	9318      	str	r3, [sp, #96]	; 0x60
 801482c:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801482e:	932d      	str	r3, [sp, #180]	; 0xb4
 8014830:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014832:	931f      	str	r3, [sp, #124]	; 0x7c
 8014834:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014836:	9324      	str	r3, [sp, #144]	; 0x90
 8014838:	9b77      	ldr	r3, [sp, #476]	; 0x1dc
 801483a:	9321      	str	r3, [sp, #132]	; 0x84
 801483c:	eeb0 ba6a 	vmov.f32	s22, s21
 8014840:	9a44      	ldr	r2, [sp, #272]	; 0x110
 8014842:	9241      	str	r2, [sp, #260]	; 0x104
 8014844:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014846:	9242      	str	r2, [sp, #264]	; 0x108
 8014848:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801484a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801484c:	9340      	str	r3, [sp, #256]	; 0x100
 801484e:	2a00      	cmp	r2, #0
 8014850:	f000 8193 	beq.w	8014b7a <forward_lite_conv2d_sssa8_ch+0xac2>
 8014854:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014856:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8014858:	4252      	negs	r2, r2
 801485a:	b292      	uxth	r2, r2
 801485c:	920b      	str	r2, [sp, #44]	; 0x2c
 801485e:	2100      	movs	r1, #0
 8014860:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014862:	9217      	str	r2, [sp, #92]	; 0x5c
 8014864:	460a      	mov	r2, r1
 8014866:	2b00      	cmp	r3, #0
 8014868:	d070      	beq.n	801494c <forward_lite_conv2d_sssa8_ch+0x894>
 801486a:	3b01      	subs	r3, #1
 801486c:	9340      	str	r3, [sp, #256]	; 0x100
 801486e:	2301      	movs	r3, #1
 8014870:	f8ad 3126 	strh.w	r3, [sp, #294]	; 0x126
 8014874:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014876:	980d      	ldr	r0, [sp, #52]	; 0x34
 8014878:	4283      	cmp	r3, r0
 801487a:	da74      	bge.n	8014966 <forward_lite_conv2d_sssa8_ch+0x8ae>
 801487c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801487e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014880:	f8dd 90b0 	ldr.w	r9, [sp, #176]	; 0xb0
 8014884:	fb02 3200 	mla	r2, r2, r0, r3
 8014888:	b28b      	uxth	r3, r1
 801488a:	930e      	str	r3, [sp, #56]	; 0x38
 801488c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801488e:	1ad5      	subs	r5, r2, r3
 8014890:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8014894:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014896:	ee19 7a10 	vmov	r7, s18
 801489a:	ee1b 8a90 	vmov	r8, s23
 801489e:	461e      	mov	r6, r3
 80148a0:	4693      	mov	fp, r2
 80148a2:	455d      	cmp	r5, fp
 80148a4:	dd39      	ble.n	801491a <forward_lite_conv2d_sssa8_ch+0x862>
 80148a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80148a8:	2e00      	cmp	r6, #0
 80148aa:	fb03 f202 	mul.w	r2, r3, r2
 80148ae:	920a      	str	r2, [sp, #40]	; 0x28
 80148b0:	f2c0 813a 	blt.w	8014b28 <forward_lite_conv2d_sssa8_ch+0xa70>
 80148b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80148b6:	2a00      	cmp	r2, #0
 80148b8:	f000 80e1 	beq.w	8014a7e <forward_lite_conv2d_sssa8_ch+0x9c6>
 80148bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80148be:	429a      	cmp	r2, r3
 80148c0:	46da      	mov	sl, fp
 80148c2:	f340 809c 	ble.w	80149fe <forward_lite_conv2d_sssa8_ch+0x946>
 80148c6:	46dc      	mov	ip, fp
 80148c8:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
 80148cc:	46b3      	mov	fp, r6
 80148ce:	e011      	b.n	80148f4 <forward_lite_conv2d_sssa8_ch+0x83c>
 80148d0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80148d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80148d4:	4566      	cmp	r6, ip
 80148d6:	4463      	add	r3, ip
 80148d8:	dd12      	ble.n	8014900 <forward_lite_conv2d_sssa8_ch+0x848>
 80148da:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80148dc:	f10a 0a01 	add.w	sl, sl, #1
 80148e0:	fa0f fa8a 	sxth.w	sl, sl
 80148e4:	fb07 0003 	mla	r0, r7, r3, r0
 80148e8:	f002 fb7e 	bl	8016fe8 <st_int8_to16_no_shift>
 80148ec:	4555      	cmp	r5, sl
 80148ee:	444c      	add	r4, r9
 80148f0:	46d4      	mov	ip, sl
 80148f2:	dd0f      	ble.n	8014914 <forward_lite_conv2d_sssa8_ch+0x85c>
 80148f4:	f1ba 0f00 	cmp.w	sl, #0
 80148f8:	463a      	mov	r2, r7
 80148fa:	4621      	mov	r1, r4
 80148fc:	4640      	mov	r0, r8
 80148fe:	dae7      	bge.n	80148d0 <forward_lite_conv2d_sssa8_ch+0x818>
 8014900:	f10a 0a01 	add.w	sl, sl, #1
 8014904:	fa0f fa8a 	sxth.w	sl, sl
 8014908:	f005 fdda 	bl	801a4c0 <arm_fill_q15>
 801490c:	4555      	cmp	r5, sl
 801490e:	444c      	add	r4, r9
 8014910:	46d4      	mov	ip, sl
 8014912:	dcef      	bgt.n	80148f4 <forward_lite_conv2d_sssa8_ch+0x83c>
 8014914:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014916:	465e      	mov	r6, fp
 8014918:	469b      	mov	fp, r3
 801491a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801491c:	3601      	adds	r6, #1
 801491e:	b236      	sxth	r6, r6
 8014920:	4296      	cmp	r6, r2
 8014922:	4633      	mov	r3, r6
 8014924:	dbbd      	blt.n	80148a2 <forward_lite_conv2d_sssa8_ch+0x7ea>
 8014926:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014928:	42a3      	cmp	r3, r4
 801492a:	d021      	beq.n	8014970 <forward_lite_conv2d_sssa8_ch+0x8b8>
 801492c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801492e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014930:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014932:	4413      	add	r3, r2
 8014934:	b29b      	uxth	r3, r3
 8014936:	3101      	adds	r1, #1
 8014938:	930b      	str	r3, [sp, #44]	; 0x2c
 801493a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801493c:	b209      	sxth	r1, r1
 801493e:	4299      	cmp	r1, r3
 8014940:	460a      	mov	r2, r1
 8014942:	f280 80ff 	bge.w	8014b44 <forward_lite_conv2d_sssa8_ch+0xa8c>
 8014946:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8014948:	2b00      	cmp	r3, #0
 801494a:	d18e      	bne.n	801486a <forward_lite_conv2d_sssa8_ch+0x7b2>
 801494c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801494e:	2b00      	cmp	r3, #0
 8014950:	d162      	bne.n	8014a18 <forward_lite_conv2d_sssa8_ch+0x960>
 8014952:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8014954:	980d      	ldr	r0, [sp, #52]	; 0x34
 8014956:	3b01      	subs	r3, #1
 8014958:	9342      	str	r3, [sp, #264]	; 0x108
 801495a:	2301      	movs	r3, #1
 801495c:	f8ad 3126 	strh.w	r3, [sp, #294]	; 0x126
 8014960:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014962:	4283      	cmp	r3, r0
 8014964:	db8a      	blt.n	801487c <forward_lite_conv2d_sssa8_ch+0x7c4>
 8014966:	b28b      	uxth	r3, r1
 8014968:	930e      	str	r3, [sp, #56]	; 0x38
 801496a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801496c:	42a3      	cmp	r3, r4
 801496e:	d1dd      	bne.n	801492c <forward_lite_conv2d_sssa8_ch+0x874>
 8014970:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014972:	9308      	str	r3, [sp, #32]
 8014974:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014976:	9307      	str	r3, [sp, #28]
 8014978:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801497a:	9306      	str	r3, [sp, #24]
 801497c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801497e:	9305      	str	r3, [sp, #20]
 8014980:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014982:	9304      	str	r3, [sp, #16]
 8014984:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014986:	9303      	str	r3, [sp, #12]
 8014988:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801498a:	9302      	str	r3, [sp, #8]
 801498c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801498e:	9300      	str	r3, [sp, #0]
 8014990:	2300      	movs	r3, #0
 8014992:	ee1b 2a10 	vmov	r2, s22
 8014996:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014998:	9301      	str	r3, [sp, #4]
 801499a:	ee1a 0a10 	vmov	r0, s20
 801499e:	ee19 3a90 	vmov	r3, s19
 80149a2:	f002 fdd7 	bl	8017554 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 80149a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80149aa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80149ac:	9017      	str	r0, [sp, #92]	; 0x5c
 80149ae:	4413      	add	r3, r2
 80149b0:	b29b      	uxth	r3, r3
 80149b2:	3101      	adds	r1, #1
 80149b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80149b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80149b8:	b209      	sxth	r1, r1
 80149ba:	4299      	cmp	r1, r3
 80149bc:	460a      	mov	r2, r1
 80149be:	f280 80dc 	bge.w	8014b7a <forward_lite_conv2d_sssa8_ch+0xac2>
 80149c2:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80149c4:	e7bf      	b.n	8014946 <forward_lite_conv2d_sssa8_ch+0x88e>
 80149c6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80149c8:	ee19 1a90 	vmov	r1, s19
 80149cc:	fb01 f302 	mul.w	r3, r1, r2
 80149d0:	42a3      	cmp	r3, r4
 80149d2:	f73f ac30 	bgt.w	8014236 <forward_lite_conv2d_sssa8_ch+0x17e>
 80149d6:	f019 0f03 	tst.w	r9, #3
 80149da:	972e      	str	r7, [sp, #184]	; 0xb8
 80149dc:	f040 812d 	bne.w	8014c3a <forward_lite_conv2d_sssa8_ch+0xb82>
 80149e0:	ee19 3a90 	vmov	r3, s19
 80149e4:	ee1a 1a10 	vmov	r1, s20
 80149e8:	9866      	ldr	r0, [sp, #408]	; 0x198
 80149ea:	f002 fc89 	bl	8017300 <st_int8_to16_dual_interleaved>
 80149ee:	e424      	b.n	801423a <forward_lite_conv2d_sssa8_ch+0x182>
 80149f0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80149f2:	4603      	mov	r3, r0
 80149f4:	fb01 f303 	mul.w	r3, r1, r3
 80149f8:	931c      	str	r3, [sp, #112]	; 0x70
 80149fa:	f7ff bb9c 	b.w	8014136 <forward_lite_conv2d_sssa8_ch+0x7e>
 80149fe:	f10a 0a01 	add.w	sl, sl, #1
 8014a02:	4621      	mov	r1, r4
 8014a04:	463a      	mov	r2, r7
 8014a06:	4640      	mov	r0, r8
 8014a08:	fa0f fa8a 	sxth.w	sl, sl
 8014a0c:	f005 fd58 	bl	801a4c0 <arm_fill_q15>
 8014a10:	4555      	cmp	r5, sl
 8014a12:	444c      	add	r4, r9
 8014a14:	dcf3      	bgt.n	80149fe <forward_lite_conv2d_sssa8_ch+0x946>
 8014a16:	e780      	b.n	801491a <forward_lite_conv2d_sssa8_ch+0x862>
 8014a18:	3b01      	subs	r3, #1
 8014a1a:	9341      	str	r3, [sp, #260]	; 0x104
 8014a1c:	f8bd 3124 	ldrh.w	r3, [sp, #292]	; 0x124
 8014a20:	f8ad 3126 	strh.w	r3, [sp, #294]	; 0x126
 8014a24:	2b01      	cmp	r3, #1
 8014a26:	f43f af25 	beq.w	8014874 <forward_lite_conv2d_sssa8_ch+0x7bc>
 8014a2a:	b28b      	uxth	r3, r1
 8014a2c:	930e      	str	r3, [sp, #56]	; 0x38
 8014a2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a30:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d154      	bne.n	8014ae2 <forward_lite_conv2d_sssa8_ch+0xa2a>
 8014a38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014a3a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014a3c:	428b      	cmp	r3, r1
 8014a3e:	f6bf af72 	bge.w	8014926 <forward_lite_conv2d_sssa8_ch+0x86e>
 8014a42:	ee18 2a90 	vmov	r2, s17
 8014a46:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 8014a4a:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8014a4e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8014a50:	ee19 8a10 	vmov	r8, s18
 8014a54:	46a2      	mov	sl, r4
 8014a56:	461e      	mov	r6, r3
 8014a58:	4618      	mov	r0, r3
 8014a5a:	460c      	mov	r4, r1
 8014a5c:	fb00 5007 	mla	r0, r0, r7, r5
 8014a60:	3601      	adds	r6, #1
 8014a62:	fb08 9000 	mla	r0, r8, r0, r9
 8014a66:	4651      	mov	r1, sl
 8014a68:	b236      	sxth	r6, r6
 8014a6a:	920a      	str	r2, [sp, #40]	; 0x28
 8014a6c:	f002 fb1c 	bl	80170a8 <st_int8_to16_no_shift_interleaved>
 8014a70:	42a6      	cmp	r6, r4
 8014a72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a74:	44da      	add	sl, fp
 8014a76:	4630      	mov	r0, r6
 8014a78:	dbf0      	blt.n	8014a5c <forward_lite_conv2d_sssa8_ch+0x9a4>
 8014a7a:	4654      	mov	r4, sl
 8014a7c:	e753      	b.n	8014926 <forward_lite_conv2d_sssa8_ch+0x86e>
 8014a7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014a80:	429a      	cmp	r2, r3
 8014a82:	46da      	mov	sl, fp
 8014a84:	dd20      	ble.n	8014ac8 <forward_lite_conv2d_sssa8_ch+0xa10>
 8014a86:	46dc      	mov	ip, fp
 8014a88:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
 8014a8c:	46b3      	mov	fp, r6
 8014a8e:	e012      	b.n	8014ab6 <forward_lite_conv2d_sssa8_ch+0x9fe>
 8014a90:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8014a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a94:	4566      	cmp	r6, ip
 8014a96:	4463      	add	r3, ip
 8014a98:	dd13      	ble.n	8014ac2 <forward_lite_conv2d_sssa8_ch+0xa0a>
 8014a9a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8014a9c:	fb07 0003 	mla	r0, r7, r3, r0
 8014aa0:	f002 fb02 	bl	80170a8 <st_int8_to16_no_shift_interleaved>
 8014aa4:	f10a 0a01 	add.w	sl, sl, #1
 8014aa8:	fa0f fa8a 	sxth.w	sl, sl
 8014aac:	4555      	cmp	r5, sl
 8014aae:	444c      	add	r4, r9
 8014ab0:	46d4      	mov	ip, sl
 8014ab2:	f77f af2f 	ble.w	8014914 <forward_lite_conv2d_sssa8_ch+0x85c>
 8014ab6:	f1ba 0f00 	cmp.w	sl, #0
 8014aba:	4621      	mov	r1, r4
 8014abc:	463a      	mov	r2, r7
 8014abe:	4640      	mov	r0, r8
 8014ac0:	dae6      	bge.n	8014a90 <forward_lite_conv2d_sssa8_ch+0x9d8>
 8014ac2:	f005 fcfd 	bl	801a4c0 <arm_fill_q15>
 8014ac6:	e7ed      	b.n	8014aa4 <forward_lite_conv2d_sssa8_ch+0x9ec>
 8014ac8:	f10a 0a01 	add.w	sl, sl, #1
 8014acc:	4621      	mov	r1, r4
 8014ace:	463a      	mov	r2, r7
 8014ad0:	4640      	mov	r0, r8
 8014ad2:	fa0f fa8a 	sxth.w	sl, sl
 8014ad6:	f005 fcf3 	bl	801a4c0 <arm_fill_q15>
 8014ada:	4555      	cmp	r5, sl
 8014adc:	444c      	add	r4, r9
 8014ade:	dcf3      	bgt.n	8014ac8 <forward_lite_conv2d_sssa8_ch+0xa10>
 8014ae0:	e71b      	b.n	801491a <forward_lite_conv2d_sssa8_ch+0x862>
 8014ae2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014ae4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014ae6:	428b      	cmp	r3, r1
 8014ae8:	f6bf af1d 	bge.w	8014926 <forward_lite_conv2d_sssa8_ch+0x86e>
 8014aec:	ee18 2a90 	vmov	r2, s17
 8014af0:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 8014af4:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8014af8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8014afa:	ee19 8a10 	vmov	r8, s18
 8014afe:	46a2      	mov	sl, r4
 8014b00:	461e      	mov	r6, r3
 8014b02:	4618      	mov	r0, r3
 8014b04:	460c      	mov	r4, r1
 8014b06:	fb00 5007 	mla	r0, r0, r7, r5
 8014b0a:	3601      	adds	r6, #1
 8014b0c:	fb08 9000 	mla	r0, r8, r0, r9
 8014b10:	4651      	mov	r1, sl
 8014b12:	b236      	sxth	r6, r6
 8014b14:	920a      	str	r2, [sp, #40]	; 0x28
 8014b16:	f002 fa67 	bl	8016fe8 <st_int8_to16_no_shift>
 8014b1a:	42a6      	cmp	r6, r4
 8014b1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014b1e:	44da      	add	sl, fp
 8014b20:	4630      	mov	r0, r6
 8014b22:	dbf0      	blt.n	8014b06 <forward_lite_conv2d_sssa8_ch+0xa4e>
 8014b24:	4654      	mov	r4, sl
 8014b26:	e6fe      	b.n	8014926 <forward_lite_conv2d_sssa8_ch+0x86e>
 8014b28:	46da      	mov	sl, fp
 8014b2a:	f10a 0a01 	add.w	sl, sl, #1
 8014b2e:	4621      	mov	r1, r4
 8014b30:	463a      	mov	r2, r7
 8014b32:	4640      	mov	r0, r8
 8014b34:	fa0f fa8a 	sxth.w	sl, sl
 8014b38:	f005 fcc2 	bl	801a4c0 <arm_fill_q15>
 8014b3c:	45aa      	cmp	sl, r5
 8014b3e:	444c      	add	r4, r9
 8014b40:	dbf3      	blt.n	8014b2a <forward_lite_conv2d_sssa8_ch+0xa72>
 8014b42:	e6ea      	b.n	801491a <forward_lite_conv2d_sssa8_ch+0x862>
 8014b44:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014b46:	428c      	cmp	r4, r1
 8014b48:	d017      	beq.n	8014b7a <forward_lite_conv2d_sssa8_ch+0xac2>
 8014b4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014b4c:	9307      	str	r3, [sp, #28]
 8014b4e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014b50:	9306      	str	r3, [sp, #24]
 8014b52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014b54:	9305      	str	r3, [sp, #20]
 8014b56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b58:	9304      	str	r3, [sp, #16]
 8014b5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014b5c:	9303      	str	r3, [sp, #12]
 8014b5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014b60:	9302      	str	r3, [sp, #8]
 8014b62:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014b64:	9301      	str	r3, [sp, #4]
 8014b66:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014b68:	9300      	str	r3, [sp, #0]
 8014b6a:	ee1b 2a10 	vmov	r2, s22
 8014b6e:	ee19 3a90 	vmov	r3, s19
 8014b72:	ee1a 0a10 	vmov	r0, s20
 8014b76:	f003 f8e9 	bl	8017d4c <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8014b7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014b7c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8014b7e:	991d      	ldr	r1, [sp, #116]	; 0x74
 8014b80:	1a9b      	subs	r3, r3, r2
 8014b82:	b29b      	uxth	r3, r3
 8014b84:	4293      	cmp	r3, r2
 8014b86:	932b      	str	r3, [sp, #172]	; 0xac
 8014b88:	bf28      	it	cs
 8014b8a:	4613      	movcs	r3, r2
 8014b8c:	4411      	add	r1, r2
 8014b8e:	b29b      	uxth	r3, r3
 8014b90:	911d      	str	r1, [sp, #116]	; 0x74
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d03a      	beq.n	8014c0c <forward_lite_conv2d_sssa8_ch+0xb54>
 8014b96:	ee1b 4a10 	vmov	r4, s22
 8014b9a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8014b9e:	ee0b 4a10 	vmov	s22, r4
 8014ba2:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8014ba4:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8014ba6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014ba8:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 8014bac:	9424      	str	r4, [sp, #144]	; 0x90
 8014bae:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8014bb0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8014bb4:	9421      	str	r4, [sp, #132]	; 0x84
 8014bb6:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8014bb8:	fb01 0002 	mla	r0, r1, r2, r0
 8014bbc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014bc0:	921f      	str	r2, [sp, #124]	; 0x7c
 8014bc2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014bc4:	902d      	str	r0, [sp, #180]	; 0xb4
 8014bc6:	bb1a      	cbnz	r2, 8014c10 <forward_lite_conv2d_sssa8_ch+0xb58>
 8014bc8:	460a      	mov	r2, r1
 8014bca:	ee1a 1a10 	vmov	r1, s20
 8014bce:	9318      	str	r3, [sp, #96]	; 0x60
 8014bd0:	f002 fb96 	bl	8017300 <st_int8_to16_dual_interleaved>
 8014bd4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014bd6:	3b01      	subs	r3, #1
 8014bd8:	b29b      	uxth	r3, r3
 8014bda:	461a      	mov	r2, r3
 8014bdc:	9327      	str	r3, [sp, #156]	; 0x9c
 8014bde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014be2:	429a      	cmp	r2, r3
 8014be4:	f47f ae2c 	bne.w	8014840 <forward_lite_conv2d_sssa8_ch+0x788>
 8014be8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8014bea:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8014bec:	9c32      	ldr	r4, [sp, #200]	; 0xc8
 8014bee:	4413      	add	r3, r2
 8014bf0:	b29b      	uxth	r3, r3
 8014bf2:	3401      	adds	r4, #1
 8014bf4:	9330      	str	r3, [sp, #192]	; 0xc0
 8014bf6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014bf8:	b224      	sxth	r4, r4
 8014bfa:	429c      	cmp	r4, r3
 8014bfc:	4625      	mov	r5, r4
 8014bfe:	f6ff ade6 	blt.w	80147ce <forward_lite_conv2d_sssa8_ch+0x716>
 8014c02:	b055      	add	sp, #340	; 0x154
 8014c04:	ecbd 8b08 	vpop	{d8-d11}
 8014c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c0c:	9318      	str	r3, [sp, #96]	; 0x60
 8014c0e:	e7e1      	b.n	8014bd4 <forward_lite_conv2d_sssa8_ch+0xb1c>
 8014c10:	460a      	mov	r2, r1
 8014c12:	ee1a 1a10 	vmov	r1, s20
 8014c16:	9318      	str	r3, [sp, #96]	; 0x60
 8014c18:	f002 fa88 	bl	801712c <st_int8_to16_dual>
 8014c1c:	e7da      	b.n	8014bd4 <forward_lite_conv2d_sssa8_ch+0xb1c>
 8014c1e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8014c20:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014c22:	9866      	ldr	r0, [sp, #408]	; 0x198
 8014c24:	ee1a 1a10 	vmov	r1, s20
 8014c28:	f002 fa80 	bl	801712c <st_int8_to16_dual>
 8014c2c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	f47f adea 	bne.w	8014808 <forward_lite_conv2d_sssa8_ch+0x750>
 8014c34:	b2a3      	uxth	r3, r4
 8014c36:	9332      	str	r3, [sp, #200]	; 0xc8
 8014c38:	e7d6      	b.n	8014be8 <forward_lite_conv2d_sssa8_ch+0xb30>
 8014c3a:	ee19 3a90 	vmov	r3, s19
 8014c3e:	ee1a 1a10 	vmov	r1, s20
 8014c42:	9866      	ldr	r0, [sp, #408]	; 0x198
 8014c44:	f002 fa72 	bl	801712c <st_int8_to16_dual>
 8014c48:	f7ff baf7 	b.w	801423a <forward_lite_conv2d_sssa8_ch+0x182>

08014c4c <forward_lite_maxpool_is8os8_scalepos>:
 8014c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c50:	b095      	sub	sp, #84	; 0x54
 8014c52:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014c56:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 8014c5a:	910d      	str	r1, [sp, #52]	; 0x34
 8014c5c:	f8bd 1080 	ldrh.w	r1, [sp, #128]	; 0x80
 8014c60:	910e      	str	r1, [sp, #56]	; 0x38
 8014c62:	f8bd 1084 	ldrh.w	r1, [sp, #132]	; 0x84
 8014c66:	910f      	str	r1, [sp, #60]	; 0x3c
 8014c68:	f8bd 1088 	ldrh.w	r1, [sp, #136]	; 0x88
 8014c6c:	9110      	str	r1, [sp, #64]	; 0x40
 8014c6e:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 8014c72:	f99d 009c 	ldrsb.w	r0, [sp, #156]	; 0x9c
 8014c76:	930c      	str	r3, [sp, #48]	; 0x30
 8014c78:	9111      	str	r1, [sp, #68]	; 0x44
 8014c7a:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 8014c7e:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 8014c82:	9112      	str	r1, [sp, #72]	; 0x48
 8014c84:	9001      	str	r0, [sp, #4]
 8014c86:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 8014c8a:	f99d 00a0 	ldrsb.w	r0, [sp, #160]	; 0xa0
 8014c8e:	f8bd a078 	ldrh.w	sl, [sp, #120]	; 0x78
 8014c92:	9206      	str	r2, [sp, #24]
 8014c94:	9313      	str	r3, [sp, #76]	; 0x4c
 8014c96:	9107      	str	r1, [sp, #28]
 8014c98:	9003      	str	r0, [sp, #12]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	f000 80ad 	beq.w	8014dfa <forward_lite_maxpool_is8os8_scalepos+0x1ae>
 8014ca0:	2900      	cmp	r1, #0
 8014ca2:	f000 80aa 	beq.w	8014dfa <forward_lite_maxpool_is8os8_scalepos+0x1ae>
 8014ca6:	f1ba 0f00 	cmp.w	sl, #0
 8014caa:	f000 80a6 	beq.w	8014dfa <forward_lite_maxpool_is8os8_scalepos+0x1ae>
 8014cae:	2300      	movs	r3, #0
 8014cb0:	ed9f 6a56 	vldr	s12, [pc, #344]	; 8014e0c <forward_lite_maxpool_is8os8_scalepos+0x1c0>
 8014cb4:	9304      	str	r3, [sp, #16]
 8014cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014cba:	fb02 fb0a 	mul.w	fp, r2, sl
 8014cbe:	9904      	ldr	r1, [sp, #16]
 8014cc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014cc2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014cc4:	eddd 7a03 	vldr	s15, [sp, #12]
 8014cc8:	fb01 f303 	mul.w	r3, r1, r3
 8014ccc:	1a1a      	subs	r2, r3, r0
 8014cce:	1ac3      	subs	r3, r0, r3
 8014cd0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014cd2:	2a00      	cmp	r2, #0
 8014cd4:	bfd8      	it	le
 8014cd6:	4699      	movle	r9, r3
 8014cd8:	4403      	add	r3, r0
 8014cda:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014cdc:	bfc8      	it	gt
 8014cde:	f04f 0900 	movgt.w	r9, #0
 8014ce2:	4298      	cmp	r0, r3
 8014ce4:	bfa8      	it	ge
 8014ce6:	4618      	movge	r0, r3
 8014ce8:	9b06      	ldr	r3, [sp, #24]
 8014cea:	444a      	add	r2, r9
 8014cec:	fb03 f302 	mul.w	r3, r3, r2
 8014cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8014cf2:	9b07      	ldr	r3, [sp, #28]
 8014cf4:	fb01 f303 	mul.w	r3, r1, r3
 8014cf8:	9308      	str	r3, [sp, #32]
 8014cfa:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8014cfe:	2300      	movs	r3, #0
 8014d00:	4684      	mov	ip, r0
 8014d02:	9305      	str	r3, [sp, #20]
 8014d04:	9905      	ldr	r1, [sp, #20]
 8014d06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014d08:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8014d0a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014d0c:	fb03 f201 	mul.w	r2, r3, r1
 8014d10:	1a13      	subs	r3, r2, r0
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	eba0 0202 	sub.w	r2, r0, r2
 8014d18:	bfd8      	it	le
 8014d1a:	4617      	movle	r7, r2
 8014d1c:	9806      	ldr	r0, [sp, #24]
 8014d1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d20:	441a      	add	r2, r3
 8014d22:	eba0 0303 	sub.w	r3, r0, r3
 8014d26:	bfc8      	it	gt
 8014d28:	2700      	movgt	r7, #0
 8014d2a:	429c      	cmp	r4, r3
 8014d2c:	bfa8      	it	ge
 8014d2e:	461c      	movge	r4, r3
 8014d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d32:	443a      	add	r2, r7
 8014d34:	fb0a 3302 	mla	r3, sl, r2, r3
 8014d38:	9302      	str	r3, [sp, #8]
 8014d3a:	9b08      	ldr	r3, [sp, #32]
 8014d3c:	eb01 0803 	add.w	r8, r1, r3
 8014d40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d42:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8014d46:	fb0a 3808 	mla	r8, sl, r8, r3
 8014d4a:	f04f 0e00 	mov.w	lr, #0
 8014d4e:	45e1      	cmp	r9, ip
 8014d50:	da59      	bge.n	8014e06 <forward_lite_maxpool_is8os8_scalepos+0x1ba>
 8014d52:	9b02      	ldr	r3, [sp, #8]
 8014d54:	464d      	mov	r5, r9
 8014d56:	eb03 060e 	add.w	r6, r3, lr
 8014d5a:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8014d5e:	42a7      	cmp	r7, r4
 8014d60:	da0a      	bge.n	8014d78 <forward_lite_maxpool_is8os8_scalepos+0x12c>
 8014d62:	4632      	mov	r2, r6
 8014d64:	463b      	mov	r3, r7
 8014d66:	f992 0000 	ldrsb.w	r0, [r2]
 8014d6a:	3301      	adds	r3, #1
 8014d6c:	4281      	cmp	r1, r0
 8014d6e:	bfb8      	it	lt
 8014d70:	4601      	movlt	r1, r0
 8014d72:	429c      	cmp	r4, r3
 8014d74:	4452      	add	r2, sl
 8014d76:	d1f6      	bne.n	8014d66 <forward_lite_maxpool_is8os8_scalepos+0x11a>
 8014d78:	3501      	adds	r5, #1
 8014d7a:	45ac      	cmp	ip, r5
 8014d7c:	445e      	add	r6, fp
 8014d7e:	d1ee      	bne.n	8014d5e <forward_lite_maxpool_is8os8_scalepos+0x112>
 8014d80:	eeb4 0a66 	vcmp.f32	s0, s13
 8014d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d88:	d103      	bne.n	8014d92 <forward_lite_maxpool_is8os8_scalepos+0x146>
 8014d8a:	9b01      	ldr	r3, [sp, #4]
 8014d8c:	9a03      	ldr	r2, [sp, #12]
 8014d8e:	4293      	cmp	r3, r2
 8014d90:	d036      	beq.n	8014e00 <forward_lite_maxpool_is8os8_scalepos+0x1b4>
 8014d92:	9b01      	ldr	r3, [sp, #4]
 8014d94:	1ac9      	subs	r1, r1, r3
 8014d96:	ee07 1a90 	vmov	s15, r1
 8014d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014d9e:	eeb0 7a65 	vmov.f32	s14, s11
 8014da2:	eea7 7a80 	vfma.f32	s14, s15, s0
 8014da6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dae:	bfb4      	ite	lt
 8014db0:	eef0 7a46 	vmovlt.f32	s15, s12
 8014db4:	eef0 7a45 	vmovge.f32	s15, s10
 8014db8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014dbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014dc0:	ee17 3a90 	vmov	r3, s15
 8014dc4:	f303 0307 	ssat	r3, #8, r3
 8014dc8:	f888 3000 	strb.w	r3, [r8]
 8014dcc:	f10e 0e01 	add.w	lr, lr, #1
 8014dd0:	fa1f f38e 	uxth.w	r3, lr
 8014dd4:	459a      	cmp	sl, r3
 8014dd6:	f108 0801 	add.w	r8, r8, #1
 8014dda:	d8b8      	bhi.n	8014d4e <forward_lite_maxpool_is8os8_scalepos+0x102>
 8014ddc:	9b05      	ldr	r3, [sp, #20]
 8014dde:	9a07      	ldr	r2, [sp, #28]
 8014de0:	3301      	adds	r3, #1
 8014de2:	b29b      	uxth	r3, r3
 8014de4:	429a      	cmp	r2, r3
 8014de6:	9305      	str	r3, [sp, #20]
 8014de8:	d88c      	bhi.n	8014d04 <forward_lite_maxpool_is8os8_scalepos+0xb8>
 8014dea:	9b04      	ldr	r3, [sp, #16]
 8014dec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014dee:	3301      	adds	r3, #1
 8014df0:	b29b      	uxth	r3, r3
 8014df2:	429a      	cmp	r2, r3
 8014df4:	9304      	str	r3, [sp, #16]
 8014df6:	f63f af62 	bhi.w	8014cbe <forward_lite_maxpool_is8os8_scalepos+0x72>
 8014dfa:	b015      	add	sp, #84	; 0x54
 8014dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e00:	f888 1000 	strb.w	r1, [r8]
 8014e04:	e7e2      	b.n	8014dcc <forward_lite_maxpool_is8os8_scalepos+0x180>
 8014e06:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8014e0a:	e7b9      	b.n	8014d80 <forward_lite_maxpool_is8os8_scalepos+0x134>
 8014e0c:	befffffc 	.word	0xbefffffc

08014e10 <forward_lite_maxpool_is8os8_scaleneg>:
 8014e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e14:	b095      	sub	sp, #84	; 0x54
 8014e16:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014e1a:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 8014e1e:	910d      	str	r1, [sp, #52]	; 0x34
 8014e20:	f8bd 1080 	ldrh.w	r1, [sp, #128]	; 0x80
 8014e24:	910e      	str	r1, [sp, #56]	; 0x38
 8014e26:	f8bd 1084 	ldrh.w	r1, [sp, #132]	; 0x84
 8014e2a:	910f      	str	r1, [sp, #60]	; 0x3c
 8014e2c:	f8bd 1088 	ldrh.w	r1, [sp, #136]	; 0x88
 8014e30:	9110      	str	r1, [sp, #64]	; 0x40
 8014e32:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 8014e36:	f99d 009c 	ldrsb.w	r0, [sp, #156]	; 0x9c
 8014e3a:	930c      	str	r3, [sp, #48]	; 0x30
 8014e3c:	9111      	str	r1, [sp, #68]	; 0x44
 8014e3e:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 8014e42:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 8014e46:	9112      	str	r1, [sp, #72]	; 0x48
 8014e48:	9001      	str	r0, [sp, #4]
 8014e4a:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 8014e4e:	f99d 00a0 	ldrsb.w	r0, [sp, #160]	; 0xa0
 8014e52:	f8bd a078 	ldrh.w	sl, [sp, #120]	; 0x78
 8014e56:	9206      	str	r2, [sp, #24]
 8014e58:	9313      	str	r3, [sp, #76]	; 0x4c
 8014e5a:	9107      	str	r1, [sp, #28]
 8014e5c:	9003      	str	r0, [sp, #12]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	f000 80ac 	beq.w	8014fbc <forward_lite_maxpool_is8os8_scaleneg+0x1ac>
 8014e64:	2900      	cmp	r1, #0
 8014e66:	f000 80a9 	beq.w	8014fbc <forward_lite_maxpool_is8os8_scaleneg+0x1ac>
 8014e6a:	f1ba 0f00 	cmp.w	sl, #0
 8014e6e:	f000 80a5 	beq.w	8014fbc <forward_lite_maxpool_is8os8_scaleneg+0x1ac>
 8014e72:	2300      	movs	r3, #0
 8014e74:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8014fcc <forward_lite_maxpool_is8os8_scaleneg+0x1bc>
 8014e78:	9304      	str	r3, [sp, #16]
 8014e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014e7e:	fb02 fb0a 	mul.w	fp, r2, sl
 8014e82:	9904      	ldr	r1, [sp, #16]
 8014e84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014e86:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014e88:	eddd 7a03 	vldr	s15, [sp, #12]
 8014e8c:	fb01 f303 	mul.w	r3, r1, r3
 8014e90:	1a1a      	subs	r2, r3, r0
 8014e92:	1ac3      	subs	r3, r0, r3
 8014e94:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014e96:	2a00      	cmp	r2, #0
 8014e98:	bfd8      	it	le
 8014e9a:	4699      	movle	r9, r3
 8014e9c:	4403      	add	r3, r0
 8014e9e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014ea0:	bfc8      	it	gt
 8014ea2:	f04f 0900 	movgt.w	r9, #0
 8014ea6:	4298      	cmp	r0, r3
 8014ea8:	bfa8      	it	ge
 8014eaa:	4618      	movge	r0, r3
 8014eac:	9b06      	ldr	r3, [sp, #24]
 8014eae:	444a      	add	r2, r9
 8014eb0:	fb03 f302 	mul.w	r3, r3, r2
 8014eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8014eb6:	9b07      	ldr	r3, [sp, #28]
 8014eb8:	fb01 f303 	mul.w	r3, r1, r3
 8014ebc:	9308      	str	r3, [sp, #32]
 8014ebe:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	4684      	mov	ip, r0
 8014ec6:	9305      	str	r3, [sp, #20]
 8014ec8:	9905      	ldr	r1, [sp, #20]
 8014eca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014ecc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8014ece:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014ed0:	fb03 f201 	mul.w	r2, r3, r1
 8014ed4:	1a13      	subs	r3, r2, r0
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	eba0 0202 	sub.w	r2, r0, r2
 8014edc:	bfd8      	it	le
 8014ede:	4617      	movle	r7, r2
 8014ee0:	9806      	ldr	r0, [sp, #24]
 8014ee2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ee4:	441a      	add	r2, r3
 8014ee6:	eba0 0303 	sub.w	r3, r0, r3
 8014eea:	bfc8      	it	gt
 8014eec:	2700      	movgt	r7, #0
 8014eee:	429c      	cmp	r4, r3
 8014ef0:	bfa8      	it	ge
 8014ef2:	461c      	movge	r4, r3
 8014ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ef6:	443a      	add	r2, r7
 8014ef8:	fb0a 3302 	mla	r3, sl, r2, r3
 8014efc:	9302      	str	r3, [sp, #8]
 8014efe:	9b08      	ldr	r3, [sp, #32]
 8014f00:	eb01 0803 	add.w	r8, r1, r3
 8014f04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014f06:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8014f0a:	fb0a 3808 	mla	r8, sl, r8, r3
 8014f0e:	f04f 0e00 	mov.w	lr, #0
 8014f12:	45e1      	cmp	r9, ip
 8014f14:	da58      	bge.n	8014fc8 <forward_lite_maxpool_is8os8_scaleneg+0x1b8>
 8014f16:	9b02      	ldr	r3, [sp, #8]
 8014f18:	464d      	mov	r5, r9
 8014f1a:	eb03 060e 	add.w	r6, r3, lr
 8014f1e:	217f      	movs	r1, #127	; 0x7f
 8014f20:	42a7      	cmp	r7, r4
 8014f22:	da0a      	bge.n	8014f3a <forward_lite_maxpool_is8os8_scaleneg+0x12a>
 8014f24:	4632      	mov	r2, r6
 8014f26:	463b      	mov	r3, r7
 8014f28:	f992 0000 	ldrsb.w	r0, [r2]
 8014f2c:	3301      	adds	r3, #1
 8014f2e:	4281      	cmp	r1, r0
 8014f30:	bfa8      	it	ge
 8014f32:	4601      	movge	r1, r0
 8014f34:	429c      	cmp	r4, r3
 8014f36:	4452      	add	r2, sl
 8014f38:	d1f6      	bne.n	8014f28 <forward_lite_maxpool_is8os8_scaleneg+0x118>
 8014f3a:	3501      	adds	r5, #1
 8014f3c:	45ac      	cmp	ip, r5
 8014f3e:	445e      	add	r6, fp
 8014f40:	d1ee      	bne.n	8014f20 <forward_lite_maxpool_is8os8_scaleneg+0x110>
 8014f42:	eeb4 0a66 	vcmp.f32	s0, s13
 8014f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f4a:	d103      	bne.n	8014f54 <forward_lite_maxpool_is8os8_scaleneg+0x144>
 8014f4c:	9b01      	ldr	r3, [sp, #4]
 8014f4e:	9a03      	ldr	r2, [sp, #12]
 8014f50:	4293      	cmp	r3, r2
 8014f52:	d036      	beq.n	8014fc2 <forward_lite_maxpool_is8os8_scaleneg+0x1b2>
 8014f54:	9b01      	ldr	r3, [sp, #4]
 8014f56:	1ac9      	subs	r1, r1, r3
 8014f58:	ee07 1a90 	vmov	s15, r1
 8014f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f60:	eeb0 7a65 	vmov.f32	s14, s11
 8014f64:	eea7 7a80 	vfma.f32	s14, s15, s0
 8014f68:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f70:	bfb4      	ite	lt
 8014f72:	eef0 7a46 	vmovlt.f32	s15, s12
 8014f76:	eef0 7a45 	vmovge.f32	s15, s10
 8014f7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014f82:	ee17 3a90 	vmov	r3, s15
 8014f86:	f303 0307 	ssat	r3, #8, r3
 8014f8a:	f888 3000 	strb.w	r3, [r8]
 8014f8e:	f10e 0e01 	add.w	lr, lr, #1
 8014f92:	fa1f f38e 	uxth.w	r3, lr
 8014f96:	459a      	cmp	sl, r3
 8014f98:	f108 0801 	add.w	r8, r8, #1
 8014f9c:	d8b9      	bhi.n	8014f12 <forward_lite_maxpool_is8os8_scaleneg+0x102>
 8014f9e:	9b05      	ldr	r3, [sp, #20]
 8014fa0:	9a07      	ldr	r2, [sp, #28]
 8014fa2:	3301      	adds	r3, #1
 8014fa4:	b29b      	uxth	r3, r3
 8014fa6:	429a      	cmp	r2, r3
 8014fa8:	9305      	str	r3, [sp, #20]
 8014faa:	d88d      	bhi.n	8014ec8 <forward_lite_maxpool_is8os8_scaleneg+0xb8>
 8014fac:	9b04      	ldr	r3, [sp, #16]
 8014fae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014fb0:	3301      	adds	r3, #1
 8014fb2:	b29b      	uxth	r3, r3
 8014fb4:	429a      	cmp	r2, r3
 8014fb6:	9304      	str	r3, [sp, #16]
 8014fb8:	f63f af63 	bhi.w	8014e82 <forward_lite_maxpool_is8os8_scaleneg+0x72>
 8014fbc:	b015      	add	sp, #84	; 0x54
 8014fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fc2:	f888 1000 	strb.w	r1, [r8]
 8014fc6:	e7e2      	b.n	8014f8e <forward_lite_maxpool_is8os8_scaleneg+0x17e>
 8014fc8:	217f      	movs	r1, #127	; 0x7f
 8014fca:	e7ba      	b.n	8014f42 <forward_lite_maxpool_is8os8_scaleneg+0x132>
 8014fcc:	befffffc 	.word	0xbefffffc

08014fd0 <forward_lite_nl_softmax_is8os8>:
 8014fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fd4:	188a      	adds	r2, r1, r2
 8014fd6:	b09b      	sub	sp, #108	; 0x6c
 8014fd8:	4291      	cmp	r1, r2
 8014fda:	9102      	str	r1, [sp, #8]
 8014fdc:	9218      	str	r2, [sp, #96]	; 0x60
 8014fde:	9015      	str	r0, [sp, #84]	; 0x54
 8014fe0:	9303      	str	r3, [sp, #12]
 8014fe2:	f080 82fe 	bcs.w	80155e2 <forward_lite_nl_softmax_is8os8+0x612>
 8014fe6:	461a      	mov	r2, r3
 8014fe8:	3b01      	subs	r3, #1
 8014fea:	18cb      	adds	r3, r1, r3
 8014fec:	9316      	str	r3, [sp, #88]	; 0x58
 8014fee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014ff0:	3b04      	subs	r3, #4
 8014ff2:	9317      	str	r3, [sp, #92]	; 0x5c
 8014ff4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014ff8:	9319      	str	r3, [sp, #100]	; 0x64
 8014ffa:	9a03      	ldr	r2, [sp, #12]
 8014ffc:	9b02      	ldr	r3, [sp, #8]
 8014ffe:	2a01      	cmp	r2, #1
 8015000:	f993 b000 	ldrsb.w	fp, [r3]
 8015004:	f240 8336 	bls.w	8015674 <forward_lite_nl_softmax_is8os8+0x6a4>
 8015008:	9916      	ldr	r1, [sp, #88]	; 0x58
 801500a:	f913 2f01 	ldrsb.w	r2, [r3, #1]!
 801500e:	4593      	cmp	fp, r2
 8015010:	bfb8      	it	lt
 8015012:	4693      	movlt	fp, r2
 8015014:	428b      	cmp	r3, r1
 8015016:	d1f8      	bne.n	801500a <forward_lite_nl_softmax_is8os8+0x3a>
 8015018:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801501a:	445b      	add	r3, fp
 801501c:	9305      	str	r3, [sp, #20]
 801501e:	9b02      	ldr	r3, [sp, #8]
 8015020:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 8015024:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015026:	9301      	str	r3, [sp, #4]
 8015028:	2300      	movs	r3, #0
 801502a:	9304      	str	r3, [sp, #16]
 801502c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801502e:	0fdb      	lsrs	r3, r3, #31
 8015030:	e9cd 3b13 	strd	r3, fp, [sp, #76]	; 0x4c
 8015034:	e168      	b.n	8015308 <forward_lite_nl_softmax_is8os8+0x338>
 8015036:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015038:	48b9      	ldr	r0, [pc, #740]	; (8015320 <forward_lite_nl_softmax_is8os8+0x350>)
 801503a:	9926      	ldr	r1, [sp, #152]	; 0x98
 801503c:	1a9b      	subs	r3, r3, r2
 801503e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8015040:	4093      	lsls	r3, r2
 8015042:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015044:	ebb2 7fd3 	cmp.w	r2, r3, lsr #31
 8015048:	bf06      	itte	eq
 801504a:	f04f 4080 	moveq.w	r0, #1073741824	; 0x40000000
 801504e:	2200      	moveq	r2, #0
 8015050:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8015054:	fbc1 0203 	smlal	r0, r2, r1, r3
 8015058:	2a00      	cmp	r2, #0
 801505a:	da04      	bge.n	8015066 <forward_lite_nl_softmax_is8os8+0x96>
 801505c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015060:	1840      	adds	r0, r0, r1
 8015062:	f142 0200 	adc.w	r2, r2, #0
 8015066:	0fc0      	lsrs	r0, r0, #31
 8015068:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
 801506c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801506e:	429a      	cmp	r2, r3
 8015070:	f000 8168 	beq.w	8015344 <forward_lite_nl_softmax_is8os8+0x374>
 8015074:	f040 457f 	orr.w	r5, r0, #4278190080	; 0xff000000
 8015078:	0169      	lsls	r1, r5, #5
 801507a:	1a2d      	subs	r5, r5, r0
 801507c:	fab0 f080 	clz	r0, r0
 8015080:	f101 5280 	add.w	r2, r1, #268435456	; 0x10000000
 8015084:	0940      	lsrs	r0, r0, #5
 8015086:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801508a:	f04f 0a00 	mov.w	sl, #0
 801508e:	fbc2 3a02 	smlal	r3, sl, r2, r2
 8015092:	1e41      	subs	r1, r0, #1
 8015094:	9200      	str	r2, [sp, #0]
 8015096:	f3c5 7280 	ubfx	r2, r5, #30, #1
 801509a:	9111      	str	r1, [sp, #68]	; 0x44
 801509c:	f1ba 0f00 	cmp.w	sl, #0
 80150a0:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 80150a4:	f1c2 0200 	rsb	r2, r2, #0
 80150a8:	9110      	str	r1, [sp, #64]	; 0x40
 80150aa:	920f      	str	r2, [sp, #60]	; 0x3c
 80150ac:	da05      	bge.n	80150ba <forward_lite_nl_softmax_is8os8+0xea>
 80150ae:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 80150b2:	eb13 030e 	adds.w	r3, r3, lr
 80150b6:	f14a 0a00 	adc.w	sl, sl, #0
 80150ba:	0fdb      	lsrs	r3, r3, #31
 80150bc:	ea43 034a 	orr.w	r3, r3, sl, lsl #1
 80150c0:	fba3 2403 	umull	r2, r4, r3, r3
 80150c4:	ea4f 7aea 	mov.w	sl, sl, asr #31
 80150c8:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
 80150cc:	fb03 f60a 	mul.w	r6, r3, sl
 80150d0:	eb44 0446 	adc.w	r4, r4, r6, lsl #1
 80150d4:	2c00      	cmp	r4, #0
 80150d6:	930e      	str	r3, [sp, #56]	; 0x38
 80150d8:	da04      	bge.n	80150e4 <forward_lite_nl_softmax_is8os8+0x114>
 80150da:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 80150de:	1992      	adds	r2, r2, r6
 80150e0:	f144 0400 	adc.w	r4, r4, #0
 80150e4:	4240      	negs	r0, r0
 80150e6:	0fd2      	lsrs	r2, r2, #31
 80150e8:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 80150ec:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 80150f0:	9c00      	ldr	r4, [sp, #0]
 80150f2:	910c      	str	r1, [sp, #48]	; 0x30
 80150f4:	f002 0103 	and.w	r1, r2, #3
 80150f8:	910d      	str	r1, [sp, #52]	; 0x34
 80150fa:	9900      	ldr	r1, [sp, #0]
 80150fc:	17e0      	asrs	r0, r4, #31
 80150fe:	fb04 fa0a 	mul.w	sl, r4, sl
 8015102:	fb03 aa00 	mla	sl, r3, r0, sl
 8015106:	ea4f 78d3 	mov.w	r8, r3, lsr #31
 801510a:	fba1 1303 	umull	r1, r3, r1, r3
 801510e:	9112      	str	r1, [sp, #72]	; 0x48
 8015110:	9900      	ldr	r1, [sp, #0]
 8015112:	f3c5 6c80 	ubfx	ip, r5, #26, #1
 8015116:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801511a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 801511e:	f3c5 7740 	ubfx	r7, r5, #29, #1
 8015122:	910b      	str	r1, [sp, #44]	; 0x2c
 8015124:	f1cc 0100 	rsb	r1, ip, #0
 8015128:	f3c5 66c0 	ubfx	r6, r5, #27, #1
 801512c:	9109      	str	r1, [sp, #36]	; 0x24
 801512e:	1e79      	subs	r1, r7, #1
 8015130:	910a      	str	r1, [sp, #40]	; 0x28
 8015132:	1e71      	subs	r1, r6, #1
 8015134:	f3c5 6400 	ubfx	r4, r5, #24, #1
 8015138:	f3c5 6040 	ubfx	r0, r5, #25, #1
 801513c:	1092      	asrs	r2, r2, #2
 801513e:	f3c5 7500 	ubfx	r5, r5, #28, #1
 8015142:	9108      	str	r1, [sp, #32]
 8015144:	4271      	negs	r1, r6
 8015146:	9107      	str	r1, [sp, #28]
 8015148:	2a00      	cmp	r2, #0
 801514a:	f1c5 0100 	rsb	r1, r5, #0
 801514e:	4453      	add	r3, sl
 8015150:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8015154:	f1c7 0a00 	rsb	sl, r7, #0
 8015158:	f1c4 0400 	rsb	r4, r4, #0
 801515c:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
 8015160:	f105 36ff 	add.w	r6, r5, #4294967295	; 0xffffffff
 8015164:	f1c0 0000 	rsb	r0, r0, #0
 8015168:	9106      	str	r1, [sp, #24]
 801516a:	f2c0 80d6 	blt.w	801531a <forward_lite_nl_softmax_is8os8+0x34a>
 801516e:	2501      	movs	r5, #1
 8015170:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015172:	428d      	cmp	r5, r1
 8015174:	bfb8      	it	lt
 8015176:	3201      	addlt	r2, #1
 8015178:	4d69      	ldr	r5, [pc, #420]	; (8015320 <forward_lite_nl_softmax_is8os8+0x350>)
 801517a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801517c:	45c6      	cmp	lr, r8
 801517e:	bf06      	itte	eq
 8015180:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 8015184:	f04f 0800 	moveq.w	r8, #0
 8015188:	f04f 38ff 	movne.w	r8, #4294967295	; 0xffffffff
 801518c:	186d      	adds	r5, r5, r1
 801518e:	eb43 0308 	adc.w	r3, r3, r8
 8015192:	2b00      	cmp	r3, #0
 8015194:	da05      	bge.n	80151a2 <forward_lite_nl_softmax_is8os8+0x1d2>
 8015196:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 801519a:	eb15 050e 	adds.w	r5, r5, lr
 801519e:	f143 0300 	adc.w	r3, r3, #0
 80151a2:	0fed      	lsrs	r5, r5, #31
 80151a4:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
 80151a8:	442a      	add	r2, r5
 80151aa:	2a00      	cmp	r2, #0
 80151ac:	4b5c      	ldr	r3, [pc, #368]	; (8015320 <forward_lite_nl_softmax_is8os8+0x350>)
 80151ae:	495d      	ldr	r1, [pc, #372]	; (8015324 <forward_lite_nl_softmax_is8os8+0x354>)
 80151b0:	bfa6      	itte	ge
 80151b2:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 80151b6:	2500      	movge	r5, #0
 80151b8:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 80151bc:	fbc2 3501 	smlal	r3, r5, r2, r1
 80151c0:	2d00      	cmp	r5, #0
 80151c2:	da04      	bge.n	80151ce <forward_lite_nl_softmax_is8os8+0x1fe>
 80151c4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80151c8:	189b      	adds	r3, r3, r2
 80151ca:	f145 0500 	adc.w	r5, r5, #0
 80151ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80151d0:	0fdb      	lsrs	r3, r3, #31
 80151d2:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 80151d6:	441a      	add	r2, r3
 80151d8:	4613      	mov	r3, r2
 80151da:	1052      	asrs	r2, r2, #1
 80151dc:	d402      	bmi.n	80151e4 <forward_lite_nl_softmax_is8os8+0x214>
 80151de:	07dd      	lsls	r5, r3, #31
 80151e0:	bf48      	it	mi
 80151e2:	3201      	addmi	r2, #1
 80151e4:	9900      	ldr	r1, [sp, #0]
 80151e6:	4d50      	ldr	r5, [pc, #320]	; (8015328 <forward_lite_nl_softmax_is8os8+0x358>)
 80151e8:	4411      	add	r1, r2
 80151ea:	2900      	cmp	r1, #0
 80151ec:	4a4c      	ldr	r2, [pc, #304]	; (8015320 <forward_lite_nl_softmax_is8os8+0x350>)
 80151ee:	bfa6      	itte	ge
 80151f0:	2300      	movge	r3, #0
 80151f2:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
 80151f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80151fa:	fbc1 2305 	smlal	r2, r3, r1, r5
 80151fe:	2b00      	cmp	r3, #0
 8015200:	da04      	bge.n	801520c <forward_lite_nl_softmax_is8os8+0x23c>
 8015202:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015206:	1852      	adds	r2, r2, r1
 8015208:	f143 0300 	adc.w	r3, r3, #0
 801520c:	0fd2      	lsrs	r2, r2, #31
 801520e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 8015212:	f102 42e2 	add.w	r2, r2, #1895825408	; 0x71000000
 8015216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801521a:	2100      	movs	r1, #0
 801521c:	4d43      	ldr	r5, [pc, #268]	; (801532c <forward_lite_nl_softmax_is8os8+0x35c>)
 801521e:	f5a2 2225 	sub.w	r2, r2, #675840	; 0xa5000
 8015222:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
 8015226:	4698      	mov	r8, r3
 8015228:	468e      	mov	lr, r1
 801522a:	fbc2 8e05 	smlal	r8, lr, r2, r5
 801522e:	4645      	mov	r5, r8
 8015230:	0fed      	lsrs	r5, r5, #31
 8015232:	ea45 054e 	orr.w	r5, r5, lr, lsl #1
 8015236:	4025      	ands	r5, r4
 8015238:	ea02 0c0c 	and.w	ip, r2, ip
 801523c:	ea8c 0c05 	eor.w	ip, ip, r5
 8015240:	4d3b      	ldr	r5, [pc, #236]	; (8015330 <forward_lite_nl_softmax_is8os8+0x360>)
 8015242:	461a      	mov	r2, r3
 8015244:	460c      	mov	r4, r1
 8015246:	fbcc 2405 	smlal	r2, r4, ip, r5
 801524a:	0fd2      	lsrs	r2, r2, #31
 801524c:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8015250:	4002      	ands	r2, r0
 8015252:	4c38      	ldr	r4, [pc, #224]	; (8015334 <forward_lite_nl_softmax_is8os8+0x364>)
 8015254:	ea0c 0707 	and.w	r7, ip, r7
 8015258:	4057      	eors	r7, r2
 801525a:	469c      	mov	ip, r3
 801525c:	4608      	mov	r0, r1
 801525e:	fbc7 c004 	smlal	ip, r0, r7, r4
 8015262:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 8015266:	ea4c 0c40 	orr.w	ip, ip, r0, lsl #1
 801526a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801526c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801526e:	9c08      	ldr	r4, [sp, #32]
 8015270:	403a      	ands	r2, r7
 8015272:	ea00 0c0c 	and.w	ip, r0, ip
 8015276:	4f30      	ldr	r7, [pc, #192]	; (8015338 <forward_lite_nl_softmax_is8os8+0x368>)
 8015278:	ea82 020c 	eor.w	r2, r2, ip
 801527c:	4618      	mov	r0, r3
 801527e:	460d      	mov	r5, r1
 8015280:	fbc2 0507 	smlal	r0, r5, r2, r7
 8015284:	4014      	ands	r4, r2
 8015286:	0fc0      	lsrs	r0, r0, #31
 8015288:	9a07      	ldr	r2, [sp, #28]
 801528a:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 801528e:	4002      	ands	r2, r0
 8015290:	482a      	ldr	r0, [pc, #168]	; (801533c <forward_lite_nl_softmax_is8os8+0x36c>)
 8015292:	4054      	eors	r4, r2
 8015294:	461d      	mov	r5, r3
 8015296:	460a      	mov	r2, r1
 8015298:	fbc4 5200 	smlal	r5, r2, r4, r0
 801529c:	0fed      	lsrs	r5, r5, #31
 801529e:	ea45 0542 	orr.w	r5, r5, r2, lsl #1
 80152a2:	9a06      	ldr	r2, [sp, #24]
 80152a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80152a6:	402a      	ands	r2, r5
 80152a8:	4026      	ands	r6, r4
 80152aa:	4c25      	ldr	r4, [pc, #148]	; (8015340 <forward_lite_nl_softmax_is8os8+0x370>)
 80152ac:	4056      	eors	r6, r2
 80152ae:	460d      	mov	r5, r1
 80152b0:	461a      	mov	r2, r3
 80152b2:	fbc6 2504 	smlal	r2, r5, r6, r4
 80152b6:	0fd2      	lsrs	r2, r2, #31
 80152b8:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 80152bc:	ea0a 0202 	and.w	r2, sl, r2
 80152c0:	4030      	ands	r0, r6
 80152c2:	4050      	eors	r0, r2
 80152c4:	22f2      	movs	r2, #242	; 0xf2
 80152c6:	fbc0 3102 	smlal	r3, r1, r0, r2
 80152ca:	0fdb      	lsrs	r3, r3, #31
 80152cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80152ce:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80152d0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80152d4:	401a      	ands	r2, r3
 80152d6:	4613      	mov	r3, r2
 80152d8:	4004      	ands	r4, r0
 80152da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80152dc:	4063      	eors	r3, r4
 80152de:	4013      	ands	r3, r2
 80152e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80152e2:	4053      	eors	r3, r2
 80152e4:	131a      	asrs	r2, r3, #12
 80152e6:	0519      	lsls	r1, r3, #20
 80152e8:	9904      	ldr	r1, [sp, #16]
 80152ea:	bf48      	it	mi
 80152ec:	3201      	addmi	r2, #1
 80152ee:	4411      	add	r1, r2
 80152f0:	9104      	str	r1, [sp, #16]
 80152f2:	9a01      	ldr	r2, [sp, #4]
 80152f4:	f842 3f04 	str.w	r3, [r2, #4]!
 80152f8:	9201      	str	r2, [sp, #4]
 80152fa:	9a02      	ldr	r2, [sp, #8]
 80152fc:	f10b 0302 	add.w	r3, fp, #2
 8015300:	1a9b      	subs	r3, r3, r2
 8015302:	9a03      	ldr	r2, [sp, #12]
 8015304:	429a      	cmp	r2, r3
 8015306:	d945      	bls.n	8015394 <forward_lite_nl_softmax_is8os8+0x3c4>
 8015308:	9a05      	ldr	r2, [sp, #20]
 801530a:	46cb      	mov	fp, r9
 801530c:	f919 3f01 	ldrsb.w	r3, [r9, #1]!
 8015310:	429a      	cmp	r2, r3
 8015312:	f77f ae90 	ble.w	8015036 <forward_lite_nl_softmax_is8os8+0x66>
 8015316:	2300      	movs	r3, #0
 8015318:	e7eb      	b.n	80152f2 <forward_lite_nl_softmax_is8os8+0x322>
 801531a:	2502      	movs	r5, #2
 801531c:	e728      	b.n	8015170 <forward_lite_nl_softmax_is8os8+0x1a0>
 801531e:	bf00      	nop
 8015320:	c0000001 	.word	0xc0000001
 8015324:	2aaaaaab 	.word	0x2aaaaaab
 8015328:	70f5a894 	.word	0x70f5a894
 801532c:	63afbe7b 	.word	0x63afbe7b
 8015330:	4da2cbf2 	.word	0x4da2cbf2
 8015334:	2f16ac6c 	.word	0x2f16ac6c
 8015338:	1152aaa4 	.word	0x1152aaa4
 801533c:	02582ab7 	.word	0x02582ab7
 8015340:	000afe11 	.word	0x000afe11
 8015344:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8015348:	f000 8225 	beq.w	8015796 <forward_lite_nl_softmax_is8os8+0x7c6>
 801534c:	f040 457f 	orr.w	r5, r0, #4278190080	; 0xff000000
 8015350:	0169      	lsls	r1, r5, #5
 8015352:	1a2d      	subs	r5, r5, r0
 8015354:	fab0 f080 	clz	r0, r0
 8015358:	f101 5280 	add.w	r2, r1, #268435456	; 0x10000000
 801535c:	0940      	lsrs	r0, r0, #5
 801535e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015362:	f04f 0a00 	mov.w	sl, #0
 8015366:	fbc2 3a02 	smlal	r3, sl, r2, r2
 801536a:	1e41      	subs	r1, r0, #1
 801536c:	9200      	str	r2, [sp, #0]
 801536e:	f3c5 7280 	ubfx	r2, r5, #30, #1
 8015372:	9111      	str	r1, [sp, #68]	; 0x44
 8015374:	f1ba 0f00 	cmp.w	sl, #0
 8015378:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 801537c:	f1c2 0200 	rsb	r2, r2, #0
 8015380:	9110      	str	r1, [sp, #64]	; 0x40
 8015382:	920f      	str	r2, [sp, #60]	; 0x3c
 8015384:	f6bf ae99 	bge.w	80150ba <forward_lite_nl_softmax_is8os8+0xea>
 8015388:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801538c:	189b      	adds	r3, r3, r2
 801538e:	f14a 0a00 	adc.w	sl, sl, #0
 8015392:	e692      	b.n	80150ba <forward_lite_nl_softmax_is8os8+0xea>
 8015394:	9b04      	ldr	r3, [sp, #16]
 8015396:	2b00      	cmp	r3, #0
 8015398:	f000 816f 	beq.w	801567a <forward_lite_nl_softmax_is8os8+0x6aa>
 801539c:	fab3 f483 	clz	r4, r3
 80153a0:	fa03 f104 	lsl.w	r1, r3, r4
 80153a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80153a8:	17da      	asrs	r2, r3, #31
 80153aa:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80153ae:	bf08      	it	eq
 80153b0:	2900      	cmpeq	r1, #0
 80153b2:	f1c4 0423 	rsb	r4, r4, #35	; 0x23
 80153b6:	f000 8161 	beq.w	801567c <forward_lite_nl_softmax_is8os8+0x6ac>
 80153ba:	f113 4300 	adds.w	r3, r3, #2147483648	; 0x80000000
 80153be:	f142 0200 	adc.w	r2, r2, #0
 80153c2:	085b      	lsrs	r3, r3, #1
 80153c4:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80153c8:	49a8      	ldr	r1, [pc, #672]	; (801566c <forward_lite_nl_softmax_is8os8+0x69c>)
 80153ca:	4fa9      	ldr	r7, [pc, #676]	; (8015670 <forward_lite_nl_softmax_is8os8+0x6a0>)
 80153cc:	1052      	asrs	r2, r2, #1
 80153ce:	425d      	negs	r5, r3
 80153d0:	fb01 5502 	mla	r5, r1, r2, r5
 80153d4:	fba3 1601 	umull	r1, r6, r3, r1
 80153d8:	19c9      	adds	r1, r1, r7
 80153da:	4435      	add	r5, r6
 80153dc:	f165 0500 	sbc.w	r5, r5, #0
 80153e0:	2d00      	cmp	r5, #0
 80153e2:	da04      	bge.n	80153ee <forward_lite_nl_softmax_is8os8+0x41e>
 80153e4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80153e8:	1809      	adds	r1, r1, r0
 80153ea:	f145 0500 	adc.w	r5, r5, #0
 80153ee:	0fc9      	lsrs	r1, r1, #31
 80153f0:	ea41 0045 	orr.w	r0, r1, r5, lsl #1
 80153f4:	f100 315a 	add.w	r1, r0, #1515870810	; 0x5a5a5a5a
 80153f8:	17ce      	asrs	r6, r1, #31
 80153fa:	fb01 f502 	mul.w	r5, r1, r2
 80153fe:	fb03 5506 	mla	r5, r3, r6, r5
 8015402:	fba1 ce03 	umull	ip, lr, r1, r3
 8015406:	f11c 4780 	adds.w	r7, ip, #1073741824	; 0x40000000
 801540a:	44ae      	add	lr, r5
 801540c:	f14e 0500 	adc.w	r5, lr, #0
 8015410:	0fff      	lsrs	r7, r7, #31
 8015412:	ea47 0745 	orr.w	r7, r7, r5, lsl #1
 8015416:	f1d7 5700 	rsbs	r7, r7, #536870912	; 0x20000000
 801541a:	f140 81dd 	bpl.w	80157d8 <forward_lite_nl_softmax_is8os8+0x808>
 801541e:	4e94      	ldr	r6, [pc, #592]	; (8015670 <forward_lite_nl_softmax_is8os8+0x6a0>)
 8015420:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8015424:	fbc1 6807 	smlal	r6, r8, r1, r7
 8015428:	f1b8 0f00 	cmp.w	r8, #0
 801542c:	da04      	bge.n	8015438 <forward_lite_nl_softmax_is8os8+0x468>
 801542e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8015432:	1976      	adds	r6, r6, r5
 8015434:	f148 0800 	adc.w	r8, r8, #0
 8015438:	0ff6      	lsrs	r6, r6, #31
 801543a:	ea46 0648 	orr.w	r6, r6, r8, lsl #1
 801543e:	f1b6 4f60 	cmp.w	r6, #3758096384	; 0xe0000000
 8015442:	f300 8193 	bgt.w	801576c <forward_lite_nl_softmax_is8os8+0x79c>
 8015446:	4f8a      	ldr	r7, [pc, #552]	; (8015670 <forward_lite_nl_softmax_is8os8+0x6a0>)
 8015448:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 801544c:	07d6      	lsls	r6, r2, #31
 801544e:	07d9      	lsls	r1, r3, #31
 8015450:	ebbc 0101 	subs.w	r1, ip, r1
 8015454:	ea46 0653 	orr.w	r6, r6, r3, lsr #1
 8015458:	eb6e 0606 	sbc.w	r6, lr, r6
 801545c:	19c9      	adds	r1, r1, r7
 801545e:	f166 0600 	sbc.w	r6, r6, #0
 8015462:	2e00      	cmp	r6, #0
 8015464:	da04      	bge.n	8015470 <forward_lite_nl_softmax_is8os8+0x4a0>
 8015466:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801546a:	19c9      	adds	r1, r1, r7
 801546c:	f146 0600 	adc.w	r6, r6, #0
 8015470:	0fc9      	lsrs	r1, r1, #31
 8015472:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 8015476:	4e7e      	ldr	r6, [pc, #504]	; (8015670 <forward_lite_nl_softmax_is8os8+0x6a0>)
 8015478:	f1c1 5100 	rsb	r1, r1, #536870912	; 0x20000000
 801547c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015480:	fbc5 6701 	smlal	r6, r7, r5, r1
 8015484:	2f00      	cmp	r7, #0
 8015486:	da04      	bge.n	8015492 <forward_lite_nl_softmax_is8os8+0x4c2>
 8015488:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801548c:	1876      	adds	r6, r6, r1
 801548e:	f147 0700 	adc.w	r7, r7, #0
 8015492:	0ff1      	lsrs	r1, r6, #31
 8015494:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
 8015498:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 801549c:	f2c0 80a9 	blt.w	80155f2 <forward_lite_nl_softmax_is8os8+0x622>
 80154a0:	f1a0 35a5 	sub.w	r5, r0, #2779096485	; 0xa5a5a5a5
 80154a4:	3d02      	subs	r5, #2
 80154a6:	2600      	movs	r6, #0
 80154a8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80154ac:	2700      	movs	r7, #0
 80154ae:	fb05 f202 	mul.w	r2, r5, r2
 80154b2:	17e9      	asrs	r1, r5, #31
 80154b4:	fb03 2201 	mla	r2, r3, r1, r2
 80154b8:	fba5 3c03 	umull	r3, ip, r5, r3
 80154bc:	181b      	adds	r3, r3, r0
 80154be:	4462      	add	r2, ip
 80154c0:	eb42 0707 	adc.w	r7, r2, r7
 80154c4:	2f00      	cmp	r7, #0
 80154c6:	da04      	bge.n	80154d2 <forward_lite_nl_softmax_is8os8+0x502>
 80154c8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80154cc:	189b      	adds	r3, r3, r2
 80154ce:	f147 0700 	adc.w	r7, r7, #0
 80154d2:	0fdb      	lsrs	r3, r3, #31
 80154d4:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
 80154d8:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 80154dc:	0fd8      	lsrs	r0, r3, #31
 80154de:	42b0      	cmp	r0, r6
 80154e0:	4a63      	ldr	r2, [pc, #396]	; (8015670 <forward_lite_nl_softmax_is8os8+0x6a0>)
 80154e2:	bf06      	itte	eq
 80154e4:	2000      	moveq	r0, #0
 80154e6:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 80154ea:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80154ee:	fb03 f101 	mul.w	r1, r3, r1
 80154f2:	17de      	asrs	r6, r3, #31
 80154f4:	fb05 1106 	mla	r1, r5, r6, r1
 80154f8:	fba3 3605 	umull	r3, r6, r3, r5
 80154fc:	189b      	adds	r3, r3, r2
 80154fe:	4431      	add	r1, r6
 8015500:	eb41 0000 	adc.w	r0, r1, r0
 8015504:	2800      	cmp	r0, #0
 8015506:	da04      	bge.n	8015512 <forward_lite_nl_softmax_is8os8+0x542>
 8015508:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801550c:	189b      	adds	r3, r3, r2
 801550e:	f140 0000 	adc.w	r0, r0, #0
 8015512:	0fdb      	lsrs	r3, r3, #31
 8015514:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8015518:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801551c:	f2c0 8099 	blt.w	8015652 <forward_lite_nl_softmax_is8os8+0x682>
 8015520:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015524:	440d      	add	r5, r1
 8015526:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801552a:	bfb8      	it	lt
 801552c:	0069      	lsllt	r1, r5, #1
 801552e:	9b03      	ldr	r3, [sp, #12]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d046      	beq.n	80155c2 <forward_lite_nl_softmax_is8os8+0x5f2>
 8015534:	2601      	movs	r6, #1
 8015536:	40a6      	lsls	r6, r4
 8015538:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801553a:	f8df c134 	ldr.w	ip, [pc, #308]	; 8015670 <forward_lite_nl_softmax_is8os8+0x6a0>
 801553e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8015540:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 8015544:	3e01      	subs	r6, #1
 8015546:	ea4f 0866 	mov.w	r8, r6, asr #1
 801554a:	f108 0901 	add.w	r9, r8, #1
 801554e:	0fcf      	lsrs	r7, r1, #31
 8015550:	1e5d      	subs	r5, r3, #1
 8015552:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 8015556:	468a      	mov	sl, r1
 8015558:	e00a      	b.n	8015570 <forward_lite_nl_softmax_is8os8+0x5a0>
 801555a:	4590      	cmp	r8, r2
 801555c:	da00      	bge.n	8015560 <forward_lite_nl_softmax_is8os8+0x590>
 801555e:	3301      	adds	r3, #1
 8015560:	3b80      	subs	r3, #128	; 0x80
 8015562:	2b7e      	cmp	r3, #126	; 0x7e
 8015564:	dd40      	ble.n	80155e8 <forward_lite_nl_softmax_is8os8+0x618>
 8015566:	237f      	movs	r3, #127	; 0x7f
 8015568:	4583      	cmp	fp, r0
 801556a:	f805 3f01 	strb.w	r3, [r5, #1]!
 801556e:	d028      	beq.n	80155c2 <forward_lite_nl_softmax_is8os8+0x5f2>
 8015570:	f850 1f04 	ldr.w	r1, [r0, #4]!
 8015574:	0fcb      	lsrs	r3, r1, #31
 8015576:	42bb      	cmp	r3, r7
 8015578:	bf0b      	itete	eq
 801557a:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 801557e:	4662      	movne	r2, ip
 8015580:	2300      	moveq	r3, #0
 8015582:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8015586:	fbc1 230a 	smlal	r2, r3, r1, sl
 801558a:	2b00      	cmp	r3, #0
 801558c:	da03      	bge.n	8015596 <forward_lite_nl_softmax_is8os8+0x5c6>
 801558e:	eb12 020e 	adds.w	r2, r2, lr
 8015592:	f143 0300 	adc.w	r3, r3, #0
 8015596:	0fd2      	lsrs	r2, r2, #31
 8015598:	4551      	cmp	r1, sl
 801559a:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 801559e:	d104      	bne.n	80155aa <forward_lite_nl_softmax_is8os8+0x5da>
 80155a0:	f1ba 4f00 	cmp.w	sl, #2147483648	; 0x80000000
 80155a4:	bf08      	it	eq
 80155a6:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
 80155aa:	ea06 0203 	and.w	r2, r6, r3
 80155ae:	4123      	asrs	r3, r4
 80155b0:	d5d3      	bpl.n	801555a <forward_lite_nl_softmax_is8os8+0x58a>
 80155b2:	4591      	cmp	r9, r2
 80155b4:	dbd3      	blt.n	801555e <forward_lite_nl_softmax_is8os8+0x58e>
 80155b6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80155ba:	4583      	cmp	fp, r0
 80155bc:	f805 3f01 	strb.w	r3, [r5, #1]!
 80155c0:	d1d6      	bne.n	8015570 <forward_lite_nl_softmax_is8os8+0x5a0>
 80155c2:	9b02      	ldr	r3, [sp, #8]
 80155c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80155c6:	9925      	ldr	r1, [sp, #148]	; 0x94
 80155c8:	4413      	add	r3, r2
 80155ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80155cc:	9302      	str	r3, [sp, #8]
 80155ce:	440a      	add	r2, r1
 80155d0:	9215      	str	r2, [sp, #84]	; 0x54
 80155d2:	9924      	ldr	r1, [sp, #144]	; 0x90
 80155d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80155d6:	440a      	add	r2, r1
 80155d8:	9216      	str	r2, [sp, #88]	; 0x58
 80155da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80155dc:	429a      	cmp	r2, r3
 80155de:	f63f ad0c 	bhi.w	8014ffa <forward_lite_nl_softmax_is8os8+0x2a>
 80155e2:	b01b      	add	sp, #108	; 0x6c
 80155e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155e8:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 80155ec:	dbe3      	blt.n	80155b6 <forward_lite_nl_softmax_is8os8+0x5e6>
 80155ee:	b25b      	sxtb	r3, r3
 80155f0:	e7ba      	b.n	8015568 <forward_lite_nl_softmax_is8os8+0x598>
 80155f2:	f1b1 4f60 	cmp.w	r1, #3758096384	; 0xe0000000
 80155f6:	bfc8      	it	gt
 80155f8:	f04f 0800 	movgt.w	r8, #0
 80155fc:	f300 8106 	bgt.w	801580c <forward_lite_nl_softmax_is8os8+0x83c>
 8015600:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8015604:	17e8      	asrs	r0, r5, #31
 8015606:	491a      	ldr	r1, [pc, #104]	; (8015670 <forward_lite_nl_softmax_is8os8+0x6a0>)
 8015608:	fb05 f202 	mul.w	r2, r5, r2
 801560c:	fb03 2200 	mla	r2, r3, r0, r2
 8015610:	fba5 3003 	umull	r3, r0, r5, r3
 8015614:	185b      	adds	r3, r3, r1
 8015616:	4410      	add	r0, r2
 8015618:	f160 0000 	sbc.w	r0, r0, #0
 801561c:	2800      	cmp	r0, #0
 801561e:	da04      	bge.n	801562a <forward_lite_nl_softmax_is8os8+0x65a>
 8015620:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8015624:	189b      	adds	r3, r3, r2
 8015626:	f140 0000 	adc.w	r0, r0, #0
 801562a:	0fdb      	lsrs	r3, r3, #31
 801562c:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8015630:	f1c3 5200 	rsb	r2, r3, #536870912	; 0x20000000
 8015634:	4b0e      	ldr	r3, [pc, #56]	; (8015670 <forward_lite_nl_softmax_is8os8+0x6a0>)
 8015636:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801563a:	fbc5 3102 	smlal	r3, r1, r5, r2
 801563e:	2900      	cmp	r1, #0
 8015640:	da04      	bge.n	801564c <forward_lite_nl_softmax_is8os8+0x67c>
 8015642:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8015646:	189b      	adds	r3, r3, r2
 8015648:	f141 0100 	adc.w	r1, r1, #0
 801564c:	0fdb      	lsrs	r3, r3, #31
 801564e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8015652:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8015656:	f300 80db 	bgt.w	8015810 <forward_lite_nl_softmax_is8os8+0x840>
 801565a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 801565e:	0069      	lsls	r1, r5, #1
 8015660:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8015664:	bfd8      	it	le
 8015666:	f04f 4100 	movle.w	r1, #2147483648	; 0x80000000
 801566a:	e760      	b.n	801552e <forward_lite_nl_softmax_is8os8+0x55e>
 801566c:	c3c3c3c4 	.word	0xc3c3c3c4
 8015670:	c0000001 	.word	0xc0000001
 8015674:	2a00      	cmp	r2, #0
 8015676:	f47f accf 	bne.w	8015018 <forward_lite_nl_softmax_is8os8+0x48>
 801567a:	2403      	movs	r4, #3
 801567c:	486a      	ldr	r0, [pc, #424]	; (8015828 <forward_lite_nl_softmax_is8os8+0x858>)
 801567e:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 8015840 <forward_lite_nl_softmax_is8os8+0x870>
 8015682:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015686:	f04f 0c00 	mov.w	ip, #0
 801568a:	f04f 0801 	mov.w	r8, #1
 801568e:	4605      	mov	r5, r0
 8015690:	463b      	mov	r3, r7
 8015692:	463a      	mov	r2, r7
 8015694:	46c1      	mov	r9, r8
 8015696:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801569a:	2600      	movs	r6, #0
 801569c:	eb11 010e 	adds.w	r1, r1, lr
 80156a0:	eb46 060c 	adc.w	r6, r6, ip
 80156a4:	2e00      	cmp	r6, #0
 80156a6:	da05      	bge.n	80156b4 <forward_lite_nl_softmax_is8os8+0x6e4>
 80156a8:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 80156ac:	eb11 010c 	adds.w	r1, r1, ip
 80156b0:	f146 0600 	adc.w	r6, r6, #0
 80156b4:	0fc9      	lsrs	r1, r1, #31
 80156b6:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 80156ba:	f1c1 5100 	rsb	r1, r1, #536870912	; 0x20000000
 80156be:	ea4f 7cd1 	mov.w	ip, r1, lsr #31
 80156c2:	45cc      	cmp	ip, r9
 80156c4:	4e59      	ldr	r6, [pc, #356]	; (801582c <forward_lite_nl_softmax_is8os8+0x85c>)
 80156c6:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 80156ca:	fb01 f707 	mul.w	r7, r1, r7
 80156ce:	fb00 770c 	mla	r7, r0, ip, r7
 80156d2:	bf08      	it	eq
 80156d4:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
 80156d8:	fba1 0100 	umull	r0, r1, r1, r0
 80156dc:	bf0c      	ite	eq
 80156de:	f04f 0c00 	moveq.w	ip, #0
 80156e2:	f04f 3cff 	movne.w	ip, #4294967295	; 0xffffffff
 80156e6:	440f      	add	r7, r1
 80156e8:	1986      	adds	r6, r0, r6
 80156ea:	eb47 070c 	adc.w	r7, r7, ip
 80156ee:	2f00      	cmp	r7, #0
 80156f0:	da04      	bge.n	80156fc <forward_lite_nl_softmax_is8os8+0x72c>
 80156f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80156f6:	1876      	adds	r6, r6, r1
 80156f8:	f147 0700 	adc.w	r7, r7, #0
 80156fc:	0ff6      	lsrs	r6, r6, #31
 80156fe:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
 8015702:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 8015706:	4631      	mov	r1, r6
 8015708:	da23      	bge.n	8015752 <forward_lite_nl_softmax_is8os8+0x782>
 801570a:	f1b6 4f60 	cmp.w	r6, #3758096384	; 0xe0000000
 801570e:	dc7d      	bgt.n	801580c <forward_lite_nl_softmax_is8os8+0x83c>
 8015710:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8015714:	f1b8 0f00 	cmp.w	r8, #0
 8015718:	f43f af74 	beq.w	8015604 <forward_lite_nl_softmax_is8os8+0x634>
 801571c:	fb05 f202 	mul.w	r2, r5, r2
 8015720:	17e9      	asrs	r1, r5, #31
 8015722:	fb03 2201 	mla	r2, r3, r1, r2
 8015726:	fba5 3003 	umull	r3, r0, r5, r3
 801572a:	f113 4380 	adds.w	r3, r3, #1073741824	; 0x40000000
 801572e:	eb42 0200 	adc.w	r2, r2, r0
 8015732:	2a00      	cmp	r2, #0
 8015734:	da04      	bge.n	8015740 <forward_lite_nl_softmax_is8os8+0x770>
 8015736:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801573a:	181b      	adds	r3, r3, r0
 801573c:	f142 0200 	adc.w	r2, r2, #0
 8015740:	0fdb      	lsrs	r3, r3, #31
 8015742:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8015746:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 801574a:	4a38      	ldr	r2, [pc, #224]	; (801582c <forward_lite_nl_softmax_is8os8+0x85c>)
 801574c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015750:	e6cd      	b.n	80154ee <forward_lite_nl_softmax_is8os8+0x51e>
 8015752:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015756:	440d      	add	r5, r1
 8015758:	ebb8 7fd5 	cmp.w	r8, r5, lsr #31
 801575c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8015760:	f43f aea2 	beq.w	80154a8 <forward_lite_nl_softmax_is8os8+0x4d8>
 8015764:	4831      	ldr	r0, [pc, #196]	; (801582c <forward_lite_nl_softmax_is8os8+0x85c>)
 8015766:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801576a:	e6a0      	b.n	80154ae <forward_lite_nl_softmax_is8os8+0x4de>
 801576c:	eb01 0586 	add.w	r5, r1, r6, lsl #2
 8015770:	17ef      	asrs	r7, r5, #31
 8015772:	fb03 f107 	mul.w	r1, r3, r7
 8015776:	fb05 1102 	mla	r1, r5, r2, r1
 801577a:	fba3 ec05 	umull	lr, ip, r3, r5
 801577e:	2d00      	cmp	r5, #0
 8015780:	4628      	mov	r0, r5
 8015782:	448c      	add	ip, r1
 8015784:	da3f      	bge.n	8015806 <forward_lite_nl_softmax_is8os8+0x836>
 8015786:	4929      	ldr	r1, [pc, #164]	; (801582c <forward_lite_nl_softmax_is8os8+0x85c>)
 8015788:	f04f 0901 	mov.w	r9, #1
 801578c:	f04f 0800 	mov.w	r8, #0
 8015790:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8015794:	e782      	b.n	801569c <forward_lite_nl_softmax_is8os8+0x6cc>
 8015796:	4a26      	ldr	r2, [pc, #152]	; (8015830 <forward_lite_nl_softmax_is8os8+0x860>)
 8015798:	4b26      	ldr	r3, [pc, #152]	; (8015834 <forward_lite_nl_softmax_is8os8+0x864>)
 801579a:	920e      	str	r2, [sp, #56]	; 0x38
 801579c:	f04f 0a00 	mov.w	sl, #0
 80157a0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80157a4:	4a24      	ldr	r2, [pc, #144]	; (8015838 <forward_lite_nl_softmax_is8os8+0x868>)
 80157a6:	9312      	str	r3, [sp, #72]	; 0x48
 80157a8:	9200      	str	r2, [sp, #0]
 80157aa:	e9cd aa06 	strd	sl, sl, [sp, #24]
 80157ae:	e9cd 6a08 	strd	r6, sl, [sp, #32]
 80157b2:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
 80157b6:	e9cd a60f 	strd	sl, r6, [sp, #60]	; 0x3c
 80157ba:	4b20      	ldr	r3, [pc, #128]	; (801583c <forward_lite_nl_softmax_is8os8+0x86c>)
 80157bc:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80157c0:	4650      	mov	r0, sl
 80157c2:	4654      	mov	r4, sl
 80157c4:	46b4      	mov	ip, r6
 80157c6:	4637      	mov	r7, r6
 80157c8:	46d6      	mov	lr, sl
 80157ca:	46d0      	mov	r8, sl
 80157cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80157d0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80157d4:	9611      	str	r6, [sp, #68]	; 0x44
 80157d6:	e4ca      	b.n	801516e <forward_lite_nl_softmax_is8os8+0x19e>
 80157d8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80157dc:	f04f 0800 	mov.w	r8, #0
 80157e0:	4605      	mov	r5, r0
 80157e2:	4640      	mov	r0, r8
 80157e4:	fbc1 5007 	smlal	r5, r0, r1, r7
 80157e8:	0fed      	lsrs	r5, r5, #31
 80157ea:	ea45 0540 	orr.w	r5, r5, r0, lsl #1
 80157ee:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 80157f2:	17ef      	asrs	r7, r5, #31
 80157f4:	fb03 f107 	mul.w	r1, r3, r7
 80157f8:	fb05 1102 	mla	r1, r5, r2, r1
 80157fc:	fba3 ec05 	umull	lr, ip, r3, r5
 8015800:	4628      	mov	r0, r5
 8015802:	448c      	add	ip, r1
 8015804:	e746      	b.n	8015694 <forward_lite_nl_softmax_is8os8+0x6c4>
 8015806:	f04f 0800 	mov.w	r8, #0
 801580a:	e743      	b.n	8015694 <forward_lite_nl_softmax_is8os8+0x6c4>
 801580c:	0089      	lsls	r1, r1, #2
 801580e:	e7a2      	b.n	8015756 <forward_lite_nl_softmax_is8os8+0x786>
 8015810:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015818:	ea4f 0143 	mov.w	r1, r3, lsl #1
 801581c:	f6ff af20 	blt.w	8015660 <forward_lite_nl_softmax_is8os8+0x690>
 8015820:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015824:	e683      	b.n	801552e <forward_lite_nl_softmax_is8os8+0x55e>
 8015826:	bf00      	nop
 8015828:	b4b4b4b6 	.word	0xb4b4b4b6
 801582c:	c0000001 	.word	0xc0000001
 8015830:	01fffff8 	.word	0x01fffff8
 8015834:	40000100 	.word	0x40000100
 8015838:	0fffffe0 	.word	0x0fffffe0
 801583c:	001fffff 	.word	0x001fffff
 8015840:	4b4b4b4a 	.word	0x4b4b4b4a

08015844 <forward_lite_nl_softmax_iu8ou8>:
 8015844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015848:	188a      	adds	r2, r1, r2
 801584a:	b09b      	sub	sp, #108	; 0x6c
 801584c:	4291      	cmp	r1, r2
 801584e:	9101      	str	r1, [sp, #4]
 8015850:	9218      	str	r2, [sp, #96]	; 0x60
 8015852:	9015      	str	r0, [sp, #84]	; 0x54
 8015854:	9302      	str	r3, [sp, #8]
 8015856:	f080 82fa 	bcs.w	8015e4e <forward_lite_nl_softmax_iu8ou8+0x60a>
 801585a:	461a      	mov	r2, r3
 801585c:	3b01      	subs	r3, #1
 801585e:	18cb      	adds	r3, r1, r3
 8015860:	9316      	str	r3, [sp, #88]	; 0x58
 8015862:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015864:	3b04      	subs	r3, #4
 8015866:	9317      	str	r3, [sp, #92]	; 0x5c
 8015868:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801586c:	9319      	str	r3, [sp, #100]	; 0x64
 801586e:	9a02      	ldr	r2, [sp, #8]
 8015870:	9b01      	ldr	r3, [sp, #4]
 8015872:	2a01      	cmp	r2, #1
 8015874:	f893 b000 	ldrb.w	fp, [r3]
 8015878:	f240 8332 	bls.w	8015ee0 <forward_lite_nl_softmax_iu8ou8+0x69c>
 801587c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801587e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8015882:	4593      	cmp	fp, r2
 8015884:	bfb8      	it	lt
 8015886:	4693      	movlt	fp, r2
 8015888:	428b      	cmp	r3, r1
 801588a:	d1f8      	bne.n	801587e <forward_lite_nl_softmax_iu8ou8+0x3a>
 801588c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801588e:	445b      	add	r3, fp
 8015890:	2200      	movs	r2, #0
 8015892:	9304      	str	r3, [sp, #16]
 8015894:	9b01      	ldr	r3, [sp, #4]
 8015896:	9203      	str	r2, [sp, #12]
 8015898:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801589a:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 801589e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80158a0:	0fd2      	lsrs	r2, r2, #31
 80158a2:	e9cd 2b13 	strd	r2, fp, [sp, #76]	; 0x4c
 80158a6:	469a      	mov	sl, r3
 80158a8:	e168      	b.n	8015b7c <forward_lite_nl_softmax_iu8ou8+0x338>
 80158aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80158ac:	9926      	ldr	r1, [sp, #152]	; 0x98
 80158ae:	1a9b      	subs	r3, r3, r2
 80158b0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80158b2:	4093      	lsls	r3, r2
 80158b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80158b6:	ebb2 7fd3 	cmp.w	r2, r3, lsr #31
 80158ba:	4ac9      	ldr	r2, [pc, #804]	; (8015be0 <forward_lite_nl_softmax_iu8ou8+0x39c>)
 80158bc:	bf06      	itte	eq
 80158be:	f04f 0e00 	moveq.w	lr, #0
 80158c2:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 80158c6:	f04f 3eff 	movne.w	lr, #4294967295	; 0xffffffff
 80158ca:	fbc1 2e03 	smlal	r2, lr, r1, r3
 80158ce:	f1be 0f00 	cmp.w	lr, #0
 80158d2:	da04      	bge.n	80158de <forward_lite_nl_softmax_iu8ou8+0x9a>
 80158d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80158d8:	1852      	adds	r2, r2, r1
 80158da:	f14e 0e00 	adc.w	lr, lr, #0
 80158de:	0fd0      	lsrs	r0, r2, #31
 80158e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80158e2:	429a      	cmp	r2, r3
 80158e4:	ea40 004e 	orr.w	r0, r0, lr, lsl #1
 80158e8:	f000 8153 	beq.w	8015b92 <forward_lite_nl_softmax_iu8ou8+0x34e>
 80158ec:	f040 457f 	orr.w	r5, r0, #4278190080	; 0xff000000
 80158f0:	0169      	lsls	r1, r5, #5
 80158f2:	f101 5280 	add.w	r2, r1, #268435456	; 0x10000000
 80158f6:	1a2d      	subs	r5, r5, r0
 80158f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80158fc:	f04f 0c00 	mov.w	ip, #0
 8015900:	fbc2 3c02 	smlal	r3, ip, r2, r2
 8015904:	9200      	str	r2, [sp, #0]
 8015906:	f3c5 7280 	ubfx	r2, r5, #30, #1
 801590a:	1e51      	subs	r1, r2, #1
 801590c:	f3c5 7640 	ubfx	r6, r5, #29, #1
 8015910:	4252      	negs	r2, r2
 8015912:	920f      	str	r2, [sp, #60]	; 0x3c
 8015914:	f1bc 0f00 	cmp.w	ip, #0
 8015918:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 801591c:	9111      	str	r1, [sp, #68]	; 0x44
 801591e:	9210      	str	r2, [sp, #64]	; 0x40
 8015920:	da05      	bge.n	801592e <forward_lite_nl_softmax_iu8ou8+0xea>
 8015922:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 8015926:	eb13 030e 	adds.w	r3, r3, lr
 801592a:	f14c 0c00 	adc.w	ip, ip, #0
 801592e:	0fdb      	lsrs	r3, r3, #31
 8015930:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
 8015934:	fba3 2403 	umull	r2, r4, r3, r3
 8015938:	ea4f 7cec 	mov.w	ip, ip, asr #31
 801593c:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
 8015940:	fb03 f70c 	mul.w	r7, r3, ip
 8015944:	eb44 0447 	adc.w	r4, r4, r7, lsl #1
 8015948:	2c00      	cmp	r4, #0
 801594a:	930e      	str	r3, [sp, #56]	; 0x38
 801594c:	da04      	bge.n	8015958 <forward_lite_nl_softmax_iu8ou8+0x114>
 801594e:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8015952:	19d2      	adds	r2, r2, r7
 8015954:	f144 0400 	adc.w	r4, r4, #0
 8015958:	fab0 fe80 	clz	lr, r0
 801595c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8015960:	4271      	negs	r1, r6
 8015962:	f1ce 0800 	rsb	r8, lr, #0
 8015966:	0fd2      	lsrs	r2, r2, #31
 8015968:	9105      	str	r1, [sp, #20]
 801596a:	f028 4100 	bic.w	r1, r8, #2147483648	; 0x80000000
 801596e:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8015972:	910c      	str	r1, [sp, #48]	; 0x30
 8015974:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8015978:	9800      	ldr	r0, [sp, #0]
 801597a:	9108      	str	r1, [sp, #32]
 801597c:	f002 0103 	and.w	r1, r2, #3
 8015980:	910d      	str	r1, [sp, #52]	; 0x34
 8015982:	9900      	ldr	r1, [sp, #0]
 8015984:	fb00 fc0c 	mul.w	ip, r0, ip
 8015988:	17c0      	asrs	r0, r0, #31
 801598a:	fb03 cc00 	mla	ip, r3, r0, ip
 801598e:	ea4f 78d3 	mov.w	r8, r3, lsr #31
 8015992:	fba1 1303 	umull	r1, r3, r1, r3
 8015996:	9112      	str	r1, [sp, #72]	; 0x48
 8015998:	9900      	ldr	r1, [sp, #0]
 801599a:	f3c5 6780 	ubfx	r7, r5, #26, #1
 801599e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80159a2:	1e79      	subs	r1, r7, #1
 80159a4:	f3c5 7600 	ubfx	r6, r5, #28, #1
 80159a8:	910b      	str	r1, [sp, #44]	; 0x2c
 80159aa:	4279      	negs	r1, r7
 80159ac:	9109      	str	r1, [sp, #36]	; 0x24
 80159ae:	1e71      	subs	r1, r6, #1
 80159b0:	f3c5 6400 	ubfx	r4, r5, #24, #1
 80159b4:	f3c5 6040 	ubfx	r0, r5, #25, #1
 80159b8:	1092      	asrs	r2, r2, #2
 80159ba:	f3c5 65c0 	ubfx	r5, r5, #27, #1
 80159be:	910a      	str	r1, [sp, #40]	; 0x28
 80159c0:	4271      	negs	r1, r6
 80159c2:	9106      	str	r1, [sp, #24]
 80159c4:	2a00      	cmp	r2, #0
 80159c6:	f1c5 0100 	rsb	r1, r5, #0
 80159ca:	4463      	add	r3, ip
 80159cc:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
 80159d0:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 80159d4:	f1c0 0000 	rsb	r0, r0, #0
 80159d8:	f1c4 0400 	rsb	r4, r4, #0
 80159dc:	f105 36ff 	add.w	r6, r5, #4294967295	; 0xffffffff
 80159e0:	9107      	str	r1, [sp, #28]
 80159e2:	f2c0 80d4 	blt.w	8015b8e <forward_lite_nl_softmax_iu8ou8+0x34a>
 80159e6:	2501      	movs	r5, #1
 80159e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80159ea:	428d      	cmp	r5, r1
 80159ec:	bfb8      	it	lt
 80159ee:	3201      	addlt	r2, #1
 80159f0:	4d7b      	ldr	r5, [pc, #492]	; (8015be0 <forward_lite_nl_softmax_iu8ou8+0x39c>)
 80159f2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80159f4:	45c6      	cmp	lr, r8
 80159f6:	bf06      	itte	eq
 80159f8:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 80159fc:	f04f 0800 	moveq.w	r8, #0
 8015a00:	f04f 38ff 	movne.w	r8, #4294967295	; 0xffffffff
 8015a04:	186d      	adds	r5, r5, r1
 8015a06:	eb43 0308 	adc.w	r3, r3, r8
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	da05      	bge.n	8015a1a <forward_lite_nl_softmax_iu8ou8+0x1d6>
 8015a0e:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 8015a12:	eb15 050e 	adds.w	r5, r5, lr
 8015a16:	f143 0300 	adc.w	r3, r3, #0
 8015a1a:	0fed      	lsrs	r5, r5, #31
 8015a1c:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
 8015a20:	442a      	add	r2, r5
 8015a22:	2a00      	cmp	r2, #0
 8015a24:	4b6e      	ldr	r3, [pc, #440]	; (8015be0 <forward_lite_nl_softmax_iu8ou8+0x39c>)
 8015a26:	496f      	ldr	r1, [pc, #444]	; (8015be4 <forward_lite_nl_softmax_iu8ou8+0x3a0>)
 8015a28:	bfa6      	itte	ge
 8015a2a:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 8015a2e:	2500      	movge	r5, #0
 8015a30:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 8015a34:	fbc2 3501 	smlal	r3, r5, r2, r1
 8015a38:	2d00      	cmp	r5, #0
 8015a3a:	da04      	bge.n	8015a46 <forward_lite_nl_softmax_iu8ou8+0x202>
 8015a3c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8015a40:	189b      	adds	r3, r3, r2
 8015a42:	f145 0500 	adc.w	r5, r5, #0
 8015a46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015a48:	0fdb      	lsrs	r3, r3, #31
 8015a4a:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 8015a4e:	441a      	add	r2, r3
 8015a50:	4613      	mov	r3, r2
 8015a52:	1052      	asrs	r2, r2, #1
 8015a54:	d402      	bmi.n	8015a5c <forward_lite_nl_softmax_iu8ou8+0x218>
 8015a56:	07dd      	lsls	r5, r3, #31
 8015a58:	bf48      	it	mi
 8015a5a:	3201      	addmi	r2, #1
 8015a5c:	9900      	ldr	r1, [sp, #0]
 8015a5e:	4d62      	ldr	r5, [pc, #392]	; (8015be8 <forward_lite_nl_softmax_iu8ou8+0x3a4>)
 8015a60:	4411      	add	r1, r2
 8015a62:	2900      	cmp	r1, #0
 8015a64:	4a5e      	ldr	r2, [pc, #376]	; (8015be0 <forward_lite_nl_softmax_iu8ou8+0x39c>)
 8015a66:	bfa6      	itte	ge
 8015a68:	2300      	movge	r3, #0
 8015a6a:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
 8015a6e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015a72:	fbc1 2305 	smlal	r2, r3, r1, r5
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	da04      	bge.n	8015a84 <forward_lite_nl_softmax_iu8ou8+0x240>
 8015a7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015a7e:	1852      	adds	r2, r2, r1
 8015a80:	f143 0300 	adc.w	r3, r3, #0
 8015a84:	0fd2      	lsrs	r2, r2, #31
 8015a86:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 8015a8a:	f102 42e2 	add.w	r2, r2, #1895825408	; 0x71000000
 8015a8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015a92:	2100      	movs	r1, #0
 8015a94:	4d55      	ldr	r5, [pc, #340]	; (8015bec <forward_lite_nl_softmax_iu8ou8+0x3a8>)
 8015a96:	f5a2 2225 	sub.w	r2, r2, #675840	; 0xa5000
 8015a9a:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
 8015a9e:	4698      	mov	r8, r3
 8015aa0:	468e      	mov	lr, r1
 8015aa2:	fbc2 8e05 	smlal	r8, lr, r2, r5
 8015aa6:	4645      	mov	r5, r8
 8015aa8:	0fed      	lsrs	r5, r5, #31
 8015aaa:	ea45 054e 	orr.w	r5, r5, lr, lsl #1
 8015aae:	4025      	ands	r5, r4
 8015ab0:	ea02 0c0c 	and.w	ip, r2, ip
 8015ab4:	ea8c 0c05 	eor.w	ip, ip, r5
 8015ab8:	4d4d      	ldr	r5, [pc, #308]	; (8015bf0 <forward_lite_nl_softmax_iu8ou8+0x3ac>)
 8015aba:	461a      	mov	r2, r3
 8015abc:	460c      	mov	r4, r1
 8015abe:	fbcc 2405 	smlal	r2, r4, ip, r5
 8015ac2:	0fd2      	lsrs	r2, r2, #31
 8015ac4:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8015ac8:	4002      	ands	r2, r0
 8015aca:	4d4a      	ldr	r5, [pc, #296]	; (8015bf4 <forward_lite_nl_softmax_iu8ou8+0x3b0>)
 8015acc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015ace:	ea0c 0707 	and.w	r7, ip, r7
 8015ad2:	4057      	eors	r7, r2
 8015ad4:	460c      	mov	r4, r1
 8015ad6:	461a      	mov	r2, r3
 8015ad8:	fbc7 2405 	smlal	r2, r4, r7, r5
 8015adc:	0fd2      	lsrs	r2, r2, #31
 8015ade:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8015ae2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015ae4:	4038      	ands	r0, r7
 8015ae6:	4014      	ands	r4, r2
 8015ae8:	4060      	eors	r0, r4
 8015aea:	4c43      	ldr	r4, [pc, #268]	; (8015bf8 <forward_lite_nl_softmax_iu8ou8+0x3b4>)
 8015aec:	461d      	mov	r5, r3
 8015aee:	460a      	mov	r2, r1
 8015af0:	fbc0 5204 	smlal	r5, r2, r0, r4
 8015af4:	0fed      	lsrs	r5, r5, #31
 8015af6:	ea45 0542 	orr.w	r5, r5, r2, lsl #1
 8015afa:	9a07      	ldr	r2, [sp, #28]
 8015afc:	4006      	ands	r6, r0
 8015afe:	402a      	ands	r2, r5
 8015b00:	4d3e      	ldr	r5, [pc, #248]	; (8015bfc <forward_lite_nl_softmax_iu8ou8+0x3b8>)
 8015b02:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015b04:	4056      	eors	r6, r2
 8015b06:	460c      	mov	r4, r1
 8015b08:	461a      	mov	r2, r3
 8015b0a:	fbc6 2405 	smlal	r2, r4, r6, r5
 8015b0e:	4030      	ands	r0, r6
 8015b10:	0fd2      	lsrs	r2, r2, #31
 8015b12:	9e06      	ldr	r6, [sp, #24]
 8015b14:	4d3a      	ldr	r5, [pc, #232]	; (8015c00 <forward_lite_nl_softmax_iu8ou8+0x3bc>)
 8015b16:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8015b1a:	4016      	ands	r6, r2
 8015b1c:	4070      	eors	r0, r6
 8015b1e:	461a      	mov	r2, r3
 8015b20:	460e      	mov	r6, r1
 8015b22:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015b24:	fbc0 2605 	smlal	r2, r6, r0, r5
 8015b28:	4004      	ands	r4, r0
 8015b2a:	0fd2      	lsrs	r2, r2, #31
 8015b2c:	9805      	ldr	r0, [sp, #20]
 8015b2e:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
 8015b32:	4010      	ands	r0, r2
 8015b34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015b36:	4044      	eors	r4, r0
 8015b38:	ea04 0e02 	and.w	lr, r4, r2
 8015b3c:	22f2      	movs	r2, #242	; 0xf2
 8015b3e:	fbc4 3102 	smlal	r3, r1, r4, r2
 8015b42:	0fdb      	lsrs	r3, r3, #31
 8015b44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015b46:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8015b4a:	401a      	ands	r2, r3
 8015b4c:	ea8e 0302 	eor.w	r3, lr, r2
 8015b50:	9a08      	ldr	r2, [sp, #32]
 8015b52:	ea03 0e02 	and.w	lr, r3, r2
 8015b56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015b58:	ea8e 0303 	eor.w	r3, lr, r3
 8015b5c:	131a      	asrs	r2, r3, #12
 8015b5e:	0519      	lsls	r1, r3, #20
 8015b60:	9903      	ldr	r1, [sp, #12]
 8015b62:	bf48      	it	mi
 8015b64:	3201      	addmi	r2, #1
 8015b66:	4411      	add	r1, r2
 8015b68:	9103      	str	r1, [sp, #12]
 8015b6a:	9a01      	ldr	r2, [sp, #4]
 8015b6c:	f84a 3f04 	str.w	r3, [sl, #4]!
 8015b70:	f10b 0302 	add.w	r3, fp, #2
 8015b74:	1a9b      	subs	r3, r3, r2
 8015b76:	9a02      	ldr	r2, [sp, #8]
 8015b78:	429a      	cmp	r2, r3
 8015b7a:	d943      	bls.n	8015c04 <forward_lite_nl_softmax_iu8ou8+0x3c0>
 8015b7c:	9a04      	ldr	r2, [sp, #16]
 8015b7e:	46cb      	mov	fp, r9
 8015b80:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 8015b84:	429a      	cmp	r2, r3
 8015b86:	f77f ae90 	ble.w	80158aa <forward_lite_nl_softmax_iu8ou8+0x66>
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	e7ed      	b.n	8015b6a <forward_lite_nl_softmax_iu8ou8+0x326>
 8015b8e:	2502      	movs	r5, #2
 8015b90:	e72a      	b.n	80159e8 <forward_lite_nl_softmax_iu8ou8+0x1a4>
 8015b92:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8015b96:	f000 8234 	beq.w	8016002 <forward_lite_nl_softmax_iu8ou8+0x7be>
 8015b9a:	f040 457f 	orr.w	r5, r0, #4278190080	; 0xff000000
 8015b9e:	0169      	lsls	r1, r5, #5
 8015ba0:	f101 5280 	add.w	r2, r1, #268435456	; 0x10000000
 8015ba4:	1a2d      	subs	r5, r5, r0
 8015ba6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015baa:	f04f 0c00 	mov.w	ip, #0
 8015bae:	fbc2 3c02 	smlal	r3, ip, r2, r2
 8015bb2:	9200      	str	r2, [sp, #0]
 8015bb4:	f3c5 7280 	ubfx	r2, r5, #30, #1
 8015bb8:	1e51      	subs	r1, r2, #1
 8015bba:	f3c5 7640 	ubfx	r6, r5, #29, #1
 8015bbe:	4252      	negs	r2, r2
 8015bc0:	920f      	str	r2, [sp, #60]	; 0x3c
 8015bc2:	f1bc 0f00 	cmp.w	ip, #0
 8015bc6:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 8015bca:	9111      	str	r1, [sp, #68]	; 0x44
 8015bcc:	9210      	str	r2, [sp, #64]	; 0x40
 8015bce:	f6bf aeae 	bge.w	801592e <forward_lite_nl_softmax_iu8ou8+0xea>
 8015bd2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8015bd6:	189b      	adds	r3, r3, r2
 8015bd8:	f14c 0c00 	adc.w	ip, ip, #0
 8015bdc:	e6a7      	b.n	801592e <forward_lite_nl_softmax_iu8ou8+0xea>
 8015bde:	bf00      	nop
 8015be0:	c0000001 	.word	0xc0000001
 8015be4:	2aaaaaab 	.word	0x2aaaaaab
 8015be8:	70f5a894 	.word	0x70f5a894
 8015bec:	63afbe7b 	.word	0x63afbe7b
 8015bf0:	4da2cbf2 	.word	0x4da2cbf2
 8015bf4:	2f16ac6c 	.word	0x2f16ac6c
 8015bf8:	1152aaa4 	.word	0x1152aaa4
 8015bfc:	02582ab7 	.word	0x02582ab7
 8015c00:	000afe11 	.word	0x000afe11
 8015c04:	9b03      	ldr	r3, [sp, #12]
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	f000 816d 	beq.w	8015ee6 <forward_lite_nl_softmax_iu8ou8+0x6a2>
 8015c0c:	fab3 f483 	clz	r4, r3
 8015c10:	fa03 f104 	lsl.w	r1, r3, r4
 8015c14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015c18:	17da      	asrs	r2, r3, #31
 8015c1a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8015c1e:	bf08      	it	eq
 8015c20:	2900      	cmpeq	r1, #0
 8015c22:	f1c4 0423 	rsb	r4, r4, #35	; 0x23
 8015c26:	f000 815f 	beq.w	8015ee8 <forward_lite_nl_softmax_iu8ou8+0x6a4>
 8015c2a:	f113 4300 	adds.w	r3, r3, #2147483648	; 0x80000000
 8015c2e:	f142 0200 	adc.w	r2, r2, #0
 8015c32:	085b      	lsrs	r3, r3, #1
 8015c34:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8015c38:	49a7      	ldr	r1, [pc, #668]	; (8015ed8 <forward_lite_nl_softmax_iu8ou8+0x694>)
 8015c3a:	4fa8      	ldr	r7, [pc, #672]	; (8015edc <forward_lite_nl_softmax_iu8ou8+0x698>)
 8015c3c:	1052      	asrs	r2, r2, #1
 8015c3e:	425d      	negs	r5, r3
 8015c40:	fb01 5502 	mla	r5, r1, r2, r5
 8015c44:	fba3 1601 	umull	r1, r6, r3, r1
 8015c48:	19c9      	adds	r1, r1, r7
 8015c4a:	4435      	add	r5, r6
 8015c4c:	f165 0500 	sbc.w	r5, r5, #0
 8015c50:	2d00      	cmp	r5, #0
 8015c52:	da04      	bge.n	8015c5e <forward_lite_nl_softmax_iu8ou8+0x41a>
 8015c54:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8015c58:	1809      	adds	r1, r1, r0
 8015c5a:	f145 0500 	adc.w	r5, r5, #0
 8015c5e:	0fc9      	lsrs	r1, r1, #31
 8015c60:	ea41 0045 	orr.w	r0, r1, r5, lsl #1
 8015c64:	f100 315a 	add.w	r1, r0, #1515870810	; 0x5a5a5a5a
 8015c68:	17ce      	asrs	r6, r1, #31
 8015c6a:	fb01 f502 	mul.w	r5, r1, r2
 8015c6e:	fb03 5506 	mla	r5, r3, r6, r5
 8015c72:	fba1 ce03 	umull	ip, lr, r1, r3
 8015c76:	f11c 4780 	adds.w	r7, ip, #1073741824	; 0x40000000
 8015c7a:	44ae      	add	lr, r5
 8015c7c:	f14e 0500 	adc.w	r5, lr, #0
 8015c80:	0fff      	lsrs	r7, r7, #31
 8015c82:	ea47 0745 	orr.w	r7, r7, r5, lsl #1
 8015c86:	f1d7 5700 	rsbs	r7, r7, #536870912	; 0x20000000
 8015c8a:	f140 81da 	bpl.w	8016042 <forward_lite_nl_softmax_iu8ou8+0x7fe>
 8015c8e:	4e93      	ldr	r6, [pc, #588]	; (8015edc <forward_lite_nl_softmax_iu8ou8+0x698>)
 8015c90:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8015c94:	fbc1 6807 	smlal	r6, r8, r1, r7
 8015c98:	f1b8 0f00 	cmp.w	r8, #0
 8015c9c:	da04      	bge.n	8015ca8 <forward_lite_nl_softmax_iu8ou8+0x464>
 8015c9e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8015ca2:	1976      	adds	r6, r6, r5
 8015ca4:	f148 0800 	adc.w	r8, r8, #0
 8015ca8:	0ff6      	lsrs	r6, r6, #31
 8015caa:	ea46 0648 	orr.w	r6, r6, r8, lsl #1
 8015cae:	f1b6 4f60 	cmp.w	r6, #3758096384	; 0xe0000000
 8015cb2:	f300 8191 	bgt.w	8015fd8 <forward_lite_nl_softmax_iu8ou8+0x794>
 8015cb6:	4f89      	ldr	r7, [pc, #548]	; (8015edc <forward_lite_nl_softmax_iu8ou8+0x698>)
 8015cb8:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8015cbc:	07d6      	lsls	r6, r2, #31
 8015cbe:	07d9      	lsls	r1, r3, #31
 8015cc0:	ebbc 0101 	subs.w	r1, ip, r1
 8015cc4:	ea46 0653 	orr.w	r6, r6, r3, lsr #1
 8015cc8:	eb6e 0606 	sbc.w	r6, lr, r6
 8015ccc:	19c9      	adds	r1, r1, r7
 8015cce:	f166 0600 	sbc.w	r6, r6, #0
 8015cd2:	2e00      	cmp	r6, #0
 8015cd4:	da04      	bge.n	8015ce0 <forward_lite_nl_softmax_iu8ou8+0x49c>
 8015cd6:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8015cda:	19c9      	adds	r1, r1, r7
 8015cdc:	f146 0600 	adc.w	r6, r6, #0
 8015ce0:	0fc9      	lsrs	r1, r1, #31
 8015ce2:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 8015ce6:	4e7d      	ldr	r6, [pc, #500]	; (8015edc <forward_lite_nl_softmax_iu8ou8+0x698>)
 8015ce8:	f1c1 5100 	rsb	r1, r1, #536870912	; 0x20000000
 8015cec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015cf0:	fbc1 6705 	smlal	r6, r7, r1, r5
 8015cf4:	2f00      	cmp	r7, #0
 8015cf6:	da04      	bge.n	8015d02 <forward_lite_nl_softmax_iu8ou8+0x4be>
 8015cf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015cfc:	1876      	adds	r6, r6, r1
 8015cfe:	f147 0700 	adc.w	r7, r7, #0
 8015d02:	0ff1      	lsrs	r1, r6, #31
 8015d04:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
 8015d08:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8015d0c:	f2c0 80a6 	blt.w	8015e5c <forward_lite_nl_softmax_iu8ou8+0x618>
 8015d10:	f1a0 35a5 	sub.w	r5, r0, #2779096485	; 0xa5a5a5a5
 8015d14:	3d02      	subs	r5, #2
 8015d16:	2600      	movs	r6, #0
 8015d18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8015d1c:	2700      	movs	r7, #0
 8015d1e:	fb05 f202 	mul.w	r2, r5, r2
 8015d22:	17e9      	asrs	r1, r5, #31
 8015d24:	fb03 2201 	mla	r2, r3, r1, r2
 8015d28:	fba5 3c03 	umull	r3, ip, r5, r3
 8015d2c:	181b      	adds	r3, r3, r0
 8015d2e:	4462      	add	r2, ip
 8015d30:	eb42 0707 	adc.w	r7, r2, r7
 8015d34:	2f00      	cmp	r7, #0
 8015d36:	da04      	bge.n	8015d42 <forward_lite_nl_softmax_iu8ou8+0x4fe>
 8015d38:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8015d3c:	189b      	adds	r3, r3, r2
 8015d3e:	f147 0700 	adc.w	r7, r7, #0
 8015d42:	0fdb      	lsrs	r3, r3, #31
 8015d44:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
 8015d48:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 8015d4c:	0fd8      	lsrs	r0, r3, #31
 8015d4e:	42b0      	cmp	r0, r6
 8015d50:	4a62      	ldr	r2, [pc, #392]	; (8015edc <forward_lite_nl_softmax_iu8ou8+0x698>)
 8015d52:	bf06      	itte	eq
 8015d54:	2000      	moveq	r0, #0
 8015d56:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 8015d5a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8015d5e:	fb03 f101 	mul.w	r1, r3, r1
 8015d62:	17de      	asrs	r6, r3, #31
 8015d64:	fb05 1106 	mla	r1, r5, r6, r1
 8015d68:	fba3 3605 	umull	r3, r6, r3, r5
 8015d6c:	189b      	adds	r3, r3, r2
 8015d6e:	4431      	add	r1, r6
 8015d70:	eb41 0000 	adc.w	r0, r1, r0
 8015d74:	2800      	cmp	r0, #0
 8015d76:	da04      	bge.n	8015d82 <forward_lite_nl_softmax_iu8ou8+0x53e>
 8015d78:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8015d7c:	189b      	adds	r3, r3, r2
 8015d7e:	f140 0000 	adc.w	r0, r0, #0
 8015d82:	0fdb      	lsrs	r3, r3, #31
 8015d84:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8015d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015d8c:	f2c0 8096 	blt.w	8015ebc <forward_lite_nl_softmax_iu8ou8+0x678>
 8015d90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015d94:	440d      	add	r5, r1
 8015d96:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8015d9a:	bfb8      	it	lt
 8015d9c:	0069      	lsllt	r1, r5, #1
 8015d9e:	9b02      	ldr	r3, [sp, #8]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d044      	beq.n	8015e2e <forward_lite_nl_softmax_iu8ou8+0x5ea>
 8015da4:	2601      	movs	r6, #1
 8015da6:	40a6      	lsls	r6, r4
 8015da8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015daa:	f8df c130 	ldr.w	ip, [pc, #304]	; 8015edc <forward_lite_nl_softmax_iu8ou8+0x698>
 8015dae:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8015db0:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8015db4:	3e01      	subs	r6, #1
 8015db6:	ea4f 0866 	mov.w	r8, r6, asr #1
 8015dba:	f108 0901 	add.w	r9, r8, #1
 8015dbe:	0fcf      	lsrs	r7, r1, #31
 8015dc0:	1e5d      	subs	r5, r3, #1
 8015dc2:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 8015dc6:	e009      	b.n	8015ddc <forward_lite_nl_softmax_iu8ou8+0x598>
 8015dc8:	4590      	cmp	r8, r2
 8015dca:	da00      	bge.n	8015dce <forward_lite_nl_softmax_iu8ou8+0x58a>
 8015dcc:	3301      	adds	r3, #1
 8015dce:	2bfe      	cmp	r3, #254	; 0xfe
 8015dd0:	dd40      	ble.n	8015e54 <forward_lite_nl_softmax_iu8ou8+0x610>
 8015dd2:	23ff      	movs	r3, #255	; 0xff
 8015dd4:	4582      	cmp	sl, r0
 8015dd6:	f805 3f01 	strb.w	r3, [r5, #1]!
 8015dda:	d028      	beq.n	8015e2e <forward_lite_nl_softmax_iu8ou8+0x5ea>
 8015ddc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8015de0:	ea4f 73db 	mov.w	r3, fp, lsr #31
 8015de4:	42bb      	cmp	r3, r7
 8015de6:	bf0b      	itete	eq
 8015de8:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 8015dec:	4662      	movne	r2, ip
 8015dee:	2300      	moveq	r3, #0
 8015df0:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8015df4:	fbcb 2301 	smlal	r2, r3, fp, r1
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	da03      	bge.n	8015e04 <forward_lite_nl_softmax_iu8ou8+0x5c0>
 8015dfc:	eb12 020e 	adds.w	r2, r2, lr
 8015e00:	f143 0300 	adc.w	r3, r3, #0
 8015e04:	0fd2      	lsrs	r2, r2, #31
 8015e06:	458b      	cmp	fp, r1
 8015e08:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 8015e0c:	d104      	bne.n	8015e18 <forward_lite_nl_softmax_iu8ou8+0x5d4>
 8015e0e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8015e12:	bf08      	it	eq
 8015e14:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
 8015e18:	ea06 0203 	and.w	r2, r6, r3
 8015e1c:	4123      	asrs	r3, r4
 8015e1e:	d5d3      	bpl.n	8015dc8 <forward_lite_nl_softmax_iu8ou8+0x584>
 8015e20:	4591      	cmp	r9, r2
 8015e22:	dbd3      	blt.n	8015dcc <forward_lite_nl_softmax_iu8ou8+0x588>
 8015e24:	2300      	movs	r3, #0
 8015e26:	4582      	cmp	sl, r0
 8015e28:	f805 3f01 	strb.w	r3, [r5, #1]!
 8015e2c:	d1d6      	bne.n	8015ddc <forward_lite_nl_softmax_iu8ou8+0x598>
 8015e2e:	9b01      	ldr	r3, [sp, #4]
 8015e30:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015e32:	9925      	ldr	r1, [sp, #148]	; 0x94
 8015e34:	4413      	add	r3, r2
 8015e36:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015e38:	9301      	str	r3, [sp, #4]
 8015e3a:	440a      	add	r2, r1
 8015e3c:	9215      	str	r2, [sp, #84]	; 0x54
 8015e3e:	9924      	ldr	r1, [sp, #144]	; 0x90
 8015e40:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015e42:	440a      	add	r2, r1
 8015e44:	9216      	str	r2, [sp, #88]	; 0x58
 8015e46:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015e48:	429a      	cmp	r2, r3
 8015e4a:	f63f ad10 	bhi.w	801586e <forward_lite_nl_softmax_iu8ou8+0x2a>
 8015e4e:	b01b      	add	sp, #108	; 0x6c
 8015e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	dde5      	ble.n	8015e24 <forward_lite_nl_softmax_iu8ou8+0x5e0>
 8015e58:	b2db      	uxtb	r3, r3
 8015e5a:	e7bb      	b.n	8015dd4 <forward_lite_nl_softmax_iu8ou8+0x590>
 8015e5c:	f1b1 4f60 	cmp.w	r1, #3758096384	; 0xe0000000
 8015e60:	bfc8      	it	gt
 8015e62:	f04f 0800 	movgt.w	r8, #0
 8015e66:	f300 8106 	bgt.w	8016076 <forward_lite_nl_softmax_iu8ou8+0x832>
 8015e6a:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8015e6e:	17e8      	asrs	r0, r5, #31
 8015e70:	491a      	ldr	r1, [pc, #104]	; (8015edc <forward_lite_nl_softmax_iu8ou8+0x698>)
 8015e72:	fb05 f202 	mul.w	r2, r5, r2
 8015e76:	fb03 2200 	mla	r2, r3, r0, r2
 8015e7a:	fba5 3003 	umull	r3, r0, r5, r3
 8015e7e:	185b      	adds	r3, r3, r1
 8015e80:	4410      	add	r0, r2
 8015e82:	f160 0000 	sbc.w	r0, r0, #0
 8015e86:	2800      	cmp	r0, #0
 8015e88:	da04      	bge.n	8015e94 <forward_lite_nl_softmax_iu8ou8+0x650>
 8015e8a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8015e8e:	189b      	adds	r3, r3, r2
 8015e90:	f140 0000 	adc.w	r0, r0, #0
 8015e94:	0fdb      	lsrs	r3, r3, #31
 8015e96:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8015e9a:	f1c3 5200 	rsb	r2, r3, #536870912	; 0x20000000
 8015e9e:	4b0f      	ldr	r3, [pc, #60]	; (8015edc <forward_lite_nl_softmax_iu8ou8+0x698>)
 8015ea0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015ea4:	fbc5 3102 	smlal	r3, r1, r5, r2
 8015ea8:	2900      	cmp	r1, #0
 8015eaa:	da04      	bge.n	8015eb6 <forward_lite_nl_softmax_iu8ou8+0x672>
 8015eac:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8015eb0:	189b      	adds	r3, r3, r2
 8015eb2:	f141 0100 	adc.w	r1, r1, #0
 8015eb6:	0fdb      	lsrs	r3, r3, #31
 8015eb8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8015ebc:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8015ec0:	f300 80db 	bgt.w	801607a <forward_lite_nl_softmax_iu8ou8+0x836>
 8015ec4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8015ec8:	0069      	lsls	r1, r5, #1
 8015eca:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8015ece:	bfd8      	it	le
 8015ed0:	f04f 4100 	movle.w	r1, #2147483648	; 0x80000000
 8015ed4:	e763      	b.n	8015d9e <forward_lite_nl_softmax_iu8ou8+0x55a>
 8015ed6:	bf00      	nop
 8015ed8:	c3c3c3c4 	.word	0xc3c3c3c4
 8015edc:	c0000001 	.word	0xc0000001
 8015ee0:	2a00      	cmp	r2, #0
 8015ee2:	f47f acd3 	bne.w	801588c <forward_lite_nl_softmax_iu8ou8+0x48>
 8015ee6:	2403      	movs	r4, #3
 8015ee8:	4869      	ldr	r0, [pc, #420]	; (8016090 <forward_lite_nl_softmax_iu8ou8+0x84c>)
 8015eea:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 80160a8 <forward_lite_nl_softmax_iu8ou8+0x864>
 8015eee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015ef2:	f04f 0c00 	mov.w	ip, #0
 8015ef6:	f04f 0801 	mov.w	r8, #1
 8015efa:	4605      	mov	r5, r0
 8015efc:	463b      	mov	r3, r7
 8015efe:	463a      	mov	r2, r7
 8015f00:	46c1      	mov	r9, r8
 8015f02:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8015f06:	2600      	movs	r6, #0
 8015f08:	eb11 010e 	adds.w	r1, r1, lr
 8015f0c:	eb46 060c 	adc.w	r6, r6, ip
 8015f10:	2e00      	cmp	r6, #0
 8015f12:	da05      	bge.n	8015f20 <forward_lite_nl_softmax_iu8ou8+0x6dc>
 8015f14:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 8015f18:	eb11 010c 	adds.w	r1, r1, ip
 8015f1c:	f146 0600 	adc.w	r6, r6, #0
 8015f20:	0fc9      	lsrs	r1, r1, #31
 8015f22:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 8015f26:	f1c1 5100 	rsb	r1, r1, #536870912	; 0x20000000
 8015f2a:	ea4f 7cd1 	mov.w	ip, r1, lsr #31
 8015f2e:	45cc      	cmp	ip, r9
 8015f30:	4e58      	ldr	r6, [pc, #352]	; (8016094 <forward_lite_nl_softmax_iu8ou8+0x850>)
 8015f32:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 8015f36:	fb01 f707 	mul.w	r7, r1, r7
 8015f3a:	fb00 770c 	mla	r7, r0, ip, r7
 8015f3e:	bf08      	it	eq
 8015f40:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
 8015f44:	fba1 0100 	umull	r0, r1, r1, r0
 8015f48:	bf0c      	ite	eq
 8015f4a:	f04f 0c00 	moveq.w	ip, #0
 8015f4e:	f04f 3cff 	movne.w	ip, #4294967295	; 0xffffffff
 8015f52:	440f      	add	r7, r1
 8015f54:	1986      	adds	r6, r0, r6
 8015f56:	eb47 070c 	adc.w	r7, r7, ip
 8015f5a:	2f00      	cmp	r7, #0
 8015f5c:	da04      	bge.n	8015f68 <forward_lite_nl_softmax_iu8ou8+0x724>
 8015f5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015f62:	1876      	adds	r6, r6, r1
 8015f64:	f147 0700 	adc.w	r7, r7, #0
 8015f68:	0ff6      	lsrs	r6, r6, #31
 8015f6a:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
 8015f6e:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 8015f72:	4631      	mov	r1, r6
 8015f74:	da23      	bge.n	8015fbe <forward_lite_nl_softmax_iu8ou8+0x77a>
 8015f76:	f1b6 4f60 	cmp.w	r6, #3758096384	; 0xe0000000
 8015f7a:	dc7c      	bgt.n	8016076 <forward_lite_nl_softmax_iu8ou8+0x832>
 8015f7c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8015f80:	f1b8 0f00 	cmp.w	r8, #0
 8015f84:	f43f af73 	beq.w	8015e6e <forward_lite_nl_softmax_iu8ou8+0x62a>
 8015f88:	fb05 f202 	mul.w	r2, r5, r2
 8015f8c:	17e9      	asrs	r1, r5, #31
 8015f8e:	fb03 2201 	mla	r2, r3, r1, r2
 8015f92:	fba5 3003 	umull	r3, r0, r5, r3
 8015f96:	f113 4380 	adds.w	r3, r3, #1073741824	; 0x40000000
 8015f9a:	eb42 0200 	adc.w	r2, r2, r0
 8015f9e:	2a00      	cmp	r2, #0
 8015fa0:	da04      	bge.n	8015fac <forward_lite_nl_softmax_iu8ou8+0x768>
 8015fa2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8015fa6:	181b      	adds	r3, r3, r0
 8015fa8:	f142 0200 	adc.w	r2, r2, #0
 8015fac:	0fdb      	lsrs	r3, r3, #31
 8015fae:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8015fb2:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 8015fb6:	4a37      	ldr	r2, [pc, #220]	; (8016094 <forward_lite_nl_softmax_iu8ou8+0x850>)
 8015fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015fbc:	e6cf      	b.n	8015d5e <forward_lite_nl_softmax_iu8ou8+0x51a>
 8015fbe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015fc2:	440d      	add	r5, r1
 8015fc4:	ebb8 7fd5 	cmp.w	r8, r5, lsr #31
 8015fc8:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8015fcc:	f43f aea4 	beq.w	8015d18 <forward_lite_nl_softmax_iu8ou8+0x4d4>
 8015fd0:	4830      	ldr	r0, [pc, #192]	; (8016094 <forward_lite_nl_softmax_iu8ou8+0x850>)
 8015fd2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015fd6:	e6a2      	b.n	8015d1e <forward_lite_nl_softmax_iu8ou8+0x4da>
 8015fd8:	eb01 0586 	add.w	r5, r1, r6, lsl #2
 8015fdc:	17ef      	asrs	r7, r5, #31
 8015fde:	fb03 f107 	mul.w	r1, r3, r7
 8015fe2:	fb05 1102 	mla	r1, r5, r2, r1
 8015fe6:	fba3 ec05 	umull	lr, ip, r3, r5
 8015fea:	2d00      	cmp	r5, #0
 8015fec:	4628      	mov	r0, r5
 8015fee:	448c      	add	ip, r1
 8015ff0:	da3e      	bge.n	8016070 <forward_lite_nl_softmax_iu8ou8+0x82c>
 8015ff2:	4928      	ldr	r1, [pc, #160]	; (8016094 <forward_lite_nl_softmax_iu8ou8+0x850>)
 8015ff4:	f04f 0901 	mov.w	r9, #1
 8015ff8:	f04f 0800 	mov.w	r8, #0
 8015ffc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8016000:	e782      	b.n	8015f08 <forward_lite_nl_softmax_iu8ou8+0x6c4>
 8016002:	4925      	ldr	r1, [pc, #148]	; (8016098 <forward_lite_nl_softmax_iu8ou8+0x854>)
 8016004:	910e      	str	r1, [sp, #56]	; 0x38
 8016006:	2200      	movs	r2, #0
 8016008:	4924      	ldr	r1, [pc, #144]	; (801609c <forward_lite_nl_softmax_iu8ou8+0x858>)
 801600a:	4b25      	ldr	r3, [pc, #148]	; (80160a0 <forward_lite_nl_softmax_iu8ou8+0x85c>)
 801600c:	9100      	str	r1, [sp, #0]
 801600e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8016012:	4611      	mov	r1, r2
 8016014:	e9cd 2609 	strd	r2, r6, [sp, #36]	; 0x24
 8016018:	e9cd 620b 	strd	r6, r2, [sp, #44]	; 0x2c
 801601c:	9205      	str	r2, [sp, #20]
 801601e:	9312      	str	r3, [sp, #72]	; 0x48
 8016020:	9206      	str	r2, [sp, #24]
 8016022:	9207      	str	r2, [sp, #28]
 8016024:	4610      	mov	r0, r2
 8016026:	4614      	mov	r4, r2
 8016028:	4696      	mov	lr, r2
 801602a:	4690      	mov	r8, r2
 801602c:	e9cd 160f 	strd	r1, r6, [sp, #60]	; 0x3c
 8016030:	4b1c      	ldr	r3, [pc, #112]	; (80160a4 <forward_lite_nl_softmax_iu8ou8+0x860>)
 8016032:	9608      	str	r6, [sp, #32]
 8016034:	46b4      	mov	ip, r6
 8016036:	4637      	mov	r7, r6
 8016038:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801603c:	910d      	str	r1, [sp, #52]	; 0x34
 801603e:	9611      	str	r6, [sp, #68]	; 0x44
 8016040:	e4d1      	b.n	80159e6 <forward_lite_nl_softmax_iu8ou8+0x1a2>
 8016042:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8016046:	f04f 0800 	mov.w	r8, #0
 801604a:	4605      	mov	r5, r0
 801604c:	4640      	mov	r0, r8
 801604e:	fbc1 5007 	smlal	r5, r0, r1, r7
 8016052:	0fed      	lsrs	r5, r5, #31
 8016054:	ea45 0540 	orr.w	r5, r5, r0, lsl #1
 8016058:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 801605c:	17ef      	asrs	r7, r5, #31
 801605e:	fb03 f107 	mul.w	r1, r3, r7
 8016062:	fb05 1102 	mla	r1, r5, r2, r1
 8016066:	fba3 ec05 	umull	lr, ip, r3, r5
 801606a:	4628      	mov	r0, r5
 801606c:	448c      	add	ip, r1
 801606e:	e747      	b.n	8015f00 <forward_lite_nl_softmax_iu8ou8+0x6bc>
 8016070:	f04f 0800 	mov.w	r8, #0
 8016074:	e744      	b.n	8015f00 <forward_lite_nl_softmax_iu8ou8+0x6bc>
 8016076:	0089      	lsls	r1, r1, #2
 8016078:	e7a3      	b.n	8015fc2 <forward_lite_nl_softmax_iu8ou8+0x77e>
 801607a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801607e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016082:	ea4f 0143 	mov.w	r1, r3, lsl #1
 8016086:	f6ff af20 	blt.w	8015eca <forward_lite_nl_softmax_iu8ou8+0x686>
 801608a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801608e:	e686      	b.n	8015d9e <forward_lite_nl_softmax_iu8ou8+0x55a>
 8016090:	b4b4b4b6 	.word	0xb4b4b4b6
 8016094:	c0000001 	.word	0xc0000001
 8016098:	01fffff8 	.word	0x01fffff8
 801609c:	0fffffe0 	.word	0x0fffffe0
 80160a0:	40000100 	.word	0x40000100
 80160a4:	001fffff 	.word	0x001fffff
 80160a8:	4b4b4b4a 	.word	0x4b4b4b4a

080160ac <forward_lite_pad_8bit_ch1st_3x3_constant>:
 80160ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160b0:	b083      	sub	sp, #12
 80160b2:	461e      	mov	r6, r3
 80160b4:	2e06      	cmp	r6, #6
 80160b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80160b8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80160ba:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80160be:	f992 4000 	ldrsb.w	r4, [r2]
 80160c2:	9301      	str	r3, [sp, #4]
 80160c4:	460d      	mov	r5, r1
 80160c6:	f000 8081 	beq.w	80161cc <forward_lite_pad_8bit_ch1st_3x3_constant+0x120>
 80160ca:	2e03      	cmp	r6, #3
 80160cc:	d056      	beq.n	801617c <forward_lite_pad_8bit_ch1st_3x3_constant+0xd0>
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	db05      	blt.n	80160de <forward_lite_pad_8bit_ch1st_3x3_constant+0x32>
 80160d2:	1c5a      	adds	r2, r3, #1
 80160d4:	4608      	mov	r0, r1
 80160d6:	4621      	mov	r1, r4
 80160d8:	4415      	add	r5, r2
 80160da:	f004 fea1 	bl	801ae20 <memset>
 80160de:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 80160e2:	f1b8 0f00 	cmp.w	r8, #0
 80160e6:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 80160ea:	dd27      	ble.n	801613c <forward_lite_pad_8bit_ch1st_3x3_constant+0x90>
 80160ec:	9b01      	ldr	r3, [sp, #4]
 80160ee:	f109 0702 	add.w	r7, r9, #2
 80160f2:	1c5a      	adds	r2, r3, #1
 80160f4:	fb07 f306 	mul.w	r3, r7, r6
 80160f8:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 80160fc:	9300      	str	r3, [sp, #0]
 80160fe:	f04f 0b00 	mov.w	fp, #0
 8016102:	2e00      	cmp	r6, #0
 8016104:	eb05 0109 	add.w	r1, r5, r9
 8016108:	dd0e      	ble.n	8016128 <forward_lite_pad_8bit_ch1st_3x3_constant+0x7c>
 801610a:	4608      	mov	r0, r1
 801610c:	2500      	movs	r5, #0
 801610e:	f04f 0300 	mov.w	r3, #0
 8016112:	f364 0307 	bfi	r3, r4, #0, #8
 8016116:	3501      	adds	r5, #1
 8016118:	f364 230f 	bfi	r3, r4, #8, #8
 801611c:	42b5      	cmp	r5, r6
 801611e:	8003      	strh	r3, [r0, #0]
 8016120:	4438      	add	r0, r7
 8016122:	d1f4      	bne.n	801610e <forward_lite_pad_8bit_ch1st_3x3_constant+0x62>
 8016124:	9b00      	ldr	r3, [sp, #0]
 8016126:	4419      	add	r1, r3
 8016128:	4652      	mov	r2, sl
 801612a:	f10b 0b01 	add.w	fp, fp, #1
 801612e:	4620      	mov	r0, r4
 8016130:	eb01 050a 	add.w	r5, r1, sl
 8016134:	f000 fe40 	bl	8016db8 <st_int8_fill>
 8016138:	45c3      	cmp	fp, r8
 801613a:	d1e2      	bne.n	8016102 <forward_lite_pad_8bit_ch1st_3x3_constant+0x56>
 801613c:	2e00      	cmp	r6, #0
 801613e:	eb05 0009 	add.w	r0, r5, r9
 8016142:	dd10      	ble.n	8016166 <forward_lite_pad_8bit_ch1st_3x3_constant+0xba>
 8016144:	f109 0702 	add.w	r7, r9, #2
 8016148:	4601      	mov	r1, r0
 801614a:	2200      	movs	r2, #0
 801614c:	f04f 0300 	mov.w	r3, #0
 8016150:	f364 0307 	bfi	r3, r4, #0, #8
 8016154:	3201      	adds	r2, #1
 8016156:	f364 230f 	bfi	r3, r4, #8, #8
 801615a:	42b2      	cmp	r2, r6
 801615c:	800b      	strh	r3, [r1, #0]
 801615e:	4439      	add	r1, r7
 8016160:	d1f4      	bne.n	801614c <forward_lite_pad_8bit_ch1st_3x3_constant+0xa0>
 8016162:	fb07 0002 	mla	r0, r7, r2, r0
 8016166:	9b01      	ldr	r3, [sp, #4]
 8016168:	2b00      	cmp	r3, #0
 801616a:	db2c      	blt.n	80161c6 <forward_lite_pad_8bit_ch1st_3x3_constant+0x11a>
 801616c:	461a      	mov	r2, r3
 801616e:	3201      	adds	r2, #1
 8016170:	4621      	mov	r1, r4
 8016172:	b003      	add	sp, #12
 8016174:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016178:	f004 be52 	b.w	801ae20 <memset>
 801617c:	b2e2      	uxtb	r2, r4
 801617e:	0223      	lsls	r3, r4, #8
 8016180:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8016184:	b29b      	uxth	r3, r3
 8016186:	0421      	lsls	r1, r4, #16
 8016188:	431a      	orrs	r2, r3
 801618a:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 801618e:	2f00      	cmp	r7, #0
 8016190:	ea41 0102 	orr.w	r1, r1, r2
 8016194:	b292      	uxth	r2, r2
 8016196:	dd16      	ble.n	80161c6 <forward_lite_pad_8bit_ch1st_3x3_constant+0x11a>
 8016198:	eb07 0887 	add.w	r8, r7, r7, lsl #2
 801619c:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 80161a0:	eb05 0008 	add.w	r0, r5, r8
 80161a4:	f04f 0300 	mov.w	r3, #0
 80161a8:	f364 0307 	bfi	r3, r4, #0, #8
 80161ac:	f364 230f 	bfi	r3, r4, #8, #8
 80161b0:	6029      	str	r1, [r5, #0]
 80161b2:	80aa      	strh	r2, [r5, #4]
 80161b4:	f8a5 3009 	strh.w	r3, [r5, #9]
 80161b8:	81ea      	strh	r2, [r5, #14]
 80161ba:	74ec      	strb	r4, [r5, #19]
 80161bc:	6169      	str	r1, [r5, #20]
 80161be:	762c      	strb	r4, [r5, #24]
 80161c0:	3519      	adds	r5, #25
 80161c2:	4285      	cmp	r5, r0
 80161c4:	d1ee      	bne.n	80161a4 <forward_lite_pad_8bit_ch1st_3x3_constant+0xf8>
 80161c6:	b003      	add	sp, #12
 80161c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161cc:	b2e2      	uxtb	r2, r4
 80161ce:	0223      	lsls	r3, r4, #8
 80161d0:	b29b      	uxth	r3, r3
 80161d2:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 80161d6:	431a      	orrs	r2, r3
 80161d8:	0423      	lsls	r3, r4, #16
 80161da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80161de:	2f00      	cmp	r7, #0
 80161e0:	ea42 0203 	orr.w	r2, r2, r3
 80161e4:	ddef      	ble.n	80161c6 <forward_lite_pad_8bit_ch1st_3x3_constant+0x11a>
 80161e6:	350f      	adds	r5, #15
 80161e8:	2100      	movs	r1, #0
 80161ea:	f04f 0300 	mov.w	r3, #0
 80161ee:	f364 0307 	bfi	r3, r4, #0, #8
 80161f2:	3101      	adds	r1, #1
 80161f4:	f364 230f 	bfi	r3, r4, #8, #8
 80161f8:	428f      	cmp	r7, r1
 80161fa:	f845 2c0f 	str.w	r2, [r5, #-15]
 80161fe:	f845 2c0b 	str.w	r2, [r5, #-11]
 8016202:	f805 4c07 	strb.w	r4, [r5, #-7]
 8016206:	802b      	strh	r3, [r5, #0]
 8016208:	812b      	strh	r3, [r5, #8]
 801620a:	822b      	strh	r3, [r5, #16]
 801620c:	832b      	strh	r3, [r5, #24]
 801620e:	842b      	strh	r3, [r5, #32]
 8016210:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
 8016214:	f8c5 2029 	str.w	r2, [r5, #41]	; 0x29
 8016218:	f8c5 202d 	str.w	r2, [r5, #45]	; 0x2d
 801621c:	f105 0540 	add.w	r5, r5, #64	; 0x40
 8016220:	d1e3      	bne.n	80161ea <forward_lite_pad_8bit_ch1st_3x3_constant+0x13e>
 8016222:	b003      	add	sp, #12
 8016224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016228 <forward_lite_pad_constant>:
 8016228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801622c:	b085      	sub	sp, #20
 801622e:	4616      	mov	r6, r2
 8016230:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016232:	9201      	str	r2, [sp, #4]
 8016234:	4681      	mov	r9, r0
 8016236:	e9dd 2011 	ldrd	r2, r0, [sp, #68]	; 0x44
 801623a:	2b08      	cmp	r3, #8
 801623c:	e9dd 5a0f 	ldrd	r5, sl, [sp, #60]	; 0x3c
 8016240:	e9dd 7813 	ldrd	r7, r8, [sp, #76]	; 0x4c
 8016244:	460c      	mov	r4, r1
 8016246:	9002      	str	r0, [sp, #8]
 8016248:	d052      	beq.n	80162f0 <forward_lite_pad_constant+0xc8>
 801624a:	2a00      	cmp	r2, #0
 801624c:	dd11      	ble.n	8016272 <forward_lite_pad_constant+0x4a>
 801624e:	f8cd 8000 	str.w	r8, [sp]
 8016252:	f04f 0b00 	mov.w	fp, #0
 8016256:	46b8      	mov	r8, r7
 8016258:	4617      	mov	r7, r2
 801625a:	4621      	mov	r1, r4
 801625c:	462a      	mov	r2, r5
 801625e:	44ab      	add	fp, r5
 8016260:	4630      	mov	r0, r6
 8016262:	f000 fe05 	bl	8016e70 <st_int8_copy>
 8016266:	455f      	cmp	r7, fp
 8016268:	442c      	add	r4, r5
 801626a:	dcf6      	bgt.n	801625a <forward_lite_pad_constant+0x32>
 801626c:	4647      	mov	r7, r8
 801626e:	f8dd 8000 	ldr.w	r8, [sp]
 8016272:	9b01      	ldr	r3, [sp, #4]
 8016274:	2b00      	cmp	r3, #0
 8016276:	dd2a      	ble.n	80162ce <forward_lite_pad_constant+0xa6>
 8016278:	2300      	movs	r3, #0
 801627a:	9300      	str	r3, [sp, #0]
 801627c:	2f00      	cmp	r7, #0
 801627e:	bfc8      	it	gt
 8016280:	f04f 0b00 	movgt.w	fp, #0
 8016284:	dd08      	ble.n	8016298 <forward_lite_pad_constant+0x70>
 8016286:	4621      	mov	r1, r4
 8016288:	462a      	mov	r2, r5
 801628a:	44ab      	add	fp, r5
 801628c:	4630      	mov	r0, r6
 801628e:	f000 fdef 	bl	8016e70 <st_int8_copy>
 8016292:	455f      	cmp	r7, fp
 8016294:	442c      	add	r4, r5
 8016296:	dcf6      	bgt.n	8016286 <forward_lite_pad_constant+0x5e>
 8016298:	4621      	mov	r1, r4
 801629a:	4648      	mov	r0, r9
 801629c:	4652      	mov	r2, sl
 801629e:	f000 fde7 	bl	8016e70 <st_int8_copy>
 80162a2:	f1b8 0f00 	cmp.w	r8, #0
 80162a6:	4454      	add	r4, sl
 80162a8:	44d1      	add	r9, sl
 80162aa:	dd0a      	ble.n	80162c2 <forward_lite_pad_constant+0x9a>
 80162ac:	f04f 0b00 	mov.w	fp, #0
 80162b0:	4621      	mov	r1, r4
 80162b2:	462a      	mov	r2, r5
 80162b4:	44ab      	add	fp, r5
 80162b6:	4630      	mov	r0, r6
 80162b8:	f000 fdda 	bl	8016e70 <st_int8_copy>
 80162bc:	45d8      	cmp	r8, fp
 80162be:	442c      	add	r4, r5
 80162c0:	dcf6      	bgt.n	80162b0 <forward_lite_pad_constant+0x88>
 80162c2:	9b00      	ldr	r3, [sp, #0]
 80162c4:	9a01      	ldr	r2, [sp, #4]
 80162c6:	3301      	adds	r3, #1
 80162c8:	429a      	cmp	r2, r3
 80162ca:	9300      	str	r3, [sp, #0]
 80162cc:	d1d6      	bne.n	801627c <forward_lite_pad_constant+0x54>
 80162ce:	9b02      	ldr	r3, [sp, #8]
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	dd0a      	ble.n	80162ea <forward_lite_pad_constant+0xc2>
 80162d4:	2700      	movs	r7, #0
 80162d6:	4698      	mov	r8, r3
 80162d8:	4621      	mov	r1, r4
 80162da:	462a      	mov	r2, r5
 80162dc:	4630      	mov	r0, r6
 80162de:	442f      	add	r7, r5
 80162e0:	f000 fdc6 	bl	8016e70 <st_int8_copy>
 80162e4:	45b8      	cmp	r8, r7
 80162e6:	442c      	add	r4, r5
 80162e8:	dcf6      	bgt.n	80162d8 <forward_lite_pad_constant+0xb0>
 80162ea:	b005      	add	sp, #20
 80162ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162f0:	f996 5000 	ldrsb.w	r5, [r6]
 80162f4:	4414      	add	r4, r2
 80162f6:	4628      	mov	r0, r5
 80162f8:	9403      	str	r4, [sp, #12]
 80162fa:	f000 fd5d 	bl	8016db8 <st_int8_fill>
 80162fe:	9b01      	ldr	r3, [sp, #4]
 8016300:	2b00      	cmp	r3, #0
 8016302:	4626      	mov	r6, r4
 8016304:	dd29      	ble.n	801635a <forward_lite_pad_constant+0x132>
 8016306:	eb0a 0308 	add.w	r3, sl, r8
 801630a:	443b      	add	r3, r7
 801630c:	f04f 0b00 	mov.w	fp, #0
 8016310:	9300      	str	r3, [sp, #0]
 8016312:	4643      	mov	r3, r8
 8016314:	443c      	add	r4, r7
 8016316:	46d8      	mov	r8, fp
 8016318:	469b      	mov	fp, r3
 801631a:	9b00      	ldr	r3, [sp, #0]
 801631c:	4631      	mov	r1, r6
 801631e:	463a      	mov	r2, r7
 8016320:	4628      	mov	r0, r5
 8016322:	441e      	add	r6, r3
 8016324:	f000 fd48 	bl	8016db8 <st_int8_fill>
 8016328:	4621      	mov	r1, r4
 801632a:	4648      	mov	r0, r9
 801632c:	4652      	mov	r2, sl
 801632e:	f000 fd9f 	bl	8016e70 <st_int8_copy>
 8016332:	9b00      	ldr	r3, [sp, #0]
 8016334:	eb04 010a 	add.w	r1, r4, sl
 8016338:	465a      	mov	r2, fp
 801633a:	4628      	mov	r0, r5
 801633c:	441c      	add	r4, r3
 801633e:	f000 fd3b 	bl	8016db8 <st_int8_fill>
 8016342:	9b01      	ldr	r3, [sp, #4]
 8016344:	f108 0801 	add.w	r8, r8, #1
 8016348:	4543      	cmp	r3, r8
 801634a:	44d1      	add	r9, sl
 801634c:	d1e5      	bne.n	801631a <forward_lite_pad_constant+0xf2>
 801634e:	461a      	mov	r2, r3
 8016350:	9900      	ldr	r1, [sp, #0]
 8016352:	9b03      	ldr	r3, [sp, #12]
 8016354:	fb01 3302 	mla	r3, r1, r2, r3
 8016358:	9303      	str	r3, [sp, #12]
 801635a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801635e:	4628      	mov	r0, r5
 8016360:	b005      	add	sp, #20
 8016362:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016366:	f000 bd27 	b.w	8016db8 <st_int8_fill>
 801636a:	bf00      	nop

0801636c <forward_lite_pad_edge>:
 801636c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016370:	ed2d 8b02 	vpush	{d8}
 8016374:	b087      	sub	sp, #28
 8016376:	e9dd 4a14 	ldrd	r4, sl, [sp, #80]	; 0x50
 801637a:	9305      	str	r3, [sp, #20]
 801637c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801637e:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
 8016382:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 8016386:	9103      	str	r1, [sp, #12]
 8016388:	18cd      	adds	r5, r1, r3
 801638a:	1e13      	subs	r3, r2, #0
 801638c:	9504      	str	r5, [sp, #16]
 801638e:	9301      	str	r3, [sp, #4]
 8016390:	dd37      	ble.n	8016402 <forward_lite_pad_edge+0x96>
 8016392:	fb04 f308 	mul.w	r3, r4, r8
 8016396:	9302      	str	r3, [sp, #8]
 8016398:	ee08 aa10 	vmov	s16, sl
 801639c:	2300      	movs	r3, #0
 801639e:	4607      	mov	r7, r0
 80163a0:	9300      	str	r3, [sp, #0]
 80163a2:	f1b9 0f00 	cmp.w	r9, #0
 80163a6:	bfc8      	it	gt
 80163a8:	2600      	movgt	r6, #0
 80163aa:	dd08      	ble.n	80163be <forward_lite_pad_edge+0x52>
 80163ac:	4629      	mov	r1, r5
 80163ae:	4426      	add	r6, r4
 80163b0:	4622      	mov	r2, r4
 80163b2:	4638      	mov	r0, r7
 80163b4:	f000 fd5c 	bl	8016e70 <st_int8_copy>
 80163b8:	45b1      	cmp	r9, r6
 80163ba:	4425      	add	r5, r4
 80163bc:	dcf6      	bgt.n	80163ac <forward_lite_pad_edge+0x40>
 80163be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80163c0:	4629      	mov	r1, r5
 80163c2:	4638      	mov	r0, r7
 80163c4:	461a      	mov	r2, r3
 80163c6:	441f      	add	r7, r3
 80163c8:	441d      	add	r5, r3
 80163ca:	f000 fd51 	bl	8016e70 <st_int8_copy>
 80163ce:	f1b8 0f00 	cmp.w	r8, #0
 80163d2:	eba7 0a04 	sub.w	sl, r7, r4
 80163d6:	dd0c      	ble.n	80163f2 <forward_lite_pad_edge+0x86>
 80163d8:	46ab      	mov	fp, r5
 80163da:	2600      	movs	r6, #0
 80163dc:	4659      	mov	r1, fp
 80163de:	3601      	adds	r6, #1
 80163e0:	4622      	mov	r2, r4
 80163e2:	4650      	mov	r0, sl
 80163e4:	f000 fd44 	bl	8016e70 <st_int8_copy>
 80163e8:	4546      	cmp	r6, r8
 80163ea:	44a3      	add	fp, r4
 80163ec:	d1f6      	bne.n	80163dc <forward_lite_pad_edge+0x70>
 80163ee:	9b02      	ldr	r3, [sp, #8]
 80163f0:	441d      	add	r5, r3
 80163f2:	9b00      	ldr	r3, [sp, #0]
 80163f4:	9a01      	ldr	r2, [sp, #4]
 80163f6:	3301      	adds	r3, #1
 80163f8:	429a      	cmp	r2, r3
 80163fa:	9300      	str	r3, [sp, #0]
 80163fc:	d1d1      	bne.n	80163a2 <forward_lite_pad_edge+0x36>
 80163fe:	ee18 aa10 	vmov	sl, s16
 8016402:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8016406:	4293      	cmp	r3, r2
 8016408:	d009      	beq.n	801641e <forward_lite_pad_edge+0xb2>
 801640a:	461c      	mov	r4, r3
 801640c:	4615      	mov	r5, r2
 801640e:	4621      	mov	r1, r4
 8016410:	4652      	mov	r2, sl
 8016412:	4628      	mov	r0, r5
 8016414:	4454      	add	r4, sl
 8016416:	f000 fd2b 	bl	8016e70 <st_int8_copy>
 801641a:	42a5      	cmp	r5, r4
 801641c:	d1f7      	bne.n	801640e <forward_lite_pad_edge+0xa2>
 801641e:	9b01      	ldr	r3, [sp, #4]
 8016420:	9d05      	ldr	r5, [sp, #20]
 8016422:	441d      	add	r5, r3
 8016424:	9b03      	ldr	r3, [sp, #12]
 8016426:	3d01      	subs	r5, #1
 8016428:	fb0a 3505 	mla	r5, sl, r5, r3
 801642c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801642e:	18ec      	adds	r4, r5, r3
 8016430:	42a5      	cmp	r5, r4
 8016432:	bf18      	it	ne
 8016434:	f1ca 0600 	rsbne	r6, sl, #0
 8016438:	d007      	beq.n	801644a <forward_lite_pad_edge+0xde>
 801643a:	4621      	mov	r1, r4
 801643c:	4652      	mov	r2, sl
 801643e:	4628      	mov	r0, r5
 8016440:	4434      	add	r4, r6
 8016442:	f000 fd15 	bl	8016e70 <st_int8_copy>
 8016446:	42a5      	cmp	r5, r4
 8016448:	d1f7      	bne.n	801643a <forward_lite_pad_edge+0xce>
 801644a:	b007      	add	sp, #28
 801644c:	ecbd 8b02 	vpop	{d8}
 8016450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016454 <forward_lite_pad_reflect>:
 8016454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016458:	b08f      	sub	sp, #60	; 0x3c
 801645a:	460e      	mov	r6, r1
 801645c:	9f22      	ldr	r7, [sp, #136]	; 0x88
 801645e:	f9bd 5080 	ldrsh.w	r5, [sp, #128]	; 0x80
 8016462:	f9bd e084 	ldrsh.w	lr, [sp, #132]	; 0x84
 8016466:	910b      	str	r1, [sp, #44]	; 0x2c
 8016468:	2b00      	cmp	r3, #0
 801646a:	4684      	mov	ip, r0
 801646c:	9002      	str	r0, [sp, #8]
 801646e:	950c      	str	r5, [sp, #48]	; 0x30
 8016470:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016472:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8016476:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8016478:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 801647c:	f9bd 007c 	ldrsh.w	r0, [sp, #124]	; 0x7c
 8016480:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8016482:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8016486:	4437      	add	r7, r6
 8016488:	9307      	str	r3, [sp, #28]
 801648a:	dd58      	ble.n	801653e <forward_lite_pad_reflect+0xea>
 801648c:	4408      	add	r0, r1
 801648e:	fb02 f200 	mul.w	r2, r2, r0
 8016492:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016494:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016496:	9206      	str	r2, [sp, #24]
 8016498:	4403      	add	r3, r0
 801649a:	442b      	add	r3, r5
 801649c:	930a      	str	r3, [sp, #40]	; 0x28
 801649e:	197b      	adds	r3, r7, r5
 80164a0:	9301      	str	r3, [sp, #4]
 80164a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80164a4:	1e8b      	subs	r3, r1, #2
 80164a6:	fb04 c303 	mla	r3, r4, r3, ip
 80164aa:	9304      	str	r3, [sp, #16]
 80164ac:	fb08 2305 	mla	r3, r8, r5, r2
 80164b0:	fb09 6303 	mla	r3, r9, r3, r6
 80164b4:	9303      	str	r3, [sp, #12]
 80164b6:	fb09 f308 	mul.w	r3, r9, r8
 80164ba:	fb04 f101 	mul.w	r1, r4, r1
 80164be:	9308      	str	r3, [sp, #32]
 80164c0:	2300      	movs	r3, #0
 80164c2:	9109      	str	r1, [sp, #36]	; 0x24
 80164c4:	9305      	str	r3, [sp, #20]
 80164c6:	f1c9 0a00 	rsb	sl, r9, #0
 80164ca:	9b01      	ldr	r3, [sp, #4]
 80164cc:	42bb      	cmp	r3, r7
 80164ce:	d00a      	beq.n	80164e6 <forward_lite_pad_reflect+0x92>
 80164d0:	9e02      	ldr	r6, [sp, #8]
 80164d2:	461d      	mov	r5, r3
 80164d4:	4455      	add	r5, sl
 80164d6:	4426      	add	r6, r4
 80164d8:	4622      	mov	r2, r4
 80164da:	4629      	mov	r1, r5
 80164dc:	4630      	mov	r0, r6
 80164de:	f000 fcc7 	bl	8016e70 <st_int8_copy>
 80164e2:	42bd      	cmp	r5, r7
 80164e4:	d1f6      	bne.n	80164d4 <forward_lite_pad_reflect+0x80>
 80164e6:	9b02      	ldr	r3, [sp, #8]
 80164e8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80164ea:	9901      	ldr	r1, [sp, #4]
 80164ec:	4618      	mov	r0, r3
 80164ee:	4413      	add	r3, r2
 80164f0:	9302      	str	r3, [sp, #8]
 80164f2:	f000 fcbd 	bl	8016e70 <st_int8_copy>
 80164f6:	9b06      	ldr	r3, [sp, #24]
 80164f8:	4543      	cmp	r3, r8
 80164fa:	da0d      	bge.n	8016518 <forward_lite_pad_reflect+0xc4>
 80164fc:	e9dd b603 	ldrd	fp, r6, [sp, #12]
 8016500:	461d      	mov	r5, r3
 8016502:	4659      	mov	r1, fp
 8016504:	4630      	mov	r0, r6
 8016506:	3501      	adds	r5, #1
 8016508:	4622      	mov	r2, r4
 801650a:	f000 fcb1 	bl	8016e70 <st_int8_copy>
 801650e:	45a8      	cmp	r8, r5
 8016510:	44cb      	add	fp, r9
 8016512:	eba6 0604 	sub.w	r6, r6, r4
 8016516:	d1f4      	bne.n	8016502 <forward_lite_pad_reflect+0xae>
 8016518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801651a:	9901      	ldr	r1, [sp, #4]
 801651c:	9b05      	ldr	r3, [sp, #20]
 801651e:	4411      	add	r1, r2
 8016520:	4417      	add	r7, r2
 8016522:	9101      	str	r1, [sp, #4]
 8016524:	9a04      	ldr	r2, [sp, #16]
 8016526:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016528:	440a      	add	r2, r1
 801652a:	9204      	str	r2, [sp, #16]
 801652c:	9908      	ldr	r1, [sp, #32]
 801652e:	9a03      	ldr	r2, [sp, #12]
 8016530:	440a      	add	r2, r1
 8016532:	9203      	str	r2, [sp, #12]
 8016534:	9a07      	ldr	r2, [sp, #28]
 8016536:	3301      	adds	r3, #1
 8016538:	429a      	cmp	r2, r3
 801653a:	9305      	str	r3, [sp, #20]
 801653c:	d1c5      	bne.n	80164ca <forward_lite_pad_reflect+0x76>
 801653e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016540:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016542:	fb03 f404 	mul.w	r4, r3, r4
 8016546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016548:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801654c:	42a3      	cmp	r3, r4
 801654e:	d00c      	beq.n	801656a <forward_lite_pad_reflect+0x116>
 8016550:	461d      	mov	r5, r3
 8016552:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016554:	425e      	negs	r6, r3
 8016556:	461f      	mov	r7, r3
 8016558:	4629      	mov	r1, r5
 801655a:	4620      	mov	r0, r4
 801655c:	463a      	mov	r2, r7
 801655e:	443d      	add	r5, r7
 8016560:	4434      	add	r4, r6
 8016562:	f000 fc85 	bl	8016e70 <st_int8_copy>
 8016566:	42a5      	cmp	r5, r4
 8016568:	d1f6      	bne.n	8016558 <forward_lite_pad_reflect+0x104>
 801656a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801656c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801656e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8016570:	1e5c      	subs	r4, r3, #1
 8016572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016574:	fb02 f505 	mul.w	r5, r2, r5
 8016578:	fb02 3404 	mla	r4, r2, r4, r3
 801657c:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 8016580:	42ac      	cmp	r4, r5
 8016582:	d00a      	beq.n	801659a <forward_lite_pad_reflect+0x146>
 8016584:	4256      	negs	r6, r2
 8016586:	4617      	mov	r7, r2
 8016588:	4621      	mov	r1, r4
 801658a:	4628      	mov	r0, r5
 801658c:	463a      	mov	r2, r7
 801658e:	4434      	add	r4, r6
 8016590:	443d      	add	r5, r7
 8016592:	f000 fc6d 	bl	8016e70 <st_int8_copy>
 8016596:	42ac      	cmp	r4, r5
 8016598:	d1f6      	bne.n	8016588 <forward_lite_pad_reflect+0x134>
 801659a:	b00f      	add	sp, #60	; 0x3c
 801659c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080165a0 <align_factor>:
 80165a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80165a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80165a8:	b508      	push	{r3, lr}
 80165aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165ae:	f04f 0300 	mov.w	r3, #0
 80165b2:	8003      	strh	r3, [r0, #0]
 80165b4:	d425      	bmi.n	8016602 <align_factor+0x62>
 80165b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80165ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80165be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80165c2:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80165c6:	e005      	b.n	80165d4 <align_factor+0x34>
 80165c8:	8003      	strh	r3, [r0, #0]
 80165ca:	b293      	uxth	r3, r2
 80165cc:	428b      	cmp	r3, r1
 80165ce:	ee20 0a07 	vmul.f32	s0, s0, s14
 80165d2:	d02d      	beq.n	8016630 <align_factor+0x90>
 80165d4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80165d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165dc:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80165e0:	dcf2      	bgt.n	80165c8 <align_factor+0x28>
 80165e2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8016644 <align_factor+0xa4>
 80165e6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80165ea:	ee17 0a90 	vmov	r0, s15
 80165ee:	f7e9 fe6f 	bl	80002d0 <__aeabi_f2lz>
 80165f2:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 80165f6:	bf1c      	itt	ne
 80165f8:	f06f 4000 	mvnne.w	r0, #2147483648	; 0x80000000
 80165fc:	ea80 70e1 	eorne.w	r0, r0, r1, asr #31
 8016600:	bd08      	pop	{r3, pc}
 8016602:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801660a:	ddd4      	ble.n	80165b6 <align_factor+0x16>
 801660c:	2301      	movs	r3, #1
 801660e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016612:	e005      	b.n	8016620 <align_factor+0x80>
 8016614:	8003      	strh	r3, [r0, #0]
 8016616:	b293      	uxth	r3, r2
 8016618:	2b21      	cmp	r3, #33	; 0x21
 801661a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801661e:	d00d      	beq.n	801663c <align_factor+0x9c>
 8016620:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016628:	f103 0201 	add.w	r2, r3, #1
 801662c:	d4f2      	bmi.n	8016614 <align_factor+0x74>
 801662e:	e7d8      	b.n	80165e2 <align_factor+0x42>
 8016630:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 8016634:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016638:	8003      	strh	r3, [r0, #0]
 801663a:	e7d2      	b.n	80165e2 <align_factor+0x42>
 801663c:	2300      	movs	r3, #0
 801663e:	8003      	strh	r3, [r0, #0]
 8016640:	4618      	mov	r0, r3
 8016642:	bd08      	pop	{r3, pc}
 8016644:	4f000000 	.word	0x4f000000

08016648 <align_factor_ch>:
 8016648:	b361      	cbz	r1, 80166a4 <align_factor_ch+0x5c>
 801664a:	ee80 7a20 	vdiv.f32	s14, s0, s1
 801664e:	b530      	push	{r4, r5, lr}
 8016650:	f1a2 0c04 	sub.w	ip, r2, #4
 8016654:	f1a3 0e02 	sub.w	lr, r3, #2
 8016658:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 801665c:	2500      	movs	r5, #0
 801665e:	ecf0 7a01 	vldmia	r0!, {s15}
 8016662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016666:	ee17 2a90 	vmov	r2, s15
 801666a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801666e:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8016672:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 8016676:	2a00      	cmp	r2, #0
 8016678:	f1c1 017e 	rsb	r1, r1, #126	; 0x7e
 801667c:	bfb8      	it	lt
 801667e:	425b      	neglt	r3, r3
 8016680:	291f      	cmp	r1, #31
 8016682:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8016686:	dc06      	bgt.n	8016696 <align_factor_ch+0x4e>
 8016688:	4284      	cmp	r4, r0
 801668a:	f82e 1f02 	strh.w	r1, [lr, #2]!
 801668e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8016692:	d1e4      	bne.n	801665e <align_factor_ch+0x16>
 8016694:	bd30      	pop	{r4, r5, pc}
 8016696:	4284      	cmp	r4, r0
 8016698:	f82e 5f02 	strh.w	r5, [lr, #2]!
 801669c:	f84c 5f04 	str.w	r5, [ip, #4]!
 80166a0:	d1dd      	bne.n	801665e <align_factor_ch+0x16>
 80166a2:	bd30      	pop	{r4, r5, pc}
 80166a4:	4770      	bx	lr
 80166a6:	bf00      	nop

080166a8 <st_sssa8_ch_convolve_rank1upd>:
 80166a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166ac:	b085      	sub	sp, #20
 80166ae:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 80166b2:	f99d b040 	ldrsb.w	fp, [sp, #64]	; 0x40
 80166b6:	fb13 f304 	smulbb	r3, r3, r4
 80166ba:	fb13 f500 	smulbb	r5, r3, r0
 80166be:	460c      	mov	r4, r1
 80166c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80166c2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80166c4:	2a00      	cmp	r2, #0
 80166c6:	d073      	beq.n	80167b0 <st_sssa8_ch_convolve_rank1upd+0x108>
 80166c8:	b2ad      	uxth	r5, r5
 80166ca:	ea4f 0895 	mov.w	r8, r5, lsr #2
 80166ce:	f1a3 0904 	sub.w	r9, r3, #4
 80166d2:	f1a8 0381 	sub.w	r3, r8, #129	; 0x81
 80166d6:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 80166da:	ebc3 2043 	rsb	r0, r3, r3, lsl #9
 80166de:	f1a8 0780 	sub.w	r7, r8, #128	; 0x80
 80166e2:	eb07 17c0 	add.w	r7, r7, r0, lsl #7
 80166e6:	0258      	lsls	r0, r3, #9
 80166e8:	3301      	adds	r3, #1
 80166ea:	025b      	lsls	r3, r3, #9
 80166ec:	f005 0503 	and.w	r5, r5, #3
 80166f0:	9301      	str	r3, [sp, #4]
 80166f2:	f500 6380 	add.w	r3, r0, #1024	; 0x400
 80166f6:	9303      	str	r3, [sp, #12]
 80166f8:	1e6b      	subs	r3, r5, #1
 80166fa:	b29b      	uxth	r3, r3
 80166fc:	9300      	str	r3, [sp, #0]
 80166fe:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8016702:	b2bf      	uxth	r7, r7
 8016704:	eb01 0a82 	add.w	sl, r1, r2, lsl #2
 8016708:	9302      	str	r3, [sp, #8]
 801670a:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 801670e:	d954      	bls.n	80167ba <st_sssa8_ch_convolve_rank1upd+0x112>
 8016710:	9b03      	ldr	r3, [sp, #12]
 8016712:	f504 7000 	add.w	r0, r4, #512	; 0x200
 8016716:	eb04 0c03 	add.w	ip, r4, r3
 801671a:	2600      	movs	r6, #0
 801671c:	f5a0 7100 	sub.w	r1, r0, #512	; 0x200
 8016720:	2200      	movs	r2, #0
 8016722:	f851 3b04 	ldr.w	r3, [r1], #4
 8016726:	fa2f fe83 	sxtb16	lr, r3
 801672a:	4281      	cmp	r1, r0
 801672c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8016730:	fa92 f21e 	qadd16	r2, r2, lr
 8016734:	fa2f f383 	sxtb16	r3, r3
 8016738:	fa92 f213 	qadd16	r2, r2, r3
 801673c:	d1f1      	bne.n	8016722 <st_sssa8_ch_convolve_rank1upd+0x7a>
 801673e:	f501 7000 	add.w	r0, r1, #512	; 0x200
 8016742:	b213      	sxth	r3, r2
 8016744:	eb03 4222 	add.w	r2, r3, r2, asr #16
 8016748:	4560      	cmp	r0, ip
 801674a:	4416      	add	r6, r2
 801674c:	d1e6      	bne.n	801671c <st_sssa8_ch_convolve_rank1upd+0x74>
 801674e:	9b01      	ldr	r3, [sp, #4]
 8016750:	18e1      	adds	r1, r4, r3
 8016752:	463c      	mov	r4, r7
 8016754:	b37c      	cbz	r4, 80167b6 <st_sssa8_ch_convolve_rank1upd+0x10e>
 8016756:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801675a:	2200      	movs	r2, #0
 801675c:	f851 3b04 	ldr.w	r3, [r1], #4
 8016760:	fa2f f083 	sxtb16	r0, r3
 8016764:	428c      	cmp	r4, r1
 8016766:	ea4f 2333 	mov.w	r3, r3, ror #8
 801676a:	fa92 f210 	qadd16	r2, r2, r0
 801676e:	fa2f f383 	sxtb16	r3, r3
 8016772:	fa92 f213 	qadd16	r2, r2, r3
 8016776:	d1f1      	bne.n	801675c <st_sssa8_ch_convolve_rank1upd+0xb4>
 8016778:	b213      	sxth	r3, r2
 801677a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 801677e:	441e      	add	r6, r3
 8016780:	b16d      	cbz	r5, 801679e <st_sssa8_ch_convolve_rank1upd+0xf6>
 8016782:	f994 3000 	ldrsb.w	r3, [r4]
 8016786:	441e      	add	r6, r3
 8016788:	9b00      	ldr	r3, [sp, #0]
 801678a:	b13b      	cbz	r3, 801679c <st_sssa8_ch_convolve_rank1upd+0xf4>
 801678c:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8016790:	2d02      	cmp	r5, #2
 8016792:	441e      	add	r6, r3
 8016794:	bf1c      	itt	ne
 8016796:	f994 3002 	ldrsbne.w	r3, [r4, #2]
 801679a:	18f6      	addne	r6, r6, r3
 801679c:	442c      	add	r4, r5
 801679e:	f859 3f04 	ldr.w	r3, [r9, #4]!
 80167a2:	fb0b 3616 	mls	r6, fp, r6, r3
 80167a6:	f84a 6b04 	str.w	r6, [sl], #4
 80167aa:	9b02      	ldr	r3, [sp, #8]
 80167ac:	459a      	cmp	sl, r3
 80167ae:	d1ac      	bne.n	801670a <st_sssa8_ch_convolve_rank1upd+0x62>
 80167b0:	b005      	add	sp, #20
 80167b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167b6:	460c      	mov	r4, r1
 80167b8:	e7e2      	b.n	8016780 <st_sssa8_ch_convolve_rank1upd+0xd8>
 80167ba:	4621      	mov	r1, r4
 80167bc:	2600      	movs	r6, #0
 80167be:	4644      	mov	r4, r8
 80167c0:	e7c8      	b.n	8016754 <st_sssa8_ch_convolve_rank1upd+0xac>
 80167c2:	bf00      	nop

080167c4 <st_sssa8_fully_connected>:
 80167c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167c8:	b097      	sub	sp, #92	; 0x5c
 80167ca:	460d      	mov	r5, r1
 80167cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80167ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80167d0:	9204      	str	r2, [sp, #16]
 80167d2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80167d6:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80167d8:	f99d 6088 	ldrsb.w	r6, [sp, #136]	; 0x88
 80167dc:	6824      	ldr	r4, [r4, #0]
 80167de:	9408      	str	r4, [sp, #32]
 80167e0:	1e4b      	subs	r3, r1, #1
 80167e2:	b29a      	uxth	r2, r3
 80167e4:	2a14      	cmp	r2, #20
 80167e6:	930d      	str	r3, [sp, #52]	; 0x34
 80167e8:	f99d 308c 	ldrsb.w	r3, [sp, #140]	; 0x8c
 80167ec:	9105      	str	r1, [sp, #20]
 80167ee:	bf9f      	itttt	ls
 80167f0:	2201      	movls	r2, #1
 80167f2:	408b      	lslls	r3, r1
 80167f4:	408a      	lslls	r2, r1
 80167f6:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
 80167fa:	9309      	str	r3, [sp, #36]	; 0x24
 80167fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80167fe:	4683      	mov	fp, r0
 8016800:	2b00      	cmp	r3, #0
 8016802:	f000 81e4 	beq.w	8016bce <st_sssa8_fully_connected+0x40a>
 8016806:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016808:	9600      	str	r6, [sp, #0]
 801680a:	b2b3      	uxth	r3, r6
 801680c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8016810:	9e04      	ldr	r6, [sp, #16]
 8016812:	0851      	lsrs	r1, r2, #1
 8016814:	460c      	mov	r4, r1
 8016816:	9115      	str	r1, [sp, #84]	; 0x54
 8016818:	4632      	mov	r2, r6
 801681a:	9926      	ldr	r1, [sp, #152]	; 0x98
 801681c:	f000 fbae 	bl	8016f7c <st_int8_reordered_no_shift_zero>
 8016820:	4621      	mov	r1, r4
 8016822:	2c00      	cmp	r4, #0
 8016824:	f000 8149 	beq.w	8016aba <st_sssa8_fully_connected+0x2f6>
 8016828:	4634      	mov	r4, r6
 801682a:	f1a6 0310 	sub.w	r3, r6, #16
 801682e:	9e05      	ldr	r6, [sp, #20]
 8016830:	1e4a      	subs	r2, r1, #1
 8016832:	2001      	movs	r0, #1
 8016834:	1eb1      	subs	r1, r6, #2
 8016836:	fa00 f101 	lsl.w	r1, r0, r1
 801683a:	9112      	str	r1, [sp, #72]	; 0x48
 801683c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801683e:	b292      	uxth	r2, r2
 8016840:	3110      	adds	r1, #16
 8016842:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8016846:	920e      	str	r2, [sp, #56]	; 0x38
 8016848:	1ee2      	subs	r2, r4, #3
 801684a:	920f      	str	r2, [sp, #60]	; 0x3c
 801684c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801684e:	3208      	adds	r2, #8
 8016850:	9206      	str	r2, [sp, #24]
 8016852:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8016854:	091b      	lsrs	r3, r3, #4
 8016856:	3301      	adds	r3, #1
 8016858:	3202      	adds	r2, #2
 801685a:	9207      	str	r2, [sp, #28]
 801685c:	011a      	lsls	r2, r3, #4
 801685e:	920a      	str	r2, [sp, #40]	; 0x28
 8016860:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016862:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8016866:	9310      	str	r3, [sp, #64]	; 0x40
 8016868:	1f23      	subs	r3, r4, #4
 801686a:	9311      	str	r3, [sp, #68]	; 0x44
 801686c:	1b83      	subs	r3, r0, r6
 801686e:	9314      	str	r3, [sp, #80]	; 0x50
 8016870:	9a06      	ldr	r2, [sp, #24]
 8016872:	e952 3102 	ldrd	r3, r1, [r2, #-8]
 8016876:	9a04      	ldr	r2, [sp, #16]
 8016878:	18ac      	adds	r4, r5, r2
 801687a:	2a0f      	cmp	r2, #15
 801687c:	9403      	str	r4, [sp, #12]
 801687e:	f340 81a0 	ble.w	8016bc2 <st_sssa8_fully_connected+0x3fe>
 8016882:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016884:	18ae      	adds	r6, r5, r2
 8016886:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016888:	460f      	mov	r7, r1
 801688a:	f8d4 e000 	ldr.w	lr, [r4]
 801688e:	6828      	ldr	r0, [r5, #0]
 8016890:	fa2f fc8e 	sxtb16	ip, lr
 8016894:	ea4f 2130 	mov.w	r1, r0, ror #8
 8016898:	ea4f 283e 	mov.w	r8, lr, ror #8
 801689c:	fa2f f080 	sxtb16	r0, r0
 80168a0:	f8d2 e000 	ldr.w	lr, [r2]
 80168a4:	fa2f f181 	sxtb16	r1, r1
 80168a8:	fa2f f888 	sxtb16	r8, r8
 80168ac:	fb2e 3300 	smlad	r3, lr, r0, r3
 80168b0:	fb2e 7e0c 	smlad	lr, lr, ip, r7
 80168b4:	f8d2 c004 	ldr.w	ip, [r2, #4]
 80168b8:	fb2c 3301 	smlad	r3, ip, r1, r3
 80168bc:	fb2c e808 	smlad	r8, ip, r8, lr
 80168c0:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80168c4:	686f      	ldr	r7, [r5, #4]
 80168c6:	fa2f f08c 	sxtb16	r0, ip
 80168ca:	ea4f 2137 	mov.w	r1, r7, ror #8
 80168ce:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 80168d2:	fa2f f787 	sxtb16	r7, r7
 80168d6:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80168da:	fa2f f181 	sxtb16	r1, r1
 80168de:	fa2f fe8e 	sxtb16	lr, lr
 80168e2:	fb2c 3707 	smlad	r7, ip, r7, r3
 80168e6:	fb2c 8c00 	smlad	ip, ip, r0, r8
 80168ea:	68d0      	ldr	r0, [r2, #12]
 80168ec:	fb20 7701 	smlad	r7, r0, r1, r7
 80168f0:	fb20 ce0e 	smlad	lr, r0, lr, ip
 80168f4:	68a0      	ldr	r0, [r4, #8]
 80168f6:	68a9      	ldr	r1, [r5, #8]
 80168f8:	fa2f fc80 	sxtb16	ip, r0
 80168fc:	ea4f 2331 	mov.w	r3, r1, ror #8
 8016900:	ea4f 2a30 	mov.w	sl, r0, ror #8
 8016904:	fa2f f181 	sxtb16	r1, r1
 8016908:	6910      	ldr	r0, [r2, #16]
 801690a:	fa2f f383 	sxtb16	r3, r3
 801690e:	fa2f fa8a 	sxtb16	sl, sl
 8016912:	fb20 7101 	smlad	r1, r0, r1, r7
 8016916:	fb20 e00c 	smlad	r0, r0, ip, lr
 801691a:	6957      	ldr	r7, [r2, #20]
 801691c:	fb27 1103 	smlad	r1, r7, r3, r1
 8016920:	fb27 0a0a 	smlad	sl, r7, sl, r0
 8016924:	68e7      	ldr	r7, [r4, #12]
 8016926:	68e8      	ldr	r0, [r5, #12]
 8016928:	fa2f fc87 	sxtb16	ip, r7
 801692c:	ea4f 2930 	mov.w	r9, r0, ror #8
 8016930:	ea4f 2837 	mov.w	r8, r7, ror #8
 8016934:	3510      	adds	r5, #16
 8016936:	6997      	ldr	r7, [r2, #24]
 8016938:	fa2f f380 	sxtb16	r3, r0
 801693c:	3410      	adds	r4, #16
 801693e:	fa2f f989 	sxtb16	r9, r9
 8016942:	fa2f f888 	sxtb16	r8, r8
 8016946:	fb27 1303 	smlad	r3, r7, r3, r1
 801694a:	fb27 a70c 	smlad	r7, r7, ip, sl
 801694e:	f8d2 e01c 	ldr.w	lr, [r2, #28]
 8016952:	3220      	adds	r2, #32
 8016954:	fb2e 3309 	smlad	r3, lr, r9, r3
 8016958:	fb2e 7708 	smlad	r7, lr, r8, r7
 801695c:	42b5      	cmp	r5, r6
 801695e:	d194      	bne.n	801688a <st_sssa8_fully_connected+0xc6>
 8016960:	9a03      	ldr	r2, [sp, #12]
 8016962:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016964:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8016968:	4402      	add	r2, r0
 801696a:	4639      	mov	r1, r7
 801696c:	9203      	str	r2, [sp, #12]
 801696e:	4681      	mov	r9, r0
 8016970:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016972:	4591      	cmp	r9, r2
 8016974:	f280 8123 	bge.w	8016bbe <st_sssa8_fully_connected+0x3fa>
 8016978:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801697a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801697e:	eba2 0a09 	sub.w	sl, r2, r9
 8016982:	ea4f 029a 	mov.w	r2, sl, lsr #2
 8016986:	f102 0a01 	add.w	sl, r2, #1
 801698a:	920c      	str	r2, [sp, #48]	; 0x30
 801698c:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8016990:	920b      	str	r2, [sp, #44]	; 0x2c
 8016992:	eb06 048a 	add.w	r4, r6, sl, lsl #2
 8016996:	465f      	mov	r7, fp
 8016998:	f858 2b04 	ldr.w	r2, [r8], #4
 801699c:	f856 eb04 	ldr.w	lr, [r6], #4
 80169a0:	fa2f f082 	sxtb16	r0, r2
 80169a4:	ea4f 2c3e 	mov.w	ip, lr, ror #8
 80169a8:	ea4f 2532 	mov.w	r5, r2, ror #8
 80169ac:	fa2f fe8e 	sxtb16	lr, lr
 80169b0:	683a      	ldr	r2, [r7, #0]
 80169b2:	fa2f fc8c 	sxtb16	ip, ip
 80169b6:	fa2f f585 	sxtb16	r5, r5
 80169ba:	fb22 330e 	smlad	r3, r2, lr, r3
 80169be:	fb22 1200 	smlad	r2, r2, r0, r1
 80169c2:	6879      	ldr	r1, [r7, #4]
 80169c4:	3708      	adds	r7, #8
 80169c6:	fb21 330c 	smlad	r3, r1, ip, r3
 80169ca:	fb21 2105 	smlad	r1, r1, r5, r2
 80169ce:	42a6      	cmp	r6, r4
 80169d0:	d1e2      	bne.n	8016998 <st_sssa8_fully_connected+0x1d4>
 80169d2:	9a03      	ldr	r2, [sp, #12]
 80169d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80169d6:	4402      	add	r2, r0
 80169d8:	9203      	str	r2, [sp, #12]
 80169da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80169dc:	f109 0904 	add.w	r9, r9, #4
 80169e0:	eb0b 0bca 	add.w	fp, fp, sl, lsl #3
 80169e4:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 80169e8:	9d04      	ldr	r5, [sp, #16]
 80169ea:	454d      	cmp	r5, r9
 80169ec:	dd38      	ble.n	8016a60 <st_sssa8_fully_connected+0x29c>
 80169ee:	f9bb 2000 	ldrsh.w	r2, [fp]
 80169f2:	f994 0000 	ldrsb.w	r0, [r4]
 80169f6:	9e03      	ldr	r6, [sp, #12]
 80169f8:	fb12 3300 	smlabb	r3, r2, r0, r3
 80169fc:	f996 0000 	ldrsb.w	r0, [r6]
 8016a00:	fb12 1100 	smlabb	r1, r2, r0, r1
 8016a04:	f109 0201 	add.w	r2, r9, #1
 8016a08:	42aa      	cmp	r2, r5
 8016a0a:	da25      	bge.n	8016a58 <st_sssa8_fully_connected+0x294>
 8016a0c:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 8016a10:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8016a14:	fb12 3300 	smlabb	r3, r2, r0, r3
 8016a18:	f996 0001 	ldrsb.w	r0, [r6, #1]
 8016a1c:	fb12 1100 	smlabb	r1, r2, r0, r1
 8016a20:	f109 0202 	add.w	r2, r9, #2
 8016a24:	42aa      	cmp	r2, r5
 8016a26:	da17      	bge.n	8016a58 <st_sssa8_fully_connected+0x294>
 8016a28:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 8016a2c:	f994 0002 	ldrsb.w	r0, [r4, #2]
 8016a30:	fb12 3300 	smlabb	r3, r2, r0, r3
 8016a34:	f996 0002 	ldrsb.w	r0, [r6, #2]
 8016a38:	fb12 1100 	smlabb	r1, r2, r0, r1
 8016a3c:	f109 0203 	add.w	r2, r9, #3
 8016a40:	4295      	cmp	r5, r2
 8016a42:	dd09      	ble.n	8016a58 <st_sssa8_fully_connected+0x294>
 8016a44:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
 8016a48:	f996 0003 	ldrsb.w	r0, [r6, #3]
 8016a4c:	fb12 1100 	smlabb	r1, r2, r0, r1
 8016a50:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8016a54:	fb12 3300 	smlabb	r3, r2, r0, r3
 8016a58:	9a04      	ldr	r2, [sp, #16]
 8016a5a:	eba2 0909 	sub.w	r9, r2, r9
 8016a5e:	444c      	add	r4, r9
 8016a60:	9a05      	ldr	r2, [sp, #20]
 8016a62:	2a15      	cmp	r2, #21
 8016a64:	dd7b      	ble.n	8016b5e <st_sssa8_fully_connected+0x39a>
 8016a66:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8016a68:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8016a6a:	9a08      	ldr	r2, [sp, #32]
 8016a6c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016a6e:	fb53 0302 	smmla	r3, r3, r2, r0
 8016a72:	412b      	asrs	r3, r5
 8016a74:	4433      	add	r3, r6
 8016a76:	fb51 0102 	smmla	r1, r1, r2, r0
 8016a7a:	f303 0307 	ssat	r3, #8, r3
 8016a7e:	9a07      	ldr	r2, [sp, #28]
 8016a80:	4129      	asrs	r1, r5
 8016a82:	f802 3c02 	strb.w	r3, [r2, #-2]
 8016a86:	198b      	adds	r3, r1, r6
 8016a88:	f303 0307 	ssat	r3, #8, r3
 8016a8c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8016a90:	9a04      	ldr	r2, [sp, #16]
 8016a92:	9b06      	ldr	r3, [sp, #24]
 8016a94:	18a5      	adds	r5, r4, r2
 8016a96:	9a07      	ldr	r2, [sp, #28]
 8016a98:	3202      	adds	r2, #2
 8016a9a:	9207      	str	r2, [sp, #28]
 8016a9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016a9e:	3308      	adds	r3, #8
 8016aa0:	4293      	cmp	r3, r2
 8016aa2:	9306      	str	r3, [sp, #24]
 8016aa4:	f47f aee4 	bne.w	8016870 <st_sssa8_fully_connected+0xac>
 8016aa8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8016aaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016aac:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8016ab0:	9225      	str	r2, [sp, #148]	; 0x94
 8016ab2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016ab4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016ab8:	9324      	str	r3, [sp, #144]	; 0x90
 8016aba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016abc:	07db      	lsls	r3, r3, #31
 8016abe:	d54a      	bpl.n	8016b56 <st_sssa8_fully_connected+0x392>
 8016ac0:	9a04      	ldr	r2, [sp, #16]
 8016ac2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016ac4:	0897      	lsrs	r7, r2, #2
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	f000 8173 	beq.w	8016db2 <st_sssa8_fully_connected+0x5ee>
 8016acc:	9826      	ldr	r0, [sp, #152]	; 0x98
 8016ace:	eb05 0687 	add.w	r6, r5, r7, lsl #2
 8016ad2:	f855 2b04 	ldr.w	r2, [r5], #4
 8016ad6:	6804      	ldr	r4, [r0, #0]
 8016ad8:	ea4f 2132 	mov.w	r1, r2, ror #8
 8016adc:	fa2f f282 	sxtb16	r2, r2
 8016ae0:	fa2f f181 	sxtb16	r1, r1
 8016ae4:	fb24 3202 	smlad	r2, r4, r2, r3
 8016ae8:	6843      	ldr	r3, [r0, #4]
 8016aea:	3008      	adds	r0, #8
 8016aec:	fb23 2301 	smlad	r3, r3, r1, r2
 8016af0:	42b5      	cmp	r5, r6
 8016af2:	d1ee      	bne.n	8016ad2 <st_sssa8_fully_connected+0x30e>
 8016af4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016af6:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 8016afa:	9226      	str	r2, [sp, #152]	; 0x98
 8016afc:	9a04      	ldr	r2, [sp, #16]
 8016afe:	f012 0203 	ands.w	r2, r2, #3
 8016b02:	d016      	beq.n	8016b32 <st_sssa8_fully_connected+0x36e>
 8016b04:	9826      	ldr	r0, [sp, #152]	; 0x98
 8016b06:	f996 1000 	ldrsb.w	r1, [r6]
 8016b0a:	8800      	ldrh	r0, [r0, #0]
 8016b0c:	3a01      	subs	r2, #1
 8016b0e:	b292      	uxth	r2, r2
 8016b10:	fb10 3301 	smlabb	r3, r0, r1, r3
 8016b14:	b16a      	cbz	r2, 8016b32 <st_sssa8_fully_connected+0x36e>
 8016b16:	9826      	ldr	r0, [sp, #152]	; 0x98
 8016b18:	f996 1001 	ldrsb.w	r1, [r6, #1]
 8016b1c:	8840      	ldrh	r0, [r0, #2]
 8016b1e:	2a01      	cmp	r2, #1
 8016b20:	fb10 3301 	smlabb	r3, r0, r1, r3
 8016b24:	d005      	beq.n	8016b32 <st_sssa8_fully_connected+0x36e>
 8016b26:	9926      	ldr	r1, [sp, #152]	; 0x98
 8016b28:	f996 2002 	ldrsb.w	r2, [r6, #2]
 8016b2c:	8889      	ldrh	r1, [r1, #4]
 8016b2e:	fb11 3302 	smlabb	r3, r1, r2, r3
 8016b32:	9a05      	ldr	r2, [sp, #20]
 8016b34:	2a15      	cmp	r2, #21
 8016b36:	f340 811a 	ble.w	8016d6e <st_sssa8_fully_connected+0x5aa>
 8016b3a:	1e91      	subs	r1, r2, #2
 8016b3c:	2201      	movs	r2, #1
 8016b3e:	408a      	lsls	r2, r1
 8016b40:	9908      	ldr	r1, [sp, #32]
 8016b42:	fb53 2301 	smmla	r3, r3, r1, r2
 8016b46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016b48:	4113      	asrs	r3, r2
 8016b4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016b4c:	4413      	add	r3, r2
 8016b4e:	f303 0307 	ssat	r3, #8, r3
 8016b52:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8016b54:	7013      	strb	r3, [r2, #0]
 8016b56:	2000      	movs	r0, #0
 8016b58:	b017      	add	sp, #92	; 0x5c
 8016b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b5e:	2a00      	cmp	r2, #0
 8016b60:	dd13      	ble.n	8016b8a <st_sssa8_fully_connected+0x3c6>
 8016b62:	e9dd 0508 	ldrd	r0, r5, [sp, #32]
 8016b66:	005b      	lsls	r3, r3, #1
 8016b68:	0049      	lsls	r1, r1, #1
 8016b6a:	fb53 5300 	smmla	r3, r3, r0, r5
 8016b6e:	fb51 5100 	smmla	r1, r1, r0, r5
 8016b72:	4113      	asrs	r3, r2
 8016b74:	f303 0307 	ssat	r3, #8, r3
 8016b78:	9807      	ldr	r0, [sp, #28]
 8016b7a:	4111      	asrs	r1, r2
 8016b7c:	f800 3c02 	strb.w	r3, [r0, #-2]
 8016b80:	f301 0107 	ssat	r1, #8, r1
 8016b84:	f800 1c01 	strb.w	r1, [r0, #-1]
 8016b88:	e782      	b.n	8016a90 <st_sssa8_fully_connected+0x2cc>
 8016b8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016b8c:	4093      	lsls	r3, r2
 8016b8e:	f303 031f 	ssat	r3, #32, r3
 8016b92:	9808      	ldr	r0, [sp, #32]
 8016b94:	fb53 f310 	smmulr	r3, r3, r0
 8016b98:	fa01 f202 	lsl.w	r2, r1, r2
 8016b9c:	f302 021f 	ssat	r2, #32, r2
 8016ba0:	fb52 f210 	smmulr	r2, r2, r0
 8016ba4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016ba6:	440b      	add	r3, r1
 8016ba8:	f303 0307 	ssat	r3, #8, r3
 8016bac:	9807      	ldr	r0, [sp, #28]
 8016bae:	440a      	add	r2, r1
 8016bb0:	f800 3c02 	strb.w	r3, [r0, #-2]
 8016bb4:	f302 0207 	ssat	r2, #8, r2
 8016bb8:	f800 2c01 	strb.w	r2, [r0, #-1]
 8016bbc:	e768      	b.n	8016a90 <st_sssa8_fully_connected+0x2cc>
 8016bbe:	4634      	mov	r4, r6
 8016bc0:	e712      	b.n	80169e8 <st_sssa8_fully_connected+0x224>
 8016bc2:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 8016bc6:	462e      	mov	r6, r5
 8016bc8:	f04f 0900 	mov.w	r9, #0
 8016bcc:	e6d0      	b.n	8016970 <st_sssa8_fully_connected+0x1ac>
 8016bce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016bd0:	4274      	negs	r4, r6
 8016bd2:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d0bd      	beq.n	8016b56 <st_sssa8_fully_connected+0x392>
 8016bda:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8016bdc:	9904      	ldr	r1, [sp, #16]
 8016bde:	9805      	ldr	r0, [sp, #20]
 8016be0:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
 8016be4:	f8cd b010 	str.w	fp, [sp, #16]
 8016be8:	3301      	adds	r3, #1
 8016bea:	18d3      	adds	r3, r2, r3
 8016bec:	f1a1 0810 	sub.w	r8, r1, #16
 8016bf0:	9303      	str	r3, [sp, #12]
 8016bf2:	f102 0e01 	add.w	lr, r2, #1
 8016bf6:	f028 080f 	bic.w	r8, r8, #15
 8016bfa:	2201      	movs	r2, #1
 8016bfc:	1e83      	subs	r3, r0, #2
 8016bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8016c02:	f108 0810 	add.w	r8, r8, #16
 8016c06:	9307      	str	r3, [sp, #28]
 8016c08:	4689      	mov	r9, r1
 8016c0a:	eb0b 0308 	add.w	r3, fp, r8
 8016c0e:	9306      	str	r3, [sp, #24]
 8016c10:	f1b9 0f0f 	cmp.w	r9, #15
 8016c14:	eba2 0300 	sub.w	r3, r2, r0
 8016c18:	930a      	str	r3, [sp, #40]	; 0x28
 8016c1a:	b236      	sxth	r6, r6
 8016c1c:	f85a 3b04 	ldr.w	r3, [sl], #4
 8016c20:	f340 8081 	ble.w	8016d26 <st_sssa8_fully_connected+0x562>
 8016c24:	9804      	ldr	r0, [sp, #16]
 8016c26:	eb05 0c08 	add.w	ip, r5, r8
 8016c2a:	462a      	mov	r2, r5
 8016c2c:	f8d2 b000 	ldr.w	fp, [r2]
 8016c30:	6801      	ldr	r1, [r0, #0]
 8016c32:	ea4f 273b 	mov.w	r7, fp, ror #8
 8016c36:	ea4f 2531 	mov.w	r5, r1, ror #8
 8016c3a:	fa2f fb8b 	sxtb16	fp, fp
 8016c3e:	fa2f f787 	sxtb16	r7, r7
 8016c42:	fa24 f181 	sxtab16	r1, r4, r1
 8016c46:	fa24 f585 	sxtab16	r5, r4, r5
 8016c4a:	fb21 330b 	smlad	r3, r1, fp, r3
 8016c4e:	fb25 3107 	smlad	r1, r5, r7, r3
 8016c52:	f8d2 b004 	ldr.w	fp, [r2, #4]
 8016c56:	6843      	ldr	r3, [r0, #4]
 8016c58:	ea4f 273b 	mov.w	r7, fp, ror #8
 8016c5c:	ea4f 2533 	mov.w	r5, r3, ror #8
 8016c60:	fa2f fb8b 	sxtb16	fp, fp
 8016c64:	fa2f f787 	sxtb16	r7, r7
 8016c68:	fa24 f383 	sxtab16	r3, r4, r3
 8016c6c:	fa24 f585 	sxtab16	r5, r4, r5
 8016c70:	fb23 110b 	smlad	r1, r3, fp, r1
 8016c74:	fb25 1307 	smlad	r3, r5, r7, r1
 8016c78:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8016c7c:	6885      	ldr	r5, [r0, #8]
 8016c7e:	ea4f 273b 	mov.w	r7, fp, ror #8
 8016c82:	ea4f 2135 	mov.w	r1, r5, ror #8
 8016c86:	fa2f fb8b 	sxtb16	fp, fp
 8016c8a:	fa2f f787 	sxtb16	r7, r7
 8016c8e:	fa24 f585 	sxtab16	r5, r4, r5
 8016c92:	fa24 f181 	sxtab16	r1, r4, r1
 8016c96:	fb25 330b 	smlad	r3, r5, fp, r3
 8016c9a:	fb21 3507 	smlad	r5, r1, r7, r3
 8016c9e:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8016ca2:	68c3      	ldr	r3, [r0, #12]
 8016ca4:	ea4f 273b 	mov.w	r7, fp, ror #8
 8016ca8:	ea4f 2133 	mov.w	r1, r3, ror #8
 8016cac:	3210      	adds	r2, #16
 8016cae:	3010      	adds	r0, #16
 8016cb0:	fa2f fb8b 	sxtb16	fp, fp
 8016cb4:	fa2f f787 	sxtb16	r7, r7
 8016cb8:	fa24 f383 	sxtab16	r3, r4, r3
 8016cbc:	fa24 f181 	sxtab16	r1, r4, r1
 8016cc0:	fb23 530b 	smlad	r3, r3, fp, r5
 8016cc4:	fb21 3307 	smlad	r3, r1, r7, r3
 8016cc8:	4594      	cmp	ip, r2
 8016cca:	d1af      	bne.n	8016c2c <st_sssa8_fully_connected+0x468>
 8016ccc:	4645      	mov	r5, r8
 8016cce:	45a9      	cmp	r9, r5
 8016cd0:	9f06      	ldr	r7, [sp, #24]
 8016cd2:	dd2d      	ble.n	8016d30 <st_sssa8_fully_connected+0x56c>
 8016cd4:	eba9 0505 	sub.w	r5, r9, r5
 8016cd8:	4415      	add	r5, r2
 8016cda:	4611      	mov	r1, r2
 8016cdc:	f917 0b01 	ldrsb.w	r0, [r7], #1
 8016ce0:	7809      	ldrb	r1, [r1, #0]
 8016ce2:	3201      	adds	r2, #1
 8016ce4:	b249      	sxtb	r1, r1
 8016ce6:	1b80      	subs	r0, r0, r6
 8016ce8:	42aa      	cmp	r2, r5
 8016cea:	fb10 3301 	smlabb	r3, r0, r1, r3
 8016cee:	d1f4      	bne.n	8016cda <st_sssa8_fully_connected+0x516>
 8016cf0:	9a05      	ldr	r2, [sp, #20]
 8016cf2:	2a15      	cmp	r2, #21
 8016cf4:	dd20      	ble.n	8016d38 <st_sssa8_fully_connected+0x574>
 8016cf6:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8016cfa:	fb53 1302 	smmla	r3, r3, r2, r1
 8016cfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016d00:	4113      	asrs	r3, r2
 8016d02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016d04:	4413      	add	r3, r2
 8016d06:	f303 0307 	ssat	r3, #8, r3
 8016d0a:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8016d0e:	9b03      	ldr	r3, [sp, #12]
 8016d10:	f10e 0e01 	add.w	lr, lr, #1
 8016d14:	459e      	cmp	lr, r3
 8016d16:	f43f af1e 	beq.w	8016b56 <st_sssa8_fully_connected+0x392>
 8016d1a:	f1b9 0f0f 	cmp.w	r9, #15
 8016d1e:	f85a 3b04 	ldr.w	r3, [sl], #4
 8016d22:	f73f af7f 	bgt.w	8016c24 <st_sssa8_fully_connected+0x460>
 8016d26:	462a      	mov	r2, r5
 8016d28:	2500      	movs	r5, #0
 8016d2a:	45a9      	cmp	r9, r5
 8016d2c:	9f04      	ldr	r7, [sp, #16]
 8016d2e:	dcd1      	bgt.n	8016cd4 <st_sssa8_fully_connected+0x510>
 8016d30:	4615      	mov	r5, r2
 8016d32:	9a05      	ldr	r2, [sp, #20]
 8016d34:	2a15      	cmp	r2, #21
 8016d36:	dcde      	bgt.n	8016cf6 <st_sssa8_fully_connected+0x532>
 8016d38:	2a00      	cmp	r2, #0
 8016d3a:	dd0a      	ble.n	8016d52 <st_sssa8_fully_connected+0x58e>
 8016d3c:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 8016d40:	005b      	lsls	r3, r3, #1
 8016d42:	fb53 0301 	smmla	r3, r3, r1, r0
 8016d46:	4113      	asrs	r3, r2
 8016d48:	f303 0307 	ssat	r3, #8, r3
 8016d4c:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8016d50:	e7dd      	b.n	8016d0e <st_sssa8_fully_connected+0x54a>
 8016d52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016d54:	4093      	lsls	r3, r2
 8016d56:	f303 031f 	ssat	r3, #32, r3
 8016d5a:	9a08      	ldr	r2, [sp, #32]
 8016d5c:	fb53 f312 	smmulr	r3, r3, r2
 8016d60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016d62:	4413      	add	r3, r2
 8016d64:	f303 0307 	ssat	r3, #8, r3
 8016d68:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8016d6c:	e7cf      	b.n	8016d0e <st_sssa8_fully_connected+0x54a>
 8016d6e:	2a00      	cmp	r2, #0
 8016d70:	dd0d      	ble.n	8016d8e <st_sssa8_fully_connected+0x5ca>
 8016d72:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 8016d76:	005b      	lsls	r3, r3, #1
 8016d78:	fb53 0301 	smmla	r3, r3, r1, r0
 8016d7c:	4113      	asrs	r3, r2
 8016d7e:	f303 0307 	ssat	r3, #8, r3
 8016d82:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8016d84:	2000      	movs	r0, #0
 8016d86:	7013      	strb	r3, [r2, #0]
 8016d88:	b017      	add	sp, #92	; 0x5c
 8016d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d8e:	f1c2 0201 	rsb	r2, r2, #1
 8016d92:	4093      	lsls	r3, r2
 8016d94:	f303 031f 	ssat	r3, #32, r3
 8016d98:	9a08      	ldr	r2, [sp, #32]
 8016d9a:	fb53 f312 	smmulr	r3, r3, r2
 8016d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016da0:	441a      	add	r2, r3
 8016da2:	f302 0307 	ssat	r3, #8, r2
 8016da6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8016da8:	2000      	movs	r0, #0
 8016daa:	7013      	strb	r3, [r2, #0]
 8016dac:	b017      	add	sp, #92	; 0x5c
 8016dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016db2:	462e      	mov	r6, r5
 8016db4:	e6a2      	b.n	8016afc <st_sssa8_fully_connected+0x338>
 8016db6:	bf00      	nop

08016db8 <st_int8_fill>:
 8016db8:	b510      	push	{r4, lr}
 8016dba:	b2c3      	uxtb	r3, r0
 8016dbc:	0204      	lsls	r4, r0, #8
 8016dbe:	b2a4      	uxth	r4, r4
 8016dc0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8016dc4:	4323      	orrs	r3, r4
 8016dc6:	0404      	lsls	r4, r0, #16
 8016dc8:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8016dcc:	431c      	orrs	r4, r3
 8016dce:	078b      	lsls	r3, r1, #30
 8016dd0:	468c      	mov	ip, r1
 8016dd2:	d007      	beq.n	8016de4 <st_int8_fill+0x2c>
 8016dd4:	b3a2      	cbz	r2, 8016e40 <st_int8_fill+0x88>
 8016dd6:	f80c 0b01 	strb.w	r0, [ip], #1
 8016dda:	f01c 0f03 	tst.w	ip, #3
 8016dde:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8016de2:	d1f7      	bne.n	8016dd4 <st_int8_fill+0x1c>
 8016de4:	0911      	lsrs	r1, r2, #4
 8016de6:	d03e      	beq.n	8016e66 <st_int8_fill+0xae>
 8016de8:	1e4b      	subs	r3, r1, #1
 8016dea:	2b04      	cmp	r3, #4
 8016dec:	d929      	bls.n	8016e42 <st_int8_fill+0x8a>
 8016dee:	f01c 0f07 	tst.w	ip, #7
 8016df2:	d126      	bne.n	8016e42 <st_int8_fill+0x8a>
 8016df4:	f10c 0310 	add.w	r3, ip, #16
 8016df8:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8016dfc:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8016e00:	e943 4404 	strd	r4, r4, [r3, #-16]
 8016e04:	e943 4402 	strd	r4, r4, [r3, #-8]
 8016e08:	3310      	adds	r3, #16
 8016e0a:	428b      	cmp	r3, r1
 8016e0c:	d1f8      	bne.n	8016e00 <st_int8_fill+0x48>
 8016e0e:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8016e12:	44f4      	add	ip, lr
 8016e14:	f002 0203 	and.w	r2, r2, #3
 8016e18:	b15b      	cbz	r3, 8016e32 <st_int8_fill+0x7a>
 8016e1a:	1e59      	subs	r1, r3, #1
 8016e1c:	f8cc 4000 	str.w	r4, [ip]
 8016e20:	d005      	beq.n	8016e2e <st_int8_fill+0x76>
 8016e22:	2901      	cmp	r1, #1
 8016e24:	f8cc 4004 	str.w	r4, [ip, #4]
 8016e28:	bf18      	it	ne
 8016e2a:	f8cc 4008 	strne.w	r4, [ip, #8]
 8016e2e:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 8016e32:	b12a      	cbz	r2, 8016e40 <st_int8_fill+0x88>
 8016e34:	4601      	mov	r1, r0
 8016e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e3a:	4660      	mov	r0, ip
 8016e3c:	f003 bff0 	b.w	801ae20 <memset>
 8016e40:	bd10      	pop	{r4, pc}
 8016e42:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8016e46:	4663      	mov	r3, ip
 8016e48:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 8016e4c:	601c      	str	r4, [r3, #0]
 8016e4e:	605c      	str	r4, [r3, #4]
 8016e50:	609c      	str	r4, [r3, #8]
 8016e52:	60dc      	str	r4, [r3, #12]
 8016e54:	3310      	adds	r3, #16
 8016e56:	4299      	cmp	r1, r3
 8016e58:	d1f8      	bne.n	8016e4c <st_int8_fill+0x94>
 8016e5a:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8016e5e:	44f4      	add	ip, lr
 8016e60:	f002 0203 	and.w	r2, r2, #3
 8016e64:	e7d8      	b.n	8016e18 <st_int8_fill+0x60>
 8016e66:	0893      	lsrs	r3, r2, #2
 8016e68:	f002 0203 	and.w	r2, r2, #3
 8016e6c:	e7d4      	b.n	8016e18 <st_int8_fill+0x60>
 8016e6e:	bf00      	nop

08016e70 <st_int8_copy>:
 8016e70:	4288      	cmp	r0, r1
 8016e72:	d057      	beq.n	8016f24 <st_int8_copy+0xb4>
 8016e74:	2a00      	cmp	r2, #0
 8016e76:	d055      	beq.n	8016f24 <st_int8_copy+0xb4>
 8016e78:	4288      	cmp	r0, r1
 8016e7a:	d354      	bcc.n	8016f26 <st_int8_copy+0xb6>
 8016e7c:	078b      	lsls	r3, r1, #30
 8016e7e:	d102      	bne.n	8016e86 <st_int8_copy+0x16>
 8016e80:	e009      	b.n	8016e96 <st_int8_copy+0x26>
 8016e82:	2a00      	cmp	r2, #0
 8016e84:	d05c      	beq.n	8016f40 <st_int8_copy+0xd0>
 8016e86:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8016e8a:	f801 3b01 	strb.w	r3, [r1], #1
 8016e8e:	078b      	lsls	r3, r1, #30
 8016e90:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8016e94:	d1f5      	bne.n	8016e82 <st_int8_copy+0x12>
 8016e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e9a:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8016e9e:	d069      	beq.n	8016f74 <st_int8_copy+0x104>
 8016ea0:	ea41 0300 	orr.w	r3, r1, r0
 8016ea4:	075b      	lsls	r3, r3, #29
 8016ea6:	d14c      	bne.n	8016f42 <st_int8_copy+0xd2>
 8016ea8:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 8016eac:	2b01      	cmp	r3, #1
 8016eae:	d948      	bls.n	8016f42 <st_int8_copy+0xd2>
 8016eb0:	f100 0310 	add.w	r3, r0, #16
 8016eb4:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8016eb8:	f101 0c10 	add.w	ip, r1, #16
 8016ebc:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8016ec0:	ed13 6b04 	vldr	d6, [r3, #-16]
 8016ec4:	ed13 7b02 	vldr	d7, [r3, #-8]
 8016ec8:	3310      	adds	r3, #16
 8016eca:	4573      	cmp	r3, lr
 8016ecc:	ed0c 6b04 	vstr	d6, [ip, #-16]
 8016ed0:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8016ed4:	f10c 0c10 	add.w	ip, ip, #16
 8016ed8:	d1f2      	bne.n	8016ec0 <st_int8_copy+0x50>
 8016eda:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8016ede:	4421      	add	r1, r4
 8016ee0:	4420      	add	r0, r4
 8016ee2:	f002 0203 	and.w	r2, r2, #3
 8016ee6:	b16b      	cbz	r3, 8016f04 <st_int8_copy+0x94>
 8016ee8:	6804      	ldr	r4, [r0, #0]
 8016eea:	600c      	str	r4, [r1, #0]
 8016eec:	1e5c      	subs	r4, r3, #1
 8016eee:	d005      	beq.n	8016efc <st_int8_copy+0x8c>
 8016ef0:	6845      	ldr	r5, [r0, #4]
 8016ef2:	604d      	str	r5, [r1, #4]
 8016ef4:	2c01      	cmp	r4, #1
 8016ef6:	bf1c      	itt	ne
 8016ef8:	6884      	ldrne	r4, [r0, #8]
 8016efa:	608c      	strne	r4, [r1, #8]
 8016efc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8016f00:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8016f04:	b162      	cbz	r2, 8016f20 <st_int8_copy+0xb0>
 8016f06:	f990 3000 	ldrsb.w	r3, [r0]
 8016f0a:	700b      	strb	r3, [r1, #0]
 8016f0c:	3a01      	subs	r2, #1
 8016f0e:	d007      	beq.n	8016f20 <st_int8_copy+0xb0>
 8016f10:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8016f14:	704b      	strb	r3, [r1, #1]
 8016f16:	2a01      	cmp	r2, #1
 8016f18:	bf1c      	itt	ne
 8016f1a:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8016f1e:	708b      	strbne	r3, [r1, #2]
 8016f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f24:	4770      	bx	lr
 8016f26:	1883      	adds	r3, r0, r2
 8016f28:	428b      	cmp	r3, r1
 8016f2a:	d9a7      	bls.n	8016e7c <st_int8_copy+0xc>
 8016f2c:	4283      	cmp	r3, r0
 8016f2e:	440a      	add	r2, r1
 8016f30:	d9f8      	bls.n	8016f24 <st_int8_copy+0xb4>
 8016f32:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8016f36:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8016f3a:	4283      	cmp	r3, r0
 8016f3c:	d1f9      	bne.n	8016f32 <st_int8_copy+0xc2>
 8016f3e:	4770      	bx	lr
 8016f40:	4770      	bx	lr
 8016f42:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8016f46:	460b      	mov	r3, r1
 8016f48:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8016f4c:	4684      	mov	ip, r0
 8016f4e:	f8dc 7000 	ldr.w	r7, [ip]
 8016f52:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8016f56:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8016f5a:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8016f5e:	f8c3 800c 	str.w	r8, [r3, #12]
 8016f62:	601f      	str	r7, [r3, #0]
 8016f64:	605e      	str	r6, [r3, #4]
 8016f66:	609d      	str	r5, [r3, #8]
 8016f68:	3310      	adds	r3, #16
 8016f6a:	459e      	cmp	lr, r3
 8016f6c:	f10c 0c10 	add.w	ip, ip, #16
 8016f70:	d1ed      	bne.n	8016f4e <st_int8_copy+0xde>
 8016f72:	e7b2      	b.n	8016eda <st_int8_copy+0x6a>
 8016f74:	0893      	lsrs	r3, r2, #2
 8016f76:	f002 0203 	and.w	r2, r2, #3
 8016f7a:	e7b4      	b.n	8016ee6 <st_int8_copy+0x76>

08016f7c <st_int8_reordered_no_shift_zero>:
 8016f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f7e:	0897      	lsrs	r7, r2, #2
 8016f80:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 8016f84:	d02e      	beq.n	8016fe4 <st_int8_reordered_no_shift_zero+0x68>
 8016f86:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 8016f8a:	460c      	mov	r4, r1
 8016f8c:	f850 cb04 	ldr.w	ip, [r0], #4
 8016f90:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 8016f94:	fa2f fe8e 	sxtb16	lr, lr
 8016f98:	fade fe03 	ssub16	lr, lr, r3
 8016f9c:	fa2f fc8c 	sxtb16	ip, ip
 8016fa0:	fadc fc03 	ssub16	ip, ip, r3
 8016fa4:	42a8      	cmp	r0, r5
 8016fa6:	f8c4 c000 	str.w	ip, [r4]
 8016faa:	f8c4 e004 	str.w	lr, [r4, #4]
 8016fae:	f104 0408 	add.w	r4, r4, #8
 8016fb2:	d1eb      	bne.n	8016f8c <st_int8_reordered_no_shift_zero+0x10>
 8016fb4:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8016fb8:	f012 0203 	ands.w	r2, r2, #3
 8016fbc:	d011      	beq.n	8016fe2 <st_int8_reordered_no_shift_zero+0x66>
 8016fbe:	f995 3000 	ldrsb.w	r3, [r5]
 8016fc2:	b276      	sxtb	r6, r6
 8016fc4:	1b9b      	subs	r3, r3, r6
 8016fc6:	3a01      	subs	r2, #1
 8016fc8:	800b      	strh	r3, [r1, #0]
 8016fca:	d00a      	beq.n	8016fe2 <st_int8_reordered_no_shift_zero+0x66>
 8016fcc:	f995 3001 	ldrsb.w	r3, [r5, #1]
 8016fd0:	2a01      	cmp	r2, #1
 8016fd2:	eba3 0306 	sub.w	r3, r3, r6
 8016fd6:	804b      	strh	r3, [r1, #2]
 8016fd8:	d003      	beq.n	8016fe2 <st_int8_reordered_no_shift_zero+0x66>
 8016fda:	f995 3002 	ldrsb.w	r3, [r5, #2]
 8016fde:	1b9e      	subs	r6, r3, r6
 8016fe0:	808e      	strh	r6, [r1, #4]
 8016fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fe4:	4605      	mov	r5, r0
 8016fe6:	e7e7      	b.n	8016fb8 <st_int8_reordered_no_shift_zero+0x3c>

08016fe8 <st_int8_to16_no_shift>:
 8016fe8:	b570      	push	{r4, r5, r6, lr}
 8016fea:	f1b2 0410 	subs.w	r4, r2, #16
 8016fee:	f04f 0e00 	mov.w	lr, #0
 8016ff2:	d437      	bmi.n	8017064 <st_int8_to16_no_shift+0x7c>
 8016ff4:	f8d0 c000 	ldr.w	ip, [r0]
 8016ff8:	6843      	ldr	r3, [r0, #4]
 8016ffa:	fa2f f59c 	sxtb16	r5, ip, ror #8
 8016ffe:	fa2f fc8c 	sxtb16	ip, ip
 8017002:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 8017006:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 801700a:	fa2f f593 	sxtb16	r5, r3, ror #8
 801700e:	604e      	str	r6, [r1, #4]
 8017010:	f8c1 c000 	str.w	ip, [r1]
 8017014:	fa2f f383 	sxtb16	r3, r3
 8017018:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 801701c:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 8017020:	60ce      	str	r6, [r1, #12]
 8017022:	608b      	str	r3, [r1, #8]
 8017024:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8017028:	68c3      	ldr	r3, [r0, #12]
 801702a:	3010      	adds	r0, #16
 801702c:	fa2f f59c 	sxtb16	r5, ip, ror #8
 8017030:	fa2f fc8c 	sxtb16	ip, ip
 8017034:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 8017038:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 801703c:	fa2f f593 	sxtb16	r5, r3, ror #8
 8017040:	f8c1 c010 	str.w	ip, [r1, #16]
 8017044:	614e      	str	r6, [r1, #20]
 8017046:	f10e 0e10 	add.w	lr, lr, #16
 801704a:	3120      	adds	r1, #32
 801704c:	45a6      	cmp	lr, r4
 801704e:	fa2f f383 	sxtb16	r3, r3
 8017052:	eac5 4c23 	pkhtb	ip, r5, r3, asr #16
 8017056:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 801705a:	f841 cc04 	str.w	ip, [r1, #-4]
 801705e:	f841 3c08 	str.w	r3, [r1, #-8]
 8017062:	ddc7      	ble.n	8016ff4 <st_int8_to16_no_shift+0xc>
 8017064:	1f16      	subs	r6, r2, #4
 8017066:	4576      	cmp	r6, lr
 8017068:	db12      	blt.n	8017090 <st_int8_to16_no_shift+0xa8>
 801706a:	f850 3b04 	ldr.w	r3, [r0], #4
 801706e:	fa2f f493 	sxtb16	r4, r3, ror #8
 8017072:	3108      	adds	r1, #8
 8017074:	f10e 0e04 	add.w	lr, lr, #4
 8017078:	45b6      	cmp	lr, r6
 801707a:	fa2f f383 	sxtb16	r3, r3
 801707e:	eac4 4523 	pkhtb	r5, r4, r3, asr #16
 8017082:	eac3 4304 	pkhbt	r3, r3, r4, lsl #16
 8017086:	f841 5c04 	str.w	r5, [r1, #-4]
 801708a:	f841 3c08 	str.w	r3, [r1, #-8]
 801708e:	ddec      	ble.n	801706a <st_int8_to16_no_shift+0x82>
 8017090:	4572      	cmp	r2, lr
 8017092:	dd08      	ble.n	80170a6 <st_int8_to16_no_shift+0xbe>
 8017094:	eba2 020e 	sub.w	r2, r2, lr
 8017098:	4402      	add	r2, r0
 801709a:	f910 3b01 	ldrsb.w	r3, [r0], #1
 801709e:	f821 3b02 	strh.w	r3, [r1], #2
 80170a2:	4290      	cmp	r0, r2
 80170a4:	d1f9      	bne.n	801709a <st_int8_to16_no_shift+0xb2>
 80170a6:	bd70      	pop	{r4, r5, r6, pc}

080170a8 <st_int8_to16_no_shift_interleaved>:
 80170a8:	b570      	push	{r4, r5, r6, lr}
 80170aa:	f1b2 0510 	subs.w	r5, r2, #16
 80170ae:	f04f 0e00 	mov.w	lr, #0
 80170b2:	d426      	bmi.n	8017102 <st_int8_to16_no_shift_interleaved+0x5a>
 80170b4:	f8d0 c000 	ldr.w	ip, [r0]
 80170b8:	6843      	ldr	r3, [r0, #4]
 80170ba:	fa2f f69c 	sxtb16	r6, ip, ror #8
 80170be:	fa2f fc8c 	sxtb16	ip, ip
 80170c2:	fa2f f493 	sxtb16	r4, r3, ror #8
 80170c6:	600e      	str	r6, [r1, #0]
 80170c8:	f8c1 c004 	str.w	ip, [r1, #4]
 80170cc:	608c      	str	r4, [r1, #8]
 80170ce:	fa2f f383 	sxtb16	r3, r3
 80170d2:	60cb      	str	r3, [r1, #12]
 80170d4:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80170d8:	68c3      	ldr	r3, [r0, #12]
 80170da:	3010      	adds	r0, #16
 80170dc:	fa2f f69c 	sxtb16	r6, ip, ror #8
 80170e0:	fa2f fc8c 	sxtb16	ip, ip
 80170e4:	fa2f f493 	sxtb16	r4, r3, ror #8
 80170e8:	610e      	str	r6, [r1, #16]
 80170ea:	f8c1 c014 	str.w	ip, [r1, #20]
 80170ee:	618c      	str	r4, [r1, #24]
 80170f0:	f10e 0e10 	add.w	lr, lr, #16
 80170f4:	3120      	adds	r1, #32
 80170f6:	45ae      	cmp	lr, r5
 80170f8:	fa2f f383 	sxtb16	r3, r3
 80170fc:	f841 3c04 	str.w	r3, [r1, #-4]
 8017100:	ddd8      	ble.n	80170b4 <st_int8_to16_no_shift_interleaved+0xc>
 8017102:	1f14      	subs	r4, r2, #4
 8017104:	4574      	cmp	r4, lr
 8017106:	db10      	blt.n	801712a <st_int8_to16_no_shift_interleaved+0x82>
 8017108:	ebae 0e00 	sub.w	lr, lr, r0
 801710c:	f850 3b04 	ldr.w	r3, [r0], #4
 8017110:	fa2f fc93 	sxtb16	ip, r3, ror #8
 8017114:	f8c1 c000 	str.w	ip, [r1]
 8017118:	eb00 020e 	add.w	r2, r0, lr
 801711c:	3108      	adds	r1, #8
 801711e:	4294      	cmp	r4, r2
 8017120:	fa2f f383 	sxtb16	r3, r3
 8017124:	f841 3c04 	str.w	r3, [r1, #-4]
 8017128:	daf0      	bge.n	801710c <st_int8_to16_no_shift_interleaved+0x64>
 801712a:	bd70      	pop	{r4, r5, r6, pc}

0801712c <st_int8_to16_dual>:
 801712c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017130:	4698      	mov	r8, r3
 8017132:	085b      	lsrs	r3, r3, #1
 8017134:	eb00 0c02 	add.w	ip, r0, r2
 8017138:	f000 80ba 	beq.w	80172b0 <st_int8_to16_dual+0x184>
 801713c:	f1a2 0710 	sub.w	r7, r2, #16
 8017140:	1f16      	subs	r6, r2, #4
 8017142:	2f00      	cmp	r7, #0
 8017144:	f04f 0500 	mov.w	r5, #0
 8017148:	db73      	blt.n	8017232 <st_int8_to16_dual+0x106>
 801714a:	f8d0 e000 	ldr.w	lr, [r0]
 801714e:	f8dc 4000 	ldr.w	r4, [ip]
 8017152:	fa2f f99e 	sxtb16	r9, lr, ror #8
 8017156:	fa2f fe8e 	sxtb16	lr, lr
 801715a:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 801715e:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 8017162:	fa2f f994 	sxtb16	r9, r4, ror #8
 8017166:	f8c1 e000 	str.w	lr, [r1]
 801716a:	f8c1 a008 	str.w	sl, [r1, #8]
 801716e:	fa2f f484 	sxtb16	r4, r4
 8017172:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 8017176:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 801717a:	f8c1 e00c 	str.w	lr, [r1, #12]
 801717e:	604c      	str	r4, [r1, #4]
 8017180:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8017184:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8017188:	fa2f f99e 	sxtb16	r9, lr, ror #8
 801718c:	fa2f fe8e 	sxtb16	lr, lr
 8017190:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 8017194:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 8017198:	fa2f f994 	sxtb16	r9, r4, ror #8
 801719c:	f8c1 e010 	str.w	lr, [r1, #16]
 80171a0:	f8c1 a018 	str.w	sl, [r1, #24]
 80171a4:	fa2f f484 	sxtb16	r4, r4
 80171a8:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 80171ac:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 80171b0:	f8c1 e01c 	str.w	lr, [r1, #28]
 80171b4:	614c      	str	r4, [r1, #20]
 80171b6:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80171ba:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80171be:	fa2f f99e 	sxtb16	r9, lr, ror #8
 80171c2:	fa2f fe8e 	sxtb16	lr, lr
 80171c6:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 80171ca:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 80171ce:	fa2f f994 	sxtb16	r9, r4, ror #8
 80171d2:	3010      	adds	r0, #16
 80171d4:	f8c1 e020 	str.w	lr, [r1, #32]
 80171d8:	f8c1 a028 	str.w	sl, [r1, #40]	; 0x28
 80171dc:	fa2f f484 	sxtb16	r4, r4
 80171e0:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 80171e4:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 80171e8:	f8c1 e02c 	str.w	lr, [r1, #44]	; 0x2c
 80171ec:	624c      	str	r4, [r1, #36]	; 0x24
 80171ee:	f8dc 400c 	ldr.w	r4, [ip, #12]
 80171f2:	f850 ec04 	ldr.w	lr, [r0, #-4]
 80171f6:	f10c 0c10 	add.w	ip, ip, #16
 80171fa:	fa2f f99e 	sxtb16	r9, lr, ror #8
 80171fe:	fa2f fe8e 	sxtb16	lr, lr
 8017202:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 8017206:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 801720a:	fa2f f994 	sxtb16	r9, r4, ror #8
 801720e:	f8c1 e030 	str.w	lr, [r1, #48]	; 0x30
 8017212:	f8c1 a038 	str.w	sl, [r1, #56]	; 0x38
 8017216:	3510      	adds	r5, #16
 8017218:	3140      	adds	r1, #64	; 0x40
 801721a:	42bd      	cmp	r5, r7
 801721c:	fa2f f484 	sxtb16	r4, r4
 8017220:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 8017224:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 8017228:	f841 ec04 	str.w	lr, [r1, #-4]
 801722c:	f841 4c0c 	str.w	r4, [r1, #-12]
 8017230:	dd8b      	ble.n	801714a <st_int8_to16_dual+0x1e>
 8017232:	42ae      	cmp	r6, r5
 8017234:	db1e      	blt.n	8017274 <st_int8_to16_dual+0x148>
 8017236:	f850 4b04 	ldr.w	r4, [r0], #4
 801723a:	f85c eb04 	ldr.w	lr, [ip], #4
 801723e:	fa2f f994 	sxtb16	r9, r4, ror #8
 8017242:	fa2f f484 	sxtb16	r4, r4
 8017246:	eac9 4a24 	pkhtb	sl, r9, r4, asr #16
 801724a:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 801724e:	fa2f f99e 	sxtb16	r9, lr, ror #8
 8017252:	600c      	str	r4, [r1, #0]
 8017254:	f8c1 a008 	str.w	sl, [r1, #8]
 8017258:	3504      	adds	r5, #4
 801725a:	3110      	adds	r1, #16
 801725c:	42b5      	cmp	r5, r6
 801725e:	fa2f fe8e 	sxtb16	lr, lr
 8017262:	eac9 442e 	pkhtb	r4, r9, lr, asr #16
 8017266:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 801726a:	f841 4c04 	str.w	r4, [r1, #-4]
 801726e:	f841 ec0c 	str.w	lr, [r1, #-12]
 8017272:	dde0      	ble.n	8017236 <st_int8_to16_dual+0x10a>
 8017274:	42aa      	cmp	r2, r5
 8017276:	dd41      	ble.n	80172fc <st_int8_to16_dual+0x1d0>
 8017278:	1b55      	subs	r5, r2, r5
 801727a:	1d0c      	adds	r4, r1, #4
 801727c:	eb00 0a05 	add.w	sl, r0, r5
 8017280:	46e6      	mov	lr, ip
 8017282:	f910 9b01 	ldrsb.w	r9, [r0], #1
 8017286:	f824 9c04 	strh.w	r9, [r4, #-4]
 801728a:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 801728e:	f824 9c02 	strh.w	r9, [r4, #-2]
 8017292:	4550      	cmp	r0, sl
 8017294:	f104 0404 	add.w	r4, r4, #4
 8017298:	d1f3      	bne.n	8017282 <st_int8_to16_dual+0x156>
 801729a:	44ac      	add	ip, r5
 801729c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80172a0:	3b01      	subs	r3, #1
 80172a2:	b29b      	uxth	r3, r3
 80172a4:	eb0a 0002 	add.w	r0, sl, r2
 80172a8:	4494      	add	ip, r2
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	f47f af49 	bne.w	8017142 <st_int8_to16_dual+0x16>
 80172b0:	f018 0f01 	tst.w	r8, #1
 80172b4:	d020      	beq.n	80172f8 <st_int8_to16_dual+0x1cc>
 80172b6:	1f17      	subs	r7, r2, #4
 80172b8:	f04f 0400 	mov.w	r4, #0
 80172bc:	d411      	bmi.n	80172e2 <st_int8_to16_dual+0x1b6>
 80172be:	f850 3b04 	ldr.w	r3, [r0], #4
 80172c2:	fa2f f593 	sxtb16	r5, r3, ror #8
 80172c6:	3108      	adds	r1, #8
 80172c8:	3404      	adds	r4, #4
 80172ca:	42a7      	cmp	r7, r4
 80172cc:	fa2f f383 	sxtb16	r3, r3
 80172d0:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 80172d4:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 80172d8:	f841 6c04 	str.w	r6, [r1, #-4]
 80172dc:	f841 3c08 	str.w	r3, [r1, #-8]
 80172e0:	daed      	bge.n	80172be <st_int8_to16_dual+0x192>
 80172e2:	42a2      	cmp	r2, r4
 80172e4:	dd08      	ble.n	80172f8 <st_int8_to16_dual+0x1cc>
 80172e6:	1b13      	subs	r3, r2, r4
 80172e8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80172ec:	f910 2b01 	ldrsb.w	r2, [r0], #1
 80172f0:	f821 2b02 	strh.w	r2, [r1], #2
 80172f4:	428b      	cmp	r3, r1
 80172f6:	d1f9      	bne.n	80172ec <st_int8_to16_dual+0x1c0>
 80172f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172fc:	4682      	mov	sl, r0
 80172fe:	e7cf      	b.n	80172a0 <st_int8_to16_dual+0x174>

08017300 <st_int8_to16_dual_interleaved>:
 8017300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017304:	4698      	mov	r8, r3
 8017306:	085b      	lsrs	r3, r3, #1
 8017308:	eb00 0c02 	add.w	ip, r0, r2
 801730c:	f000 808d 	beq.w	801742a <st_int8_to16_dual_interleaved+0x12a>
 8017310:	f1a2 0710 	sub.w	r7, r2, #16
 8017314:	1f16      	subs	r6, r2, #4
 8017316:	2f00      	cmp	r7, #0
 8017318:	f04f 0e00 	mov.w	lr, #0
 801731c:	db4c      	blt.n	80173b8 <st_int8_to16_dual_interleaved+0xb8>
 801731e:	6805      	ldr	r5, [r0, #0]
 8017320:	f8dc 4000 	ldr.w	r4, [ip]
 8017324:	fa2f fa95 	sxtb16	sl, r5, ror #8
 8017328:	fa2f f585 	sxtb16	r5, r5
 801732c:	fa2f f994 	sxtb16	r9, r4, ror #8
 8017330:	f8c1 a000 	str.w	sl, [r1]
 8017334:	f8c1 9004 	str.w	r9, [r1, #4]
 8017338:	608d      	str	r5, [r1, #8]
 801733a:	fa2f f484 	sxtb16	r4, r4
 801733e:	60cc      	str	r4, [r1, #12]
 8017340:	6845      	ldr	r5, [r0, #4]
 8017342:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8017346:	fa2f fa95 	sxtb16	sl, r5, ror #8
 801734a:	fa2f f585 	sxtb16	r5, r5
 801734e:	fa2f f994 	sxtb16	r9, r4, ror #8
 8017352:	f8c1 a010 	str.w	sl, [r1, #16]
 8017356:	f8c1 9014 	str.w	r9, [r1, #20]
 801735a:	618d      	str	r5, [r1, #24]
 801735c:	fa2f f484 	sxtb16	r4, r4
 8017360:	61cc      	str	r4, [r1, #28]
 8017362:	6885      	ldr	r5, [r0, #8]
 8017364:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8017368:	fa2f fa95 	sxtb16	sl, r5, ror #8
 801736c:	fa2f f585 	sxtb16	r5, r5
 8017370:	fa2f f994 	sxtb16	r9, r4, ror #8
 8017374:	f8c1 a020 	str.w	sl, [r1, #32]
 8017378:	f8c1 9024 	str.w	r9, [r1, #36]	; 0x24
 801737c:	628d      	str	r5, [r1, #40]	; 0x28
 801737e:	fa2f f484 	sxtb16	r4, r4
 8017382:	62cc      	str	r4, [r1, #44]	; 0x2c
 8017384:	68c5      	ldr	r5, [r0, #12]
 8017386:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801738a:	3010      	adds	r0, #16
 801738c:	f10c 0c10 	add.w	ip, ip, #16
 8017390:	fa2f fa95 	sxtb16	sl, r5, ror #8
 8017394:	fa2f f585 	sxtb16	r5, r5
 8017398:	fa2f f994 	sxtb16	r9, r4, ror #8
 801739c:	f8c1 a030 	str.w	sl, [r1, #48]	; 0x30
 80173a0:	f8c1 9034 	str.w	r9, [r1, #52]	; 0x34
 80173a4:	638d      	str	r5, [r1, #56]	; 0x38
 80173a6:	f10e 0e10 	add.w	lr, lr, #16
 80173aa:	3140      	adds	r1, #64	; 0x40
 80173ac:	45be      	cmp	lr, r7
 80173ae:	fa2f f484 	sxtb16	r4, r4
 80173b2:	f841 4c04 	str.w	r4, [r1, #-4]
 80173b6:	ddb2      	ble.n	801731e <st_int8_to16_dual_interleaved+0x1e>
 80173b8:	4576      	cmp	r6, lr
 80173ba:	db17      	blt.n	80173ec <st_int8_to16_dual_interleaved+0xec>
 80173bc:	f850 5b04 	ldr.w	r5, [r0], #4
 80173c0:	f85c 4b04 	ldr.w	r4, [ip], #4
 80173c4:	fa2f fa95 	sxtb16	sl, r5, ror #8
 80173c8:	fa2f f585 	sxtb16	r5, r5
 80173cc:	fa2f f994 	sxtb16	r9, r4, ror #8
 80173d0:	f8c1 a000 	str.w	sl, [r1]
 80173d4:	f8c1 9004 	str.w	r9, [r1, #4]
 80173d8:	608d      	str	r5, [r1, #8]
 80173da:	f10e 0e04 	add.w	lr, lr, #4
 80173de:	3110      	adds	r1, #16
 80173e0:	45b6      	cmp	lr, r6
 80173e2:	fa2f f484 	sxtb16	r4, r4
 80173e6:	f841 4c04 	str.w	r4, [r1, #-4]
 80173ea:	dde7      	ble.n	80173bc <st_int8_to16_dual_interleaved+0xbc>
 80173ec:	4572      	cmp	r2, lr
 80173ee:	dd3d      	ble.n	801746c <st_int8_to16_dual_interleaved+0x16c>
 80173f0:	eba2 0e0e 	sub.w	lr, r2, lr
 80173f4:	1d0c      	adds	r4, r1, #4
 80173f6:	eb00 0a0e 	add.w	sl, r0, lr
 80173fa:	4665      	mov	r5, ip
 80173fc:	f910 9b01 	ldrsb.w	r9, [r0], #1
 8017400:	f824 9c04 	strh.w	r9, [r4, #-4]
 8017404:	f915 9b01 	ldrsb.w	r9, [r5], #1
 8017408:	f824 9c02 	strh.w	r9, [r4, #-2]
 801740c:	4550      	cmp	r0, sl
 801740e:	f104 0404 	add.w	r4, r4, #4
 8017412:	d1f3      	bne.n	80173fc <st_int8_to16_dual_interleaved+0xfc>
 8017414:	44f4      	add	ip, lr
 8017416:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 801741a:	3b01      	subs	r3, #1
 801741c:	b29b      	uxth	r3, r3
 801741e:	eb0a 0002 	add.w	r0, sl, r2
 8017422:	4494      	add	ip, r2
 8017424:	2b00      	cmp	r3, #0
 8017426:	f47f af76 	bne.w	8017316 <st_int8_to16_dual_interleaved+0x16>
 801742a:	f018 0f01 	tst.w	r8, #1
 801742e:	d01b      	beq.n	8017468 <st_int8_to16_dual_interleaved+0x168>
 8017430:	1f16      	subs	r6, r2, #4
 8017432:	f04f 0400 	mov.w	r4, #0
 8017436:	d40c      	bmi.n	8017452 <st_int8_to16_dual_interleaved+0x152>
 8017438:	f850 3b04 	ldr.w	r3, [r0], #4
 801743c:	fa2f f593 	sxtb16	r5, r3, ror #8
 8017440:	600d      	str	r5, [r1, #0]
 8017442:	3404      	adds	r4, #4
 8017444:	3108      	adds	r1, #8
 8017446:	42a6      	cmp	r6, r4
 8017448:	fa2f f383 	sxtb16	r3, r3
 801744c:	f841 3c04 	str.w	r3, [r1, #-4]
 8017450:	daf2      	bge.n	8017438 <st_int8_to16_dual_interleaved+0x138>
 8017452:	42a2      	cmp	r2, r4
 8017454:	dd08      	ble.n	8017468 <st_int8_to16_dual_interleaved+0x168>
 8017456:	1b13      	subs	r3, r2, r4
 8017458:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801745c:	f910 2b01 	ldrsb.w	r2, [r0], #1
 8017460:	f821 2b02 	strh.w	r2, [r1], #2
 8017464:	428b      	cmp	r3, r1
 8017466:	d1f9      	bne.n	801745c <st_int8_to16_dual_interleaved+0x15c>
 8017468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801746c:	4682      	mov	sl, r0
 801746e:	e7d4      	b.n	801741a <st_int8_to16_dual_interleaved+0x11a>

08017470 <ai_padding_opt_init>:
 8017470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017474:	2700      	movs	r7, #0
 8017476:	e9c0 7700 	strd	r7, r7, [r0]
 801747a:	6087      	str	r7, [r0, #8]
 801747c:	690d      	ldr	r5, [r1, #16]
 801747e:	9c07      	ldr	r4, [sp, #28]
 8017480:	f1c5 0c00 	rsb	ip, r5, #0
 8017484:	689d      	ldr	r5, [r3, #8]
 8017486:	42bd      	cmp	r5, r7
 8017488:	46b9      	mov	r9, r7
 801748a:	dd1b      	ble.n	80174c4 <ai_padding_opt_init+0x54>
 801748c:	463e      	mov	r6, r7
 801748e:	46be      	mov	lr, r7
 8017490:	e012      	b.n	80174b8 <ai_padding_opt_init+0x48>
 8017492:	6895      	ldr	r5, [r2, #8]
 8017494:	eba5 080c 	sub.w	r8, r5, ip
 8017498:	68a5      	ldr	r5, [r4, #8]
 801749a:	45a8      	cmp	r8, r5
 801749c:	bfb5      	itete	lt
 801749e:	f109 0901 	addlt.w	r9, r9, #1
 80174a2:	3701      	addge	r7, #1
 80174a4:	f8c0 9008 	strlt.w	r9, [r0, #8]
 80174a8:	6047      	strge	r7, [r0, #4]
 80174aa:	688d      	ldr	r5, [r1, #8]
 80174ac:	44ac      	add	ip, r5
 80174ae:	689d      	ldr	r5, [r3, #8]
 80174b0:	f10e 0e01 	add.w	lr, lr, #1
 80174b4:	4575      	cmp	r5, lr
 80174b6:	dd06      	ble.n	80174c6 <ai_padding_opt_init+0x56>
 80174b8:	f1bc 0f00 	cmp.w	ip, #0
 80174bc:	dae9      	bge.n	8017492 <ai_padding_opt_init+0x22>
 80174be:	3601      	adds	r6, #1
 80174c0:	6006      	str	r6, [r0, #0]
 80174c2:	e7f2      	b.n	80174aa <ai_padding_opt_init+0x3a>
 80174c4:	463e      	mov	r6, r7
 80174c6:	2500      	movs	r5, #0
 80174c8:	e9c0 6703 	strd	r6, r7, [r0, #12]
 80174cc:	e9c0 5506 	strd	r5, r5, [r0, #24]
 80174d0:	f8c0 9014 	str.w	r9, [r0, #20]
 80174d4:	6205      	str	r5, [r0, #32]
 80174d6:	694e      	ldr	r6, [r1, #20]
 80174d8:	f1c6 0c00 	rsb	ip, r6, #0
 80174dc:	685e      	ldr	r6, [r3, #4]
 80174de:	42ae      	cmp	r6, r5
 80174e0:	dd1c      	ble.n	801751c <ai_padding_opt_init+0xac>
 80174e2:	46ae      	mov	lr, r5
 80174e4:	e00f      	b.n	8017506 <ai_padding_opt_init+0x96>
 80174e6:	6855      	ldr	r5, [r2, #4]
 80174e8:	6866      	ldr	r6, [r4, #4]
 80174ea:	eba5 050c 	sub.w	r5, r5, ip
 80174ee:	42b5      	cmp	r5, r6
 80174f0:	da10      	bge.n	8017514 <ai_padding_opt_init+0xa4>
 80174f2:	6a05      	ldr	r5, [r0, #32]
 80174f4:	3501      	adds	r5, #1
 80174f6:	6205      	str	r5, [r0, #32]
 80174f8:	68cd      	ldr	r5, [r1, #12]
 80174fa:	44ac      	add	ip, r5
 80174fc:	685d      	ldr	r5, [r3, #4]
 80174fe:	f10e 0e01 	add.w	lr, lr, #1
 8017502:	4575      	cmp	r5, lr
 8017504:	dd0a      	ble.n	801751c <ai_padding_opt_init+0xac>
 8017506:	f1bc 0f00 	cmp.w	ip, #0
 801750a:	daec      	bge.n	80174e6 <ai_padding_opt_init+0x76>
 801750c:	6985      	ldr	r5, [r0, #24]
 801750e:	3501      	adds	r5, #1
 8017510:	6185      	str	r5, [r0, #24]
 8017512:	e7f1      	b.n	80174f8 <ai_padding_opt_init+0x88>
 8017514:	69c5      	ldr	r5, [r0, #28]
 8017516:	3501      	adds	r5, #1
 8017518:	61c5      	str	r5, [r0, #28]
 801751a:	e7ed      	b.n	80174f8 <ai_padding_opt_init+0x88>
 801751c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08017520 <ai_padding_opt_phase1>:
 8017520:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 8017524:	b923      	cbnz	r3, 8017530 <ai_padding_opt_phase1+0x10>
 8017526:	b17a      	cbz	r2, 8017548 <ai_padding_opt_phase1+0x28>
 8017528:	3a01      	subs	r2, #1
 801752a:	8483      	strh	r3, [r0, #36]	; 0x24
 801752c:	61c2      	str	r2, [r0, #28]
 801752e:	e004      	b.n	801753a <ai_padding_opt_phase1+0x1a>
 8017530:	b152      	cbz	r2, 8017548 <ai_padding_opt_phase1+0x28>
 8017532:	2201      	movs	r2, #1
 8017534:	3b01      	subs	r3, #1
 8017536:	8482      	strh	r2, [r0, #36]	; 0x24
 8017538:	6183      	str	r3, [r0, #24]
 801753a:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 801753e:	68c1      	ldr	r1, [r0, #12]
 8017540:	6083      	str	r3, [r0, #8]
 8017542:	e9c0 1200 	strd	r1, r2, [r0]
 8017546:	4770      	bx	lr
 8017548:	6a03      	ldr	r3, [r0, #32]
 801754a:	2201      	movs	r2, #1
 801754c:	3b01      	subs	r3, #1
 801754e:	8482      	strh	r2, [r0, #36]	; 0x24
 8017550:	6203      	str	r3, [r0, #32]
 8017552:	e7f2      	b.n	801753a <ai_padding_opt_phase1+0x1a>

08017554 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 8017554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017558:	b09b      	sub	sp, #108	; 0x6c
 801755a:	4683      	mov	fp, r0
 801755c:	f89d 00ac 	ldrb.w	r0, [sp, #172]	; 0xac
 8017560:	900b      	str	r0, [sp, #44]	; 0x2c
 8017562:	2800      	cmp	r0, #0
 8017564:	9825      	ldr	r0, [sp, #148]	; 0x94
 8017566:	9317      	str	r3, [sp, #92]	; 0x5c
 8017568:	bf18      	it	ne
 801756a:	2301      	movne	r3, #1
 801756c:	fb00 3303 	mla	r3, r0, r3, r3
 8017570:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8017572:	910c      	str	r1, [sp, #48]	; 0x30
 8017574:	18c3      	adds	r3, r0, r3
 8017576:	9302      	str	r3, [sp, #8]
 8017578:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 801757c:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 8017580:	9205      	str	r2, [sp, #20]
 8017582:	085c      	lsrs	r4, r3, #1
 8017584:	9314      	str	r3, [sp, #80]	; 0x50
 8017586:	9006      	str	r0, [sp, #24]
 8017588:	9415      	str	r4, [sp, #84]	; 0x54
 801758a:	f000 81c5 	beq.w	8017918 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3c4>
 801758e:	460d      	mov	r5, r1
 8017590:	4601      	mov	r1, r0
 8017592:	1ece      	subs	r6, r1, #3
 8017594:	960d      	str	r6, [sp, #52]	; 0x34
 8017596:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8017598:	3604      	adds	r6, #4
 801759a:	f1a0 0310 	sub.w	r3, r0, #16
 801759e:	9601      	str	r6, [sp, #4]
 80175a0:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 80175a2:	091b      	lsrs	r3, r3, #4
 80175a4:	3301      	adds	r3, #1
 80175a6:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 80175aa:	3608      	adds	r6, #8
 80175ac:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80175b0:	9604      	str	r6, [sp, #16]
 80175b2:	920e      	str	r2, [sp, #56]	; 0x38
 80175b4:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80175b6:	900f      	str	r0, [sp, #60]	; 0x3c
 80175b8:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 80175bc:	9207      	str	r2, [sp, #28]
 80175be:	011a      	lsls	r2, r3, #4
 80175c0:	3608      	adds	r6, #8
 80175c2:	9212      	str	r2, [sp, #72]	; 0x48
 80175c4:	019a      	lsls	r2, r3, #6
 80175c6:	eb05 1343 	add.w	r3, r5, r3, lsl #5
 80175ca:	9603      	str	r6, [sp, #12]
 80175cc:	9311      	str	r3, [sp, #68]	; 0x44
 80175ce:	00e6      	lsls	r6, r4, #3
 80175d0:	1f0b      	subs	r3, r1, #4
 80175d2:	9616      	str	r6, [sp, #88]	; 0x58
 80175d4:	9210      	str	r2, [sp, #64]	; 0x40
 80175d6:	9313      	str	r3, [sp, #76]	; 0x4c
 80175d8:	46d9      	mov	r9, fp
 80175da:	9905      	ldr	r1, [sp, #20]
 80175dc:	9c06      	ldr	r4, [sp, #24]
 80175de:	680b      	ldr	r3, [r1, #0]
 80175e0:	9319      	str	r3, [sp, #100]	; 0x64
 80175e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80175e4:	9819      	ldr	r0, [sp, #100]	; 0x64
 80175e6:	684a      	ldr	r2, [r1, #4]
 80175e8:	9219      	str	r2, [sp, #100]	; 0x64
 80175ea:	3108      	adds	r1, #8
 80175ec:	2c0f      	cmp	r4, #15
 80175ee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80175f0:	9105      	str	r1, [sp, #20]
 80175f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80175f4:	9919      	ldr	r1, [sp, #100]	; 0x64
 80175f6:	f340 82cd 	ble.w	8017b94 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x640>
 80175fa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80175fc:	9e07      	ldr	r6, [sp, #28]
 80175fe:	464c      	mov	r4, r9
 8017600:	f8d7 e000 	ldr.w	lr, [r7]
 8017604:	f8d5 a000 	ldr.w	sl, [r5]
 8017608:	f8d4 c000 	ldr.w	ip, [r4]
 801760c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8017610:	fb2c 330e 	smlad	r3, ip, lr, r3
 8017614:	fb2c 000a 	smlad	r0, ip, sl, r0
 8017618:	fb28 2e0e 	smlad	lr, r8, lr, r2
 801761c:	fb28 110a 	smlad	r1, r8, sl, r1
 8017620:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8017624:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8017628:	68a2      	ldr	r2, [r4, #8]
 801762a:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 801762e:	fb22 330c 	smlad	r3, r2, ip, r3
 8017632:	fb22 0008 	smlad	r0, r2, r8, r0
 8017636:	fb2b ee0c 	smlad	lr, fp, ip, lr
 801763a:	fb2b 1808 	smlad	r8, fp, r8, r1
 801763e:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8017642:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8017646:	6922      	ldr	r2, [r4, #16]
 8017648:	f8d4 a014 	ldr.w	sl, [r4, #20]
 801764c:	fb22 330c 	smlad	r3, r2, ip, r3
 8017650:	fb22 000b 	smlad	r0, r2, fp, r0
 8017654:	fb2a ee0c 	smlad	lr, sl, ip, lr
 8017658:	fb2a 8b0b 	smlad	fp, sl, fp, r8
 801765c:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 8017660:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8017664:	f8d4 8018 	ldr.w	r8, [r4, #24]
 8017668:	69e1      	ldr	r1, [r4, #28]
 801766a:	fb28 330c 	smlad	r3, r8, ip, r3
 801766e:	fb28 000a 	smlad	r0, r8, sl, r0
 8017672:	fb21 ec0c 	smlad	ip, r1, ip, lr
 8017676:	fb21 ba0a 	smlad	sl, r1, sl, fp
 801767a:	f8d7 e010 	ldr.w	lr, [r7, #16]
 801767e:	6929      	ldr	r1, [r5, #16]
 8017680:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8017684:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8017686:	fb28 330e 	smlad	r3, r8, lr, r3
 801768a:	fb28 0001 	smlad	r0, r8, r1, r0
 801768e:	fb22 cc0e 	smlad	ip, r2, lr, ip
 8017692:	fb22 a101 	smlad	r1, r2, r1, sl
 8017696:	f8d7 e014 	ldr.w	lr, [r7, #20]
 801769a:	f8d5 a014 	ldr.w	sl, [r5, #20]
 801769e:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 80176a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80176a4:	fb28 330e 	smlad	r3, r8, lr, r3
 80176a8:	fb28 000a 	smlad	r0, r8, sl, r0
 80176ac:	fb22 cc0e 	smlad	ip, r2, lr, ip
 80176b0:	fb22 120a 	smlad	r2, r2, sl, r1
 80176b4:	f8d7 e018 	ldr.w	lr, [r7, #24]
 80176b8:	f8d5 b018 	ldr.w	fp, [r5, #24]
 80176bc:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 80176c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80176c2:	fb28 330e 	smlad	r3, r8, lr, r3
 80176c6:	fb28 080b 	smlad	r8, r8, fp, r0
 80176ca:	fb21 ce0e 	smlad	lr, r1, lr, ip
 80176ce:	fb21 210b 	smlad	r1, r1, fp, r2
 80176d2:	69fa      	ldr	r2, [r7, #28]
 80176d4:	f8d5 b01c 	ldr.w	fp, [r5, #28]
 80176d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80176da:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 80176de:	3720      	adds	r7, #32
 80176e0:	3520      	adds	r5, #32
 80176e2:	3440      	adds	r4, #64	; 0x40
 80176e4:	fb20 3302 	smlad	r3, r0, r2, r3
 80176e8:	fb20 800b 	smlad	r0, r0, fp, r8
 80176ec:	fb2c e202 	smlad	r2, ip, r2, lr
 80176f0:	fb2c 110b 	smlad	r1, ip, fp, r1
 80176f4:	42b5      	cmp	r5, r6
 80176f6:	d183      	bne.n	8017600 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xac>
 80176f8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80176fa:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 80176fe:	9d07      	ldr	r5, [sp, #28]
 8017700:	44a1      	add	r9, r4
 8017702:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017704:	9400      	str	r4, [sp, #0]
 8017706:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017708:	45a3      	cmp	fp, r4
 801770a:	f280 824b 	bge.w	8017ba4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x650>
 801770e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017710:	f8dd c000 	ldr.w	ip, [sp]
 8017714:	eba4 040b 	sub.w	r4, r4, fp
 8017718:	08a4      	lsrs	r4, r4, #2
 801771a:	940a      	str	r4, [sp, #40]	; 0x28
 801771c:	3401      	adds	r4, #1
 801771e:	00e6      	lsls	r6, r4, #3
 8017720:	9409      	str	r4, [sp, #36]	; 0x24
 8017722:	eb05 08c4 	add.w	r8, r5, r4, lsl #3
 8017726:	9608      	str	r6, [sp, #32]
 8017728:	464c      	mov	r4, r9
 801772a:	f8dc e000 	ldr.w	lr, [ip]
 801772e:	682f      	ldr	r7, [r5, #0]
 8017730:	f8d4 a000 	ldr.w	sl, [r4]
 8017734:	6866      	ldr	r6, [r4, #4]
 8017736:	fb2a 330e 	smlad	r3, sl, lr, r3
 801773a:	fb2a 0007 	smlad	r0, sl, r7, r0
 801773e:	fb26 220e 	smlad	r2, r6, lr, r2
 8017742:	fb26 1107 	smlad	r1, r6, r7, r1
 8017746:	f8dc 7004 	ldr.w	r7, [ip, #4]
 801774a:	f8d5 a004 	ldr.w	sl, [r5, #4]
 801774e:	68a6      	ldr	r6, [r4, #8]
 8017750:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8017754:	f10c 0c08 	add.w	ip, ip, #8
 8017758:	3508      	adds	r5, #8
 801775a:	3410      	adds	r4, #16
 801775c:	fb26 3307 	smlad	r3, r6, r7, r3
 8017760:	fb26 000a 	smlad	r0, r6, sl, r0
 8017764:	fb2e 2207 	smlad	r2, lr, r7, r2
 8017768:	fb2e 110a 	smlad	r1, lr, sl, r1
 801776c:	4545      	cmp	r5, r8
 801776e:	d1dc      	bne.n	801772a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1d6>
 8017770:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017772:	9d08      	ldr	r5, [sp, #32]
 8017774:	eb09 1904 	add.w	r9, r9, r4, lsl #4
 8017778:	9c00      	ldr	r4, [sp, #0]
 801777a:	442c      	add	r4, r5
 801777c:	9400      	str	r4, [sp, #0]
 801777e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017780:	f10b 0b04 	add.w	fp, fp, #4
 8017784:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 8017788:	9f06      	ldr	r7, [sp, #24]
 801778a:	455f      	cmp	r7, fp
 801778c:	dd54      	ble.n	8017838 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2e4>
 801778e:	9c00      	ldr	r4, [sp, #0]
 8017790:	f9b9 6000 	ldrsh.w	r6, [r9]
 8017794:	f9b4 4000 	ldrsh.w	r4, [r4]
 8017798:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 801779c:	fb04 3306 	mla	r3, r4, r6, r3
 80177a0:	fb05 2204 	mla	r2, r5, r4, r2
 80177a4:	f9b8 4000 	ldrsh.w	r4, [r8]
 80177a8:	fb04 0006 	mla	r0, r4, r6, r0
 80177ac:	fb05 1104 	mla	r1, r5, r4, r1
 80177b0:	f10b 0401 	add.w	r4, fp, #1
 80177b4:	42bc      	cmp	r4, r7
 80177b6:	da3a      	bge.n	801782e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2da>
 80177b8:	9c00      	ldr	r4, [sp, #0]
 80177ba:	f9b9 6004 	ldrsh.w	r6, [r9, #4]
 80177be:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 80177c2:	f9b9 4006 	ldrsh.w	r4, [r9, #6]
 80177c6:	fb05 3306 	mla	r3, r5, r6, r3
 80177ca:	fb05 2204 	mla	r2, r5, r4, r2
 80177ce:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 80177d2:	fb05 1104 	mla	r1, r5, r4, r1
 80177d6:	f10b 0402 	add.w	r4, fp, #2
 80177da:	42a7      	cmp	r7, r4
 80177dc:	fb06 0005 	mla	r0, r6, r5, r0
 80177e0:	dd25      	ble.n	801782e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2da>
 80177e2:	9c00      	ldr	r4, [sp, #0]
 80177e4:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 80177e8:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
 80177ec:	f9b9 400a 	ldrsh.w	r4, [r9, #10]
 80177f0:	fb06 3305 	mla	r3, r6, r5, r3
 80177f4:	fb05 2204 	mla	r2, r5, r4, r2
 80177f8:	f9b8 5004 	ldrsh.w	r5, [r8, #4]
 80177fc:	fb05 1104 	mla	r1, r5, r4, r1
 8017800:	f10b 0403 	add.w	r4, fp, #3
 8017804:	42a7      	cmp	r7, r4
 8017806:	fb06 0005 	mla	r0, r6, r5, r0
 801780a:	dd10      	ble.n	801782e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2da>
 801780c:	9c00      	ldr	r4, [sp, #0]
 801780e:	f9b8 6006 	ldrsh.w	r6, [r8, #6]
 8017812:	f9b4 5006 	ldrsh.w	r5, [r4, #6]
 8017816:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
 801781a:	fb04 3305 	mla	r3, r4, r5, r3
 801781e:	fb04 0006 	mla	r0, r4, r6, r0
 8017822:	f9b9 400e 	ldrsh.w	r4, [r9, #14]
 8017826:	fb05 2204 	mla	r2, r5, r4, r2
 801782a:	fb06 1104 	mla	r1, r6, r4, r1
 801782e:	9c06      	ldr	r4, [sp, #24]
 8017830:	eba4 0b0b 	sub.w	fp, r4, fp
 8017834:	eb09 098b 	add.w	r9, r9, fp, lsl #2
 8017838:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801783a:	2c00      	cmp	r4, #0
 801783c:	f000 80f2 	beq.w	8017a24 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4d0>
 8017840:	9c01      	ldr	r4, [sp, #4]
 8017842:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 8017846:	2c15      	cmp	r4, #21
 8017848:	f340 814e 	ble.w	8017ae8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x594>
 801784c:	9d03      	ldr	r5, [sp, #12]
 801784e:	f855 6c08 	ldr.w	r6, [r5, #-8]
 8017852:	9d04      	ldr	r5, [sp, #16]
 8017854:	1ea7      	subs	r7, r4, #2
 8017856:	f04f 0c01 	mov.w	ip, #1
 801785a:	f855 5c08 	ldr.w	r5, [r5, #-8]
 801785e:	fa0c f707 	lsl.w	r7, ip, r7
 8017862:	3c01      	subs	r4, #1
 8017864:	fb53 7305 	smmla	r3, r3, r5, r7
 8017868:	fb50 7005 	smmla	r0, r0, r5, r7
 801786c:	9d04      	ldr	r5, [sp, #16]
 801786e:	9f03      	ldr	r7, [sp, #12]
 8017870:	4123      	asrs	r3, r4
 8017872:	4433      	add	r3, r6
 8017874:	3d04      	subs	r5, #4
 8017876:	3f04      	subs	r7, #4
 8017878:	f303 0307 	ssat	r3, #8, r3
 801787c:	4120      	asrs	r0, r4
 801787e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8017880:	4430      	add	r0, r6
 8017882:	7023      	strb	r3, [r4, #0]
 8017884:	f300 0007 	ssat	r0, #8, r0
 8017888:	9b02      	ldr	r3, [sp, #8]
 801788a:	7018      	strb	r0, [r3, #0]
 801788c:	4620      	mov	r0, r4
 801788e:	9b01      	ldr	r3, [sp, #4]
 8017890:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8017892:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 8017896:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8017898:	1904      	adds	r4, r0, r4
 801789a:	9802      	ldr	r0, [sp, #8]
 801789c:	2b15      	cmp	r3, #21
 801789e:	4430      	add	r0, r6
 80178a0:	f340 810e 	ble.w	8017ac0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x56c>
 80178a4:	682e      	ldr	r6, [r5, #0]
 80178a6:	683f      	ldr	r7, [r7, #0]
 80178a8:	1e9d      	subs	r5, r3, #2
 80178aa:	f04f 0c01 	mov.w	ip, #1
 80178ae:	3b01      	subs	r3, #1
 80178b0:	fa0c f505 	lsl.w	r5, ip, r5
 80178b4:	fb52 5206 	smmla	r2, r2, r6, r5
 80178b8:	411a      	asrs	r2, r3
 80178ba:	fb51 5106 	smmla	r1, r1, r6, r5
 80178be:	443a      	add	r2, r7
 80178c0:	f302 0207 	ssat	r2, #8, r2
 80178c4:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 80178c6:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80178c8:	4119      	asrs	r1, r3
 80178ca:	55aa      	strb	r2, [r5, r6]
 80178cc:	4439      	add	r1, r7
 80178ce:	f301 0107 	ssat	r1, #8, r1
 80178d2:	9b02      	ldr	r3, [sp, #8]
 80178d4:	5599      	strb	r1, [r3, r6]
 80178d6:	4633      	mov	r3, r6
 80178d8:	18e3      	adds	r3, r4, r3
 80178da:	932c      	str	r3, [sp, #176]	; 0xb0
 80178dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80178de:	18c3      	adds	r3, r0, r3
 80178e0:	9302      	str	r3, [sp, #8]
 80178e2:	9b01      	ldr	r3, [sp, #4]
 80178e4:	9a05      	ldr	r2, [sp, #20]
 80178e6:	3304      	adds	r3, #4
 80178e8:	9301      	str	r3, [sp, #4]
 80178ea:	9b04      	ldr	r3, [sp, #16]
 80178ec:	3308      	adds	r3, #8
 80178ee:	9304      	str	r3, [sp, #16]
 80178f0:	9b03      	ldr	r3, [sp, #12]
 80178f2:	3308      	adds	r3, #8
 80178f4:	9303      	str	r3, [sp, #12]
 80178f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80178f8:	4293      	cmp	r3, r2
 80178fa:	f47f ae6e 	bne.w	80175da <st_sssa8_ch_nn_mat_mult_kernel_opt+0x86>
 80178fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017900:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017902:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017906:	9328      	str	r3, [sp, #160]	; 0xa0
 8017908:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801790a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801790c:	4413      	add	r3, r2
 801790e:	9329      	str	r3, [sp, #164]	; 0xa4
 8017910:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8017912:	4413      	add	r3, r2
 8017914:	46cb      	mov	fp, r9
 8017916:	932a      	str	r3, [sp, #168]	; 0xa8
 8017918:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801791a:	07db      	lsls	r3, r3, #31
 801791c:	f140 81c4 	bpl.w	8017ca8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x754>
 8017920:	9a06      	ldr	r2, [sp, #24]
 8017922:	9b05      	ldr	r3, [sp, #20]
 8017924:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	0896      	lsrs	r6, r2, #2
 801792a:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 801792e:	f000 8209 	beq.w	8017d44 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x7f0>
 8017932:	00f7      	lsls	r7, r6, #3
 8017934:	4674      	mov	r4, lr
 8017936:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 801793a:	4658      	mov	r0, fp
 801793c:	461a      	mov	r2, r3
 801793e:	f8d0 c000 	ldr.w	ip, [r0]
 8017942:	6845      	ldr	r5, [r0, #4]
 8017944:	f8d1 8000 	ldr.w	r8, [r1]
 8017948:	3008      	adds	r0, #8
 801794a:	fb2c 3308 	smlad	r3, ip, r8, r3
 801794e:	f8d4 8000 	ldr.w	r8, [r4]
 8017952:	fb2c 2208 	smlad	r2, ip, r8, r2
 8017956:	f8d1 8004 	ldr.w	r8, [r1, #4]
 801795a:	f8d4 c004 	ldr.w	ip, [r4, #4]
 801795e:	3108      	adds	r1, #8
 8017960:	3408      	adds	r4, #8
 8017962:	fb25 3308 	smlad	r3, r5, r8, r3
 8017966:	fb25 220c 	smlad	r2, r5, ip, r2
 801796a:	42b1      	cmp	r1, r6
 801796c:	d1e7      	bne.n	801793e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3ea>
 801796e:	44bb      	add	fp, r7
 8017970:	44be      	add	lr, r7
 8017972:	9906      	ldr	r1, [sp, #24]
 8017974:	f011 0103 	ands.w	r1, r1, #3
 8017978:	d01f      	beq.n	80179ba <st_sssa8_ch_nn_mat_mult_kernel_opt+0x466>
 801797a:	f9bb 0000 	ldrsh.w	r0, [fp]
 801797e:	8834      	ldrh	r4, [r6, #0]
 8017980:	3901      	subs	r1, #1
 8017982:	fb14 3300 	smlabb	r3, r4, r0, r3
 8017986:	f8be 4000 	ldrh.w	r4, [lr]
 801798a:	b289      	uxth	r1, r1
 801798c:	fb14 2200 	smlabb	r2, r4, r0, r2
 8017990:	b199      	cbz	r1, 80179ba <st_sssa8_ch_nn_mat_mult_kernel_opt+0x466>
 8017992:	f9bb 0002 	ldrsh.w	r0, [fp, #2]
 8017996:	8874      	ldrh	r4, [r6, #2]
 8017998:	fb14 3300 	smlabb	r3, r4, r0, r3
 801799c:	f8be 4002 	ldrh.w	r4, [lr, #2]
 80179a0:	2901      	cmp	r1, #1
 80179a2:	fb14 2200 	smlabb	r2, r4, r0, r2
 80179a6:	d008      	beq.n	80179ba <st_sssa8_ch_nn_mat_mult_kernel_opt+0x466>
 80179a8:	f9bb 1004 	ldrsh.w	r1, [fp, #4]
 80179ac:	88b0      	ldrh	r0, [r6, #4]
 80179ae:	fb11 3300 	smlabb	r3, r1, r0, r3
 80179b2:	f8be 0004 	ldrh.w	r0, [lr, #4]
 80179b6:	fb11 2200 	smlabb	r2, r1, r0, r2
 80179ba:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80179bc:	f9b1 0000 	ldrsh.w	r0, [r1]
 80179c0:	2815      	cmp	r0, #21
 80179c2:	f340 8180 	ble.w	8017cc6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x772>
 80179c6:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80179c8:	680c      	ldr	r4, [r1, #0]
 80179ca:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80179cc:	1e85      	subs	r5, r0, #2
 80179ce:	2601      	movs	r6, #1
 80179d0:	3801      	subs	r0, #1
 80179d2:	6809      	ldr	r1, [r1, #0]
 80179d4:	40ae      	lsls	r6, r5
 80179d6:	fb53 6501 	smmla	r5, r3, r1, r6
 80179da:	fb52 6301 	smmla	r3, r2, r1, r6
 80179de:	fa45 f200 	asr.w	r2, r5, r0
 80179e2:	4422      	add	r2, r4
 80179e4:	f302 0207 	ssat	r2, #8, r2
 80179e8:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80179ea:	4103      	asrs	r3, r0
 80179ec:	4423      	add	r3, r4
 80179ee:	f801 2b01 	strb.w	r2, [r1], #1
 80179f2:	f303 0307 	ssat	r3, #8, r3
 80179f6:	9a02      	ldr	r2, [sp, #8]
 80179f8:	912c      	str	r1, [sp, #176]	; 0xb0
 80179fa:	7013      	strb	r3, [r2, #0]
 80179fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	f000 8156 	beq.w	8017cb0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x75c>
 8017a04:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017a06:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8017a08:	3b01      	subs	r3, #1
 8017a0a:	441a      	add	r2, r3
 8017a0c:	922c      	str	r2, [sp, #176]	; 0xb0
 8017a0e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017a10:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017a12:	1c98      	adds	r0, r3, #2
 8017a14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017a16:	fb02 0013 	mls	r0, r2, r3, r0
 8017a1a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017a1c:	4418      	add	r0, r3
 8017a1e:	b01b      	add	sp, #108	; 0x6c
 8017a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a24:	9c01      	ldr	r4, [sp, #4]
 8017a26:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 8017a2a:	2c15      	cmp	r4, #21
 8017a2c:	f340 8094 	ble.w	8017b58 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x604>
 8017a30:	9d03      	ldr	r5, [sp, #12]
 8017a32:	f855 6c08 	ldr.w	r6, [r5, #-8]
 8017a36:	9d04      	ldr	r5, [sp, #16]
 8017a38:	1ea7      	subs	r7, r4, #2
 8017a3a:	f04f 0c01 	mov.w	ip, #1
 8017a3e:	f855 5c08 	ldr.w	r5, [r5, #-8]
 8017a42:	fa0c f707 	lsl.w	r7, ip, r7
 8017a46:	3c01      	subs	r4, #1
 8017a48:	fb53 7305 	smmla	r3, r3, r5, r7
 8017a4c:	fb50 7005 	smmla	r0, r0, r5, r7
 8017a50:	9f04      	ldr	r7, [sp, #16]
 8017a52:	9d03      	ldr	r5, [sp, #12]
 8017a54:	4123      	asrs	r3, r4
 8017a56:	4433      	add	r3, r6
 8017a58:	f1a7 0c04 	sub.w	ip, r7, #4
 8017a5c:	f1a5 0804 	sub.w	r8, r5, #4
 8017a60:	f303 0307 	ssat	r3, #8, r3
 8017a64:	4120      	asrs	r0, r4
 8017a66:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8017a68:	4430      	add	r0, r6
 8017a6a:	7023      	strb	r3, [r4, #0]
 8017a6c:	f300 0007 	ssat	r0, #8, r0
 8017a70:	9b02      	ldr	r3, [sp, #8]
 8017a72:	7018      	strb	r0, [r3, #0]
 8017a74:	9b01      	ldr	r3, [sp, #4]
 8017a76:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 8017a7a:	2b15      	cmp	r3, #21
 8017a7c:	dd52      	ble.n	8017b24 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5d0>
 8017a7e:	f8d8 4000 	ldr.w	r4, [r8]
 8017a82:	f8dc 5000 	ldr.w	r5, [ip]
 8017a86:	1e98      	subs	r0, r3, #2
 8017a88:	2601      	movs	r6, #1
 8017a8a:	3b01      	subs	r3, #1
 8017a8c:	fa06 f000 	lsl.w	r0, r6, r0
 8017a90:	fb52 0205 	smmla	r2, r2, r5, r0
 8017a94:	411a      	asrs	r2, r3
 8017a96:	fb51 0105 	smmla	r1, r1, r5, r0
 8017a9a:	4422      	add	r2, r4
 8017a9c:	f302 0207 	ssat	r2, #8, r2
 8017aa0:	fa41 f303 	asr.w	r3, r1, r3
 8017aa4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8017aa6:	4423      	add	r3, r4
 8017aa8:	704a      	strb	r2, [r1, #1]
 8017aaa:	f303 0307 	ssat	r3, #8, r3
 8017aae:	9a02      	ldr	r2, [sp, #8]
 8017ab0:	7053      	strb	r3, [r2, #1]
 8017ab2:	460b      	mov	r3, r1
 8017ab4:	3302      	adds	r3, #2
 8017ab6:	932c      	str	r3, [sp, #176]	; 0xb0
 8017ab8:	9b02      	ldr	r3, [sp, #8]
 8017aba:	3302      	adds	r3, #2
 8017abc:	9302      	str	r3, [sp, #8]
 8017abe:	e710      	b.n	80178e2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x38e>
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	dd71      	ble.n	8017ba8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x654>
 8017ac4:	682d      	ldr	r5, [r5, #0]
 8017ac6:	683f      	ldr	r7, [r7, #0]
 8017ac8:	0052      	lsls	r2, r2, #1
 8017aca:	0049      	lsls	r1, r1, #1
 8017acc:	fb52 7205 	smmla	r2, r2, r5, r7
 8017ad0:	fb51 7105 	smmla	r1, r1, r5, r7
 8017ad4:	411a      	asrs	r2, r3
 8017ad6:	f302 0207 	ssat	r2, #8, r2
 8017ada:	7022      	strb	r2, [r4, #0]
 8017adc:	4119      	asrs	r1, r3
 8017ade:	f301 0107 	ssat	r1, #8, r1
 8017ae2:	7001      	strb	r1, [r0, #0]
 8017ae4:	4633      	mov	r3, r6
 8017ae6:	e6f7      	b.n	80178d8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x384>
 8017ae8:	2c00      	cmp	r4, #0
 8017aea:	f340 809b 	ble.w	8017c24 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x6d0>
 8017aee:	9f04      	ldr	r7, [sp, #16]
 8017af0:	9e03      	ldr	r6, [sp, #12]
 8017af2:	f857 5c08 	ldr.w	r5, [r7, #-8]
 8017af6:	f856 6c08 	ldr.w	r6, [r6, #-8]
 8017afa:	005b      	lsls	r3, r3, #1
 8017afc:	0040      	lsls	r0, r0, #1
 8017afe:	fb53 6305 	smmla	r3, r3, r5, r6
 8017b02:	fb50 6005 	smmla	r0, r0, r5, r6
 8017b06:	9e03      	ldr	r6, [sp, #12]
 8017b08:	1f3d      	subs	r5, r7, #4
 8017b0a:	4123      	asrs	r3, r4
 8017b0c:	1f37      	subs	r7, r6, #4
 8017b0e:	f303 0307 	ssat	r3, #8, r3
 8017b12:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8017b14:	4120      	asrs	r0, r4
 8017b16:	7033      	strb	r3, [r6, #0]
 8017b18:	f300 0007 	ssat	r0, #8, r0
 8017b1c:	9b02      	ldr	r3, [sp, #8]
 8017b1e:	7018      	strb	r0, [r3, #0]
 8017b20:	4630      	mov	r0, r6
 8017b22:	e6b4      	b.n	801788e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x33a>
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	f340 80a0 	ble.w	8017c6a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x716>
 8017b2a:	f8dc 0000 	ldr.w	r0, [ip]
 8017b2e:	f8d8 4000 	ldr.w	r4, [r8]
 8017b32:	0052      	lsls	r2, r2, #1
 8017b34:	0049      	lsls	r1, r1, #1
 8017b36:	fb52 4200 	smmla	r2, r2, r0, r4
 8017b3a:	fb51 4100 	smmla	r1, r1, r0, r4
 8017b3e:	411a      	asrs	r2, r3
 8017b40:	f302 0207 	ssat	r2, #8, r2
 8017b44:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8017b46:	fa41 f303 	asr.w	r3, r1, r3
 8017b4a:	7042      	strb	r2, [r0, #1]
 8017b4c:	f303 0307 	ssat	r3, #8, r3
 8017b50:	9a02      	ldr	r2, [sp, #8]
 8017b52:	7053      	strb	r3, [r2, #1]
 8017b54:	4603      	mov	r3, r0
 8017b56:	e7ad      	b.n	8017ab4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x560>
 8017b58:	2c00      	cmp	r4, #0
 8017b5a:	dd3f      	ble.n	8017bdc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x688>
 8017b5c:	9f04      	ldr	r7, [sp, #16]
 8017b5e:	9e03      	ldr	r6, [sp, #12]
 8017b60:	f857 5c08 	ldr.w	r5, [r7, #-8]
 8017b64:	f856 6c08 	ldr.w	r6, [r6, #-8]
 8017b68:	005b      	lsls	r3, r3, #1
 8017b6a:	0040      	lsls	r0, r0, #1
 8017b6c:	fb53 6305 	smmla	r3, r3, r5, r6
 8017b70:	fb50 6005 	smmla	r0, r0, r5, r6
 8017b74:	9e03      	ldr	r6, [sp, #12]
 8017b76:	4123      	asrs	r3, r4
 8017b78:	f1a7 0c04 	sub.w	ip, r7, #4
 8017b7c:	f1a6 0804 	sub.w	r8, r6, #4
 8017b80:	f303 0307 	ssat	r3, #8, r3
 8017b84:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 8017b86:	4120      	asrs	r0, r4
 8017b88:	702b      	strb	r3, [r5, #0]
 8017b8a:	f300 0007 	ssat	r0, #8, r0
 8017b8e:	9b02      	ldr	r3, [sp, #8]
 8017b90:	7018      	strb	r0, [r3, #0]
 8017b92:	e76f      	b.n	8017a74 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x520>
 8017b94:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017b96:	9400      	str	r4, [sp, #0]
 8017b98:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017b9a:	f04f 0b00 	mov.w	fp, #0
 8017b9e:	45a3      	cmp	fp, r4
 8017ba0:	f6ff adb5 	blt.w	801770e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1ba>
 8017ba4:	46a8      	mov	r8, r5
 8017ba6:	e5ef      	b.n	8017788 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x234>
 8017ba8:	f1c3 0301 	rsb	r3, r3, #1
 8017bac:	409a      	lsls	r2, r3
 8017bae:	f302 021f 	ssat	r2, #32, r2
 8017bb2:	682d      	ldr	r5, [r5, #0]
 8017bb4:	fb52 f215 	smmulr	r2, r2, r5
 8017bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8017bbc:	f303 031f 	ssat	r3, #32, r3
 8017bc0:	fb53 f515 	smmulr	r5, r3, r5
 8017bc4:	683b      	ldr	r3, [r7, #0]
 8017bc6:	4413      	add	r3, r2
 8017bc8:	f303 0307 	ssat	r3, #8, r3
 8017bcc:	7023      	strb	r3, [r4, #0]
 8017bce:	683b      	ldr	r3, [r7, #0]
 8017bd0:	442b      	add	r3, r5
 8017bd2:	f303 0307 	ssat	r3, #8, r3
 8017bd6:	7003      	strb	r3, [r0, #0]
 8017bd8:	4633      	mov	r3, r6
 8017bda:	e67d      	b.n	80178d8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x384>
 8017bdc:	f1c4 0401 	rsb	r4, r4, #1
 8017be0:	fa03 f504 	lsl.w	r5, r3, r4
 8017be4:	f305 051f 	ssat	r5, #32, r5
 8017be8:	9e04      	ldr	r6, [sp, #16]
 8017bea:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8017bee:	fb55 f513 	smmulr	r5, r5, r3
 8017bf2:	40a0      	lsls	r0, r4
 8017bf4:	f300 001f 	ssat	r0, #32, r0
 8017bf8:	f1a6 0c04 	sub.w	ip, r6, #4
 8017bfc:	fb50 f013 	smmulr	r0, r0, r3
 8017c00:	9c03      	ldr	r4, [sp, #12]
 8017c02:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8017c06:	442b      	add	r3, r5
 8017c08:	f303 0307 	ssat	r3, #8, r3
 8017c0c:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 8017c0e:	702b      	strb	r3, [r5, #0]
 8017c10:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8017c14:	f1a4 0804 	sub.w	r8, r4, #4
 8017c18:	4403      	add	r3, r0
 8017c1a:	f303 0307 	ssat	r3, #8, r3
 8017c1e:	9802      	ldr	r0, [sp, #8]
 8017c20:	7003      	strb	r3, [r0, #0]
 8017c22:	e727      	b.n	8017a74 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x520>
 8017c24:	f1c4 0401 	rsb	r4, r4, #1
 8017c28:	fa03 f604 	lsl.w	r6, r3, r4
 8017c2c:	f306 061f 	ssat	r6, #32, r6
 8017c30:	9d04      	ldr	r5, [sp, #16]
 8017c32:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8017c36:	fb56 f613 	smmulr	r6, r6, r3
 8017c3a:	40a0      	lsls	r0, r4
 8017c3c:	f300 001f 	ssat	r0, #32, r0
 8017c40:	3d04      	subs	r5, #4
 8017c42:	fb50 f013 	smmulr	r0, r0, r3
 8017c46:	9c03      	ldr	r4, [sp, #12]
 8017c48:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8017c4c:	4433      	add	r3, r6
 8017c4e:	f303 0307 	ssat	r3, #8, r3
 8017c52:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8017c54:	7033      	strb	r3, [r6, #0]
 8017c56:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8017c5a:	1f27      	subs	r7, r4, #4
 8017c5c:	4403      	add	r3, r0
 8017c5e:	f303 0307 	ssat	r3, #8, r3
 8017c62:	9802      	ldr	r0, [sp, #8]
 8017c64:	7003      	strb	r3, [r0, #0]
 8017c66:	4630      	mov	r0, r6
 8017c68:	e611      	b.n	801788e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x33a>
 8017c6a:	f1c3 0301 	rsb	r3, r3, #1
 8017c6e:	409a      	lsls	r2, r3
 8017c70:	f302 021f 	ssat	r2, #32, r2
 8017c74:	f8dc 0000 	ldr.w	r0, [ip]
 8017c78:	fb52 f210 	smmulr	r2, r2, r0
 8017c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8017c80:	f303 031f 	ssat	r3, #32, r3
 8017c84:	fb53 f010 	smmulr	r0, r3, r0
 8017c88:	f8d8 3000 	ldr.w	r3, [r8]
 8017c8c:	4413      	add	r3, r2
 8017c8e:	f303 0307 	ssat	r3, #8, r3
 8017c92:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8017c94:	7053      	strb	r3, [r2, #1]
 8017c96:	f8d8 3000 	ldr.w	r3, [r8]
 8017c9a:	4403      	add	r3, r0
 8017c9c:	f303 0307 	ssat	r3, #8, r3
 8017ca0:	9a02      	ldr	r2, [sp, #8]
 8017ca2:	7053      	strb	r3, [r2, #1]
 8017ca4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017ca6:	e705      	b.n	8017ab4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x560>
 8017ca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	f47f aeaf 	bne.w	8017a0e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4ba>
 8017cb0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8017cb2:	9914      	ldr	r1, [sp, #80]	; 0x50
 8017cb4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017cb6:	1a50      	subs	r0, r2, r1
 8017cb8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017cba:	3302      	adds	r3, #2
 8017cbc:	fb02 0003 	mla	r0, r2, r3, r0
 8017cc0:	b01b      	add	sp, #108	; 0x6c
 8017cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cc6:	2800      	cmp	r0, #0
 8017cc8:	dd1b      	ble.n	8017d02 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x7ae>
 8017cca:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8017ccc:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8017cce:	6809      	ldr	r1, [r1, #0]
 8017cd0:	6824      	ldr	r4, [r4, #0]
 8017cd2:	0052      	lsls	r2, r2, #1
 8017cd4:	005b      	lsls	r3, r3, #1
 8017cd6:	fb53 4301 	smmla	r3, r3, r1, r4
 8017cda:	fb52 4101 	smmla	r1, r2, r1, r4
 8017cde:	fa43 f000 	asr.w	r0, r3, r0
 8017ce2:	f300 0307 	ssat	r3, #8, r0
 8017ce6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8017ce8:	f802 3b01 	strb.w	r3, [r2], #1
 8017cec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017cee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017cf2:	fa41 f303 	asr.w	r3, r1, r3
 8017cf6:	f303 0307 	ssat	r3, #8, r3
 8017cfa:	9902      	ldr	r1, [sp, #8]
 8017cfc:	922c      	str	r2, [sp, #176]	; 0xb0
 8017cfe:	700b      	strb	r3, [r1, #0]
 8017d00:	e67c      	b.n	80179fc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4a8>
 8017d02:	f1c0 0001 	rsb	r0, r0, #1
 8017d06:	fa03 f100 	lsl.w	r1, r3, r0
 8017d0a:	f301 011f 	ssat	r1, #32, r1
 8017d0e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017d10:	681c      	ldr	r4, [r3, #0]
 8017d12:	fb51 f114 	smmulr	r1, r1, r4
 8017d16:	fa02 f300 	lsl.w	r3, r2, r0
 8017d1a:	f303 031f 	ssat	r3, #32, r3
 8017d1e:	fb53 f414 	smmulr	r4, r3, r4
 8017d22:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8017d24:	681b      	ldr	r3, [r3, #0]
 8017d26:	440b      	add	r3, r1
 8017d28:	f303 0307 	ssat	r3, #8, r3
 8017d2c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8017d2e:	f802 3b01 	strb.w	r3, [r2], #1
 8017d32:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	4423      	add	r3, r4
 8017d38:	f303 0307 	ssat	r3, #8, r3
 8017d3c:	9902      	ldr	r1, [sp, #8]
 8017d3e:	922c      	str	r2, [sp, #176]	; 0xb0
 8017d40:	700b      	strb	r3, [r1, #0]
 8017d42:	e65b      	b.n	80179fc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4a8>
 8017d44:	460e      	mov	r6, r1
 8017d46:	461a      	mov	r2, r3
 8017d48:	e613      	b.n	8017972 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x41e>
 8017d4a:	bf00      	nop

08017d4c <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 8017d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d50:	b095      	sub	sp, #84	; 0x54
 8017d52:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 8017d56:	920d      	str	r2, [sp, #52]	; 0x34
 8017d58:	9311      	str	r3, [sp, #68]	; 0x44
 8017d5a:	f8bd 2080 	ldrh.w	r2, [sp, #128]	; 0x80
 8017d5e:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
 8017d62:	9204      	str	r2, [sp, #16]
 8017d64:	0862      	lsrs	r2, r4, #1
 8017d66:	940f      	str	r4, [sp, #60]	; 0x3c
 8017d68:	9106      	str	r1, [sp, #24]
 8017d6a:	9310      	str	r3, [sp, #64]	; 0x40
 8017d6c:	920e      	str	r2, [sp, #56]	; 0x38
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	f000 81f8 	beq.w	8018164 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x418>
 8017d74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017d76:	b29c      	uxth	r4, r3
 8017d78:	2a00      	cmp	r2, #0
 8017d7a:	f000 8142 	beq.w	8018002 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2b6>
 8017d7e:	1c61      	adds	r1, r4, #1
 8017d80:	0064      	lsls	r4, r4, #1
 8017d82:	9407      	str	r4, [sp, #28]
 8017d84:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8017d86:	9d04      	ldr	r5, [sp, #16]
 8017d88:	1861      	adds	r1, r4, r1
 8017d8a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017d8c:	9102      	str	r1, [sp, #8]
 8017d8e:	3a01      	subs	r2, #1
 8017d90:	f104 0110 	add.w	r1, r4, #16
 8017d94:	b292      	uxth	r2, r2
 8017d96:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8017d9a:	1ee9      	subs	r1, r5, #3
 8017d9c:	9108      	str	r1, [sp, #32]
 8017d9e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8017da0:	9209      	str	r2, [sp, #36]	; 0x24
 8017da2:	3104      	adds	r1, #4
 8017da4:	9100      	str	r1, [sp, #0]
 8017da6:	9922      	ldr	r1, [sp, #136]	; 0x88
 8017da8:	3108      	adds	r1, #8
 8017daa:	9101      	str	r1, [sp, #4]
 8017dac:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8017dae:	f101 0b08 	add.w	fp, r1, #8
 8017db2:	9925      	ldr	r1, [sp, #148]	; 0x94
 8017db4:	f1a5 0310 	sub.w	r3, r5, #16
 8017db8:	3101      	adds	r1, #1
 8017dba:	091b      	lsrs	r3, r3, #4
 8017dbc:	9103      	str	r1, [sp, #12]
 8017dbe:	9906      	ldr	r1, [sp, #24]
 8017dc0:	3301      	adds	r3, #1
 8017dc2:	eb01 1743 	add.w	r7, r1, r3, lsl #5
 8017dc6:	0119      	lsls	r1, r3, #4
 8017dc8:	019b      	lsls	r3, r3, #6
 8017dca:	930a      	str	r3, [sp, #40]	; 0x28
 8017dcc:	1f2b      	subs	r3, r5, #4
 8017dce:	f104 0908 	add.w	r9, r4, #8
 8017dd2:	910b      	str	r1, [sp, #44]	; 0x2c
 8017dd4:	930c      	str	r3, [sp, #48]	; 0x30
 8017dd6:	f859 3c08 	ldr.w	r3, [r9, #-8]
 8017dda:	9904      	ldr	r1, [sp, #16]
 8017ddc:	9313      	str	r3, [sp, #76]	; 0x4c
 8017dde:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8017de2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017de4:	9313      	str	r3, [sp, #76]	; 0x4c
 8017de6:	290f      	cmp	r1, #15
 8017de8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017dea:	9c06      	ldr	r4, [sp, #24]
 8017dec:	f340 81b7 	ble.w	801815e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x412>
 8017df0:	4601      	mov	r1, r0
 8017df2:	f8d4 c000 	ldr.w	ip, [r4]
 8017df6:	680e      	ldr	r6, [r1, #0]
 8017df8:	fb26 220c 	smlad	r2, r6, ip, r2
 8017dfc:	684d      	ldr	r5, [r1, #4]
 8017dfe:	fb25 330c 	smlad	r3, r5, ip, r3
 8017e02:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8017e06:	688e      	ldr	r6, [r1, #8]
 8017e08:	fb26 260c 	smlad	r6, r6, ip, r2
 8017e0c:	68cd      	ldr	r5, [r1, #12]
 8017e0e:	fb25 350c 	smlad	r5, r5, ip, r3
 8017e12:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8017e16:	690a      	ldr	r2, [r1, #16]
 8017e18:	fb22 660c 	smlad	r6, r2, ip, r6
 8017e1c:	694b      	ldr	r3, [r1, #20]
 8017e1e:	fb23 550c 	smlad	r5, r3, ip, r5
 8017e22:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8017e26:	698a      	ldr	r2, [r1, #24]
 8017e28:	fb22 620c 	smlad	r2, r2, ip, r6
 8017e2c:	69cb      	ldr	r3, [r1, #28]
 8017e2e:	fb23 530c 	smlad	r3, r3, ip, r5
 8017e32:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8017e36:	6a0e      	ldr	r6, [r1, #32]
 8017e38:	fb26 220c 	smlad	r2, r6, ip, r2
 8017e3c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8017e3e:	fb25 330c 	smlad	r3, r5, ip, r3
 8017e42:	f8d4 c014 	ldr.w	ip, [r4, #20]
 8017e46:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8017e48:	fb26 260c 	smlad	r6, r6, ip, r2
 8017e4c:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 8017e4e:	fb25 350c 	smlad	r5, r5, ip, r3
 8017e52:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8017e56:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8017e58:	fb22 660c 	smlad	r6, r2, ip, r6
 8017e5c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8017e5e:	fb23 550c 	smlad	r5, r3, ip, r5
 8017e62:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 8017e66:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8017e68:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8017e6a:	3420      	adds	r4, #32
 8017e6c:	3140      	adds	r1, #64	; 0x40
 8017e6e:	fb22 620c 	smlad	r2, r2, ip, r6
 8017e72:	fb23 530c 	smlad	r3, r3, ip, r5
 8017e76:	42bc      	cmp	r4, r7
 8017e78:	d1bb      	bne.n	8017df2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xa6>
 8017e7a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017e7c:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 8017e80:	4408      	add	r0, r1
 8017e82:	463c      	mov	r4, r7
 8017e84:	9908      	ldr	r1, [sp, #32]
 8017e86:	458e      	cmp	lr, r1
 8017e88:	da24      	bge.n	8017ed4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x188>
 8017e8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017e8c:	eba1 0a0e 	sub.w	sl, r1, lr
 8017e90:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 8017e94:	f10a 0101 	add.w	r1, sl, #1
 8017e98:	9105      	str	r1, [sp, #20]
 8017e9a:	eb04 08c1 	add.w	r8, r4, r1, lsl #3
 8017e9e:	4601      	mov	r1, r0
 8017ea0:	6825      	ldr	r5, [r4, #0]
 8017ea2:	680e      	ldr	r6, [r1, #0]
 8017ea4:	fb26 2205 	smlad	r2, r6, r5, r2
 8017ea8:	684e      	ldr	r6, [r1, #4]
 8017eaa:	fb26 3505 	smlad	r5, r6, r5, r3
 8017eae:	6866      	ldr	r6, [r4, #4]
 8017eb0:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8017eb4:	68cb      	ldr	r3, [r1, #12]
 8017eb6:	3408      	adds	r4, #8
 8017eb8:	3110      	adds	r1, #16
 8017eba:	fb2c 2206 	smlad	r2, ip, r6, r2
 8017ebe:	fb23 5306 	smlad	r3, r3, r6, r5
 8017ec2:	45a0      	cmp	r8, r4
 8017ec4:	d1ec      	bne.n	8017ea0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x154>
 8017ec6:	9905      	ldr	r1, [sp, #20]
 8017ec8:	f10e 0e04 	add.w	lr, lr, #4
 8017ecc:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8017ed0:	eb0e 0e8a 	add.w	lr, lr, sl, lsl #2
 8017ed4:	9e04      	ldr	r6, [sp, #16]
 8017ed6:	4576      	cmp	r6, lr
 8017ed8:	dd30      	ble.n	8017f3c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1f0>
 8017eda:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017ede:	8805      	ldrh	r5, [r0, #0]
 8017ee0:	fb15 2201 	smlabb	r2, r5, r1, r2
 8017ee4:	8845      	ldrh	r5, [r0, #2]
 8017ee6:	fb11 3305 	smlabb	r3, r1, r5, r3
 8017eea:	f10e 0101 	add.w	r1, lr, #1
 8017eee:	428e      	cmp	r6, r1
 8017ef0:	dd1f      	ble.n	8017f32 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1e6>
 8017ef2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017ef6:	8885      	ldrh	r5, [r0, #4]
 8017ef8:	fb15 2201 	smlabb	r2, r5, r1, r2
 8017efc:	88c5      	ldrh	r5, [r0, #6]
 8017efe:	fb11 3305 	smlabb	r3, r1, r5, r3
 8017f02:	f10e 0102 	add.w	r1, lr, #2
 8017f06:	428e      	cmp	r6, r1
 8017f08:	dd13      	ble.n	8017f32 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1e6>
 8017f0a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017f0e:	8905      	ldrh	r5, [r0, #8]
 8017f10:	fb15 2201 	smlabb	r2, r5, r1, r2
 8017f14:	8945      	ldrh	r5, [r0, #10]
 8017f16:	fb11 3305 	smlabb	r3, r1, r5, r3
 8017f1a:	f10e 0103 	add.w	r1, lr, #3
 8017f1e:	428e      	cmp	r6, r1
 8017f20:	dd07      	ble.n	8017f32 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1e6>
 8017f22:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8017f26:	8984      	ldrh	r4, [r0, #12]
 8017f28:	fb14 2201 	smlabb	r2, r4, r1, r2
 8017f2c:	89c4      	ldrh	r4, [r0, #14]
 8017f2e:	fb11 3304 	smlabb	r3, r1, r4, r3
 8017f32:	9904      	ldr	r1, [sp, #16]
 8017f34:	eba1 0e0e 	sub.w	lr, r1, lr
 8017f38:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 8017f3c:	9900      	ldr	r1, [sp, #0]
 8017f3e:	f931 5c04 	ldrsh.w	r5, [r1, #-4]
 8017f42:	2d15      	cmp	r5, #21
 8017f44:	f340 80b4 	ble.w	80180b0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x364>
 8017f48:	9901      	ldr	r1, [sp, #4]
 8017f4a:	f85b 6c08 	ldr.w	r6, [fp, #-8]
 8017f4e:	f851 1c08 	ldr.w	r1, [r1, #-8]
 8017f52:	1eac      	subs	r4, r5, #2
 8017f54:	f04f 0c01 	mov.w	ip, #1
 8017f58:	fa0c f404 	lsl.w	r4, ip, r4
 8017f5c:	3d01      	subs	r5, #1
 8017f5e:	fb52 4201 	smmla	r2, r2, r1, r4
 8017f62:	9c01      	ldr	r4, [sp, #4]
 8017f64:	9900      	ldr	r1, [sp, #0]
 8017f66:	412a      	asrs	r2, r5
 8017f68:	4432      	add	r2, r6
 8017f6a:	f1a4 0e04 	sub.w	lr, r4, #4
 8017f6e:	f1a1 0c02 	sub.w	ip, r1, #2
 8017f72:	f1ab 0604 	sub.w	r6, fp, #4
 8017f76:	f302 0207 	ssat	r2, #8, r2
 8017f7a:	9903      	ldr	r1, [sp, #12]
 8017f7c:	f801 2c01 	strb.w	r2, [r1, #-1]
 8017f80:	f9bc 2000 	ldrsh.w	r2, [ip]
 8017f84:	2a15      	cmp	r2, #21
 8017f86:	f340 80b0 	ble.w	80180ea <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x39e>
 8017f8a:	6834      	ldr	r4, [r6, #0]
 8017f8c:	f8de 1000 	ldr.w	r1, [lr]
 8017f90:	1e95      	subs	r5, r2, #2
 8017f92:	2601      	movs	r6, #1
 8017f94:	3a01      	subs	r2, #1
 8017f96:	fa06 f505 	lsl.w	r5, r6, r5
 8017f9a:	fb53 5501 	smmla	r5, r3, r1, r5
 8017f9e:	4115      	asrs	r5, r2
 8017fa0:	4425      	add	r5, r4
 8017fa2:	f305 0507 	ssat	r5, #8, r5
 8017fa6:	9b02      	ldr	r3, [sp, #8]
 8017fa8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017fac:	9b00      	ldr	r3, [sp, #0]
 8017fae:	9a07      	ldr	r2, [sp, #28]
 8017fb0:	3304      	adds	r3, #4
 8017fb2:	9300      	str	r3, [sp, #0]
 8017fb4:	9b01      	ldr	r3, [sp, #4]
 8017fb6:	3308      	adds	r3, #8
 8017fb8:	9301      	str	r3, [sp, #4]
 8017fba:	9b02      	ldr	r3, [sp, #8]
 8017fbc:	4413      	add	r3, r2
 8017fbe:	9302      	str	r3, [sp, #8]
 8017fc0:	9b03      	ldr	r3, [sp, #12]
 8017fc2:	4413      	add	r3, r2
 8017fc4:	9303      	str	r3, [sp, #12]
 8017fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fc8:	f109 0908 	add.w	r9, r9, #8
 8017fcc:	4599      	cmp	r9, r3
 8017fce:	f10b 0b08 	add.w	fp, fp, #8
 8017fd2:	f47f af00 	bne.w	8017dd6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x8a>
 8017fd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017fd8:	4611      	mov	r1, r2
 8017fda:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8017fdc:	fb03 2201 	mla	r2, r3, r1, r2
 8017fe0:	9225      	str	r2, [sp, #148]	; 0x94
 8017fe2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017fe4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017fe8:	920d      	str	r2, [sp, #52]	; 0x34
 8017fea:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017fec:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8017ff0:	9221      	str	r2, [sp, #132]	; 0x84
 8017ff2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017ff4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017ff8:	9222      	str	r2, [sp, #136]	; 0x88
 8017ffa:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8017ffc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018000:	9323      	str	r3, [sp, #140]	; 0x8c
 8018002:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018004:	07db      	lsls	r3, r3, #31
 8018006:	d545      	bpl.n	8018094 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x348>
 8018008:	9a04      	ldr	r2, [sp, #16]
 801800a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801800c:	0896      	lsrs	r6, r2, #2
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	d012      	beq.n	8018038 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2ec>
 8018012:	9906      	ldr	r1, [sp, #24]
 8018014:	00f7      	lsls	r7, r6, #3
 8018016:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 801801a:	6804      	ldr	r4, [r0, #0]
 801801c:	6842      	ldr	r2, [r0, #4]
 801801e:	680d      	ldr	r5, [r1, #0]
 8018020:	3008      	adds	r0, #8
 8018022:	fb24 3305 	smlad	r3, r4, r5, r3
 8018026:	684c      	ldr	r4, [r1, #4]
 8018028:	3108      	adds	r1, #8
 801802a:	fb22 3304 	smlad	r3, r2, r4, r3
 801802e:	4286      	cmp	r6, r0
 8018030:	d1f3      	bne.n	801801a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2ce>
 8018032:	9a06      	ldr	r2, [sp, #24]
 8018034:	443a      	add	r2, r7
 8018036:	9206      	str	r2, [sp, #24]
 8018038:	9a04      	ldr	r2, [sp, #16]
 801803a:	f012 0203 	ands.w	r2, r2, #3
 801803e:	d011      	beq.n	8018064 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x318>
 8018040:	9d06      	ldr	r5, [sp, #24]
 8018042:	8801      	ldrh	r1, [r0, #0]
 8018044:	882c      	ldrh	r4, [r5, #0]
 8018046:	3a01      	subs	r2, #1
 8018048:	b292      	uxth	r2, r2
 801804a:	fb14 3301 	smlabb	r3, r4, r1, r3
 801804e:	b14a      	cbz	r2, 8018064 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x318>
 8018050:	886c      	ldrh	r4, [r5, #2]
 8018052:	8841      	ldrh	r1, [r0, #2]
 8018054:	2a01      	cmp	r2, #1
 8018056:	fb14 3301 	smlabb	r3, r4, r1, r3
 801805a:	d003      	beq.n	8018064 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x318>
 801805c:	8881      	ldrh	r1, [r0, #4]
 801805e:	88aa      	ldrh	r2, [r5, #4]
 8018060:	fb11 3302 	smlabb	r3, r1, r2, r3
 8018064:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018066:	f9b2 2000 	ldrsh.w	r2, [r2]
 801806a:	2a15      	cmp	r2, #21
 801806c:	f340 8084 	ble.w	8018178 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x42c>
 8018070:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8018072:	680c      	ldr	r4, [r1, #0]
 8018074:	9922      	ldr	r1, [sp, #136]	; 0x88
 8018076:	1e95      	subs	r5, r2, #2
 8018078:	2001      	movs	r0, #1
 801807a:	3a01      	subs	r2, #1
 801807c:	6809      	ldr	r1, [r1, #0]
 801807e:	40a8      	lsls	r0, r5
 8018080:	fb53 0301 	smmla	r3, r3, r1, r0
 8018084:	4113      	asrs	r3, r2
 8018086:	4423      	add	r3, r4
 8018088:	f303 0307 	ssat	r3, #8, r3
 801808c:	9825      	ldr	r0, [sp, #148]	; 0x94
 801808e:	f800 3b01 	strb.w	r3, [r0], #1
 8018092:	9025      	str	r0, [sp, #148]	; 0x94
 8018094:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018096:	2b00      	cmp	r3, #0
 8018098:	d066      	beq.n	8018168 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x41c>
 801809a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801809c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801809e:	fb03 f000 	mul.w	r0, r3, r0
 80180a2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80180a4:	f1c0 0001 	rsb	r0, r0, #1
 80180a8:	4418      	add	r0, r3
 80180aa:	b015      	add	sp, #84	; 0x54
 80180ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180b0:	2d00      	cmp	r5, #0
 80180b2:	dd29      	ble.n	8018108 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3bc>
 80180b4:	9e01      	ldr	r6, [sp, #4]
 80180b6:	f85b 4c08 	ldr.w	r4, [fp, #-8]
 80180ba:	f856 1c08 	ldr.w	r1, [r6, #-8]
 80180be:	0052      	lsls	r2, r2, #1
 80180c0:	fb52 4201 	smmla	r2, r2, r1, r4
 80180c4:	fa42 f505 	asr.w	r5, r2, r5
 80180c8:	9a00      	ldr	r2, [sp, #0]
 80180ca:	f1a6 0e04 	sub.w	lr, r6, #4
 80180ce:	f1a2 0c02 	sub.w	ip, r2, #2
 80180d2:	f1ab 0604 	sub.w	r6, fp, #4
 80180d6:	f305 0507 	ssat	r5, #8, r5
 80180da:	9a03      	ldr	r2, [sp, #12]
 80180dc:	f802 5c01 	strb.w	r5, [r2, #-1]
 80180e0:	f9bc 2000 	ldrsh.w	r2, [ip]
 80180e4:	2a15      	cmp	r2, #21
 80180e6:	f73f af50 	bgt.w	8017f8a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x23e>
 80180ea:	2a00      	cmp	r2, #0
 80180ec:	dd25      	ble.n	801813a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3ee>
 80180ee:	f8de 1000 	ldr.w	r1, [lr]
 80180f2:	6834      	ldr	r4, [r6, #0]
 80180f4:	005b      	lsls	r3, r3, #1
 80180f6:	fb53 4301 	smmla	r3, r3, r1, r4
 80180fa:	4113      	asrs	r3, r2
 80180fc:	f303 0307 	ssat	r3, #8, r3
 8018100:	9a02      	ldr	r2, [sp, #8]
 8018102:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018106:	e751      	b.n	8017fac <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x260>
 8018108:	f1c5 0501 	rsb	r5, r5, #1
 801810c:	40aa      	lsls	r2, r5
 801810e:	f1a1 0c02 	sub.w	ip, r1, #2
 8018112:	f302 021f 	ssat	r2, #32, r2
 8018116:	9901      	ldr	r1, [sp, #4]
 8018118:	f1a1 0e04 	sub.w	lr, r1, #4
 801811c:	f851 1c08 	ldr.w	r1, [r1, #-8]
 8018120:	fb52 f111 	smmulr	r1, r2, r1
 8018124:	f85b 2c08 	ldr.w	r2, [fp, #-8]
 8018128:	f1ab 0604 	sub.w	r6, fp, #4
 801812c:	440a      	add	r2, r1
 801812e:	f302 0207 	ssat	r2, #8, r2
 8018132:	9903      	ldr	r1, [sp, #12]
 8018134:	f801 2c01 	strb.w	r2, [r1, #-1]
 8018138:	e722      	b.n	8017f80 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x234>
 801813a:	f1c2 0201 	rsb	r2, r2, #1
 801813e:	fa03 f202 	lsl.w	r2, r3, r2
 8018142:	f302 021f 	ssat	r2, #32, r2
 8018146:	f8de 3000 	ldr.w	r3, [lr]
 801814a:	fb52 f313 	smmulr	r3, r2, r3
 801814e:	6832      	ldr	r2, [r6, #0]
 8018150:	4413      	add	r3, r2
 8018152:	f303 0307 	ssat	r3, #8, r3
 8018156:	9a02      	ldr	r2, [sp, #8]
 8018158:	f802 3c01 	strb.w	r3, [r2, #-1]
 801815c:	e726      	b.n	8017fac <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x260>
 801815e:	f04f 0e00 	mov.w	lr, #0
 8018162:	e68f      	b.n	8017e84 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x138>
 8018164:	2401      	movs	r4, #1
 8018166:	e607      	b.n	8017d78 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2c>
 8018168:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801816a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801816c:	1a98      	subs	r0, r3, r2
 801816e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8018170:	4418      	add	r0, r3
 8018172:	b015      	add	sp, #84	; 0x54
 8018174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018178:	2a00      	cmp	r2, #0
 801817a:	dd0e      	ble.n	801819a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x44e>
 801817c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801817e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8018180:	6809      	ldr	r1, [r1, #0]
 8018182:	6800      	ldr	r0, [r0, #0]
 8018184:	005b      	lsls	r3, r3, #1
 8018186:	fb53 0301 	smmla	r3, r3, r1, r0
 801818a:	4113      	asrs	r3, r2
 801818c:	f303 0307 	ssat	r3, #8, r3
 8018190:	9825      	ldr	r0, [sp, #148]	; 0x94
 8018192:	f800 3b01 	strb.w	r3, [r0], #1
 8018196:	9025      	str	r0, [sp, #148]	; 0x94
 8018198:	e77c      	b.n	8018094 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x348>
 801819a:	f1c2 0201 	rsb	r2, r2, #1
 801819e:	4093      	lsls	r3, r2
 80181a0:	f303 031f 	ssat	r3, #32, r3
 80181a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80181a6:	6812      	ldr	r2, [r2, #0]
 80181a8:	fb53 f312 	smmulr	r3, r3, r2
 80181ac:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80181ae:	6812      	ldr	r2, [r2, #0]
 80181b0:	4413      	add	r3, r2
 80181b2:	f303 0307 	ssat	r3, #8, r3
 80181b6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80181b8:	f802 3b01 	strb.w	r3, [r2], #1
 80181bc:	9225      	str	r2, [sp, #148]	; 0x94
 80181be:	e769      	b.n	8018094 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x348>

080181c0 <weights_2channels_prefetch>:
 80181c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181c4:	b087      	sub	sp, #28
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80181cc:	9302      	str	r3, [sp, #8]
 80181ce:	f340 80d7 	ble.w	8018380 <weights_2channels_prefetch+0x1c0>
 80181d2:	f1a8 0310 	sub.w	r3, r8, #16
 80181d6:	091b      	lsrs	r3, r3, #4
 80181d8:	3301      	adds	r3, #1
 80181da:	f1a8 0403 	sub.w	r4, r8, #3
 80181de:	9403      	str	r4, [sp, #12]
 80181e0:	011c      	lsls	r4, r3, #4
 80181e2:	019b      	lsls	r3, r3, #6
 80181e4:	9304      	str	r3, [sp, #16]
 80181e6:	f1a8 0304 	sub.w	r3, r8, #4
 80181ea:	9400      	str	r4, [sp, #0]
 80181ec:	f04f 0b00 	mov.w	fp, #0
 80181f0:	9305      	str	r3, [sp, #20]
 80181f2:	f1b8 0f0f 	cmp.w	r8, #15
 80181f6:	f340 80c8 	ble.w	801838a <weights_2channels_prefetch+0x1ca>
 80181fa:	9b00      	ldr	r3, [sp, #0]
 80181fc:	460c      	mov	r4, r1
 80181fe:	18c6      	adds	r6, r0, r3
 8018200:	4613      	mov	r3, r2
 8018202:	6807      	ldr	r7, [r0, #0]
 8018204:	6825      	ldr	r5, [r4, #0]
 8018206:	ea4f 2c37 	mov.w	ip, r7, ror #8
 801820a:	fa2f f787 	sxtb16	r7, r7
 801820e:	601f      	str	r7, [r3, #0]
 8018210:	fa2f f78c 	sxtb16	r7, ip
 8018214:	605f      	str	r7, [r3, #4]
 8018216:	ea4f 2735 	mov.w	r7, r5, ror #8
 801821a:	fa2f f585 	sxtb16	r5, r5
 801821e:	609d      	str	r5, [r3, #8]
 8018220:	fa2f f587 	sxtb16	r5, r7
 8018224:	60dd      	str	r5, [r3, #12]
 8018226:	6847      	ldr	r7, [r0, #4]
 8018228:	6865      	ldr	r5, [r4, #4]
 801822a:	ea4f 2c37 	mov.w	ip, r7, ror #8
 801822e:	fa2f f787 	sxtb16	r7, r7
 8018232:	611f      	str	r7, [r3, #16]
 8018234:	fa2f f78c 	sxtb16	r7, ip
 8018238:	615f      	str	r7, [r3, #20]
 801823a:	ea4f 2735 	mov.w	r7, r5, ror #8
 801823e:	fa2f f585 	sxtb16	r5, r5
 8018242:	619d      	str	r5, [r3, #24]
 8018244:	fa2f f587 	sxtb16	r5, r7
 8018248:	61dd      	str	r5, [r3, #28]
 801824a:	6887      	ldr	r7, [r0, #8]
 801824c:	68a5      	ldr	r5, [r4, #8]
 801824e:	ea4f 2c37 	mov.w	ip, r7, ror #8
 8018252:	fa2f f787 	sxtb16	r7, r7
 8018256:	621f      	str	r7, [r3, #32]
 8018258:	fa2f f78c 	sxtb16	r7, ip
 801825c:	625f      	str	r7, [r3, #36]	; 0x24
 801825e:	ea4f 2735 	mov.w	r7, r5, ror #8
 8018262:	fa2f f585 	sxtb16	r5, r5
 8018266:	629d      	str	r5, [r3, #40]	; 0x28
 8018268:	fa2f f587 	sxtb16	r5, r7
 801826c:	62dd      	str	r5, [r3, #44]	; 0x2c
 801826e:	68c7      	ldr	r7, [r0, #12]
 8018270:	68e5      	ldr	r5, [r4, #12]
 8018272:	3010      	adds	r0, #16
 8018274:	42b0      	cmp	r0, r6
 8018276:	ea4f 2c37 	mov.w	ip, r7, ror #8
 801827a:	f104 0410 	add.w	r4, r4, #16
 801827e:	fa2f f787 	sxtb16	r7, r7
 8018282:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8018286:	f843 7c10 	str.w	r7, [r3, #-16]
 801828a:	fa2f f78c 	sxtb16	r7, ip
 801828e:	f843 7c0c 	str.w	r7, [r3, #-12]
 8018292:	ea4f 2735 	mov.w	r7, r5, ror #8
 8018296:	fa2f f585 	sxtb16	r5, r5
 801829a:	f843 5c08 	str.w	r5, [r3, #-8]
 801829e:	fa2f f587 	sxtb16	r5, r7
 80182a2:	f843 5c04 	str.w	r5, [r3, #-4]
 80182a6:	d1ac      	bne.n	8018202 <weights_2channels_prefetch+0x42>
 80182a8:	9b04      	ldr	r3, [sp, #16]
 80182aa:	441a      	add	r2, r3
 80182ac:	9b00      	ldr	r3, [sp, #0]
 80182ae:	4419      	add	r1, r3
 80182b0:	469e      	mov	lr, r3
 80182b2:	9b03      	ldr	r3, [sp, #12]
 80182b4:	4573      	cmp	r3, lr
 80182b6:	dd66      	ble.n	8018386 <weights_2channels_prefetch+0x1c6>
 80182b8:	9b05      	ldr	r3, [sp, #20]
 80182ba:	eba3 090e 	sub.w	r9, r3, lr
 80182be:	ea4f 0999 	mov.w	r9, r9, lsr #2
 80182c2:	f109 0a01 	add.w	sl, r9, #1
 80182c6:	ea4f 038a 	mov.w	r3, sl, lsl #2
 80182ca:	9301      	str	r3, [sp, #4]
 80182cc:	eb06 008a 	add.w	r0, r6, sl, lsl #2
 80182d0:	4613      	mov	r3, r2
 80182d2:	468c      	mov	ip, r1
 80182d4:	f856 5b04 	ldr.w	r5, [r6], #4
 80182d8:	f85c 4b04 	ldr.w	r4, [ip], #4
 80182dc:	4286      	cmp	r6, r0
 80182de:	ea4f 2735 	mov.w	r7, r5, ror #8
 80182e2:	f103 0310 	add.w	r3, r3, #16
 80182e6:	fa2f f585 	sxtb16	r5, r5
 80182ea:	fa2f f787 	sxtb16	r7, r7
 80182ee:	f843 5c10 	str.w	r5, [r3, #-16]
 80182f2:	f843 7c0c 	str.w	r7, [r3, #-12]
 80182f6:	ea4f 2534 	mov.w	r5, r4, ror #8
 80182fa:	fa2f f484 	sxtb16	r4, r4
 80182fe:	f843 4c08 	str.w	r4, [r3, #-8]
 8018302:	fa2f f485 	sxtb16	r4, r5
 8018306:	f843 4c04 	str.w	r4, [r3, #-4]
 801830a:	d1e3      	bne.n	80182d4 <weights_2channels_prefetch+0x114>
 801830c:	9b01      	ldr	r3, [sp, #4]
 801830e:	f10e 0e04 	add.w	lr, lr, #4
 8018312:	eb02 120a 	add.w	r2, r2, sl, lsl #4
 8018316:	4419      	add	r1, r3
 8018318:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 801831c:	45f0      	cmp	r8, lr
 801831e:	dd29      	ble.n	8018374 <weights_2channels_prefetch+0x1b4>
 8018320:	f990 3000 	ldrsb.w	r3, [r0]
 8018324:	8013      	strh	r3, [r2, #0]
 8018326:	f991 3000 	ldrsb.w	r3, [r1]
 801832a:	8053      	strh	r3, [r2, #2]
 801832c:	f10e 0301 	add.w	r3, lr, #1
 8018330:	4598      	cmp	r8, r3
 8018332:	dd19      	ble.n	8018368 <weights_2channels_prefetch+0x1a8>
 8018334:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8018338:	8093      	strh	r3, [r2, #4]
 801833a:	f991 3001 	ldrsb.w	r3, [r1, #1]
 801833e:	80d3      	strh	r3, [r2, #6]
 8018340:	f10e 0302 	add.w	r3, lr, #2
 8018344:	4598      	cmp	r8, r3
 8018346:	dd0f      	ble.n	8018368 <weights_2channels_prefetch+0x1a8>
 8018348:	f990 3002 	ldrsb.w	r3, [r0, #2]
 801834c:	8113      	strh	r3, [r2, #8]
 801834e:	f991 3002 	ldrsb.w	r3, [r1, #2]
 8018352:	8153      	strh	r3, [r2, #10]
 8018354:	f10e 0303 	add.w	r3, lr, #3
 8018358:	4598      	cmp	r8, r3
 801835a:	dd05      	ble.n	8018368 <weights_2channels_prefetch+0x1a8>
 801835c:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8018360:	8193      	strh	r3, [r2, #12]
 8018362:	f991 3003 	ldrsb.w	r3, [r1, #3]
 8018366:	81d3      	strh	r3, [r2, #14]
 8018368:	eba8 0e0e 	sub.w	lr, r8, lr
 801836c:	4470      	add	r0, lr
 801836e:	4471      	add	r1, lr
 8018370:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 8018374:	9b02      	ldr	r3, [sp, #8]
 8018376:	f10b 0b01 	add.w	fp, fp, #1
 801837a:	455b      	cmp	r3, fp
 801837c:	f47f af39 	bne.w	80181f2 <weights_2channels_prefetch+0x32>
 8018380:	b007      	add	sp, #28
 8018382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018386:	4630      	mov	r0, r6
 8018388:	e7c8      	b.n	801831c <weights_2channels_prefetch+0x15c>
 801838a:	4606      	mov	r6, r0
 801838c:	f04f 0e00 	mov.w	lr, #0
 8018390:	e78f      	b.n	80182b2 <weights_2channels_prefetch+0xf2>
 8018392:	bf00      	nop

08018394 <weights_2channels_prefetch_3x3>:
 8018394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018398:	1edc      	subs	r4, r3, #3
 801839a:	b087      	sub	sp, #28
 801839c:	2c00      	cmp	r4, #0
 801839e:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80183a2:	9400      	str	r4, [sp, #0]
 80183a4:	f340 80e4 	ble.w	8018570 <weights_2channels_prefetch_3x3+0x1dc>
 80183a8:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 80183ac:	468c      	mov	ip, r1
 80183ae:	0079      	lsls	r1, r7, #1
 80183b0:	9102      	str	r1, [sp, #8]
 80183b2:	00dc      	lsls	r4, r3, #3
 80183b4:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 80183b8:	9101      	str	r1, [sp, #4]
 80183ba:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 80183be:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80183c2:	eb03 0983 	add.w	r9, r3, r3, lsl #2
 80183c6:	2604      	movs	r6, #4
 80183c8:	4611      	mov	r1, r2
 80183ca:	f04f 0800 	mov.w	r8, #0
 80183ce:	9205      	str	r2, [sp, #20]
 80183d0:	46a6      	mov	lr, r4
 80183d2:	6804      	ldr	r4, [r0, #0]
 80183d4:	f8dc 2000 	ldr.w	r2, [ip]
 80183d8:	ea4f 2534 	mov.w	r5, r4, ror #8
 80183dc:	fa2f f484 	sxtb16	r4, r4
 80183e0:	fa2f f585 	sxtb16	r5, r5
 80183e4:	600c      	str	r4, [r1, #0]
 80183e6:	604d      	str	r5, [r1, #4]
 80183e8:	ea4f 2432 	mov.w	r4, r2, ror #8
 80183ec:	fa2f f282 	sxtb16	r2, r2
 80183f0:	fa2f f484 	sxtb16	r4, r4
 80183f4:	608a      	str	r2, [r1, #8]
 80183f6:	60cc      	str	r4, [r1, #12]
 80183f8:	58c4      	ldr	r4, [r0, r3]
 80183fa:	f85c 2003 	ldr.w	r2, [ip, r3]
 80183fe:	ea4f 2534 	mov.w	r5, r4, ror #8
 8018402:	fa2f f484 	sxtb16	r4, r4
 8018406:	fa2f f585 	sxtb16	r5, r5
 801840a:	610c      	str	r4, [r1, #16]
 801840c:	614d      	str	r5, [r1, #20]
 801840e:	ea4f 2432 	mov.w	r4, r2, ror #8
 8018412:	fa2f f282 	sxtb16	r2, r2
 8018416:	fa2f f484 	sxtb16	r4, r4
 801841a:	618a      	str	r2, [r1, #24]
 801841c:	61cc      	str	r4, [r1, #28]
 801841e:	f85b 4000 	ldr.w	r4, [fp, r0]
 8018422:	f85b 200c 	ldr.w	r2, [fp, ip]
 8018426:	ea4f 2534 	mov.w	r5, r4, ror #8
 801842a:	fa2f f484 	sxtb16	r4, r4
 801842e:	fa2f f585 	sxtb16	r5, r5
 8018432:	620c      	str	r4, [r1, #32]
 8018434:	624d      	str	r5, [r1, #36]	; 0x24
 8018436:	ea4f 2432 	mov.w	r4, r2, ror #8
 801843a:	fa2f f282 	sxtb16	r2, r2
 801843e:	fa2f f484 	sxtb16	r4, r4
 8018442:	628a      	str	r2, [r1, #40]	; 0x28
 8018444:	62cc      	str	r4, [r1, #44]	; 0x2c
 8018446:	583c      	ldr	r4, [r7, r0]
 8018448:	f857 200c 	ldr.w	r2, [r7, ip]
 801844c:	ea4f 2534 	mov.w	r5, r4, ror #8
 8018450:	fa2f f484 	sxtb16	r4, r4
 8018454:	fa2f f585 	sxtb16	r5, r5
 8018458:	630c      	str	r4, [r1, #48]	; 0x30
 801845a:	634d      	str	r5, [r1, #52]	; 0x34
 801845c:	ea4f 2432 	mov.w	r4, r2, ror #8
 8018460:	fa2f f282 	sxtb16	r2, r2
 8018464:	fa2f f484 	sxtb16	r4, r4
 8018468:	638a      	str	r2, [r1, #56]	; 0x38
 801846a:	63cc      	str	r4, [r1, #60]	; 0x3c
 801846c:	f85a 4000 	ldr.w	r4, [sl, r0]
 8018470:	f85a 200c 	ldr.w	r2, [sl, ip]
 8018474:	ea4f 2534 	mov.w	r5, r4, ror #8
 8018478:	fa2f f484 	sxtb16	r4, r4
 801847c:	fa2f f585 	sxtb16	r5, r5
 8018480:	640c      	str	r4, [r1, #64]	; 0x40
 8018482:	644d      	str	r5, [r1, #68]	; 0x44
 8018484:	ea4f 2432 	mov.w	r4, r2, ror #8
 8018488:	fa2f f282 	sxtb16	r2, r2
 801848c:	fa2f f484 	sxtb16	r4, r4
 8018490:	648a      	str	r2, [r1, #72]	; 0x48
 8018492:	64cc      	str	r4, [r1, #76]	; 0x4c
 8018494:	f859 4000 	ldr.w	r4, [r9, r0]
 8018498:	f859 200c 	ldr.w	r2, [r9, ip]
 801849c:	ea4f 2534 	mov.w	r5, r4, ror #8
 80184a0:	fa2f f484 	sxtb16	r4, r4
 80184a4:	650c      	str	r4, [r1, #80]	; 0x50
 80184a6:	ea4f 2432 	mov.w	r4, r2, ror #8
 80184aa:	fa2f f282 	sxtb16	r2, r2
 80184ae:	658a      	str	r2, [r1, #88]	; 0x58
 80184b0:	9a02      	ldr	r2, [sp, #8]
 80184b2:	fa2f f585 	sxtb16	r5, r5
 80184b6:	fa2f f484 	sxtb16	r4, r4
 80184ba:	654d      	str	r5, [r1, #84]	; 0x54
 80184bc:	65cc      	str	r4, [r1, #92]	; 0x5c
 80184be:	5884      	ldr	r4, [r0, r2]
 80184c0:	f85c 2002 	ldr.w	r2, [ip, r2]
 80184c4:	ea4f 2534 	mov.w	r5, r4, ror #8
 80184c8:	fa2f f484 	sxtb16	r4, r4
 80184cc:	660c      	str	r4, [r1, #96]	; 0x60
 80184ce:	ea4f 2432 	mov.w	r4, r2, ror #8
 80184d2:	fa2f f282 	sxtb16	r2, r2
 80184d6:	668a      	str	r2, [r1, #104]	; 0x68
 80184d8:	9a01      	ldr	r2, [sp, #4]
 80184da:	fa2f f585 	sxtb16	r5, r5
 80184de:	fa2f f484 	sxtb16	r4, r4
 80184e2:	664d      	str	r5, [r1, #100]	; 0x64
 80184e4:	66cc      	str	r4, [r1, #108]	; 0x6c
 80184e6:	5814      	ldr	r4, [r2, r0]
 80184e8:	f852 200c 	ldr.w	r2, [r2, ip]
 80184ec:	ea4f 2534 	mov.w	r5, r4, ror #8
 80184f0:	fa2f f484 	sxtb16	r4, r4
 80184f4:	fa2f f585 	sxtb16	r5, r5
 80184f8:	670c      	str	r4, [r1, #112]	; 0x70
 80184fa:	674d      	str	r5, [r1, #116]	; 0x74
 80184fc:	ea4f 2432 	mov.w	r4, r2, ror #8
 8018500:	fa2f f282 	sxtb16	r2, r2
 8018504:	fa2f f484 	sxtb16	r4, r4
 8018508:	678a      	str	r2, [r1, #120]	; 0x78
 801850a:	67cc      	str	r4, [r1, #124]	; 0x7c
 801850c:	f850 400e 	ldr.w	r4, [r0, lr]
 8018510:	f85c 200e 	ldr.w	r2, [ip, lr]
 8018514:	ea4f 2534 	mov.w	r5, r4, ror #8
 8018518:	fa2f f484 	sxtb16	r4, r4
 801851c:	f8c1 4080 	str.w	r4, [r1, #128]	; 0x80
 8018520:	ea4f 2432 	mov.w	r4, r2, ror #8
 8018524:	fa2f f282 	sxtb16	r2, r2
 8018528:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 801852c:	9a00      	ldr	r2, [sp, #0]
 801852e:	fa2f f585 	sxtb16	r5, r5
 8018532:	f108 0804 	add.w	r8, r8, #4
 8018536:	4590      	cmp	r8, r2
 8018538:	f8c1 5084 	str.w	r5, [r1, #132]	; 0x84
 801853c:	fa2f f484 	sxtb16	r4, r4
 8018540:	4430      	add	r0, r6
 8018542:	f8c1 408c 	str.w	r4, [r1, #140]	; 0x8c
 8018546:	44b4      	add	ip, r6
 8018548:	f101 0190 	add.w	r1, r1, #144	; 0x90
 801854c:	f6ff af41 	blt.w	80183d2 <weights_2channels_prefetch_3x3+0x3e>
 8018550:	1f19      	subs	r1, r3, #4
 8018552:	0889      	lsrs	r1, r1, #2
 8018554:	fb01 6606 	mla	r6, r1, r6, r6
 8018558:	9a05      	ldr	r2, [sp, #20]
 801855a:	3101      	adds	r1, #1
 801855c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8018560:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8018564:	9903      	ldr	r1, [sp, #12]
 8018566:	4431      	add	r1, r6
 8018568:	9103      	str	r1, [sp, #12]
 801856a:	9904      	ldr	r1, [sp, #16]
 801856c:	4431      	add	r1, r6
 801856e:	9104      	str	r1, [sp, #16]
 8018570:	f013 0503 	ands.w	r5, r3, #3
 8018574:	f000 80f4 	beq.w	8018760 <weights_2channels_prefetch_3x3+0x3cc>
 8018578:	9803      	ldr	r0, [sp, #12]
 801857a:	9c04      	ldr	r4, [sp, #16]
 801857c:	f990 1000 	ldrsb.w	r1, [r0]
 8018580:	8011      	strh	r1, [r2, #0]
 8018582:	f994 1000 	ldrsb.w	r1, [r4]
 8018586:	8051      	strh	r1, [r2, #2]
 8018588:	56c1      	ldrsb	r1, [r0, r3]
 801858a:	8091      	strh	r1, [r2, #4]
 801858c:	56e1      	ldrsb	r1, [r4, r3]
 801858e:	80d1      	strh	r1, [r2, #6]
 8018590:	f910 1013 	ldrsb.w	r1, [r0, r3, lsl #1]
 8018594:	8111      	strh	r1, [r2, #8]
 8018596:	f914 1013 	ldrsb.w	r1, [r4, r3, lsl #1]
 801859a:	8151      	strh	r1, [r2, #10]
 801859c:	18c1      	adds	r1, r0, r3
 801859e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80185a2:	f911 1013 	ldrsb.w	r1, [r1, r3, lsl #1]
 80185a6:	8191      	strh	r1, [r2, #12]
 80185a8:	4621      	mov	r1, r4
 80185aa:	441c      	add	r4, r3
 80185ac:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80185b0:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 80185b4:	81d4      	strh	r4, [r2, #14]
 80185b6:	f910 4013 	ldrsb.w	r4, [r0, r3, lsl #1]
 80185ba:	8214      	strh	r4, [r2, #16]
 80185bc:	f911 4013 	ldrsb.w	r4, [r1, r3, lsl #1]
 80185c0:	8254      	strh	r4, [r2, #18]
 80185c2:	18c4      	adds	r4, r0, r3
 80185c4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80185c8:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 80185cc:	8294      	strh	r4, [r2, #20]
 80185ce:	18cc      	adds	r4, r1, r3
 80185d0:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80185d4:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 80185d8:	82d4      	strh	r4, [r2, #22]
 80185da:	f910 4013 	ldrsb.w	r4, [r0, r3, lsl #1]
 80185de:	8314      	strh	r4, [r2, #24]
 80185e0:	f911 4013 	ldrsb.w	r4, [r1, r3, lsl #1]
 80185e4:	8354      	strh	r4, [r2, #26]
 80185e6:	18c4      	adds	r4, r0, r3
 80185e8:	ebc3 7743 	rsb	r7, r3, r3, lsl #29
 80185ec:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 80185f0:	8394      	strh	r4, [r2, #28]
 80185f2:	18cc      	adds	r4, r1, r3
 80185f4:	00ff      	lsls	r7, r7, #3
 80185f6:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 80185fa:	83d4      	strh	r4, [r2, #30]
 80185fc:	f910 4023 	ldrsb.w	r4, [r0, r3, lsl #2]
 8018600:	8414      	strh	r4, [r2, #32]
 8018602:	f911 4023 	ldrsb.w	r4, [r1, r3, lsl #2]
 8018606:	8454      	strh	r4, [r2, #34]	; 0x22
 8018608:	3701      	adds	r7, #1
 801860a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801860e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8018612:	2d01      	cmp	r5, #1
 8018614:	eb00 0607 	add.w	r6, r0, r7
 8018618:	eb01 0407 	add.w	r4, r1, r7
 801861c:	f000 80a0 	beq.w	8018760 <weights_2channels_prefetch_3x3+0x3cc>
 8018620:	57c0      	ldrsb	r0, [r0, r7]
 8018622:	8490      	strh	r0, [r2, #36]	; 0x24
 8018624:	57c9      	ldrsb	r1, [r1, r7]
 8018626:	84d1      	strh	r1, [r2, #38]	; 0x26
 8018628:	56f1      	ldrsb	r1, [r6, r3]
 801862a:	8511      	strh	r1, [r2, #40]	; 0x28
 801862c:	56e1      	ldrsb	r1, [r4, r3]
 801862e:	8551      	strh	r1, [r2, #42]	; 0x2a
 8018630:	f916 1013 	ldrsb.w	r1, [r6, r3, lsl #1]
 8018634:	8591      	strh	r1, [r2, #44]	; 0x2c
 8018636:	f914 1013 	ldrsb.w	r1, [r4, r3, lsl #1]
 801863a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801863c:	18f1      	adds	r1, r6, r3
 801863e:	eb06 0043 	add.w	r0, r6, r3, lsl #1
 8018642:	f911 1013 	ldrsb.w	r1, [r1, r3, lsl #1]
 8018646:	8611      	strh	r1, [r2, #48]	; 0x30
 8018648:	18e6      	adds	r6, r4, r3
 801864a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801864e:	f916 4013 	ldrsb.w	r4, [r6, r3, lsl #1]
 8018652:	8654      	strh	r4, [r2, #50]	; 0x32
 8018654:	f910 4013 	ldrsb.w	r4, [r0, r3, lsl #1]
 8018658:	8694      	strh	r4, [r2, #52]	; 0x34
 801865a:	f911 4013 	ldrsb.w	r4, [r1, r3, lsl #1]
 801865e:	86d4      	strh	r4, [r2, #54]	; 0x36
 8018660:	18c4      	adds	r4, r0, r3
 8018662:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018666:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 801866a:	8714      	strh	r4, [r2, #56]	; 0x38
 801866c:	18cc      	adds	r4, r1, r3
 801866e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8018672:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 8018676:	8754      	strh	r4, [r2, #58]	; 0x3a
 8018678:	f910 4013 	ldrsb.w	r4, [r0, r3, lsl #1]
 801867c:	8794      	strh	r4, [r2, #60]	; 0x3c
 801867e:	f911 4013 	ldrsb.w	r4, [r1, r3, lsl #1]
 8018682:	87d4      	strh	r4, [r2, #62]	; 0x3e
 8018684:	18c4      	adds	r4, r0, r3
 8018686:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 801868a:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 801868e:	f8a2 4040 	strh.w	r4, [r2, #64]	; 0x40
 8018692:	18cc      	adds	r4, r1, r3
 8018694:	2d03      	cmp	r5, #3
 8018696:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 801869a:	f8a2 4042 	strh.w	r4, [r2, #66]	; 0x42
 801869e:	f910 4023 	ldrsb.w	r4, [r0, r3, lsl #2]
 80186a2:	f8a2 4044 	strh.w	r4, [r2, #68]	; 0x44
 80186a6:	f911 4023 	ldrsb.w	r4, [r1, r3, lsl #2]
 80186aa:	f8a2 4046 	strh.w	r4, [r2, #70]	; 0x46
 80186ae:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80186b2:	eb00 0407 	add.w	r4, r0, r7
 80186b6:	eb06 0107 	add.w	r1, r6, r7
 80186ba:	d151      	bne.n	8018760 <weights_2channels_prefetch_3x3+0x3cc>
 80186bc:	57c0      	ldrsb	r0, [r0, r7]
 80186be:	f8a2 0048 	strh.w	r0, [r2, #72]	; 0x48
 80186c2:	57f0      	ldrsb	r0, [r6, r7]
 80186c4:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
 80186c8:	56e5      	ldrsb	r5, [r4, r3]
 80186ca:	f8a2 504c 	strh.w	r5, [r2, #76]	; 0x4c
 80186ce:	56cd      	ldrsb	r5, [r1, r3]
 80186d0:	f8a2 504e 	strh.w	r5, [r2, #78]	; 0x4e
 80186d4:	f914 5013 	ldrsb.w	r5, [r4, r3, lsl #1]
 80186d8:	f8a2 5050 	strh.w	r5, [r2, #80]	; 0x50
 80186dc:	f911 5013 	ldrsb.w	r5, [r1, r3, lsl #1]
 80186e0:	f8a2 5052 	strh.w	r5, [r2, #82]	; 0x52
 80186e4:	18e0      	adds	r0, r4, r3
 80186e6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80186ea:	f910 0013 	ldrsb.w	r0, [r0, r3, lsl #1]
 80186ee:	f8a2 0054 	strh.w	r0, [r2, #84]	; 0x54
 80186f2:	18c8      	adds	r0, r1, r3
 80186f4:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80186f8:	f910 0013 	ldrsb.w	r0, [r0, r3, lsl #1]
 80186fc:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
 8018700:	f914 5013 	ldrsb.w	r5, [r4, r3, lsl #1]
 8018704:	f8a2 5058 	strh.w	r5, [r2, #88]	; 0x58
 8018708:	f911 5013 	ldrsb.w	r5, [r1, r3, lsl #1]
 801870c:	f8a2 505a 	strh.w	r5, [r2, #90]	; 0x5a
 8018710:	eb04 0043 	add.w	r0, r4, r3, lsl #1
 8018714:	441c      	add	r4, r3
 8018716:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 801871a:	f8a2 405c 	strh.w	r4, [r2, #92]	; 0x5c
 801871e:	18cc      	adds	r4, r1, r3
 8018720:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8018724:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 8018728:	f8a2 405e 	strh.w	r4, [r2, #94]	; 0x5e
 801872c:	f910 4013 	ldrsb.w	r4, [r0, r3, lsl #1]
 8018730:	f8a2 4060 	strh.w	r4, [r2, #96]	; 0x60
 8018734:	f911 4013 	ldrsb.w	r4, [r1, r3, lsl #1]
 8018738:	f8a2 4062 	strh.w	r4, [r2, #98]	; 0x62
 801873c:	18c4      	adds	r4, r0, r3
 801873e:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 8018742:	f8a2 4064 	strh.w	r4, [r2, #100]	; 0x64
 8018746:	18cc      	adds	r4, r1, r3
 8018748:	f914 4013 	ldrsb.w	r4, [r4, r3, lsl #1]
 801874c:	f8a2 4066 	strh.w	r4, [r2, #102]	; 0x66
 8018750:	f910 0023 	ldrsb.w	r0, [r0, r3, lsl #2]
 8018754:	f8a2 0068 	strh.w	r0, [r2, #104]	; 0x68
 8018758:	f911 3023 	ldrsb.w	r3, [r1, r3, lsl #2]
 801875c:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 8018760:	b007      	add	sp, #28
 8018762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018766:	bf00      	nop

08018768 <st_sssa8_ch_fullW_prefetch>:
 8018768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801876c:	b087      	sub	sp, #28
 801876e:	4680      	mov	r8, r0
 8018770:	4618      	mov	r0, r3
 8018772:	4613      	mov	r3, r2
 8018774:	e9dd 2a10 	ldrd	r2, sl, [sp, #64]	; 0x40
 8018778:	104f      	asrs	r7, r1, #1
 801877a:	9103      	str	r1, [sp, #12]
 801877c:	eb08 0402 	add.w	r4, r8, r2
 8018780:	9704      	str	r7, [sp, #16]
 8018782:	d020      	beq.n	80187c6 <st_sssa8_ch_fullW_prefetch+0x5e>
 8018784:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018786:	f8cd 8014 	str.w	r8, [sp, #20]
 801878a:	4646      	mov	r6, r8
 801878c:	4655      	mov	r5, sl
 801878e:	ea4f 0942 	mov.w	r9, r2, lsl #1
 8018792:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8018796:	4680      	mov	r8, r0
 8018798:	469a      	mov	sl, r3
 801879a:	462a      	mov	r2, r5
 801879c:	4621      	mov	r1, r4
 801879e:	4630      	mov	r0, r6
 80187a0:	f8cd 8000 	str.w	r8, [sp]
 80187a4:	4653      	mov	r3, sl
 80187a6:	f7ff fd0b 	bl	80181c0 <weights_2channels_prefetch>
 80187aa:	3f01      	subs	r7, #1
 80187ac:	445d      	add	r5, fp
 80187ae:	444c      	add	r4, r9
 80187b0:	444e      	add	r6, r9
 80187b2:	d1f2      	bne.n	801879a <st_sssa8_ch_fullW_prefetch+0x32>
 80187b4:	9b04      	ldr	r3, [sp, #16]
 80187b6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80187ba:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80187be:	fb03 8809 	mla	r8, r3, r9, r8
 80187c2:	fb03 aa0b 	mla	sl, r3, fp, sl
 80187c6:	9b03      	ldr	r3, [sp, #12]
 80187c8:	07db      	lsls	r3, r3, #31
 80187ca:	d509      	bpl.n	80187e0 <st_sssa8_ch_fullW_prefetch+0x78>
 80187cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	dd06      	ble.n	80187e0 <st_sssa8_ch_fullW_prefetch+0x78>
 80187d2:	4443      	add	r3, r8
 80187d4:	f918 2b01 	ldrsb.w	r2, [r8], #1
 80187d8:	f82a 2b02 	strh.w	r2, [sl], #2
 80187dc:	4543      	cmp	r3, r8
 80187de:	d1f9      	bne.n	80187d4 <st_sssa8_ch_fullW_prefetch+0x6c>
 80187e0:	b007      	add	sp, #28
 80187e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187e6:	bf00      	nop

080187e8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t>:
 80187e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187ec:	b0cd      	sub	sp, #308	; 0x134
 80187ee:	9240      	str	r2, [sp, #256]	; 0x100
 80187f0:	9329      	str	r3, [sp, #164]	; 0xa4
 80187f2:	9a59      	ldr	r2, [sp, #356]	; 0x164
 80187f4:	f8bd 317c 	ldrh.w	r3, [sp, #380]	; 0x17c
 80187f8:	912f      	str	r1, [sp, #188]	; 0xbc
 80187fa:	fb02 f303 	mul.w	r3, r2, r3
 80187fe:	9327      	str	r3, [sp, #156]	; 0x9c
 8018800:	e9dd 3265 	ldrd	r3, r2, [sp, #404]	; 0x194
 8018804:	f8bd 1178 	ldrh.w	r1, [sp, #376]	; 0x178
 8018808:	912a      	str	r1, [sp, #168]	; 0xa8
 801880a:	2a00      	cmp	r2, #0
 801880c:	bf18      	it	ne
 801880e:	4613      	movne	r3, r2
 8018810:	f8bd 1180 	ldrh.w	r1, [sp, #384]	; 0x180
 8018814:	9365      	str	r3, [sp, #404]	; 0x194
 8018816:	f8bd 3168 	ldrh.w	r3, [sp, #360]	; 0x168
 801881a:	9341      	str	r3, [sp, #260]	; 0x104
 801881c:	9109      	str	r1, [sp, #36]	; 0x24
 801881e:	f8bd 316c 	ldrh.w	r3, [sp, #364]	; 0x16c
 8018822:	9962      	ldr	r1, [sp, #392]	; 0x188
 8018824:	f8bd 2174 	ldrh.w	r2, [sp, #372]	; 0x174
 8018828:	9342      	str	r3, [sp, #264]	; 0x108
 801882a:	f8bd 3170 	ldrh.w	r3, [sp, #368]	; 0x170
 801882e:	9325      	str	r3, [sp, #148]	; 0x94
 8018830:	f011 0101 	ands.w	r1, r1, #1
 8018834:	bf18      	it	ne
 8018836:	3302      	addne	r3, #2
 8018838:	922e      	str	r2, [sp, #184]	; 0xb8
 801883a:	bf18      	it	ne
 801883c:	3202      	addne	r2, #2
 801883e:	fb02 f303 	mul.w	r3, r2, r3
 8018842:	9326      	str	r3, [sp, #152]	; 0x98
 8018844:	9b58      	ldr	r3, [sp, #352]	; 0x160
 8018846:	902d      	str	r0, [sp, #180]	; 0xb4
 8018848:	2b01      	cmp	r3, #1
 801884a:	913b      	str	r1, [sp, #236]	; 0xec
 801884c:	f340 82a3 	ble.w	8018d96 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x5ae>
 8018850:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018852:	9859      	ldr	r0, [sp, #356]	; 0x164
 8018854:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8018856:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8018858:	fb00 f002 	mul.w	r0, r0, r2
 801885c:	9a58      	ldr	r2, [sp, #352]	; 0x160
 801885e:	9008      	str	r0, [sp, #32]
 8018860:	3a02      	subs	r2, #2
 8018862:	0852      	lsrs	r2, r2, #1
 8018864:	923d      	str	r2, [sp, #244]	; 0xf4
 8018866:	1ea2      	subs	r2, r4, #2
 8018868:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801886a:	fb01 f404 	mul.w	r4, r1, r4
 801886e:	943c      	str	r4, [sp, #240]	; 0xf0
 8018870:	108c      	asrs	r4, r1, #2
 8018872:	943f      	str	r4, [sp, #252]	; 0xfc
 8018874:	0852      	lsrs	r2, r2, #1
 8018876:	0044      	lsls	r4, r0, #1
 8018878:	fb04 f202 	mul.w	r2, r4, r2
 801887c:	924a      	str	r2, [sp, #296]	; 0x128
 801887e:	9a57      	ldr	r2, [sp, #348]	; 0x15c
 8018880:	9423      	str	r4, [sp, #140]	; 0x8c
 8018882:	9c3d      	ldr	r4, [sp, #244]	; 0xf4
 8018884:	3204      	adds	r2, #4
 8018886:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801888a:	9244      	str	r2, [sp, #272]	; 0x110
 801888c:	f06f 0203 	mvn.w	r2, #3
 8018890:	1a12      	subs	r2, r2, r0
 8018892:	9205      	str	r2, [sp, #20]
 8018894:	1f02      	subs	r2, r0, #4
 8018896:	920f      	str	r2, [sp, #60]	; 0x3c
 8018898:	9a62      	ldr	r2, [sp, #392]	; 0x188
 801889a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801889c:	090e      	lsrs	r6, r1, #4
 801889e:	f3c1 0781 	ubfx	r7, r1, #2, #2
 80188a2:	1e70      	subs	r0, r6, #1
 80188a4:	f002 0202 	and.w	r2, r2, #2
 80188a8:	970b      	str	r7, [sp, #44]	; 0x2c
 80188aa:	921b      	str	r2, [sp, #108]	; 0x6c
 80188ac:	900d      	str	r0, [sp, #52]	; 0x34
 80188ae:	1e62      	subs	r2, r4, #1
 80188b0:	4638      	mov	r0, r7
 80188b2:	3f01      	subs	r7, #1
 80188b4:	960a      	str	r6, [sp, #40]	; 0x28
 80188b6:	9222      	str	r2, [sp, #136]	; 0x88
 80188b8:	970e      	str	r7, [sp, #56]	; 0x38
 80188ba:	4632      	mov	r2, r6
 80188bc:	f004 0701 	and.w	r7, r4, #1
 80188c0:	9e3c      	ldr	r6, [sp, #240]	; 0xf0
 80188c2:	9745      	str	r7, [sp, #276]	; 0x114
 80188c4:	f1a1 070f 	sub.w	r7, r1, #15
 80188c8:	9733      	str	r7, [sp, #204]	; 0xcc
 80188ca:	0077      	lsls	r7, r6, #1
 80188cc:	973e      	str	r7, [sp, #248]	; 0xf8
 80188ce:	9f26      	ldr	r7, [sp, #152]	; 0x98
 80188d0:	f001 0503 	and.w	r5, r1, #3
 80188d4:	007f      	lsls	r7, r7, #1
 80188d6:	00b6      	lsls	r6, r6, #2
 80188d8:	9748      	str	r7, [sp, #288]	; 0x120
 80188da:	9506      	str	r5, [sp, #24]
 80188dc:	9646      	str	r6, [sp, #280]	; 0x118
 80188de:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80188e0:	f1a1 0310 	sub.w	r3, r1, #16
 80188e4:	1a77      	subs	r7, r6, r1
 80188e6:	993f      	ldr	r1, [sp, #252]	; 0xfc
 80188e8:	970c      	str	r7, [sp, #48]	; 0x30
 80188ea:	0109      	lsls	r1, r1, #4
 80188ec:	9149      	str	r1, [sp, #292]	; 0x124
 80188ee:	1e69      	subs	r1, r5, #1
 80188f0:	9115      	str	r1, [sp, #84]	; 0x54
 80188f2:	1ea9      	subs	r1, r5, #2
 80188f4:	9117      	str	r1, [sp, #92]	; 0x5c
 80188f6:	00a9      	lsls	r1, r5, #2
 80188f8:	9116      	str	r1, [sp, #88]	; 0x58
 80188fa:	9958      	ldr	r1, [sp, #352]	; 0x160
 80188fc:	9f57      	ldr	r7, [sp, #348]	; 0x15c
 80188fe:	9737      	str	r7, [sp, #220]	; 0xdc
 8018900:	fb04 f101 	mul.w	r1, r4, r1
 8018904:	9143      	str	r1, [sp, #268]	; 0x10c
 8018906:	9942      	ldr	r1, [sp, #264]	; 0x108
 8018908:	9f56      	ldr	r7, [sp, #344]	; 0x158
 801890a:	fb06 f101 	mul.w	r1, r6, r1
 801890e:	9147      	str	r1, [sp, #284]	; 0x11c
 8018910:	0111      	lsls	r1, r2, #4
 8018912:	0192      	lsls	r2, r2, #6
 8018914:	3704      	adds	r7, #4
 8018916:	091b      	lsrs	r3, r3, #4
 8018918:	9210      	str	r2, [sp, #64]	; 0x40
 801891a:	0082      	lsls	r2, r0, #2
 801891c:	3301      	adds	r3, #1
 801891e:	9730      	str	r7, [sp, #192]	; 0xc0
 8018920:	9213      	str	r2, [sp, #76]	; 0x4c
 8018922:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8018924:	9111      	str	r1, [sp, #68]	; 0x44
 8018926:	0102      	lsls	r2, r0, #4
 8018928:	9212      	str	r2, [sp, #72]	; 0x48
 801892a:	011a      	lsls	r2, r3, #4
 801892c:	019b      	lsls	r3, r3, #6
 801892e:	3704      	adds	r7, #4
 8018930:	9338      	str	r3, [sp, #224]	; 0xe0
 8018932:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8018934:	9734      	str	r7, [sp, #208]	; 0xd0
 8018936:	9228      	str	r2, [sp, #160]	; 0xa0
 8018938:	9336      	str	r3, [sp, #216]	; 0xd8
 801893a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 801893c:	f9b3 7000 	ldrsh.w	r7, [r3]
 8018940:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018944:	9335      	str	r3, [sp, #212]	; 0xd4
 8018946:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018948:	f853 2c04 	ldr.w	r2, [r3, #-4]
 801894c:	681b      	ldr	r3, [r3, #0]
 801894e:	931d      	str	r3, [sp, #116]	; 0x74
 8018950:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018952:	921c      	str	r2, [sp, #112]	; 0x70
 8018954:	681b      	ldr	r3, [r3, #0]
 8018956:	931e      	str	r3, [sp, #120]	; 0x78
 8018958:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801895a:	2b00      	cmp	r3, #0
 801895c:	f000 8495 	beq.w	801928a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xaa2>
 8018960:	9b61      	ldr	r3, [sp, #388]	; 0x184
 8018962:	2b00      	cmp	r3, #0
 8018964:	f040 8439 	bne.w	80191da <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9f2>
 8018968:	461c      	mov	r4, r3
 801896a:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801896c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8018970:	18a2      	adds	r2, r4, r2
 8018972:	9220      	str	r2, [sp, #128]	; 0x80
 8018974:	680a      	ldr	r2, [r1, #0]
 8018976:	4413      	add	r3, r2
 8018978:	9321      	str	r3, [sp, #132]	; 0x84
 801897a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801897c:	2b00      	cmp	r3, #0
 801897e:	f000 81e4 	beq.w	8018d4a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x562>
 8018982:	9925      	ldr	r1, [sp, #148]	; 0x94
 8018984:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018986:	9232      	str	r2, [sp, #200]	; 0xc8
 8018988:	1cbb      	adds	r3, r7, #2
 801898a:	931f      	str	r3, [sp, #124]	; 0x7c
 801898c:	1ccb      	adds	r3, r1, #3
 801898e:	18d3      	adds	r3, r2, r3
 8018990:	933a      	str	r3, [sp, #232]	; 0xe8
 8018992:	2300      	movs	r3, #0
 8018994:	932b      	str	r3, [sp, #172]	; 0xac
 8018996:	4613      	mov	r3, r2
 8018998:	9331      	str	r3, [sp, #196]	; 0xc4
 801899a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801899c:	9307      	str	r3, [sp, #28]
 801899e:	2301      	movs	r3, #1
 80189a0:	932c      	str	r3, [sp, #176]	; 0xb0
 80189a2:	9b08      	ldr	r3, [sp, #32]
 80189a4:	1c8a      	adds	r2, r1, #2
 80189a6:	3304      	adds	r3, #4
 80189a8:	924b      	str	r2, [sp, #300]	; 0x12c
 80189aa:	9314      	str	r3, [sp, #80]	; 0x50
 80189ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	f000 82e1 	beq.w	8018f76 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x78e>
 80189b4:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	f000 83ed 	beq.w	8019196 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9ae>
 80189bc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80189be:	9339      	str	r3, [sp, #228]	; 0xe4
 80189c0:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80189c2:	9319      	str	r3, [sp, #100]	; 0x64
 80189c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	f340 81a3 	ble.w	8018d12 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x52a>
 80189cc:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80189ce:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80189d0:	3302      	adds	r3, #2
 80189d2:	9324      	str	r3, [sp, #144]	; 0x90
 80189d4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80189d6:	4413      	add	r3, r2
 80189d8:	9318      	str	r3, [sp, #96]	; 0x60
 80189da:	2300      	movs	r3, #0
 80189dc:	931a      	str	r3, [sp, #104]	; 0x68
 80189de:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80189e0:	9304      	str	r3, [sp, #16]
 80189e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	f000 82c1 	beq.w	8018f6c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x784>
 80189ea:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80189ec:	9820      	ldr	r0, [sp, #128]	; 0x80
 80189ee:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80189f0:	9303      	str	r3, [sp, #12]
 80189f2:	2100      	movs	r1, #0
 80189f4:	4613      	mov	r3, r2
 80189f6:	4604      	mov	r4, r0
 80189f8:	9107      	str	r1, [sp, #28]
 80189fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80189fc:	2900      	cmp	r1, #0
 80189fe:	f000 80a1 	beq.w	8018b44 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x35c>
 8018a02:	9904      	ldr	r1, [sp, #16]
 8018a04:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018a06:	9e03      	ldr	r6, [sp, #12]
 8018a08:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8018a0c:	194f      	adds	r7, r1, r5
 8018a0e:	9d05      	ldr	r5, [sp, #20]
 8018a10:	6831      	ldr	r1, [r6, #0]
 8018a12:	f855 c007 	ldr.w	ip, [r5, r7]
 8018a16:	f8d6 a004 	ldr.w	sl, [r6, #4]
 8018a1a:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8018a1e:	f8d6 900c 	ldr.w	r9, [r6, #12]
 8018a22:	eb05 0e07 	add.w	lr, r5, r7
 8018a26:	fa2f f58c 	sxtb16	r5, ip
 8018a2a:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 8018a2e:	fb25 0001 	smlad	r0, r5, r1, r0
 8018a32:	fb2c 000a 	smlad	r0, ip, sl, r0
 8018a36:	fb25 250b 	smlad	r5, r5, fp, r2
 8018a3a:	fb2c 5509 	smlad	r5, ip, r9, r5
 8018a3e:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018a42:	fa2f fc82 	sxtb16	ip, r2
 8018a46:	fa2f f292 	sxtb16	r2, r2, ror #8
 8018a4a:	fb2c 4101 	smlad	r1, ip, r1, r4
 8018a4e:	fb2c 330b 	smlad	r3, ip, fp, r3
 8018a52:	fb22 110a 	smlad	r1, r2, sl, r1
 8018a56:	f8d6 a010 	ldr.w	sl, [r6, #16]
 8018a5a:	6974      	ldr	r4, [r6, #20]
 8018a5c:	fb22 3909 	smlad	r9, r2, r9, r3
 8018a60:	f8de 3004 	ldr.w	r3, [lr, #4]
 8018a64:	69b2      	ldr	r2, [r6, #24]
 8018a66:	f8d6 b01c 	ldr.w	fp, [r6, #28]
 8018a6a:	fa2f fc83 	sxtb16	ip, r3
 8018a6e:	fa2f f393 	sxtb16	r3, r3, ror #8
 8018a72:	fb2c 000a 	smlad	r0, ip, sl, r0
 8018a76:	fb23 0004 	smlad	r0, r3, r4, r0
 8018a7a:	fb2c 5c02 	smlad	ip, ip, r2, r5
 8018a7e:	fb23 cc0b 	smlad	ip, r3, fp, ip
 8018a82:	683d      	ldr	r5, [r7, #0]
 8018a84:	fa2f f385 	sxtb16	r3, r5
 8018a88:	fa2f f595 	sxtb16	r5, r5, ror #8
 8018a8c:	fb23 1a0a 	smlad	sl, r3, sl, r1
 8018a90:	fb23 9902 	smlad	r9, r3, r2, r9
 8018a94:	fb25 aa04 	smlad	sl, r5, r4, sl
 8018a98:	6a34      	ldr	r4, [r6, #32]
 8018a9a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8018a9c:	fb25 9b0b 	smlad	fp, r5, fp, r9
 8018aa0:	f8de 1008 	ldr.w	r1, [lr, #8]
 8018aa4:	f8d6 9028 	ldr.w	r9, [r6, #40]	; 0x28
 8018aa8:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 8018aaa:	fa2f f381 	sxtb16	r3, r1
 8018aae:	fa2f f191 	sxtb16	r1, r1, ror #8
 8018ab2:	fb23 0004 	smlad	r0, r3, r4, r0
 8018ab6:	fb21 0002 	smlad	r0, r1, r2, r0
 8018aba:	fb23 c309 	smlad	r3, r3, r9, ip
 8018abe:	fb21 3105 	smlad	r1, r1, r5, r3
 8018ac2:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8018ac6:	fa2f f38c 	sxtb16	r3, ip
 8018aca:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 8018ace:	fb23 a404 	smlad	r4, r3, r4, sl
 8018ad2:	fb23 bb09 	smlad	fp, r3, r9, fp
 8018ad6:	fb2c 4a02 	smlad	sl, ip, r2, r4
 8018ada:	f8d6 9030 	ldr.w	r9, [r6, #48]	; 0x30
 8018ade:	6b74      	ldr	r4, [r6, #52]	; 0x34
 8018ae0:	fb2c b505 	smlad	r5, ip, r5, fp
 8018ae4:	f8de 200c 	ldr.w	r2, [lr, #12]
 8018ae8:	f8d6 b038 	ldr.w	fp, [r6, #56]	; 0x38
 8018aec:	f8d6 e03c 	ldr.w	lr, [r6, #60]	; 0x3c
 8018af0:	fa2f f382 	sxtb16	r3, r2
 8018af4:	3640      	adds	r6, #64	; 0x40
 8018af6:	fa2f f292 	sxtb16	r2, r2, ror #8
 8018afa:	fb23 0009 	smlad	r0, r3, r9, r0
 8018afe:	fb22 0004 	smlad	r0, r2, r4, r0
 8018b02:	fb23 110b 	smlad	r1, r3, fp, r1
 8018b06:	fb22 120e 	smlad	r2, r2, lr, r1
 8018b0a:	68bb      	ldr	r3, [r7, #8]
 8018b0c:	fa2f f183 	sxtb16	r1, r3
 8018b10:	fa2f f393 	sxtb16	r3, r3, ror #8
 8018b14:	fb21 aa09 	smlad	sl, r1, r9, sl
 8018b18:	fb21 550b 	smlad	r5, r1, fp, r5
 8018b1c:	fb23 a404 	smlad	r4, r3, r4, sl
 8018b20:	fb23 530e 	smlad	r3, r3, lr, r5
 8018b24:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8018b28:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8018b2c:	f107 0710 	add.w	r7, r7, #16
 8018b30:	f47f af6d 	bne.w	8018a0e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x226>
 8018b34:	9904      	ldr	r1, [sp, #16]
 8018b36:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018b38:	4429      	add	r1, r5
 8018b3a:	9104      	str	r1, [sp, #16]
 8018b3c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8018b3e:	9903      	ldr	r1, [sp, #12]
 8018b40:	4429      	add	r1, r5
 8018b42:	9103      	str	r1, [sp, #12]
 8018b44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018b46:	b389      	cbz	r1, 8018bac <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x3c4>
 8018b48:	e9dd 1e03 	ldrd	r1, lr, [sp, #12]
 8018b4c:	e9dd ca0e 	ldrd	ip, sl, [sp, #56]	; 0x38
 8018b50:	680e      	ldr	r6, [r1, #0]
 8018b52:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8018b56:	f85e 5b04 	ldr.w	r5, [lr], #4
 8018b5a:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8018b5e:	68cf      	ldr	r7, [r1, #12]
 8018b60:	fa2f fb85 	sxtb16	fp, r5
 8018b64:	3110      	adds	r1, #16
 8018b66:	fa2f f595 	sxtb16	r5, r5, ror #8
 8018b6a:	fb2b 0006 	smlad	r0, fp, r6, r0
 8018b6e:	fb25 0008 	smlad	r0, r5, r8, r0
 8018b72:	fb2b 2209 	smlad	r2, fp, r9, r2
 8018b76:	fb25 2207 	smlad	r2, r5, r7, r2
 8018b7a:	f85e 500a 	ldr.w	r5, [lr, sl]
 8018b7e:	fa2f fb85 	sxtb16	fp, r5
 8018b82:	fa2f f595 	sxtb16	r5, r5, ror #8
 8018b86:	fb2b 4406 	smlad	r4, fp, r6, r4
 8018b8a:	fb2b 3309 	smlad	r3, fp, r9, r3
 8018b8e:	fb25 4408 	smlad	r4, r5, r8, r4
 8018b92:	fb25 3307 	smlad	r3, r5, r7, r3
 8018b96:	f1bc 0c01 	subs.w	ip, ip, #1
 8018b9a:	d2d9      	bcs.n	8018b50 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x368>
 8018b9c:	9904      	ldr	r1, [sp, #16]
 8018b9e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018ba0:	4429      	add	r1, r5
 8018ba2:	9104      	str	r1, [sp, #16]
 8018ba4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8018ba6:	9903      	ldr	r1, [sp, #12]
 8018ba8:	4429      	add	r1, r5
 8018baa:	9103      	str	r1, [sp, #12]
 8018bac:	9906      	ldr	r1, [sp, #24]
 8018bae:	2900      	cmp	r1, #0
 8018bb0:	d059      	beq.n	8018c66 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x47e>
 8018bb2:	9d03      	ldr	r5, [sp, #12]
 8018bb4:	9f04      	ldr	r7, [sp, #16]
 8018bb6:	f9b5 6000 	ldrsh.w	r6, [r5]
 8018bba:	f997 1000 	ldrsb.w	r1, [r7]
 8018bbe:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
 8018bc2:	fb16 0001 	smlabb	r0, r6, r1, r0
 8018bc6:	fb15 2201 	smlabb	r2, r5, r1, r2
 8018bca:	9908      	ldr	r1, [sp, #32]
 8018bcc:	5679      	ldrsb	r1, [r7, r1]
 8018bce:	fb16 4401 	smlabb	r4, r6, r1, r4
 8018bd2:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8018bd4:	fb15 3301 	smlabb	r3, r5, r1, r3
 8018bd8:	2e00      	cmp	r6, #0
 8018bda:	d03c      	beq.n	8018c56 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x46e>
 8018bdc:	9908      	ldr	r1, [sp, #32]
 8018bde:	9d03      	ldr	r5, [sp, #12]
 8018be0:	1879      	adds	r1, r7, r1
 8018be2:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 8018be6:	f991 1001 	ldrsb.w	r1, [r1, #1]
 8018bea:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8018bee:	fb16 4401 	smlabb	r4, r6, r1, r4
 8018bf2:	fb15 3301 	smlabb	r3, r5, r1, r3
 8018bf6:	f997 1001 	ldrsb.w	r1, [r7, #1]
 8018bfa:	fb16 0001 	smlabb	r0, r6, r1, r0
 8018bfe:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8018c00:	fb15 2201 	smlabb	r2, r5, r1, r2
 8018c04:	1cb9      	adds	r1, r7, #2
 8018c06:	b336      	cbz	r6, 8018c56 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x46e>
 8018c08:	9e08      	ldr	r6, [sp, #32]
 8018c0a:	9d03      	ldr	r5, [sp, #12]
 8018c0c:	5789      	ldrsb	r1, [r1, r6]
 8018c0e:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 8018c12:	f9b5 500a 	ldrsh.w	r5, [r5, #10]
 8018c16:	fb16 4401 	smlabb	r4, r6, r1, r4
 8018c1a:	fb15 3301 	smlabb	r3, r5, r1, r3
 8018c1e:	f997 1002 	ldrsb.w	r1, [r7, #2]
 8018c22:	fb16 0001 	smlabb	r0, r6, r1, r0
 8018c26:	9e06      	ldr	r6, [sp, #24]
 8018c28:	2e03      	cmp	r6, #3
 8018c2a:	fb15 2201 	smlabb	r2, r5, r1, r2
 8018c2e:	f107 0103 	add.w	r1, r7, #3
 8018c32:	d010      	beq.n	8018c56 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x46e>
 8018c34:	9e08      	ldr	r6, [sp, #32]
 8018c36:	9d03      	ldr	r5, [sp, #12]
 8018c38:	5789      	ldrsb	r1, [r1, r6]
 8018c3a:	f9b5 600c 	ldrsh.w	r6, [r5, #12]
 8018c3e:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 8018c42:	fb16 4401 	smlabb	r4, r6, r1, r4
 8018c46:	fb15 3301 	smlabb	r3, r5, r1, r3
 8018c4a:	f997 1003 	ldrsb.w	r1, [r7, #3]
 8018c4e:	fb16 0001 	smlabb	r0, r6, r1, r0
 8018c52:	fb15 2201 	smlabb	r2, r5, r1, r2
 8018c56:	9904      	ldr	r1, [sp, #16]
 8018c58:	9d06      	ldr	r5, [sp, #24]
 8018c5a:	4429      	add	r1, r5
 8018c5c:	9104      	str	r1, [sp, #16]
 8018c5e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8018c60:	9903      	ldr	r1, [sp, #12]
 8018c62:	4429      	add	r1, r5
 8018c64:	9103      	str	r1, [sp, #12]
 8018c66:	9d04      	ldr	r5, [sp, #16]
 8018c68:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018c6a:	9907      	ldr	r1, [sp, #28]
 8018c6c:	4435      	add	r5, r6
 8018c6e:	9504      	str	r5, [sp, #16]
 8018c70:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8018c72:	3101      	adds	r1, #1
 8018c74:	428d      	cmp	r5, r1
 8018c76:	9107      	str	r1, [sp, #28]
 8018c78:	f47f aebf 	bne.w	80189fa <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x212>
 8018c7c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018c7e:	2900      	cmp	r1, #0
 8018c80:	f000 813d 	beq.w	8018efe <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x716>
 8018c84:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8018c86:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8018c88:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
 8018c8c:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8018c8e:	0101      	lsls	r1, r0, #4
 8018c90:	f04f 0c00 	mov.w	ip, #0
 8018c94:	fb51 c106 	smmla	r1, r1, r6, ip
 8018c98:	4139      	asrs	r1, r7
 8018c9a:	4429      	add	r1, r5
 8018c9c:	1049      	asrs	r1, r1, #1
 8018c9e:	4670      	mov	r0, lr
 8018ca0:	f301 0107 	ssat	r1, #8, r1
 8018ca4:	f800 1b02 	strb.w	r1, [r0], #2
 8018ca8:	0121      	lsls	r1, r4, #4
 8018caa:	fb51 c106 	smmla	r1, r1, r6, ip
 8018cae:	4139      	asrs	r1, r7
 8018cb0:	4429      	add	r1, r5
 8018cb2:	462c      	mov	r4, r5
 8018cb4:	1049      	asrs	r1, r1, #1
 8018cb6:	f301 0107 	ssat	r1, #8, r1
 8018cba:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8018cbc:	f88e 1001 	strb.w	r1, [lr, #1]
 8018cc0:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8018cc2:	9926      	ldr	r1, [sp, #152]	; 0x98
 8018cc4:	0112      	lsls	r2, r2, #4
 8018cc6:	fb52 c206 	smmla	r2, r2, r6, ip
 8018cca:	413a      	asrs	r2, r7
 8018ccc:	4422      	add	r2, r4
 8018cce:	4675      	mov	r5, lr
 8018cd0:	1052      	asrs	r2, r2, #1
 8018cd2:	448e      	add	lr, r1
 8018cd4:	f302 0207 	ssat	r2, #8, r2
 8018cd8:	011b      	lsls	r3, r3, #4
 8018cda:	fb53 c306 	smmla	r3, r3, r6, ip
 8018cde:	413b      	asrs	r3, r7
 8018ce0:	4423      	add	r3, r4
 8018ce2:	546a      	strb	r2, [r5, r1]
 8018ce4:	105b      	asrs	r3, r3, #1
 8018ce6:	f303 0307 	ssat	r3, #8, r3
 8018cea:	f88e 3001 	strb.w	r3, [lr, #1]
 8018cee:	9019      	str	r0, [sp, #100]	; 0x64
 8018cf0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018cf2:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8018cf4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018cf6:	440a      	add	r2, r1
 8018cf8:	9218      	str	r2, [sp, #96]	; 0x60
 8018cfa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8018cfc:	3302      	adds	r3, #2
 8018cfe:	429a      	cmp	r2, r3
 8018d00:	931a      	str	r3, [sp, #104]	; 0x68
 8018d02:	f73f ae6c 	bgt.w	80189de <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x1f6>
 8018d06:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8018d08:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 8018d0a:	4413      	add	r3, r2
 8018d0c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8018d0e:	18d3      	adds	r3, r2, r3
 8018d10:	9307      	str	r3, [sp, #28]
 8018d12:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	f040 8133 	bne.w	8018f80 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x798>
 8018d1a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8018d1c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8018d1e:	4413      	add	r3, r2
 8018d20:	9332      	str	r3, [sp, #200]	; 0xc8
 8018d22:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8018d24:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8018d26:	4413      	add	r3, r2
 8018d28:	9331      	str	r3, [sp, #196]	; 0xc4
 8018d2a:	9a4b      	ldr	r2, [sp, #300]	; 0x12c
 8018d2c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8018d2e:	4413      	add	r3, r2
 8018d30:	933a      	str	r3, [sp, #232]	; 0xe8
 8018d32:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018d34:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8018d36:	3301      	adds	r3, #1
 8018d38:	932c      	str	r3, [sp, #176]	; 0xb0
 8018d3a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018d3c:	4413      	add	r3, r2
 8018d3e:	932b      	str	r3, [sp, #172]	; 0xac
 8018d40:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8018d42:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018d44:	4293      	cmp	r3, r2
 8018d46:	f73f ae31 	bgt.w	80189ac <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x1c4>
 8018d4a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018d4c:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8018d4e:	4413      	add	r3, r2
 8018d50:	9336      	str	r3, [sp, #216]	; 0xd8
 8018d52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	f000 8291 	beq.w	801927c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa94>
 8018d5a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018d5c:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8018d5e:	4413      	add	r3, r2
 8018d60:	9329      	str	r3, [sp, #164]	; 0xa4
 8018d62:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8018d64:	b11b      	cbz	r3, 8018d6e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x586>
 8018d66:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8018d68:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8018d6a:	4413      	add	r3, r2
 8018d6c:	9365      	str	r3, [sp, #404]	; 0x194
 8018d6e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8018d70:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8018d72:	3208      	adds	r2, #8
 8018d74:	9230      	str	r2, [sp, #192]	; 0xc0
 8018d76:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8018d78:	3208      	adds	r2, #8
 8018d7a:	9234      	str	r2, [sp, #208]	; 0xd0
 8018d7c:	9a44      	ldr	r2, [sp, #272]	; 0x110
 8018d7e:	3304      	adds	r3, #4
 8018d80:	429a      	cmp	r2, r3
 8018d82:	9337      	str	r3, [sp, #220]	; 0xdc
 8018d84:	f47f add9 	bne.w	801893a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x152>
 8018d88:	e9dd 233d 	ldrd	r2, r3, [sp, #244]	; 0xf4
 8018d8c:	fb02 3303 	mla	r3, r2, r3, r3
 8018d90:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8018d92:	441a      	add	r2, r3
 8018d94:	922f      	str	r2, [sp, #188]	; 0xbc
 8018d96:	9b58      	ldr	r3, [sp, #352]	; 0x160
 8018d98:	f013 0a01 	ands.w	sl, r3, #1
 8018d9c:	f000 80ab 	beq.w	8018ef6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x70e>
 8018da0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	f000 80a7 	beq.w	8018ef6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x70e>
 8018da8:	9a59      	ldr	r2, [sp, #356]	; 0x164
 8018daa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018dac:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8018dae:	f8dd b0a4 	ldr.w	fp, [sp, #164]	; 0xa4
 8018db2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018db6:	9e61      	ldr	r6, [sp, #388]	; 0x184
 8018db8:	f8cd b014 	str.w	fp, [sp, #20]
 8018dbc:	fb02 f303 	mul.w	r3, r2, r3
 8018dc0:	930e      	str	r3, [sp, #56]	; 0x38
 8018dc2:	9b62      	ldr	r3, [sp, #392]	; 0x188
 8018dc4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8018dc6:	f003 0302 	and.w	r3, r3, #2
 8018dca:	9308      	str	r3, [sp, #32]
 8018dcc:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8018dce:	fb02 f303 	mul.w	r3, r2, r3
 8018dd2:	930a      	str	r3, [sp, #40]	; 0x28
 8018dd4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018dd6:	9a40      	ldr	r2, [sp, #256]	; 0x100
 8018dd8:	440b      	add	r3, r1
 8018dda:	9303      	str	r3, [sp, #12]
 8018ddc:	9b58      	ldr	r3, [sp, #352]	; 0x160
 8018dde:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018de2:	3b01      	subs	r3, #1
 8018de4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8018de8:	920b      	str	r2, [sp, #44]	; 0x2c
 8018dea:	9a56      	ldr	r2, [sp, #344]	; 0x158
 8018dec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018df0:	930c      	str	r3, [sp, #48]	; 0x30
 8018df2:	9b58      	ldr	r3, [sp, #352]	; 0x160
 8018df4:	9a57      	ldr	r2, [sp, #348]	; 0x15c
 8018df6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018dfa:	3b01      	subs	r3, #1
 8018dfc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8018e00:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8018e02:	930d      	str	r3, [sp, #52]	; 0x34
 8018e04:	1cd3      	adds	r3, r2, #3
 8018e06:	445b      	add	r3, fp
 8018e08:	9306      	str	r3, [sp, #24]
 8018e0a:	9b58      	ldr	r3, [sp, #352]	; 0x160
 8018e0c:	fb03 f302 	mul.w	r3, r3, r2
 8018e10:	930f      	str	r3, [sp, #60]	; 0x3c
 8018e12:	1c93      	adds	r3, r2, #2
 8018e14:	9310      	str	r3, [sp, #64]	; 0x40
 8018e16:	468e      	mov	lr, r1
 8018e18:	9b08      	ldr	r3, [sp, #32]
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	f000 8247 	beq.w	80192ae <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xac6>
 8018e20:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	f000 8248 	beq.w	80192b8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xad0>
 8018e28:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8018e2c:	f8cd a01c 	str.w	sl, [sp, #28]
 8018e30:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d04b      	beq.n	8018ece <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6e6>
 8018e36:	9b03      	ldr	r3, [sp, #12]
 8018e38:	9304      	str	r3, [sp, #16]
 8018e3a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8018e3e:	2300      	movs	r3, #0
 8018e40:	f8dd a0a8 	ldr.w	sl, [sp, #168]	; 0xa8
 8018e44:	9309      	str	r3, [sp, #36]	; 0x24
 8018e46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018e48:	6819      	ldr	r1, [r3, #0]
 8018e4a:	f1b9 0f00 	cmp.w	r9, #0
 8018e4e:	d018      	beq.n	8018e82 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x69a>
 8018e50:	9d04      	ldr	r5, [sp, #16]
 8018e52:	f8dd c0bc 	ldr.w	ip, [sp, #188]	; 0xbc
 8018e56:	2700      	movs	r7, #0
 8018e58:	f1be 0f00 	cmp.w	lr, #0
 8018e5c:	eba5 020e 	sub.w	r2, r5, lr
 8018e60:	dd0b      	ble.n	8018e7a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x692>
 8018e62:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8018e66:	f912 3b01 	ldrsb.w	r3, [r2], #1
 8018e6a:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 8018e6e:	1b9b      	subs	r3, r3, r6
 8018e70:	42aa      	cmp	r2, r5
 8018e72:	fb04 1103 	mla	r1, r4, r3, r1
 8018e76:	d1f6      	bne.n	8018e66 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x67e>
 8018e78:	44f4      	add	ip, lr
 8018e7a:	3701      	adds	r7, #1
 8018e7c:	45b9      	cmp	r9, r7
 8018e7e:	4455      	add	r5, sl
 8018e80:	d1ea      	bne.n	8018e58 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x670>
 8018e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018e84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018e86:	f9b3 0000 	ldrsh.w	r0, [r3]
 8018e8a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018e8c:	6812      	ldr	r2, [r2, #0]
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	3002      	adds	r0, #2
 8018e92:	2400      	movs	r4, #0
 8018e94:	0109      	lsls	r1, r1, #4
 8018e96:	fb51 4102 	smmla	r1, r1, r2, r4
 8018e9a:	fa41 f000 	asr.w	r0, r1, r0
 8018e9e:	4403      	add	r3, r0
 8018ea0:	105b      	asrs	r3, r3, #1
 8018ea2:	f303 0307 	ssat	r3, #8, r3
 8018ea6:	f888 3000 	strb.w	r3, [r8]
 8018eaa:	9b08      	ldr	r3, [sp, #32]
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	f000 81fb 	beq.w	80192a8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xac0>
 8018eb2:	f108 0801 	add.w	r8, r8, #1
 8018eb6:	9a04      	ldr	r2, [sp, #16]
 8018eb8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8018eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ebc:	440a      	add	r2, r1
 8018ebe:	9204      	str	r2, [sp, #16]
 8018ec0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8018ec2:	3301      	adds	r3, #1
 8018ec4:	429a      	cmp	r2, r3
 8018ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8018ec8:	d1bd      	bne.n	8018e46 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x65e>
 8018eca:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8018ece:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8018ed0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018ed2:	449b      	add	fp, r3
 8018ed4:	9b05      	ldr	r3, [sp, #20]
 8018ed6:	4413      	add	r3, r2
 8018ed8:	9305      	str	r3, [sp, #20]
 8018eda:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018edc:	9b06      	ldr	r3, [sp, #24]
 8018ede:	4413      	add	r3, r2
 8018ee0:	9306      	str	r3, [sp, #24]
 8018ee2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018ee4:	9b03      	ldr	r3, [sp, #12]
 8018ee6:	4413      	add	r3, r2
 8018ee8:	9303      	str	r3, [sp, #12]
 8018eea:	9a07      	ldr	r2, [sp, #28]
 8018eec:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018eee:	4293      	cmp	r3, r2
 8018ef0:	f10a 0a01 	add.w	sl, sl, #1
 8018ef4:	dc90      	bgt.n	8018e18 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x630>
 8018ef6:	2000      	movs	r0, #0
 8018ef8:	b04d      	add	sp, #308	; 0x134
 8018efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018efe:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8018f00:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8018f02:	460f      	mov	r7, r1
 8018f04:	0101      	lsls	r1, r0, #4
 8018f06:	981c      	ldr	r0, [sp, #112]	; 0x70
 8018f08:	fb51 7100 	smmla	r1, r1, r0, r7
 8018f0c:	981e      	ldr	r0, [sp, #120]	; 0x78
 8018f0e:	4129      	asrs	r1, r5
 8018f10:	4401      	add	r1, r0
 8018f12:	9d58      	ldr	r5, [sp, #352]	; 0x160
 8018f14:	9858      	ldr	r0, [sp, #352]	; 0x160
 8018f16:	1049      	asrs	r1, r1, #1
 8018f18:	1975      	adds	r5, r6, r5
 8018f1a:	eb06 0c40 	add.w	ip, r6, r0, lsl #1
 8018f1e:	f301 0107 	ssat	r1, #8, r1
 8018f22:	7031      	strb	r1, [r6, #0]
 8018f24:	0121      	lsls	r1, r4, #4
 8018f26:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8018f28:	fb51 7104 	smmla	r1, r1, r4, r7
 8018f2c:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8018f2e:	4121      	asrs	r1, r4
 8018f30:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8018f32:	4421      	add	r1, r4
 8018f34:	1049      	asrs	r1, r1, #1
 8018f36:	f301 0107 	ssat	r1, #8, r1
 8018f3a:	5431      	strb	r1, [r6, r0]
 8018f3c:	9824      	ldr	r0, [sp, #144]	; 0x90
 8018f3e:	991d      	ldr	r1, [sp, #116]	; 0x74
 8018f40:	0112      	lsls	r2, r2, #4
 8018f42:	fb52 7201 	smmla	r2, r2, r1, r7
 8018f46:	4102      	asrs	r2, r0
 8018f48:	4422      	add	r2, r4
 8018f4a:	1052      	asrs	r2, r2, #1
 8018f4c:	f302 0207 	ssat	r2, #8, r2
 8018f50:	7072      	strb	r2, [r6, #1]
 8018f52:	011b      	lsls	r3, r3, #4
 8018f54:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018f56:	fb53 7302 	smmla	r3, r3, r2, r7
 8018f5a:	4103      	asrs	r3, r0
 8018f5c:	4423      	add	r3, r4
 8018f5e:	105b      	asrs	r3, r3, #1
 8018f60:	f303 0307 	ssat	r3, #8, r3
 8018f64:	706b      	strb	r3, [r5, #1]
 8018f66:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 8018f6a:	e6c1      	b.n	8018cf0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x508>
 8018f6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018f6e:	9820      	ldr	r0, [sp, #128]	; 0x80
 8018f70:	4613      	mov	r3, r2
 8018f72:	4604      	mov	r4, r0
 8018f74:	e682      	b.n	8018c7c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x494>
 8018f76:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8018f78:	9319      	str	r3, [sp, #100]	; 0x64
 8018f7a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018f7c:	9339      	str	r3, [sp, #228]	; 0xe4
 8018f7e:	e521      	b.n	80189c4 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x1dc>
 8018f80:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8018f82:	2b01      	cmp	r3, #1
 8018f84:	bf13      	iteet	ne
 8018f86:	9b07      	ldrne	r3, [sp, #28]
 8018f88:	9b2d      	ldreq	r3, [sp, #180]	; 0xb4
 8018f8a:	9a2b      	ldreq	r2, [sp, #172]	; 0xac
 8018f8c:	9a23      	ldrne	r2, [sp, #140]	; 0x8c
 8018f8e:	4413      	add	r3, r2
 8018f90:	9307      	str	r3, [sp, #28]
 8018f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	f000 8175 	beq.w	8019284 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa9c>
 8018f9a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018f9c:	f8dd 9194 	ldr.w	r9, [sp, #404]	; 0x194
 8018fa0:	1eda      	subs	r2, r3, #3
 8018fa2:	921a      	str	r2, [sp, #104]	; 0x68
 8018fa4:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8018fa8:	9a07      	ldr	r2, [sp, #28]
 8018faa:	9203      	str	r2, [sp, #12]
 8018fac:	3b04      	subs	r3, #4
 8018fae:	2200      	movs	r2, #0
 8018fb0:	9204      	str	r2, [sp, #16]
 8018fb2:	9324      	str	r3, [sp, #144]	; 0x90
 8018fb4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8018fb6:	9a03      	ldr	r2, [sp, #12]
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	4611      	mov	r1, r2
 8018fbc:	f340 80e7 	ble.w	801918e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9a6>
 8018fc0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8018fc2:	464b      	mov	r3, r9
 8018fc4:	188c      	adds	r4, r1, r2
 8018fc6:	6808      	ldr	r0, [r1, #0]
 8018fc8:	fa2f f280 	sxtb16	r2, r0
 8018fcc:	fa2f f090 	sxtb16	r0, r0, ror #8
 8018fd0:	681d      	ldr	r5, [r3, #0]
 8018fd2:	fb22 a505 	smlad	r5, r2, r5, sl
 8018fd6:	685e      	ldr	r6, [r3, #4]
 8018fd8:	fb20 5706 	smlad	r7, r0, r6, r5
 8018fdc:	689d      	ldr	r5, [r3, #8]
 8018fde:	fb22 b205 	smlad	r2, r2, r5, fp
 8018fe2:	68dd      	ldr	r5, [r3, #12]
 8018fe4:	fb20 2005 	smlad	r0, r0, r5, r2
 8018fe8:	684a      	ldr	r2, [r1, #4]
 8018fea:	fa2f f582 	sxtb16	r5, r2
 8018fee:	fa2f f292 	sxtb16	r2, r2, ror #8
 8018ff2:	691e      	ldr	r6, [r3, #16]
 8018ff4:	fb25 7606 	smlad	r6, r5, r6, r7
 8018ff8:	695f      	ldr	r7, [r3, #20]
 8018ffa:	fb22 6607 	smlad	r6, r2, r7, r6
 8018ffe:	699f      	ldr	r7, [r3, #24]
 8019000:	fb25 0007 	smlad	r0, r5, r7, r0
 8019004:	69dd      	ldr	r5, [r3, #28]
 8019006:	fb22 0205 	smlad	r2, r2, r5, r0
 801900a:	688f      	ldr	r7, [r1, #8]
 801900c:	fa2f f087 	sxtb16	r0, r7
 8019010:	fa2f f797 	sxtb16	r7, r7, ror #8
 8019014:	6a1d      	ldr	r5, [r3, #32]
 8019016:	fb20 6505 	smlad	r5, r0, r5, r6
 801901a:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 801901c:	fb27 5606 	smlad	r6, r7, r6, r5
 8019020:	f8d3 b028 	ldr.w	fp, [r3, #40]	; 0x28
 8019024:	fb20 200b 	smlad	r0, r0, fp, r2
 8019028:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
 801902c:	fb27 000b 	smlad	r0, r7, fp, r0
 8019030:	68ca      	ldr	r2, [r1, #12]
 8019032:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8019034:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8019038:	f8d3 c038 	ldr.w	ip, [r3, #56]	; 0x38
 801903c:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 801903e:	fa2f fb82 	sxtb16	fp, r2
 8019042:	3110      	adds	r1, #16
 8019044:	3340      	adds	r3, #64	; 0x40
 8019046:	fa2f f292 	sxtb16	r2, r2, ror #8
 801904a:	fb2b 6505 	smlad	r5, fp, r5, r6
 801904e:	fb22 5a0a 	smlad	sl, r2, sl, r5
 8019052:	fb2b 0b0c 	smlad	fp, fp, ip, r0
 8019056:	fb22 bb07 	smlad	fp, r2, r7, fp
 801905a:	42a1      	cmp	r1, r4
 801905c:	d1b3      	bne.n	8018fc6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7de>
 801905e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8019060:	f8dd e0a0 	ldr.w	lr, [sp, #160]	; 0xa0
 8019064:	4499      	add	r9, r3
 8019066:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019068:	459e      	cmp	lr, r3
 801906a:	f280 808e 	bge.w	801918a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9a2>
 801906e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019070:	eba3 080e 	sub.w	r8, r3, lr
 8019074:	ea4f 0898 	mov.w	r8, r8, lsr #2
 8019078:	f108 0301 	add.w	r3, r8, #1
 801907c:	9318      	str	r3, [sp, #96]	; 0x60
 801907e:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 8019082:	4649      	mov	r1, r9
 8019084:	6808      	ldr	r0, [r1, #0]
 8019086:	684f      	ldr	r7, [r1, #4]
 8019088:	688e      	ldr	r6, [r1, #8]
 801908a:	68cd      	ldr	r5, [r1, #12]
 801908c:	f854 3b04 	ldr.w	r3, [r4], #4
 8019090:	fa2f f283 	sxtb16	r2, r3
 8019094:	3110      	adds	r1, #16
 8019096:	fa2f f393 	sxtb16	r3, r3, ror #8
 801909a:	fb22 a000 	smlad	r0, r2, r0, sl
 801909e:	fb23 0a07 	smlad	sl, r3, r7, r0
 80190a2:	fb22 b206 	smlad	r2, r2, r6, fp
 80190a6:	fb23 2b05 	smlad	fp, r3, r5, r2
 80190aa:	45a4      	cmp	ip, r4
 80190ac:	d1ea      	bne.n	8019084 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x89c>
 80190ae:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80190b0:	f10e 0e04 	add.w	lr, lr, #4
 80190b4:	eb09 1903 	add.w	r9, r9, r3, lsl #4
 80190b8:	eb0e 0e88 	add.w	lr, lr, r8, lsl #2
 80190bc:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80190be:	4571      	cmp	r1, lr
 80190c0:	dd38      	ble.n	8019134 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x94c>
 80190c2:	f99c 3000 	ldrsb.w	r3, [ip]
 80190c6:	f8b9 2000 	ldrh.w	r2, [r9]
 80190ca:	fb12 aa03 	smlabb	sl, r2, r3, sl
 80190ce:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 80190d2:	fb12 bb03 	smlabb	fp, r2, r3, fp
 80190d6:	f10e 0301 	add.w	r3, lr, #1
 80190da:	4299      	cmp	r1, r3
 80190dc:	dd25      	ble.n	801912a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x942>
 80190de:	f99c 3001 	ldrsb.w	r3, [ip, #1]
 80190e2:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 80190e6:	fb12 aa03 	smlabb	sl, r2, r3, sl
 80190ea:	f8b9 2006 	ldrh.w	r2, [r9, #6]
 80190ee:	fb12 bb03 	smlabb	fp, r2, r3, fp
 80190f2:	f10e 0302 	add.w	r3, lr, #2
 80190f6:	4299      	cmp	r1, r3
 80190f8:	dd17      	ble.n	801912a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x942>
 80190fa:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 80190fe:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 8019102:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8019106:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 801910a:	fb12 bb03 	smlabb	fp, r2, r3, fp
 801910e:	f10e 0303 	add.w	r3, lr, #3
 8019112:	4299      	cmp	r1, r3
 8019114:	dd09      	ble.n	801912a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x942>
 8019116:	f99c 3003 	ldrsb.w	r3, [ip, #3]
 801911a:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 801911e:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8019122:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8019126:	fb12 bb03 	smlabb	fp, r2, r3, fp
 801912a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801912c:	eba3 0e0e 	sub.w	lr, r3, lr
 8019130:	eb09 098e 	add.w	r9, r9, lr, lsl #2
 8019134:	9a03      	ldr	r2, [sp, #12]
 8019136:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8019138:	9b04      	ldr	r3, [sp, #16]
 801913a:	440a      	add	r2, r1
 801913c:	9203      	str	r2, [sp, #12]
 801913e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019140:	3301      	adds	r3, #1
 8019142:	429a      	cmp	r2, r3
 8019144:	9304      	str	r3, [sp, #16]
 8019146:	f47f af35 	bne.w	8018fb4 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7cc>
 801914a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801914c:	b343      	cbz	r3, 80191a0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9b8>
 801914e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019150:	991e      	ldr	r1, [sp, #120]	; 0x78
 8019152:	ea4f 130a 	mov.w	r3, sl, lsl #4
 8019156:	2400      	movs	r4, #0
 8019158:	fb53 4302 	smmla	r3, r3, r2, r4
 801915c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801915e:	4113      	asrs	r3, r2
 8019160:	440b      	add	r3, r1
 8019162:	105b      	asrs	r3, r3, #1
 8019164:	f303 0307 	ssat	r3, #8, r3
 8019168:	9819      	ldr	r0, [sp, #100]	; 0x64
 801916a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801916c:	7003      	strb	r3, [r0, #0]
 801916e:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8019172:	fb53 4302 	smmla	r3, r3, r2, r4
 8019176:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8019178:	3202      	adds	r2, #2
 801917a:	4113      	asrs	r3, r2
 801917c:	440b      	add	r3, r1
 801917e:	105b      	asrs	r3, r3, #1
 8019180:	f303 0307 	ssat	r3, #8, r3
 8019184:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8019186:	5483      	strb	r3, [r0, r2]
 8019188:	e5c7      	b.n	8018d1a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x532>
 801918a:	46a4      	mov	ip, r4
 801918c:	e796      	b.n	80190bc <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x8d4>
 801918e:	4614      	mov	r4, r2
 8019190:	f04f 0e00 	mov.w	lr, #0
 8019194:	e767      	b.n	8019066 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x87e>
 8019196:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8019198:	9319      	str	r3, [sp, #100]	; 0x64
 801919a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801919c:	9339      	str	r3, [sp, #228]	; 0xe4
 801919e:	e411      	b.n	80189c4 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x1dc>
 80191a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80191a2:	461a      	mov	r2, r3
 80191a4:	ea4f 130a 	mov.w	r3, sl, lsl #4
 80191a8:	fb53 2301 	smmla	r3, r3, r1, r2
 80191ac:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80191ae:	410b      	asrs	r3, r1
 80191b0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80191b2:	440b      	add	r3, r1
 80191b4:	105b      	asrs	r3, r3, #1
 80191b6:	f303 0307 	ssat	r3, #8, r3
 80191ba:	9819      	ldr	r0, [sp, #100]	; 0x64
 80191bc:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80191be:	7003      	strb	r3, [r0, #0]
 80191c0:	ea4f 130b 	mov.w	r3, fp, lsl #4
 80191c4:	fb53 2304 	smmla	r3, r3, r4, r2
 80191c8:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80191ca:	3202      	adds	r2, #2
 80191cc:	4113      	asrs	r3, r2
 80191ce:	440b      	add	r3, r1
 80191d0:	105b      	asrs	r3, r3, #1
 80191d2:	f303 0307 	ssat	r3, #8, r3
 80191d6:	7043      	strb	r3, [r0, #1]
 80191d8:	e59f      	b.n	8018d1a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x532>
 80191da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191dc:	2b00      	cmp	r3, #0
 80191de:	d060      	beq.n	80192a2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xaba>
 80191e0:	2300      	movs	r3, #0
 80191e2:	9865      	ldr	r0, [sp, #404]	; 0x194
 80191e4:	993f      	ldr	r1, [sp, #252]	; 0xfc
 80191e6:	461c      	mov	r4, r3
 80191e8:	461e      	mov	r6, r3
 80191ea:	b311      	cbz	r1, 8019232 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa4a>
 80191ec:	f100 0510 	add.w	r5, r0, #16
 80191f0:	468c      	mov	ip, r1
 80191f2:	f935 2c10 	ldrsh.w	r2, [r5, #-16]
 80191f6:	1aa4      	subs	r4, r4, r2
 80191f8:	f935 2c08 	ldrsh.w	r2, [r5, #-8]
 80191fc:	1a9b      	subs	r3, r3, r2
 80191fe:	f935 2c0e 	ldrsh.w	r2, [r5, #-14]
 8019202:	1aa4      	subs	r4, r4, r2
 8019204:	f935 2c06 	ldrsh.w	r2, [r5, #-6]
 8019208:	1a9b      	subs	r3, r3, r2
 801920a:	f935 2c0c 	ldrsh.w	r2, [r5, #-12]
 801920e:	1aa4      	subs	r4, r4, r2
 8019210:	f935 2c04 	ldrsh.w	r2, [r5, #-4]
 8019214:	1a9b      	subs	r3, r3, r2
 8019216:	f935 2c0a 	ldrsh.w	r2, [r5, #-10]
 801921a:	1aa4      	subs	r4, r4, r2
 801921c:	f935 2c02 	ldrsh.w	r2, [r5, #-2]
 8019220:	f1bc 0c01 	subs.w	ip, ip, #1
 8019224:	eba3 0302 	sub.w	r3, r3, r2
 8019228:	f105 0510 	add.w	r5, r5, #16
 801922c:	d1e1      	bne.n	80191f2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa0a>
 801922e:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8019230:	4410      	add	r0, r2
 8019232:	9a06      	ldr	r2, [sp, #24]
 8019234:	b1ba      	cbz	r2, 8019266 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa7e>
 8019236:	f9b0 2000 	ldrsh.w	r2, [r0]
 801923a:	1aa4      	subs	r4, r4, r2
 801923c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8019240:	1a9b      	subs	r3, r3, r2
 8019242:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019244:	b16a      	cbz	r2, 8019262 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa7a>
 8019246:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801924a:	1aa4      	subs	r4, r4, r2
 801924c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019250:	1a9b      	subs	r3, r3, r2
 8019252:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019254:	b12a      	cbz	r2, 8019262 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa7a>
 8019256:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801925a:	1aa4      	subs	r4, r4, r2
 801925c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019260:	1a9b      	subs	r3, r3, r2
 8019262:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019264:	4410      	add	r0, r2
 8019266:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019268:	3601      	adds	r6, #1
 801926a:	42b2      	cmp	r2, r6
 801926c:	d1bd      	bne.n	80191ea <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa02>
 801926e:	9a61      	ldr	r2, [sp, #388]	; 0x184
 8019270:	fb02 f404 	mul.w	r4, r2, r4
 8019274:	fb02 f303 	mul.w	r3, r2, r3
 8019278:	f7ff bb77 	b.w	801896a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x182>
 801927c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801927e:	3302      	adds	r3, #2
 8019280:	9329      	str	r3, [sp, #164]	; 0xa4
 8019282:	e56e      	b.n	8018d62 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x57a>
 8019284:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8019288:	e75f      	b.n	801914a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x962>
 801928a:	9836      	ldr	r0, [sp, #216]	; 0xd8
 801928c:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
 801928e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019290:	9300      	str	r3, [sp, #0]
 8019292:	4601      	mov	r1, r0
 8019294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019296:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8019298:	4421      	add	r1, r4
 801929a:	f7fe ff91 	bl	80181c0 <weights_2channels_prefetch>
 801929e:	f7ff bb5f 	b.w	8018960 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x178>
 80192a2:	461c      	mov	r4, r3
 80192a4:	f7ff bb61 	b.w	801896a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x182>
 80192a8:	9b58      	ldr	r3, [sp, #352]	; 0x160
 80192aa:	4498      	add	r8, r3
 80192ac:	e603      	b.n	8018eb6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6ce>
 80192ae:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80192b2:	f8cd a01c 	str.w	sl, [sp, #28]
 80192b6:	e5bb      	b.n	8018e30 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x648>
 80192b8:	46d8      	mov	r8, fp
 80192ba:	f8cd a01c 	str.w	sl, [sp, #28]
 80192be:	e5b7      	b.n	8018e30 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x648>

080192c0 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t>:
 80192c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192c4:	b0c7      	sub	sp, #284	; 0x11c
 80192c6:	f8dd 814c 	ldr.w	r8, [sp, #332]	; 0x14c
 80192ca:	912f      	str	r1, [sp, #188]	; 0xbc
 80192cc:	923d      	str	r2, [sp, #244]	; 0xf4
 80192ce:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
 80192d2:	9331      	str	r3, [sp, #196]	; 0xc4
 80192d4:	e9dd 325b 	ldrd	r3, r2, [sp, #364]	; 0x16c
 80192d8:	9127      	str	r1, [sp, #156]	; 0x9c
 80192da:	ea4f 0148 	mov.w	r1, r8, lsl #1
 80192de:	910c      	str	r1, [sp, #48]	; 0x30
 80192e0:	eb08 0148 	add.w	r1, r8, r8, lsl #1
 80192e4:	2a00      	cmp	r2, #0
 80192e6:	bf18      	it	ne
 80192e8:	4613      	movne	r3, r2
 80192ea:	9132      	str	r1, [sp, #200]	; 0xc8
 80192ec:	9958      	ldr	r1, [sp, #352]	; 0x160
 80192ee:	f8bd 2154 	ldrh.w	r2, [sp, #340]	; 0x154
 80192f2:	935b      	str	r3, [sp, #364]	; 0x16c
 80192f4:	f8bd 3150 	ldrh.w	r3, [sp, #336]	; 0x150
 80192f8:	9324      	str	r3, [sp, #144]	; 0x90
 80192fa:	f011 0101 	ands.w	r1, r1, #1
 80192fe:	bf18      	it	ne
 8019300:	3302      	addne	r3, #2
 8019302:	9228      	str	r2, [sp, #160]	; 0xa0
 8019304:	bf18      	it	ne
 8019306:	3202      	addne	r2, #2
 8019308:	fb02 f303 	mul.w	r3, r2, r3
 801930c:	9316      	str	r3, [sp, #88]	; 0x58
 801930e:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8019310:	903c      	str	r0, [sp, #240]	; 0xf0
 8019312:	2b01      	cmp	r3, #1
 8019314:	9130      	str	r1, [sp, #192]	; 0xc0
 8019316:	f340 82b5 	ble.w	8019884 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x5c4>
 801931a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801931c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801931e:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8019322:	1bf1      	subs	r1, r6, r7
 8019324:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8019328:	19d5      	adds	r5, r2, r7
 801932a:	eb06 0048 	add.w	r0, r6, r8, lsl #1
 801932e:	eb07 0208 	add.w	r2, r7, r8
 8019332:	1bc4      	subs	r4, r0, r7
 8019334:	9021      	str	r0, [sp, #132]	; 0x84
 8019336:	0052      	lsls	r2, r2, #1
 8019338:	f1c6 0002 	rsb	r0, r6, #2
 801933c:	912e      	str	r1, [sp, #184]	; 0xb8
 801933e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8019342:	eba0 0108 	sub.w	r1, r0, r8
 8019346:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 801934a:	f1a8 0304 	sub.w	r3, r8, #4
 801934e:	4617      	mov	r7, r2
 8019350:	089b      	lsrs	r3, r3, #2
 8019352:	9223      	str	r2, [sp, #140]	; 0x8c
 8019354:	eb05 0241 	add.w	r2, r5, r1, lsl #1
 8019358:	fb07 2203 	mla	r2, r7, r3, r2
 801935c:	9239      	str	r2, [sp, #228]	; 0xe4
 801935e:	f008 0203 	and.w	r2, r8, #3
 8019362:	9f52      	ldr	r7, [sp, #328]	; 0x148
 8019364:	9219      	str	r2, [sp, #100]	; 0x64
 8019366:	ea4f 02a8 	mov.w	r2, r8, asr #2
 801936a:	eb02 05c2 	add.w	r5, r2, r2, lsl #3
 801936e:	0072      	lsls	r2, r6, #1
 8019370:	9538      	str	r5, [sp, #224]	; 0xe0
 8019372:	f1c2 0501 	rsb	r5, r2, #1
 8019376:	1eba      	subs	r2, r7, #2
 8019378:	0852      	lsrs	r2, r2, #1
 801937a:	923b      	str	r2, [sp, #236]	; 0xec
 801937c:	eba8 0288 	sub.w	r2, r8, r8, lsl #2
 8019380:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8019384:	9005      	str	r0, [sp, #20]
 8019386:	eb08 00c8 	add.w	r0, r8, r8, lsl #3
 801938a:	903a      	str	r0, [sp, #232]	; 0xe8
 801938c:	9832      	ldr	r0, [sp, #200]	; 0xc8
 801938e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019392:	0080      	lsls	r0, r0, #2
 8019394:	eb08 0704 	add.w	r7, r8, r4
 8019398:	9042      	str	r0, [sp, #264]	; 0x108
 801939a:	9851      	ldr	r0, [sp, #324]	; 0x144
 801939c:	971b      	str	r7, [sp, #108]	; 0x6c
 801939e:	9f3b      	ldr	r7, [sp, #236]	; 0xec
 80193a0:	3004      	adds	r0, #4
 80193a2:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 80193a6:	3301      	adds	r3, #1
 80193a8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80193aa:	f8cd c100 	str.w	ip, [sp, #256]	; 0x100
 80193ae:	eb03 00c3 	add.w	r0, r3, r3, lsl #3
 80193b2:	009b      	lsls	r3, r3, #2
 80193b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80193b6:	007b      	lsls	r3, r7, #1
 80193b8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80193bc:	9919      	ldr	r1, [sp, #100]	; 0x64
 80193be:	931e      	str	r3, [sp, #120]	; 0x78
 80193c0:	1c4b      	adds	r3, r1, #1
 80193c2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80193c6:	9345      	str	r3, [sp, #276]	; 0x114
 80193c8:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80193cc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80193ce:	9341      	str	r3, [sp, #260]	; 0x104
 80193d0:	1993      	adds	r3, r2, r6
 80193d2:	9301      	str	r3, [sp, #4]
 80193d4:	1953      	adds	r3, r2, r5
 80193d6:	9315      	str	r3, [sp, #84]	; 0x54
 80193d8:	1beb      	subs	r3, r5, r7
 80193da:	9333      	str	r3, [sp, #204]	; 0xcc
 80193dc:	9b58      	ldr	r3, [sp, #352]	; 0x160
 80193de:	f003 0302 	and.w	r3, r3, #2
 80193e2:	9309      	str	r3, [sp, #36]	; 0x24
 80193e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80193e6:	0100      	lsls	r0, r0, #4
 80193e8:	1e5a      	subs	r2, r3, #1
 80193ea:	9044      	str	r0, [sp, #272]	; 0x110
 80193ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80193ee:	f1a8 0203 	sub.w	r2, r8, #3
 80193f2:	983a      	ldr	r0, [sp, #232]	; 0xe8
 80193f4:	9204      	str	r2, [sp, #16]
 80193f6:	f003 0201 	and.w	r2, r3, #1
 80193fa:	922b      	str	r2, [sp, #172]	; 0xac
 80193fc:	0042      	lsls	r2, r0, #1
 80193fe:	923e      	str	r2, [sp, #248]	; 0xf8
 8019400:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019402:	9d38      	ldr	r5, [sp, #224]	; 0xe0
 8019404:	0052      	lsls	r2, r2, #1
 8019406:	923f      	str	r2, [sp, #252]	; 0xfc
 8019408:	9a51      	ldr	r2, [sp, #324]	; 0x144
 801940a:	9237      	str	r2, [sp, #220]	; 0xdc
 801940c:	9a50      	ldr	r2, [sp, #320]	; 0x140
 801940e:	3204      	adds	r2, #4
 8019410:	9236      	str	r2, [sp, #216]	; 0xd8
 8019412:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8019414:	3204      	adds	r2, #4
 8019416:	9235      	str	r2, [sp, #212]	; 0xd4
 8019418:	012a      	lsls	r2, r5, #4
 801941a:	9243      	str	r2, [sp, #268]	; 0x10c
 801941c:	9a52      	ldr	r2, [sp, #328]	; 0x148
 801941e:	fb02 f303 	mul.w	r3, r2, r3
 8019422:	932d      	str	r3, [sp, #180]	; 0xb4
 8019424:	eb08 0306 	add.w	r3, r8, r6
 8019428:	9322      	str	r3, [sp, #136]	; 0x88
 801942a:	0063      	lsls	r3, r4, #1
 801942c:	9320      	str	r3, [sp, #128]	; 0x80
 801942e:	eb04 0348 	add.w	r3, r4, r8, lsl #1
 8019432:	931f      	str	r3, [sp, #124]	; 0x7c
 8019434:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8019436:	9334      	str	r3, [sp, #208]	; 0xd0
 8019438:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 801943a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801943e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019442:	932a      	str	r3, [sp, #168]	; 0xa8
 8019444:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8019446:	9229      	str	r2, [sp, #164]	; 0xa4
 8019448:	f853 2c04 	ldr.w	r2, [r3, #-4]
 801944c:	681b      	ldr	r3, [r3, #0]
 801944e:	9311      	str	r3, [sp, #68]	; 0x44
 8019450:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 8019452:	9210      	str	r2, [sp, #64]	; 0x40
 8019454:	681b      	ldr	r3, [r3, #0]
 8019456:	9312      	str	r3, [sp, #72]	; 0x48
 8019458:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 801945a:	2b00      	cmp	r3, #0
 801945c:	f000 8616 	beq.w	801a08c <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xdcc>
 8019460:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 8019462:	2b00      	cmp	r3, #0
 8019464:	f040 85d5 	bne.w	801a012 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xd52>
 8019468:	461a      	mov	r2, r3
 801946a:	9835      	ldr	r0, [sp, #212]	; 0xd4
 801946c:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8019470:	440a      	add	r2, r1
 8019472:	920e      	str	r2, [sp, #56]	; 0x38
 8019474:	6802      	ldr	r2, [r0, #0]
 8019476:	4413      	add	r3, r2
 8019478:	930f      	str	r3, [sp, #60]	; 0x3c
 801947a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801947c:	2b00      	cmp	r3, #0
 801947e:	f000 81db 	beq.w	8019838 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x578>
 8019482:	9924      	ldr	r1, [sp, #144]	; 0x90
 8019484:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8019486:	921d      	str	r2, [sp, #116]	; 0x74
 8019488:	1ccb      	adds	r3, r1, #3
 801948a:	18d3      	adds	r3, r2, r3
 801948c:	931c      	str	r3, [sp, #112]	; 0x70
 801948e:	4613      	mov	r3, r2
 8019490:	1c8a      	adds	r2, r1, #2
 8019492:	922c      	str	r2, [sp, #176]	; 0xb0
 8019494:	931a      	str	r3, [sp, #104]	; 0x68
 8019496:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8019498:	9944      	ldr	r1, [sp, #272]	; 0x110
 801949a:	9217      	str	r2, [sp, #92]	; 0x5c
 801949c:	2301      	movs	r3, #1
 801949e:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
 80194a0:	9318      	str	r3, [sp, #96]	; 0x60
 80194a2:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80194a4:	440a      	add	r2, r1
 80194a6:	009b      	lsls	r3, r3, #2
 80194a8:	9214      	str	r2, [sp, #80]	; 0x50
 80194aa:	9326      	str	r3, [sp, #152]	; 0x98
 80194ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	f000 8371 	beq.w	8019b96 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x8d6>
 80194b4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	f000 8464 	beq.w	8019d84 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xac4>
 80194bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80194be:	9325      	str	r3, [sp, #148]	; 0x94
 80194c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80194c2:	9307      	str	r3, [sp, #28]
 80194c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	f340 819a 	ble.w	8019800 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x540>
 80194cc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80194ce:	3302      	adds	r3, #2
 80194d0:	930a      	str	r3, [sp, #40]	; 0x28
 80194d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80194d4:	3302      	adds	r3, #2
 80194d6:	930d      	str	r3, [sp, #52]	; 0x34
 80194d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80194da:	9306      	str	r3, [sp, #24]
 80194dc:	2300      	movs	r3, #0
 80194de:	9308      	str	r3, [sp, #32]
 80194e0:	9b04      	ldr	r3, [sp, #16]
 80194e2:	f8dd c018 	ldr.w	ip, [sp, #24]
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	f340 834e 	ble.w	8019b88 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x8c8>
 80194ec:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80194ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80194f0:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 80194f2:	2100      	movs	r1, #0
 80194f4:	4691      	mov	r9, r2
 80194f6:	9102      	str	r1, [sp, #8]
 80194f8:	4607      	mov	r7, r0
 80194fa:	eb0c 0408 	add.w	r4, ip, r8
 80194fe:	f8dc 1000 	ldr.w	r1, [ip]
 8019502:	9400      	str	r4, [sp, #0]
 8019504:	f8d3 a000 	ldr.w	sl, [r3]
 8019508:	f8d3 e004 	ldr.w	lr, [r3, #4]
 801950c:	689d      	ldr	r5, [r3, #8]
 801950e:	68de      	ldr	r6, [r3, #12]
 8019510:	fa2f f481 	sxtb16	r4, r1
 8019514:	fa2f f191 	sxtb16	r1, r1, ror #8
 8019518:	fb24 220a 	smlad	r2, r4, sl, r2
 801951c:	fb21 220e 	smlad	r2, r1, lr, r2
 8019520:	fb24 0005 	smlad	r0, r4, r5, r0
 8019524:	fb21 0006 	smlad	r0, r1, r6, r0
 8019528:	9900      	ldr	r1, [sp, #0]
 801952a:	f85c 4008 	ldr.w	r4, [ip, r8]
 801952e:	eb01 0b08 	add.w	fp, r1, r8
 8019532:	fa2f f184 	sxtb16	r1, r4
 8019536:	fa2f f494 	sxtb16	r4, r4, ror #8
 801953a:	fb21 990a 	smlad	r9, r1, sl, r9
 801953e:	fb21 7505 	smlad	r5, r1, r5, r7
 8019542:	fb24 990e 	smlad	r9, r4, lr, r9
 8019546:	fb24 5506 	smlad	r5, r4, r6, r5
 801954a:	f8d3 e010 	ldr.w	lr, [r3, #16]
 801954e:	f8d3 a014 	ldr.w	sl, [r3, #20]
 8019552:	699e      	ldr	r6, [r3, #24]
 8019554:	69df      	ldr	r7, [r3, #28]
 8019556:	fb21 220e 	smlad	r2, r1, lr, r2
 801955a:	fb24 220a 	smlad	r2, r4, sl, r2
 801955e:	fb21 0106 	smlad	r1, r1, r6, r0
 8019562:	fb24 1407 	smlad	r4, r4, r7, r1
 8019566:	f85c 1018 	ldr.w	r1, [ip, r8, lsl #1]
 801956a:	fa2f fc81 	sxtb16	ip, r1
 801956e:	44c3      	add	fp, r8
 8019570:	fa2f f191 	sxtb16	r1, r1, ror #8
 8019574:	fb2c 9e0e 	smlad	lr, ip, lr, r9
 8019578:	fb2c 5606 	smlad	r6, ip, r6, r5
 801957c:	fb21 ea0a 	smlad	sl, r1, sl, lr
 8019580:	fb21 6707 	smlad	r7, r1, r7, r6
 8019584:	6a18      	ldr	r0, [r3, #32]
 8019586:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
 801958a:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 801958c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801958e:	fb2c 2200 	smlad	r2, ip, r0, r2
 8019592:	fb21 2209 	smlad	r2, r1, r9, r2
 8019596:	9203      	str	r2, [sp, #12]
 8019598:	fb2c 4406 	smlad	r4, ip, r6, r4
 801959c:	fb21 4105 	smlad	r1, r1, r5, r4
 80195a0:	9c00      	ldr	r4, [sp, #0]
 80195a2:	9a01      	ldr	r2, [sp, #4]
 80195a4:	f854 4018 	ldr.w	r4, [r4, r8, lsl #1]
 80195a8:	fa2f fe84 	sxtb16	lr, r4
 80195ac:	eb0b 0c02 	add.w	ip, fp, r2
 80195b0:	fa2f f494 	sxtb16	r4, r4, ror #8
 80195b4:	fb2e aa00 	smlad	sl, lr, r0, sl
 80195b8:	fb2e 7706 	smlad	r7, lr, r6, r7
 80195bc:	fb24 a909 	smlad	r9, r4, r9, sl
 80195c0:	fb24 7505 	smlad	r5, r4, r5, r7
 80195c4:	eb0c 0408 	add.w	r4, ip, r8
 80195c8:	f85b 0002 	ldr.w	r0, [fp, r2]
 80195cc:	9400      	str	r4, [sp, #0]
 80195ce:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80195d0:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 80195d4:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80195d6:	f8d3 e03c 	ldr.w	lr, [r3, #60]	; 0x3c
 80195da:	fa2f f480 	sxtb16	r4, r0
 80195de:	fa2f f090 	sxtb16	r0, r0, ror #8
 80195e2:	9a03      	ldr	r2, [sp, #12]
 80195e4:	fb24 2206 	smlad	r2, r4, r6, r2
 80195e8:	fb20 220b 	smlad	r2, r0, fp, r2
 80195ec:	fb24 1107 	smlad	r1, r4, r7, r1
 80195f0:	fb20 100e 	smlad	r0, r0, lr, r1
 80195f4:	9900      	ldr	r1, [sp, #0]
 80195f6:	f85c 4008 	ldr.w	r4, [ip, r8]
 80195fa:	eb01 0a08 	add.w	sl, r1, r8
 80195fe:	fa2f f184 	sxtb16	r1, r4
 8019602:	fa2f f494 	sxtb16	r4, r4, ror #8
 8019606:	fb21 9906 	smlad	r9, r1, r6, r9
 801960a:	fb21 5507 	smlad	r5, r1, r7, r5
 801960e:	fb24 990b 	smlad	r9, r4, fp, r9
 8019612:	fb24 550e 	smlad	r5, r4, lr, r5
 8019616:	f8d3 b040 	ldr.w	fp, [r3, #64]	; 0x40
 801961a:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 801961c:	f8d3 e048 	ldr.w	lr, [r3, #72]	; 0x48
 8019620:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8019622:	fb21 220b 	smlad	r2, r1, fp, r2
 8019626:	fb24 2206 	smlad	r2, r4, r6, r2
 801962a:	fb21 010e 	smlad	r1, r1, lr, r0
 801962e:	fb24 1407 	smlad	r4, r4, r7, r1
 8019632:	f85c c018 	ldr.w	ip, [ip, r8, lsl #1]
 8019636:	fa2f f08c 	sxtb16	r0, ip
 801963a:	44c2      	add	sl, r8
 801963c:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 8019640:	fb20 9b0b 	smlad	fp, r0, fp, r9
 8019644:	fb20 5e0e 	smlad	lr, r0, lr, r5
 8019648:	fb2c b606 	smlad	r6, ip, r6, fp
 801964c:	fb2c e507 	smlad	r5, ip, r7, lr
 8019650:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8019652:	f8d3 9054 	ldr.w	r9, [r3, #84]	; 0x54
 8019656:	f8d3 e058 	ldr.w	lr, [r3, #88]	; 0x58
 801965a:	f8d3 b05c 	ldr.w	fp, [r3, #92]	; 0x5c
 801965e:	fb20 2201 	smlad	r2, r0, r1, r2
 8019662:	fb2c 2209 	smlad	r2, ip, r9, r2
 8019666:	fb20 440e 	smlad	r4, r0, lr, r4
 801966a:	fb2c 4c0b 	smlad	ip, ip, fp, r4
 801966e:	9f01      	ldr	r7, [sp, #4]
 8019670:	9800      	ldr	r0, [sp, #0]
 8019672:	eb0a 0407 	add.w	r4, sl, r7
 8019676:	f850 0018 	ldr.w	r0, [r0, r8, lsl #1]
 801967a:	9400      	str	r4, [sp, #0]
 801967c:	fa2f f480 	sxtb16	r4, r0
 8019680:	fa2f f090 	sxtb16	r0, r0, ror #8
 8019684:	fb24 6601 	smlad	r6, r4, r1, r6
 8019688:	fb24 5e0e 	smlad	lr, r4, lr, r5
 801968c:	fb20 6509 	smlad	r5, r0, r9, r6
 8019690:	fb20 ee0b 	smlad	lr, r0, fp, lr
 8019694:	9800      	ldr	r0, [sp, #0]
 8019696:	f85a 1007 	ldr.w	r1, [sl, r7]
 801969a:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 801969c:	f8d3 9064 	ldr.w	r9, [r3, #100]	; 0x64
 80196a0:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 80196a2:	f8d3 a06c 	ldr.w	sl, [r3, #108]	; 0x6c
 80196a6:	4440      	add	r0, r8
 80196a8:	4607      	mov	r7, r0
 80196aa:	fa2f f081 	sxtb16	r0, r1
 80196ae:	fa2f f191 	sxtb16	r1, r1, ror #8
 80196b2:	fb20 2206 	smlad	r2, r0, r6, r2
 80196b6:	fb21 2209 	smlad	r2, r1, r9, r2
 80196ba:	fb20 cc04 	smlad	ip, r0, r4, ip
 80196be:	fb21 c10a 	smlad	r1, r1, sl, ip
 80196c2:	9800      	ldr	r0, [sp, #0]
 80196c4:	eb07 0c08 	add.w	ip, r7, r8
 80196c8:	f850 0008 	ldr.w	r0, [r0, r8]
 80196cc:	fa2f fb80 	sxtb16	fp, r0
 80196d0:	fa2f f090 	sxtb16	r0, r0, ror #8
 80196d4:	fb2b 5606 	smlad	r6, fp, r6, r5
 80196d8:	fb2b ee04 	smlad	lr, fp, r4, lr
 80196dc:	fb20 6909 	smlad	r9, r0, r9, r6
 80196e0:	fb20 ea0a 	smlad	sl, r0, sl, lr
 80196e4:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
 80196e8:	6f5e      	ldr	r6, [r3, #116]	; 0x74
 80196ea:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 80196ec:	6fdd      	ldr	r5, [r3, #124]	; 0x7c
 80196ee:	fb2b 220e 	smlad	r2, fp, lr, r2
 80196f2:	fb20 2206 	smlad	r2, r0, r6, r2
 80196f6:	fb2b 1104 	smlad	r1, fp, r4, r1
 80196fa:	fb20 1105 	smlad	r1, r0, r5, r1
 80196fe:	9800      	ldr	r0, [sp, #0]
 8019700:	44c4      	add	ip, r8
 8019702:	f850 0018 	ldr.w	r0, [r0, r8, lsl #1]
 8019706:	fa2f fb80 	sxtb16	fp, r0
 801970a:	fa2f f090 	sxtb16	r0, r0, ror #8
 801970e:	fb2b 990e 	smlad	r9, fp, lr, r9
 8019712:	fb2b a404 	smlad	r4, fp, r4, sl
 8019716:	fb20 9606 	smlad	r6, r0, r6, r9
 801971a:	fb20 4505 	smlad	r5, r0, r5, r4
 801971e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8019722:	f8d3 9084 	ldr.w	r9, [r3, #132]	; 0x84
 8019726:	f8d3 a088 	ldr.w	sl, [r3, #136]	; 0x88
 801972a:	f8d3 e08c 	ldr.w	lr, [r3, #140]	; 0x8c
 801972e:	3390      	adds	r3, #144	; 0x90
 8019730:	fb2b 2204 	smlad	r2, fp, r4, r2
 8019734:	fb20 2209 	smlad	r2, r0, r9, r2
 8019738:	fb2b 110a 	smlad	r1, fp, sl, r1
 801973c:	fb20 100e 	smlad	r0, r0, lr, r1
 8019740:	9905      	ldr	r1, [sp, #20]
 8019742:	f857 7018 	ldr.w	r7, [r7, r8, lsl #1]
 8019746:	448c      	add	ip, r1
 8019748:	fa2f f187 	sxtb16	r1, r7
 801974c:	fa2f f797 	sxtb16	r7, r7, ror #8
 8019750:	fb21 6404 	smlad	r4, r1, r4, r6
 8019754:	fb21 510a 	smlad	r1, r1, sl, r5
 8019758:	fb27 4909 	smlad	r9, r7, r9, r4
 801975c:	fb27 170e 	smlad	r7, r7, lr, r1
 8019760:	9902      	ldr	r1, [sp, #8]
 8019762:	9c04      	ldr	r4, [sp, #16]
 8019764:	3104      	adds	r1, #4
 8019766:	42a1      	cmp	r1, r4
 8019768:	9102      	str	r1, [sp, #8]
 801976a:	f6ff aec6 	blt.w	80194fa <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x23a>
 801976e:	e9dd 3113 	ldrd	r3, r1, [sp, #76]	; 0x4c
 8019772:	46be      	mov	lr, r7
 8019774:	4598      	cmp	r8, r3
 8019776:	f300 815e 	bgt.w	8019a36 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x776>
 801977a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801977c:	2b00      	cmp	r3, #0
 801977e:	f000 8124 	beq.w	80199ca <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x70a>
 8019782:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8019784:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019786:	9c07      	ldr	r4, [sp, #28]
 8019788:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801978a:	0113      	lsls	r3, r2, #4
 801978c:	f04f 0c00 	mov.w	ip, #0
 8019790:	fb53 c305 	smmla	r3, r3, r5, ip
 8019794:	4133      	asrs	r3, r6
 8019796:	440b      	add	r3, r1
 8019798:	105b      	asrs	r3, r3, #1
 801979a:	4622      	mov	r2, r4
 801979c:	f303 0307 	ssat	r3, #8, r3
 80197a0:	f802 3b02 	strb.w	r3, [r2], #2
 80197a4:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80197a8:	fb53 c305 	smmla	r3, r3, r5, ip
 80197ac:	4133      	asrs	r3, r6
 80197ae:	440b      	add	r3, r1
 80197b0:	105b      	asrs	r3, r3, #1
 80197b2:	f303 0307 	ssat	r3, #8, r3
 80197b6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80197b8:	9f16      	ldr	r7, [sp, #88]	; 0x58
 80197ba:	7063      	strb	r3, [r4, #1]
 80197bc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80197be:	0103      	lsls	r3, r0, #4
 80197c0:	fb53 c305 	smmla	r3, r3, r5, ip
 80197c4:	4133      	asrs	r3, r6
 80197c6:	440b      	add	r3, r1
 80197c8:	4608      	mov	r0, r1
 80197ca:	105b      	asrs	r3, r3, #1
 80197cc:	19e1      	adds	r1, r4, r7
 80197ce:	f303 0307 	ssat	r3, #8, r3
 80197d2:	55e3      	strb	r3, [r4, r7]
 80197d4:	ea4f 130e 	mov.w	r3, lr, lsl #4
 80197d8:	fb53 c305 	smmla	r3, r3, r5, ip
 80197dc:	4133      	asrs	r3, r6
 80197de:	4403      	add	r3, r0
 80197e0:	105b      	asrs	r3, r3, #1
 80197e2:	f303 0307 	ssat	r3, #8, r3
 80197e6:	704b      	strb	r3, [r1, #1]
 80197e8:	9207      	str	r2, [sp, #28]
 80197ea:	9a06      	ldr	r2, [sp, #24]
 80197ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80197ee:	9b08      	ldr	r3, [sp, #32]
 80197f0:	440a      	add	r2, r1
 80197f2:	9206      	str	r2, [sp, #24]
 80197f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80197f6:	3302      	adds	r3, #2
 80197f8:	4293      	cmp	r3, r2
 80197fa:	9308      	str	r3, [sp, #32]
 80197fc:	f6ff ae70 	blt.w	80194e0 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x220>
 8019800:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019802:	2b00      	cmp	r3, #0
 8019804:	f040 81cc 	bne.w	8019ba0 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x8e0>
 8019808:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801980a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801980c:	4413      	add	r3, r2
 801980e:	931d      	str	r3, [sp, #116]	; 0x74
 8019810:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019812:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019814:	4413      	add	r3, r2
 8019816:	931a      	str	r3, [sp, #104]	; 0x68
 8019818:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801981a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801981c:	4413      	add	r3, r2
 801981e:	931c      	str	r3, [sp, #112]	; 0x70
 8019820:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019822:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8019824:	3301      	adds	r3, #1
 8019826:	9318      	str	r3, [sp, #96]	; 0x60
 8019828:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801982a:	4413      	add	r3, r2
 801982c:	9317      	str	r3, [sp, #92]	; 0x5c
 801982e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8019830:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019832:	4293      	cmp	r3, r2
 8019834:	f73f ae3a 	bgt.w	80194ac <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x1ec>
 8019838:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801983a:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 801983c:	4413      	add	r3, r2
 801983e:	9334      	str	r3, [sp, #208]	; 0xd0
 8019840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019842:	2b00      	cmp	r3, #0
 8019844:	f000 83e1 	beq.w	801a00a <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xd4a>
 8019848:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801984a:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801984c:	4413      	add	r3, r2
 801984e:	9331      	str	r3, [sp, #196]	; 0xc4
 8019850:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 8019852:	b11b      	cbz	r3, 801985c <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x59c>
 8019854:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 8019856:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8019858:	4413      	add	r3, r2
 801985a:	935b      	str	r3, [sp, #364]	; 0x16c
 801985c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801985e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8019860:	3208      	adds	r2, #8
 8019862:	9236      	str	r2, [sp, #216]	; 0xd8
 8019864:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8019866:	3208      	adds	r2, #8
 8019868:	9235      	str	r2, [sp, #212]	; 0xd4
 801986a:	9a40      	ldr	r2, [sp, #256]	; 0x100
 801986c:	3304      	adds	r3, #4
 801986e:	429a      	cmp	r2, r3
 8019870:	9337      	str	r3, [sp, #220]	; 0xdc
 8019872:	f47f ade1 	bne.w	8019438 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x178>
 8019876:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8019878:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 801987a:	fb02 3203 	mla	r2, r2, r3, r3
 801987e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8019880:	4413      	add	r3, r2
 8019882:	932f      	str	r3, [sp, #188]	; 0xbc
 8019884:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8019886:	f013 0301 	ands.w	r3, r3, #1
 801988a:	9305      	str	r3, [sp, #20]
 801988c:	f000 8099 	beq.w	80199c2 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x702>
 8019890:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019892:	2b00      	cmp	r3, #0
 8019894:	f000 8095 	beq.w	80199c2 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x702>
 8019898:	9b58      	ldr	r3, [sp, #352]	; 0x160
 801989a:	9951      	ldr	r1, [sp, #324]	; 0x144
 801989c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801989e:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 80198a2:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 80198a6:	9e57      	ldr	r6, [sp, #348]	; 0x15c
 80198a8:	9209      	str	r2, [sp, #36]	; 0x24
 80198aa:	f003 0302 	and.w	r3, r3, #2
 80198ae:	9301      	str	r3, [sp, #4]
 80198b0:	9b52      	ldr	r3, [sp, #328]	; 0x148
 80198b2:	9208      	str	r2, [sp, #32]
 80198b4:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
 80198b8:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 80198ba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80198be:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 80198c2:	9302      	str	r3, [sp, #8]
 80198c4:	9b50      	ldr	r3, [sp, #320]	; 0x140
 80198c6:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 80198ca:	9b52      	ldr	r3, [sp, #328]	; 0x148
 80198cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80198d0:	3b01      	subs	r3, #1
 80198d2:	eb01 0a43 	add.w	sl, r1, r3, lsl #1
 80198d6:	9924      	ldr	r1, [sp, #144]	; 0x90
 80198d8:	1ccb      	adds	r3, r1, #3
 80198da:	18d3      	adds	r3, r2, r3
 80198dc:	9307      	str	r3, [sp, #28]
 80198de:	9b52      	ldr	r3, [sp, #328]	; 0x148
 80198e0:	fb03 f301 	mul.w	r3, r3, r1
 80198e4:	930d      	str	r3, [sp, #52]	; 0x34
 80198e6:	e9cd ba03 	strd	fp, sl, [sp, #12]
 80198ea:	1c8b      	adds	r3, r1, #2
 80198ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80198ee:	2300      	movs	r3, #0
 80198f0:	9306      	str	r3, [sp, #24]
 80198f2:	9b01      	ldr	r3, [sp, #4]
 80198f4:	2b00      	cmp	r3, #0
 80198f6:	f000 83d6 	beq.w	801a0a6 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xde6>
 80198fa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	f000 83d7 	beq.w	801a0b0 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xdf0>
 8019902:	9b05      	ldr	r3, [sp, #20]
 8019904:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8019908:	930a      	str	r3, [sp, #40]	; 0x28
 801990a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801990c:	2b00      	cmp	r3, #0
 801990e:	d042      	beq.n	8019996 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x6d6>
 8019910:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8019912:	9a06      	ldr	r2, [sp, #24]
 8019914:	f04f 0b00 	mov.w	fp, #0
 8019918:	189f      	adds	r7, r3, r2
 801991a:	9b02      	ldr	r3, [sp, #8]
 801991c:	f8dd e0bc 	ldr.w	lr, [sp, #188]	; 0xbc
 8019920:	6819      	ldr	r1, [r3, #0]
 8019922:	eb07 0508 	add.w	r5, r7, r8
 8019926:	9500      	str	r5, [sp, #0]
 8019928:	f04f 0c03 	mov.w	ip, #3
 801992c:	f1b8 0f00 	cmp.w	r8, #0
 8019930:	463a      	mov	r2, r7
 8019932:	dd0b      	ble.n	801994c <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x68c>
 8019934:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8019938:	f912 3b01 	ldrsb.w	r3, [r2], #1
 801993c:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 8019940:	1b9b      	subs	r3, r3, r6
 8019942:	42aa      	cmp	r2, r5
 8019944:	fb04 1103 	mla	r1, r4, r3, r1
 8019948:	d1f6      	bne.n	8019938 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x678>
 801994a:	44c6      	add	lr, r8
 801994c:	f1bc 0c01 	subs.w	ip, ip, #1
 8019950:	444f      	add	r7, r9
 8019952:	444d      	add	r5, r9
 8019954:	d1ea      	bne.n	801992c <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x66c>
 8019956:	9b04      	ldr	r3, [sp, #16]
 8019958:	9a03      	ldr	r2, [sp, #12]
 801995a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801995e:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 8019960:	6812      	ldr	r2, [r2, #0]
 8019962:	681b      	ldr	r3, [r3, #0]
 8019964:	3002      	adds	r0, #2
 8019966:	0109      	lsls	r1, r1, #4
 8019968:	fb51 c102 	smmla	r1, r1, r2, ip
 801996c:	4101      	asrs	r1, r0
 801996e:	440b      	add	r3, r1
 8019970:	105b      	asrs	r3, r3, #1
 8019972:	f303 0307 	ssat	r3, #8, r3
 8019976:	f88a 3000 	strb.w	r3, [sl]
 801997a:	9b01      	ldr	r3, [sp, #4]
 801997c:	2b00      	cmp	r3, #0
 801997e:	f000 838f 	beq.w	801a0a0 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xde0>
 8019982:	f10a 0a01 	add.w	sl, sl, #1
 8019986:	9b00      	ldr	r3, [sp, #0]
 8019988:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801998a:	1a9f      	subs	r7, r3, r2
 801998c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801998e:	f10b 0b01 	add.w	fp, fp, #1
 8019992:	455b      	cmp	r3, fp
 8019994:	d1c1      	bne.n	801991a <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x65a>
 8019996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019998:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801999a:	4413      	add	r3, r2
 801999c:	9309      	str	r3, [sp, #36]	; 0x24
 801999e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80199a0:	9b08      	ldr	r3, [sp, #32]
 80199a2:	4413      	add	r3, r2
 80199a4:	9308      	str	r3, [sp, #32]
 80199a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80199a8:	9b07      	ldr	r3, [sp, #28]
 80199aa:	4413      	add	r3, r2
 80199ac:	9307      	str	r3, [sp, #28]
 80199ae:	9b05      	ldr	r3, [sp, #20]
 80199b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80199b2:	3301      	adds	r3, #1
 80199b4:	9305      	str	r3, [sp, #20]
 80199b6:	9b06      	ldr	r3, [sp, #24]
 80199b8:	444b      	add	r3, r9
 80199ba:	9306      	str	r3, [sp, #24]
 80199bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80199be:	4293      	cmp	r3, r2
 80199c0:	dc97      	bgt.n	80198f2 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x632>
 80199c2:	2000      	movs	r0, #0
 80199c4:	b047      	add	sp, #284	; 0x11c
 80199c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199ca:	461d      	mov	r5, r3
 80199cc:	0113      	lsls	r3, r2, #4
 80199ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80199d0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80199d2:	9c07      	ldr	r4, [sp, #28]
 80199d4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80199d6:	9952      	ldr	r1, [sp, #328]	; 0x148
 80199d8:	fb53 5307 	smmla	r3, r3, r7, r5
 80199dc:	4113      	asrs	r3, r2
 80199de:	9a52      	ldr	r2, [sp, #328]	; 0x148
 80199e0:	4433      	add	r3, r6
 80199e2:	105b      	asrs	r3, r3, #1
 80199e4:	1861      	adds	r1, r4, r1
 80199e6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80199ea:	f303 0307 	ssat	r3, #8, r3
 80199ee:	7023      	strb	r3, [r4, #0]
 80199f0:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80199f4:	fb53 5307 	smmla	r3, r3, r7, r5
 80199f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80199fa:	413b      	asrs	r3, r7
 80199fc:	4433      	add	r3, r6
 80199fe:	105b      	asrs	r3, r3, #1
 8019a00:	f303 0307 	ssat	r3, #8, r3
 8019a04:	9f52      	ldr	r7, [sp, #328]	; 0x148
 8019a06:	55e3      	strb	r3, [r4, r7]
 8019a08:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8019a0a:	0103      	lsls	r3, r0, #4
 8019a0c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019a0e:	fb53 5300 	smmla	r3, r3, r0, r5
 8019a12:	413b      	asrs	r3, r7
 8019a14:	4433      	add	r3, r6
 8019a16:	105b      	asrs	r3, r3, #1
 8019a18:	f303 0307 	ssat	r3, #8, r3
 8019a1c:	7063      	strb	r3, [r4, #1]
 8019a1e:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8019a22:	fb53 5300 	smmla	r3, r3, r0, r5
 8019a26:	413b      	asrs	r3, r7
 8019a28:	4433      	add	r3, r6
 8019a2a:	105b      	asrs	r3, r3, #1
 8019a2c:	f303 0307 	ssat	r3, #8, r3
 8019a30:	704b      	strb	r3, [r1, #1]
 8019a32:	9207      	str	r2, [sp, #28]
 8019a34:	e6d9      	b.n	80197ea <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x52a>
 8019a36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	f43f ae9e 	beq.w	801977a <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x4ba>
 8019a3e:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8019a40:	190d      	adds	r5, r1, r4
 8019a42:	9c01      	ldr	r4, [sp, #4]
 8019a44:	f101 0324 	add.w	r3, r1, #36	; 0x24
 8019a48:	4677      	mov	r7, lr
 8019a4a:	f91c 6008 	ldrsb.w	r6, [ip, r8]
 8019a4e:	f933 bc24 	ldrsh.w	fp, [r3, #-36]
 8019a52:	f933 ac22 	ldrsh.w	sl, [r3, #-34]
 8019a56:	f99c 1000 	ldrsb.w	r1, [ip]
 8019a5a:	fb1b 9906 	smlabb	r9, fp, r6, r9
 8019a5e:	fb1b 2201 	smlabb	r2, fp, r1, r2
 8019a62:	f933 bc20 	ldrsh.w	fp, [r3, #-32]
 8019a66:	fb1a 0101 	smlabb	r1, sl, r1, r0
 8019a6a:	f91c 0018 	ldrsb.w	r0, [ip, r8, lsl #1]
 8019a6e:	fb1a 7706 	smlabb	r7, sl, r6, r7
 8019a72:	fb1b 2206 	smlabb	r2, fp, r6, r2
 8019a76:	fb1b 9900 	smlabb	r9, fp, r0, r9
 8019a7a:	eb0c 0a08 	add.w	sl, ip, r8
 8019a7e:	f933 bc1e 	ldrsh.w	fp, [r3, #-30]
 8019a82:	f91a a018 	ldrsb.w	sl, [sl, r8, lsl #1]
 8019a86:	fb1b 1106 	smlabb	r1, fp, r6, r1
 8019a8a:	fb1b 7700 	smlabb	r7, fp, r0, r7
 8019a8e:	eb0c 0e48 	add.w	lr, ip, r8, lsl #1
 8019a92:	f933 bc1c 	ldrsh.w	fp, [r3, #-28]
 8019a96:	44c6      	add	lr, r8
 8019a98:	eb0e 0c04 	add.w	ip, lr, r4
 8019a9c:	fb1b 2200 	smlabb	r2, fp, r0, r2
 8019aa0:	fb1b 990a 	smlabb	r9, fp, sl, r9
 8019aa4:	f933 bc1a 	ldrsh.w	fp, [r3, #-26]
 8019aa8:	f91c 6008 	ldrsb.w	r6, [ip, r8]
 8019aac:	f91e e004 	ldrsb.w	lr, [lr, r4]
 8019ab0:	fb1b 1000 	smlabb	r0, fp, r0, r1
 8019ab4:	fb1b 770a 	smlabb	r7, fp, sl, r7
 8019ab8:	f933 bc18 	ldrsh.w	fp, [r3, #-24]
 8019abc:	eb0c 0a48 	add.w	sl, ip, r8, lsl #1
 8019ac0:	44c2      	add	sl, r8
 8019ac2:	fb1b 220e 	smlabb	r2, fp, lr, r2
 8019ac6:	fb1b 9906 	smlabb	r9, fp, r6, r9
 8019aca:	eb0c 0108 	add.w	r1, ip, r8
 8019ace:	f933 bc16 	ldrsh.w	fp, [r3, #-22]
 8019ad2:	f91c c018 	ldrsb.w	ip, [ip, r8, lsl #1]
 8019ad6:	fb1b 0e0e 	smlabb	lr, fp, lr, r0
 8019ada:	fb1b 7706 	smlabb	r7, fp, r6, r7
 8019ade:	f91a 0004 	ldrsb.w	r0, [sl, r4]
 8019ae2:	f911 b018 	ldrsb.w	fp, [r1, r8, lsl #1]
 8019ae6:	eb0a 0104 	add.w	r1, sl, r4
 8019aea:	f933 ac14 	ldrsh.w	sl, [r3, #-20]
 8019aee:	fb1a 2206 	smlabb	r2, sl, r6, r2
 8019af2:	fb1a 990c 	smlabb	r9, sl, ip, r9
 8019af6:	f933 ac12 	ldrsh.w	sl, [r3, #-18]
 8019afa:	fb1a ee06 	smlabb	lr, sl, r6, lr
 8019afe:	fb1a 770c 	smlabb	r7, sl, ip, r7
 8019b02:	f933 6c10 	ldrsh.w	r6, [r3, #-16]
 8019b06:	f933 ac0e 	ldrsh.w	sl, [r3, #-14]
 8019b0a:	fb16 220c 	smlabb	r2, r6, ip, r2
 8019b0e:	fb1a ee0c 	smlabb	lr, sl, ip, lr
 8019b12:	fb16 990b 	smlabb	r9, r6, fp, r9
 8019b16:	fb1a 770b 	smlabb	r7, sl, fp, r7
 8019b1a:	f933 6c0c 	ldrsh.w	r6, [r3, #-12]
 8019b1e:	f911 a008 	ldrsb.w	sl, [r1, r8]
 8019b22:	fb16 2200 	smlabb	r2, r6, r0, r2
 8019b26:	fb16 990a 	smlabb	r9, r6, sl, r9
 8019b2a:	f933 6c0a 	ldrsh.w	r6, [r3, #-10]
 8019b2e:	fb16 ee00 	smlabb	lr, r6, r0, lr
 8019b32:	eb01 0008 	add.w	r0, r1, r8
 8019b36:	fb16 770a 	smlabb	r7, r6, sl, r7
 8019b3a:	eb01 0c48 	add.w	ip, r1, r8, lsl #1
 8019b3e:	f910 6018 	ldrsb.w	r6, [r0, r8, lsl #1]
 8019b42:	f911 0018 	ldrsb.w	r0, [r1, r8, lsl #1]
 8019b46:	9915      	ldr	r1, [sp, #84]	; 0x54
 8019b48:	44c4      	add	ip, r8
 8019b4a:	448c      	add	ip, r1
 8019b4c:	f933 1c08 	ldrsh.w	r1, [r3, #-8]
 8019b50:	fb11 9900 	smlabb	r9, r1, r0, r9
 8019b54:	fb11 220a 	smlabb	r2, r1, sl, r2
 8019b58:	f933 1c06 	ldrsh.w	r1, [r3, #-6]
 8019b5c:	fb11 7700 	smlabb	r7, r1, r0, r7
 8019b60:	fb11 ee0a 	smlabb	lr, r1, sl, lr
 8019b64:	f933 1c04 	ldrsh.w	r1, [r3, #-4]
 8019b68:	3324      	adds	r3, #36	; 0x24
 8019b6a:	fb11 2200 	smlabb	r2, r1, r0, r2
 8019b6e:	fb11 9906 	smlabb	r9, r1, r6, r9
 8019b72:	f933 1c26 	ldrsh.w	r1, [r3, #-38]
 8019b76:	429d      	cmp	r5, r3
 8019b78:	fb11 e000 	smlabb	r0, r1, r0, lr
 8019b7c:	fb11 7706 	smlabb	r7, r1, r6, r7
 8019b80:	f47f af63 	bne.w	8019a4a <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x78a>
 8019b84:	46be      	mov	lr, r7
 8019b86:	e5f8      	b.n	801977a <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x4ba>
 8019b88:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019b8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019b8c:	995b      	ldr	r1, [sp, #364]	; 0x16c
 8019b8e:	4686      	mov	lr, r0
 8019b90:	4691      	mov	r9, r2
 8019b92:	2300      	movs	r3, #0
 8019b94:	e5ee      	b.n	8019774 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x4b4>
 8019b96:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019b98:	9307      	str	r3, [sp, #28]
 8019b9a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019b9c:	9325      	str	r3, [sp, #148]	; 0x94
 8019b9e:	e491      	b.n	80194c4 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x204>
 8019ba0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019ba2:	2b01      	cmp	r3, #1
 8019ba4:	f000 8110 	beq.w	8019dc8 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xb08>
 8019ba8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8019baa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019bac:	1a9b      	subs	r3, r3, r2
 8019bae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019bb0:	4413      	add	r3, r2
 8019bb2:	9300      	str	r3, [sp, #0]
 8019bb4:	9b04      	ldr	r3, [sp, #16]
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	f340 810c 	ble.w	8019dd4 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xb14>
 8019bbc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019bbe:	9800      	ldr	r0, [sp, #0]
 8019bc0:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8019bc4:	e9dd 650e 	ldrd	r6, r5, [sp, #56]	; 0x38
 8019bc8:	eb00 0c03 	add.w	ip, r0, r3
 8019bcc:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 8019bce:	f04f 0900 	mov.w	r9, #0
 8019bd2:	6802      	ldr	r2, [r0, #0]
 8019bd4:	fa2f f182 	sxtb16	r1, r2
 8019bd8:	fa2f f292 	sxtb16	r2, r2, ror #8
 8019bdc:	681c      	ldr	r4, [r3, #0]
 8019bde:	fb21 6604 	smlad	r6, r1, r4, r6
 8019be2:	685c      	ldr	r4, [r3, #4]
 8019be4:	fb22 6604 	smlad	r6, r2, r4, r6
 8019be8:	689c      	ldr	r4, [r3, #8]
 8019bea:	fb21 5504 	smlad	r5, r1, r4, r5
 8019bee:	68d9      	ldr	r1, [r3, #12]
 8019bf0:	fb22 5501 	smlad	r5, r2, r1, r5
 8019bf4:	f850 2008 	ldr.w	r2, [r0, r8]
 8019bf8:	fa2f f182 	sxtb16	r1, r2
 8019bfc:	fa2f f292 	sxtb16	r2, r2, ror #8
 8019c00:	691c      	ldr	r4, [r3, #16]
 8019c02:	fb21 6604 	smlad	r6, r1, r4, r6
 8019c06:	695c      	ldr	r4, [r3, #20]
 8019c08:	fb22 6404 	smlad	r4, r2, r4, r6
 8019c0c:	699e      	ldr	r6, [r3, #24]
 8019c0e:	fb21 5506 	smlad	r5, r1, r6, r5
 8019c12:	69d9      	ldr	r1, [r3, #28]
 8019c14:	fb22 5201 	smlad	r2, r2, r1, r5
 8019c18:	f850 100b 	ldr.w	r1, [r0, fp]
 8019c1c:	fa2f f581 	sxtb16	r5, r1
 8019c20:	fa2f f191 	sxtb16	r1, r1, ror #8
 8019c24:	6a1e      	ldr	r6, [r3, #32]
 8019c26:	fb25 4406 	smlad	r4, r5, r6, r4
 8019c2a:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8019c2c:	fb21 4406 	smlad	r4, r1, r6, r4
 8019c30:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 8019c32:	fb25 2206 	smlad	r2, r5, r6, r2
 8019c36:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8019c38:	fb21 2105 	smlad	r1, r1, r5, r2
 8019c3c:	f8dc 2000 	ldr.w	r2, [ip]
 8019c40:	fa2f f582 	sxtb16	r5, r2
 8019c44:	fa2f f292 	sxtb16	r2, r2, ror #8
 8019c48:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8019c4a:	fb25 4406 	smlad	r4, r5, r6, r4
 8019c4e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8019c50:	fb22 4406 	smlad	r4, r2, r6, r4
 8019c54:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8019c56:	fb25 1106 	smlad	r1, r5, r6, r1
 8019c5a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8019c5c:	fb22 1205 	smlad	r2, r2, r5, r1
 8019c60:	9922      	ldr	r1, [sp, #136]	; 0x88
 8019c62:	5809      	ldr	r1, [r1, r0]
 8019c64:	fa2f f581 	sxtb16	r5, r1
 8019c68:	fa2f f191 	sxtb16	r1, r1, ror #8
 8019c6c:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 8019c6e:	fb25 4406 	smlad	r4, r5, r6, r4
 8019c72:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 8019c74:	fb21 4406 	smlad	r4, r1, r6, r4
 8019c78:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 8019c7a:	fb25 2206 	smlad	r2, r5, r6, r2
 8019c7e:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8019c80:	fb21 2105 	smlad	r1, r1, r5, r2
 8019c84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019c86:	5812      	ldr	r2, [r2, r0]
 8019c88:	fa2f f582 	sxtb16	r5, r2
 8019c8c:	fa2f f292 	sxtb16	r2, r2, ror #8
 8019c90:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 8019c92:	fb25 4406 	smlad	r4, r5, r6, r4
 8019c96:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 8019c98:	fb22 4406 	smlad	r4, r2, r6, r4
 8019c9c:	6d9e      	ldr	r6, [r3, #88]	; 0x58
 8019c9e:	fb25 1106 	smlad	r1, r5, r6, r1
 8019ca2:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8019ca4:	fb22 1205 	smlad	r2, r2, r5, r1
 8019ca8:	9920      	ldr	r1, [sp, #128]	; 0x80
 8019caa:	5809      	ldr	r1, [r1, r0]
 8019cac:	fa2f f581 	sxtb16	r5, r1
 8019cb0:	fa2f f191 	sxtb16	r1, r1, ror #8
 8019cb4:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 8019cb6:	fb25 4406 	smlad	r4, r5, r6, r4
 8019cba:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8019cbc:	fb21 4407 	smlad	r4, r1, r7, r4
 8019cc0:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 8019cc2:	fb25 2206 	smlad	r2, r5, r6, r2
 8019cc6:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8019cc8:	fb21 2105 	smlad	r1, r1, r5, r2
 8019ccc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8019cce:	f852 200c 	ldr.w	r2, [r2, ip]
 8019cd2:	fa2f f582 	sxtb16	r5, r2
 8019cd6:	fa2f f292 	sxtb16	r2, r2, ror #8
 8019cda:	6f1f      	ldr	r7, [r3, #112]	; 0x70
 8019cdc:	fb25 4407 	smlad	r4, r5, r7, r4
 8019ce0:	6f5f      	ldr	r7, [r3, #116]	; 0x74
 8019ce2:	fb22 4707 	smlad	r7, r2, r7, r4
 8019ce6:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8019ce8:	fb25 1104 	smlad	r1, r5, r4, r1
 8019cec:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8019cee:	fb22 1204 	smlad	r2, r2, r4, r1
 8019cf2:	991e      	ldr	r1, [sp, #120]	; 0x78
 8019cf4:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
 8019cf8:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 8019cfc:	f8d3 a088 	ldr.w	sl, [r3, #136]	; 0x88
 8019d00:	f8d3 e08c 	ldr.w	lr, [r3, #140]	; 0x8c
 8019d04:	4408      	add	r0, r1
 8019d06:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8019d08:	3390      	adds	r3, #144	; 0x90
 8019d0a:	f851 400c 	ldr.w	r4, [r1, ip]
 8019d0e:	fa2f f184 	sxtb16	r1, r4
 8019d12:	fa2f f494 	sxtb16	r4, r4, ror #8
 8019d16:	fb21 7606 	smlad	r6, r1, r6, r7
 8019d1a:	fb24 6605 	smlad	r6, r4, r5, r6
 8019d1e:	fb21 220a 	smlad	r2, r1, sl, r2
 8019d22:	fb24 250e 	smlad	r5, r4, lr, r2
 8019d26:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8019d28:	4494      	add	ip, r2
 8019d2a:	9a04      	ldr	r2, [sp, #16]
 8019d2c:	f109 0904 	add.w	r9, r9, #4
 8019d30:	4591      	cmp	r9, r2
 8019d32:	f6ff af4e 	blt.w	8019bd2 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x912>
 8019d36:	9b00      	ldr	r3, [sp, #0]
 8019d38:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8019d3a:	4413      	add	r3, r2
 8019d3c:	9300      	str	r3, [sp, #0]
 8019d3e:	e9dd 2313 	ldrd	r2, r3, [sp, #76]	; 0x4c
 8019d42:	4590      	cmp	r8, r2
 8019d44:	dc4c      	bgt.n	8019de0 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xb20>
 8019d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d48:	b313      	cbz	r3, 8019d90 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xad0>
 8019d4a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019d4c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019d4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019d50:	3202      	adds	r2, #2
 8019d52:	0136      	lsls	r6, r6, #4
 8019d54:	2400      	movs	r4, #0
 8019d56:	fb56 4303 	smmla	r3, r6, r3, r4
 8019d5a:	4113      	asrs	r3, r2
 8019d5c:	440b      	add	r3, r1
 8019d5e:	105b      	asrs	r3, r3, #1
 8019d60:	f303 0307 	ssat	r3, #8, r3
 8019d64:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8019d66:	9807      	ldr	r0, [sp, #28]
 8019d68:	3202      	adds	r2, #2
 8019d6a:	7003      	strb	r3, [r0, #0]
 8019d6c:	012d      	lsls	r5, r5, #4
 8019d6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019d70:	fb55 4303 	smmla	r3, r5, r3, r4
 8019d74:	4113      	asrs	r3, r2
 8019d76:	440b      	add	r3, r1
 8019d78:	105b      	asrs	r3, r3, #1
 8019d7a:	f303 0307 	ssat	r3, #8, r3
 8019d7e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019d80:	5483      	strb	r3, [r0, r2]
 8019d82:	e541      	b.n	8019808 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x548>
 8019d84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019d86:	9307      	str	r3, [sp, #28]
 8019d88:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019d8a:	9325      	str	r3, [sp, #148]	; 0x94
 8019d8c:	f7ff bb9a 	b.w	80194c4 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x204>
 8019d90:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019d92:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019d94:	3202      	adds	r2, #2
 8019d96:	4619      	mov	r1, r3
 8019d98:	0136      	lsls	r6, r6, #4
 8019d9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019d9c:	fb56 1303 	smmla	r3, r6, r3, r1
 8019da0:	4113      	asrs	r3, r2
 8019da2:	4403      	add	r3, r0
 8019da4:	105b      	asrs	r3, r3, #1
 8019da6:	f303 0307 	ssat	r3, #8, r3
 8019daa:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8019dac:	9c07      	ldr	r4, [sp, #28]
 8019dae:	3202      	adds	r2, #2
 8019db0:	7023      	strb	r3, [r4, #0]
 8019db2:	012d      	lsls	r5, r5, #4
 8019db4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019db6:	fb55 1303 	smmla	r3, r5, r3, r1
 8019dba:	4113      	asrs	r3, r2
 8019dbc:	4403      	add	r3, r0
 8019dbe:	105b      	asrs	r3, r3, #1
 8019dc0:	f303 0307 	ssat	r3, #8, r3
 8019dc4:	7063      	strb	r3, [r4, #1]
 8019dc6:	e51f      	b.n	8019808 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x548>
 8019dc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019dca:	9300      	str	r3, [sp, #0]
 8019dcc:	9b04      	ldr	r3, [sp, #16]
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	f73f aef4 	bgt.w	8019bbc <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x8fc>
 8019dd4:	2200      	movs	r2, #0
 8019dd6:	4590      	cmp	r8, r2
 8019dd8:	e9dd 650e 	ldrd	r6, r5, [sp, #56]	; 0x38
 8019ddc:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 8019dde:	ddb2      	ble.n	8019d46 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xa86>
 8019de0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8019de2:	2a00      	cmp	r2, #0
 8019de4:	d0af      	beq.n	8019d46 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xa86>
 8019de6:	9800      	ldr	r0, [sp, #0]
 8019de8:	8819      	ldrh	r1, [r3, #0]
 8019dea:	f990 2000 	ldrsb.w	r2, [r0]
 8019dee:	fb11 6602 	smlabb	r6, r1, r2, r6
 8019df2:	8859      	ldrh	r1, [r3, #2]
 8019df4:	fb11 5c02 	smlabb	ip, r1, r2, r5
 8019df8:	f910 1008 	ldrsb.w	r1, [r0, r8]
 8019dfc:	f910 5018 	ldrsb.w	r5, [r0, r8, lsl #1]
 8019e00:	eb00 0248 	add.w	r2, r0, r8, lsl #1
 8019e04:	8898      	ldrh	r0, [r3, #4]
 8019e06:	fb10 6701 	smlabb	r7, r0, r1, r6
 8019e0a:	88d8      	ldrh	r0, [r3, #6]
 8019e0c:	fb10 c001 	smlabb	r0, r0, r1, ip
 8019e10:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8019e12:	1854      	adds	r4, r2, r1
 8019e14:	5656      	ldrsb	r6, [r2, r1]
 8019e16:	895a      	ldrh	r2, [r3, #10]
 8019e18:	8919      	ldrh	r1, [r3, #8]
 8019e1a:	fb12 0205 	smlabb	r2, r2, r5, r0
 8019e1e:	8998      	ldrh	r0, [r3, #12]
 8019e20:	fb11 7105 	smlabb	r1, r1, r5, r7
 8019e24:	fb10 1706 	smlabb	r7, r0, r6, r1
 8019e28:	89d9      	ldrh	r1, [r3, #14]
 8019e2a:	8a18      	ldrh	r0, [r3, #16]
 8019e2c:	f914 5018 	ldrsb.w	r5, [r4, r8, lsl #1]
 8019e30:	fb11 2606 	smlabb	r6, r1, r6, r2
 8019e34:	f914 1008 	ldrsb.w	r1, [r4, r8]
 8019e38:	fb10 7701 	smlabb	r7, r0, r1, r7
 8019e3c:	8a58      	ldrh	r0, [r3, #18]
 8019e3e:	eb04 0248 	add.w	r2, r4, r8, lsl #1
 8019e42:	fb10 6001 	smlabb	r0, r0, r1, r6
 8019e46:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8019e48:	1854      	adds	r4, r2, r1
 8019e4a:	5656      	ldrsb	r6, [r2, r1]
 8019e4c:	8ada      	ldrh	r2, [r3, #22]
 8019e4e:	8a99      	ldrh	r1, [r3, #20]
 8019e50:	fb12 0205 	smlabb	r2, r2, r5, r0
 8019e54:	8b18      	ldrh	r0, [r3, #24]
 8019e56:	fb11 7105 	smlabb	r1, r1, r5, r7
 8019e5a:	fb10 1006 	smlabb	r0, r0, r6, r1
 8019e5e:	8b59      	ldrh	r1, [r3, #26]
 8019e60:	8c5d      	ldrh	r5, [r3, #34]	; 0x22
 8019e62:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8019e64:	fb11 2606 	smlabb	r6, r1, r6, r2
 8019e68:	f914 2008 	ldrsb.w	r2, [r4, r8]
 8019e6c:	8b99      	ldrh	r1, [r3, #28]
 8019e6e:	fb11 0002 	smlabb	r0, r1, r2, r0
 8019e72:	8bd9      	ldrh	r1, [r3, #30]
 8019e74:	fb11 6102 	smlabb	r1, r1, r2, r6
 8019e78:	f914 2018 	ldrsb.w	r2, [r4, r8, lsl #1]
 8019e7c:	8c1e      	ldrh	r6, [r3, #32]
 8019e7e:	fb15 1502 	smlabb	r5, r5, r2, r1
 8019e82:	fb16 0602 	smlabb	r6, r6, r2, r0
 8019e86:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8019e88:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8019e8c:	2f01      	cmp	r7, #1
 8019e8e:	eb04 0002 	add.w	r0, r4, r2
 8019e92:	f43f af58 	beq.w	8019d46 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xa86>
 8019e96:	56a2      	ldrsb	r2, [r4, r2]
 8019e98:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8019e9a:	fb11 6602 	smlabb	r6, r1, r2, r6
 8019e9e:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
 8019ea0:	fb11 5c02 	smlabb	ip, r1, r2, r5
 8019ea4:	f910 1008 	ldrsb.w	r1, [r0, r8]
 8019ea8:	f910 5018 	ldrsb.w	r5, [r0, r8, lsl #1]
 8019eac:	eb00 0248 	add.w	r2, r0, r8, lsl #1
 8019eb0:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 8019eb2:	fb10 6701 	smlabb	r7, r0, r1, r6
 8019eb6:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
 8019eb8:	fb10 c001 	smlabb	r0, r0, r1, ip
 8019ebc:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8019ebe:	1854      	adds	r4, r2, r1
 8019ec0:	5656      	ldrsb	r6, [r2, r1]
 8019ec2:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8019ec4:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8019ec6:	fb12 0205 	smlabb	r2, r2, r5, r0
 8019eca:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 8019ecc:	fb11 7105 	smlabb	r1, r1, r5, r7
 8019ed0:	fb10 1706 	smlabb	r7, r0, r6, r1
 8019ed4:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 8019ed6:	8e98      	ldrh	r0, [r3, #52]	; 0x34
 8019ed8:	f914 5018 	ldrsb.w	r5, [r4, r8, lsl #1]
 8019edc:	fb11 2606 	smlabb	r6, r1, r6, r2
 8019ee0:	f914 1008 	ldrsb.w	r1, [r4, r8]
 8019ee4:	fb10 7701 	smlabb	r7, r0, r1, r7
 8019ee8:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
 8019eea:	eb04 0248 	add.w	r2, r4, r8, lsl #1
 8019eee:	fb10 6001 	smlabb	r0, r0, r1, r6
 8019ef2:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8019ef4:	1854      	adds	r4, r2, r1
 8019ef6:	5656      	ldrsb	r6, [r2, r1]
 8019ef8:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8019efa:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 8019efc:	fb12 0205 	smlabb	r2, r2, r5, r0
 8019f00:	8f98      	ldrh	r0, [r3, #60]	; 0x3c
 8019f02:	fb11 7105 	smlabb	r1, r1, r5, r7
 8019f06:	fb10 1006 	smlabb	r0, r0, r6, r1
 8019f0a:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8019f0c:	f8b3 5046 	ldrh.w	r5, [r3, #70]	; 0x46
 8019f10:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8019f12:	fb11 2606 	smlabb	r6, r1, r6, r2
 8019f16:	f914 2008 	ldrsb.w	r2, [r4, r8]
 8019f1a:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8019f1e:	fb11 0002 	smlabb	r0, r1, r2, r0
 8019f22:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 8019f26:	fb11 6102 	smlabb	r1, r1, r2, r6
 8019f2a:	f914 2018 	ldrsb.w	r2, [r4, r8, lsl #1]
 8019f2e:	f8b3 6044 	ldrh.w	r6, [r3, #68]	; 0x44
 8019f32:	fb15 1502 	smlabb	r5, r5, r2, r1
 8019f36:	fb16 0602 	smlabb	r6, r6, r2, r0
 8019f3a:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8019f3c:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8019f40:	2f03      	cmp	r7, #3
 8019f42:	eb04 0002 	add.w	r0, r4, r2
 8019f46:	f47f aefe 	bne.w	8019d46 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xa86>
 8019f4a:	56a2      	ldrsb	r2, [r4, r2]
 8019f4c:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 8019f50:	fb11 6602 	smlabb	r6, r1, r2, r6
 8019f54:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8019f58:	fb11 5c02 	smlabb	ip, r1, r2, r5
 8019f5c:	f910 1008 	ldrsb.w	r1, [r0, r8]
 8019f60:	f910 5018 	ldrsb.w	r5, [r0, r8, lsl #1]
 8019f64:	eb00 0248 	add.w	r2, r0, r8, lsl #1
 8019f68:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8019f6c:	fb10 6701 	smlabb	r7, r0, r1, r6
 8019f70:	f8b3 004e 	ldrh.w	r0, [r3, #78]	; 0x4e
 8019f74:	fb10 c001 	smlabb	r0, r0, r1, ip
 8019f78:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8019f7a:	1854      	adds	r4, r2, r1
 8019f7c:	5656      	ldrsb	r6, [r2, r1]
 8019f7e:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8019f82:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8019f86:	fb12 0205 	smlabb	r2, r2, r5, r0
 8019f8a:	f8b3 0054 	ldrh.w	r0, [r3, #84]	; 0x54
 8019f8e:	fb11 7105 	smlabb	r1, r1, r5, r7
 8019f92:	fb10 1506 	smlabb	r5, r0, r6, r1
 8019f96:	f8b3 1056 	ldrh.w	r1, [r3, #86]	; 0x56
 8019f9a:	f8b3 0058 	ldrh.w	r0, [r3, #88]	; 0x58
 8019f9e:	fb11 2606 	smlabb	r6, r1, r6, r2
 8019fa2:	f914 1008 	ldrsb.w	r1, [r4, r8]
 8019fa6:	fb10 5701 	smlabb	r7, r0, r1, r5
 8019faa:	f8b3 005a 	ldrh.w	r0, [r3, #90]	; 0x5a
 8019fae:	eb04 0248 	add.w	r2, r4, r8, lsl #1
 8019fb2:	fb10 6001 	smlabb	r0, r0, r1, r6
 8019fb6:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8019fb8:	f914 4018 	ldrsb.w	r4, [r4, r8, lsl #1]
 8019fbc:	5655      	ldrsb	r5, [r2, r1]
 8019fbe:	1856      	adds	r6, r2, r1
 8019fc0:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8019fc4:	f8b3 105c 	ldrh.w	r1, [r3, #92]	; 0x5c
 8019fc8:	f916 c018 	ldrsb.w	ip, [r6, r8, lsl #1]
 8019fcc:	fb12 0204 	smlabb	r2, r2, r4, r0
 8019fd0:	f8b3 0060 	ldrh.w	r0, [r3, #96]	; 0x60
 8019fd4:	fb11 7104 	smlabb	r1, r1, r4, r7
 8019fd8:	fb10 1005 	smlabb	r0, r0, r5, r1
 8019fdc:	f8b3 1062 	ldrh.w	r1, [r3, #98]	; 0x62
 8019fe0:	fb11 2405 	smlabb	r4, r1, r5, r2
 8019fe4:	f916 2008 	ldrsb.w	r2, [r6, r8]
 8019fe8:	f8b3 5066 	ldrh.w	r5, [r3, #102]	; 0x66
 8019fec:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 8019ff0:	f8b3 6068 	ldrh.w	r6, [r3, #104]	; 0x68
 8019ff4:	fb11 0102 	smlabb	r1, r1, r2, r0
 8019ff8:	fb15 4202 	smlabb	r2, r5, r2, r4
 8019ffc:	f8b3 506a 	ldrh.w	r5, [r3, #106]	; 0x6a
 801a000:	fb16 160c 	smlabb	r6, r6, ip, r1
 801a004:	fb15 250c 	smlabb	r5, r5, ip, r2
 801a008:	e69d      	b.n	8019d46 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xa86>
 801a00a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801a00c:	3302      	adds	r3, #2
 801a00e:	9331      	str	r3, [sp, #196]	; 0xc4
 801a010:	e41e      	b.n	8019850 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x590>
 801a012:	9838      	ldr	r0, [sp, #224]	; 0xe0
 801a014:	2800      	cmp	r0, #0
 801a016:	d050      	beq.n	801a0ba <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xdfa>
 801a018:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
 801a01a:	2300      	movs	r3, #0
 801a01c:	f102 0110 	add.w	r1, r2, #16
 801a020:	461a      	mov	r2, r3
 801a022:	f931 4c10 	ldrsh.w	r4, [r1, #-16]
 801a026:	1b12      	subs	r2, r2, r4
 801a028:	f931 4c08 	ldrsh.w	r4, [r1, #-8]
 801a02c:	1b1b      	subs	r3, r3, r4
 801a02e:	f931 4c0e 	ldrsh.w	r4, [r1, #-14]
 801a032:	1b12      	subs	r2, r2, r4
 801a034:	f931 4c06 	ldrsh.w	r4, [r1, #-6]
 801a038:	1b1b      	subs	r3, r3, r4
 801a03a:	f931 4c0c 	ldrsh.w	r4, [r1, #-12]
 801a03e:	1b12      	subs	r2, r2, r4
 801a040:	f931 4c04 	ldrsh.w	r4, [r1, #-4]
 801a044:	1b1b      	subs	r3, r3, r4
 801a046:	f931 4c0a 	ldrsh.w	r4, [r1, #-10]
 801a04a:	1b12      	subs	r2, r2, r4
 801a04c:	f931 4c02 	ldrsh.w	r4, [r1, #-2]
 801a050:	3801      	subs	r0, #1
 801a052:	eba3 0304 	sub.w	r3, r3, r4
 801a056:	f101 0110 	add.w	r1, r1, #16
 801a05a:	d1e2      	bne.n	801a022 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xd62>
 801a05c:	995b      	ldr	r1, [sp, #364]	; 0x16c
 801a05e:	9843      	ldr	r0, [sp, #268]	; 0x10c
 801a060:	4401      	add	r1, r0
 801a062:	9841      	ldr	r0, [sp, #260]	; 0x104
 801a064:	b158      	cbz	r0, 801a07e <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xdbe>
 801a066:	3104      	adds	r1, #4
 801a068:	f931 4c04 	ldrsh.w	r4, [r1, #-4]
 801a06c:	1b12      	subs	r2, r2, r4
 801a06e:	f931 4c02 	ldrsh.w	r4, [r1, #-2]
 801a072:	3801      	subs	r0, #1
 801a074:	eba3 0304 	sub.w	r3, r3, r4
 801a078:	f101 0104 	add.w	r1, r1, #4
 801a07c:	d1f4      	bne.n	801a068 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xda8>
 801a07e:	9957      	ldr	r1, [sp, #348]	; 0x15c
 801a080:	fb01 f202 	mul.w	r2, r1, r2
 801a084:	fb01 f303 	mul.w	r3, r1, r3
 801a088:	f7ff b9ef 	b.w	801946a <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x1aa>
 801a08c:	9834      	ldr	r0, [sp, #208]	; 0xd0
 801a08e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 801a090:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
 801a092:	4601      	mov	r1, r0
 801a094:	4643      	mov	r3, r8
 801a096:	4421      	add	r1, r4
 801a098:	f7fe f97c 	bl	8018394 <weights_2channels_prefetch_3x3>
 801a09c:	f7ff b9e0 	b.w	8019460 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x1a0>
 801a0a0:	9b52      	ldr	r3, [sp, #328]	; 0x148
 801a0a2:	449a      	add	sl, r3
 801a0a4:	e46f      	b.n	8019986 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x6c6>
 801a0a6:	9b05      	ldr	r3, [sp, #20]
 801a0a8:	f8dd a020 	ldr.w	sl, [sp, #32]
 801a0ac:	930a      	str	r3, [sp, #40]	; 0x28
 801a0ae:	e42c      	b.n	801990a <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x64a>
 801a0b0:	9b05      	ldr	r3, [sp, #20]
 801a0b2:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801a0b6:	930a      	str	r3, [sp, #40]	; 0x28
 801a0b8:	e427      	b.n	801990a <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0x64a>
 801a0ba:	995b      	ldr	r1, [sp, #364]	; 0x16c
 801a0bc:	4602      	mov	r2, r0
 801a0be:	4603      	mov	r3, r0
 801a0c0:	e7cf      	b.n	801a062 <st_sssa8_ch_nn_mat_mult_conv2d_3x3_nt_t+0xda2>
 801a0c2:	bf00      	nop

0801a0c4 <st_int8_avepool>:
 801a0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0c8:	b097      	sub	sp, #92	; 0x5c
 801a0ca:	4699      	mov	r9, r3
 801a0cc:	9100      	str	r1, [sp, #0]
 801a0ce:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 801a0d2:	9111      	str	r1, [sp, #68]	; 0x44
 801a0d4:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 801a0d8:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 801a0dc:	9112      	str	r1, [sp, #72]	; 0x48
 801a0de:	f8bd 109c 	ldrh.w	r1, [sp, #156]	; 0x9c
 801a0e2:	930f      	str	r3, [sp, #60]	; 0x3c
 801a0e4:	4692      	mov	sl, r2
 801a0e6:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 801a0ea:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	; 0xa0
 801a0ee:	9105      	str	r1, [sp, #20]
 801a0f0:	f99d 10a4 	ldrsb.w	r1, [sp, #164]	; 0xa4
 801a0f4:	f8bd 4080 	ldrh.w	r4, [sp, #128]	; 0x80
 801a0f8:	930b      	str	r3, [sp, #44]	; 0x2c
 801a0fa:	9103      	str	r1, [sp, #12]
 801a0fc:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 801a100:	f99d 10a8 	ldrsb.w	r1, [sp, #168]	; 0xa8
 801a104:	9310      	str	r3, [sp, #64]	; 0x40
 801a106:	eec0 6a20 	vdiv.f32	s13, s0, s1
 801a10a:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 801a10e:	9404      	str	r4, [sp, #16]
 801a110:	9213      	str	r2, [sp, #76]	; 0x4c
 801a112:	9102      	str	r1, [sp, #8]
 801a114:	2a00      	cmp	r2, #0
 801a116:	f000 80aa 	beq.w	801a26e <st_int8_avepool+0x1aa>
 801a11a:	2c01      	cmp	r4, #1
 801a11c:	4683      	mov	fp, r0
 801a11e:	f040 80dd 	bne.w	801a2dc <st_int8_avepool+0x218>
 801a122:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a124:	ed9f 6a6b 	vldr	s12, [pc, #428]	; 801a2d4 <st_int8_avepool+0x210>
 801a128:	eddf 3a6b 	vldr	s7, [pc, #428]	; 801a2d8 <st_int8_avepool+0x214>
 801a12c:	1ad3      	subs	r3, r2, r3
 801a12e:	b29b      	uxth	r3, r3
 801a130:	9301      	str	r3, [sp, #4]
 801a132:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
 801a136:	1ad2      	subs	r2, r2, r3
 801a138:	425b      	negs	r3, r3
 801a13a:	b29b      	uxth	r3, r3
 801a13c:	920d      	str	r2, [sp, #52]	; 0x34
 801a13e:	2200      	movs	r2, #0
 801a140:	930c      	str	r3, [sp, #48]	; 0x30
 801a142:	4613      	mov	r3, r2
 801a144:	9905      	ldr	r1, [sp, #20]
 801a146:	2900      	cmp	r1, #0
 801a148:	f000 80c0 	beq.w	801a2cc <st_int8_avepool+0x208>
 801a14c:	b292      	uxth	r2, r2
 801a14e:	9207      	str	r2, [sp, #28]
 801a150:	9a05      	ldr	r2, [sp, #20]
 801a152:	eddd 7a03 	vldr	s15, [sp, #12]
 801a156:	fb03 f302 	mul.w	r3, r3, r2
 801a15a:	9308      	str	r3, [sp, #32]
 801a15c:	9a01      	ldr	r2, [sp, #4]
 801a15e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a160:	1ad3      	subs	r3, r2, r3
 801a162:	b21b      	sxth	r3, r3
 801a164:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 801a168:	eddd 7a02 	vldr	s15, [sp, #8]
 801a16c:	930a      	str	r3, [sp, #40]	; 0x28
 801a16e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a170:	9304      	str	r3, [sp, #16]
 801a172:	2100      	movs	r1, #0
 801a174:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801a178:	9306      	str	r3, [sp, #24]
 801a17a:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801a17e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801a182:	b216      	sxth	r6, r2
 801a184:	4688      	mov	r8, r1
 801a186:	b28b      	uxth	r3, r1
 801a188:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a18a:	9309      	str	r3, [sp, #36]	; 0x24
 801a18c:	9b08      	ldr	r3, [sp, #32]
 801a18e:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 801a192:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801a196:	42b2      	cmp	r2, r6
 801a198:	4498      	add	r8, r3
 801a19a:	f280 8083 	bge.w	801a2a4 <st_int8_avepool+0x1e0>
 801a19e:	2700      	movs	r7, #0
 801a1a0:	46bc      	mov	ip, r7
 801a1a2:	ea01 70e1 	and.w	r0, r1, r1, asr #31
 801a1a6:	428c      	cmp	r4, r1
 801a1a8:	da13      	bge.n	801a1d2 <st_int8_avepool+0x10e>
 801a1aa:	2a00      	cmp	r2, #0
 801a1ac:	fb0a f502 	mul.w	r5, sl, r2
 801a1b0:	db0f      	blt.n	801a1d2 <st_int8_avepool+0x10e>
 801a1b2:	454a      	cmp	r2, r9
 801a1b4:	da0d      	bge.n	801a1d2 <st_int8_avepool+0x10e>
 801a1b6:	2c00      	cmp	r4, #0
 801a1b8:	4623      	mov	r3, r4
 801a1ba:	db5b      	blt.n	801a274 <st_int8_avepool+0x1b0>
 801a1bc:	445d      	add	r5, fp
 801a1be:	459a      	cmp	sl, r3
 801a1c0:	dd03      	ble.n	801a1ca <st_int8_avepool+0x106>
 801a1c2:	f915 e003 	ldrsb.w	lr, [r5, r3]
 801a1c6:	3701      	adds	r7, #1
 801a1c8:	44f4      	add	ip, lr
 801a1ca:	3301      	adds	r3, #1
 801a1cc:	b21b      	sxth	r3, r3
 801a1ce:	428b      	cmp	r3, r1
 801a1d0:	dbf5      	blt.n	801a1be <st_int8_avepool+0xfa>
 801a1d2:	3201      	adds	r2, #1
 801a1d4:	b212      	sxth	r2, r2
 801a1d6:	42b2      	cmp	r2, r6
 801a1d8:	dbe5      	blt.n	801a1a6 <st_int8_avepool+0xe2>
 801a1da:	eeb4 0a60 	vcmp.f32	s0, s1
 801a1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1e2:	d103      	bne.n	801a1ec <st_int8_avepool+0x128>
 801a1e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a1e8:	4293      	cmp	r3, r2
 801a1ea:	d04e      	beq.n	801a28a <st_int8_avepool+0x1c6>
 801a1ec:	ee07 ca90 	vmov	s15, ip
 801a1f0:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 801a1f4:	ee07 7a90 	vmov	s15, r7
 801a1f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a1fc:	ee84 7a27 	vdiv.f32	s14, s8, s15
 801a200:	ee37 7a64 	vsub.f32	s14, s14, s9
 801a204:	eef0 7a45 	vmov.f32	s15, s10
 801a208:	eee7 7a26 	vfma.f32	s15, s14, s13
 801a20c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a214:	bfb4      	ite	lt
 801a216:	eeb0 7a46 	vmovlt.f32	s14, s12
 801a21a:	eeb0 7a65 	vmovge.f32	s14, s11
 801a21e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a222:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a226:	ee17 3a90 	vmov	r3, s15
 801a22a:	f303 0307 	ssat	r3, #8, r3
 801a22e:	9a00      	ldr	r2, [sp, #0]
 801a230:	f802 3008 	strb.w	r3, [r2, r8]
 801a234:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a236:	9b06      	ldr	r3, [sp, #24]
 801a238:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a23a:	9a04      	ldr	r2, [sp, #16]
 801a23c:	4403      	add	r3, r0
 801a23e:	b29b      	uxth	r3, r3
 801a240:	3101      	adds	r1, #1
 801a242:	9306      	str	r3, [sp, #24]
 801a244:	9b05      	ldr	r3, [sp, #20]
 801a246:	b209      	sxth	r1, r1
 801a248:	4402      	add	r2, r0
 801a24a:	b292      	uxth	r2, r2
 801a24c:	4299      	cmp	r1, r3
 801a24e:	9204      	str	r2, [sp, #16]
 801a250:	4688      	mov	r8, r1
 801a252:	db98      	blt.n	801a186 <st_int8_avepool+0xc2>
 801a254:	9b01      	ldr	r3, [sp, #4]
 801a256:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a258:	9a07      	ldr	r2, [sp, #28]
 801a25a:	440b      	add	r3, r1
 801a25c:	3201      	adds	r2, #1
 801a25e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801a260:	b212      	sxth	r2, r2
 801a262:	b29b      	uxth	r3, r3
 801a264:	4291      	cmp	r1, r2
 801a266:	9301      	str	r3, [sp, #4]
 801a268:	4613      	mov	r3, r2
 801a26a:	f73f af6b 	bgt.w	801a144 <st_int8_avepool+0x80>
 801a26e:	b017      	add	sp, #92	; 0x5c
 801a270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a274:	3301      	adds	r3, #1
 801a276:	b21b      	sxth	r3, r3
 801a278:	4298      	cmp	r0, r3
 801a27a:	dcfb      	bgt.n	801a274 <st_int8_avepool+0x1b0>
 801a27c:	4299      	cmp	r1, r3
 801a27e:	dc9d      	bgt.n	801a1bc <st_int8_avepool+0xf8>
 801a280:	3201      	adds	r2, #1
 801a282:	b212      	sxth	r2, r2
 801a284:	42b2      	cmp	r2, r6
 801a286:	db8e      	blt.n	801a1a6 <st_int8_avepool+0xe2>
 801a288:	e7a7      	b.n	801a1da <st_int8_avepool+0x116>
 801a28a:	f1bc 0f00 	cmp.w	ip, #0
 801a28e:	db16      	blt.n	801a2be <st_int8_avepool+0x1fa>
 801a290:	eb0c 0c67 	add.w	ip, ip, r7, asr #1
 801a294:	fbbc fcf7 	udiv	ip, ip, r7
 801a298:	f30c 0c07 	ssat	ip, #8, ip
 801a29c:	9b00      	ldr	r3, [sp, #0]
 801a29e:	f803 c008 	strb.w	ip, [r3, r8]
 801a2a2:	e7c7      	b.n	801a234 <st_int8_avepool+0x170>
 801a2a4:	eeb4 0a60 	vcmp.f32	s0, s1
 801a2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2ac:	d104      	bne.n	801a2b8 <st_int8_avepool+0x1f4>
 801a2ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a2b2:	4293      	cmp	r3, r2
 801a2b4:	f000 8103 	beq.w	801a4be <st_int8_avepool+0x3fa>
 801a2b8:	eeb0 7a63 	vmov.f32	s14, s7
 801a2bc:	e7a0      	b.n	801a200 <st_int8_avepool+0x13c>
 801a2be:	eb07 73d7 	add.w	r3, r7, r7, lsr #31
 801a2c2:	ebac 0363 	sub.w	r3, ip, r3, asr #1
 801a2c6:	fb93 fcf7 	sdiv	ip, r3, r7
 801a2ca:	e7e5      	b.n	801a298 <st_int8_avepool+0x1d4>
 801a2cc:	b293      	uxth	r3, r2
 801a2ce:	9307      	str	r3, [sp, #28]
 801a2d0:	e7c0      	b.n	801a254 <st_int8_avepool+0x190>
 801a2d2:	bf00      	nop
 801a2d4:	befffffc 	.word	0xbefffffc
 801a2d8:	7fc00000 	.word	0x7fc00000
 801a2dc:	425b      	negs	r3, r3
 801a2de:	9905      	ldr	r1, [sp, #20]
 801a2e0:	ed1f 5a04 	vldr	s10, [pc, #-16]	; 801a2d4 <st_int8_avepool+0x210>
 801a2e4:	ed5f 5a04 	vldr	s11, [pc, #-16]	; 801a2d8 <st_int8_avepool+0x214>
 801a2e8:	9014      	str	r0, [sp, #80]	; 0x50
 801a2ea:	b29b      	uxth	r3, r3
 801a2ec:	2200      	movs	r2, #0
 801a2ee:	930a      	str	r3, [sp, #40]	; 0x28
 801a2f0:	46d3      	mov	fp, sl
 801a2f2:	4613      	mov	r3, r2
 801a2f4:	46ca      	mov	sl, r9
 801a2f6:	2900      	cmp	r1, #0
 801a2f8:	f000 80b9 	beq.w	801a46e <st_int8_avepool+0x3aa>
 801a2fc:	b292      	uxth	r2, r2
 801a2fe:	920e      	str	r2, [sp, #56]	; 0x38
 801a300:	9a05      	ldr	r2, [sp, #20]
 801a302:	eddd 7a03 	vldr	s15, [sp, #12]
 801a306:	fb03 f302 	mul.w	r3, r3, r2
 801a30a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a30c:	9315      	str	r3, [sp, #84]	; 0x54
 801a30e:	4253      	negs	r3, r2
 801a310:	b29b      	uxth	r3, r3
 801a312:	9308      	str	r3, [sp, #32]
 801a314:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a316:	1a9b      	subs	r3, r3, r2
 801a318:	b29b      	uxth	r3, r3
 801a31a:	9309      	str	r3, [sp, #36]	; 0x24
 801a31c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a320:	4413      	add	r3, r2
 801a322:	fa0f f983 	sxth.w	r9, r3
 801a326:	f04f 0800 	mov.w	r8, #0
 801a32a:	b213      	sxth	r3, r2
 801a32c:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 801a330:	930c      	str	r3, [sp, #48]	; 0x30
 801a332:	4643      	mov	r3, r8
 801a334:	9a04      	ldr	r2, [sp, #16]
 801a336:	2a00      	cmp	r2, #0
 801a338:	f000 80bd 	beq.w	801a4b6 <st_int8_avepool+0x3f2>
 801a33c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a33e:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 801a342:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 801a346:	4413      	add	r3, r2
 801a348:	fa1f f288 	uxth.w	r2, r8
 801a34c:	920d      	str	r2, [sp, #52]	; 0x34
 801a34e:	9a04      	ldr	r2, [sp, #16]
 801a350:	f04f 0e00 	mov.w	lr, #0
 801a354:	fb02 f303 	mul.w	r3, r2, r3
 801a358:	9307      	str	r3, [sp, #28]
 801a35a:	46f0      	mov	r8, lr
 801a35c:	ea01 70e1 	and.w	r0, r1, r1, asr #31
 801a360:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a362:	454a      	cmp	r2, r9
 801a364:	f280 8094 	bge.w	801a490 <st_int8_avepool+0x3cc>
 801a368:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a36a:	2500      	movs	r5, #0
 801a36c:	4443      	add	r3, r8
 801a36e:	462e      	mov	r6, r5
 801a370:	9306      	str	r3, [sp, #24]
 801a372:	428c      	cmp	r4, r1
 801a374:	da1a      	bge.n	801a3ac <st_int8_avepool+0x2e8>
 801a376:	2a00      	cmp	r2, #0
 801a378:	fb02 f70b 	mul.w	r7, r2, fp
 801a37c:	db16      	blt.n	801a3ac <st_int8_avepool+0x2e8>
 801a37e:	4552      	cmp	r2, sl
 801a380:	da14      	bge.n	801a3ac <st_int8_avepool+0x2e8>
 801a382:	2c00      	cmp	r4, #0
 801a384:	4623      	mov	r3, r4
 801a386:	db75      	blt.n	801a474 <st_int8_avepool+0x3b0>
 801a388:	9701      	str	r7, [sp, #4]
 801a38a:	459b      	cmp	fp, r3
 801a38c:	dd0a      	ble.n	801a3a4 <st_int8_avepool+0x2e0>
 801a38e:	9f01      	ldr	r7, [sp, #4]
 801a390:	eb07 0c03 	add.w	ip, r7, r3
 801a394:	9f04      	ldr	r7, [sp, #16]
 801a396:	fb07 fc0c 	mul.w	ip, r7, ip
 801a39a:	9f06      	ldr	r7, [sp, #24]
 801a39c:	f917 c00c 	ldrsb.w	ip, [r7, ip]
 801a3a0:	3501      	adds	r5, #1
 801a3a2:	4466      	add	r6, ip
 801a3a4:	3301      	adds	r3, #1
 801a3a6:	b21b      	sxth	r3, r3
 801a3a8:	428b      	cmp	r3, r1
 801a3aa:	dbee      	blt.n	801a38a <st_int8_avepool+0x2c6>
 801a3ac:	3201      	adds	r2, #1
 801a3ae:	b212      	sxth	r2, r2
 801a3b0:	454a      	cmp	r2, r9
 801a3b2:	dbde      	blt.n	801a372 <st_int8_avepool+0x2ae>
 801a3b4:	eeb4 0a60 	vcmp.f32	s0, s1
 801a3b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3bc:	d103      	bne.n	801a3c6 <st_int8_avepool+0x302>
 801a3be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a3c2:	4293      	cmp	r3, r2
 801a3c4:	d05d      	beq.n	801a482 <st_int8_avepool+0x3be>
 801a3c6:	ee07 6a90 	vmov	s15, r6
 801a3ca:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801a3ce:	ee07 5a90 	vmov	s15, r5
 801a3d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a3d6:	eec6 7a07 	vdiv.f32	s15, s12, s14
 801a3da:	ed9d 7a02 	vldr	s14, [sp, #8]
 801a3de:	ee37 6ae4 	vsub.f32	s12, s15, s9
 801a3e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a3e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a3ea:	eea6 7a26 	vfma.f32	s14, s12, s13
 801a3ee:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801a3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3f6:	bfb8      	it	lt
 801a3f8:	eef0 7a45 	vmovlt.f32	s15, s10
 801a3fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a400:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a404:	ee17 3a90 	vmov	r3, s15
 801a408:	f303 0307 	ssat	r3, #8, r3
 801a40c:	9a00      	ldr	r2, [sp, #0]
 801a40e:	9d07      	ldr	r5, [sp, #28]
 801a410:	442a      	add	r2, r5
 801a412:	f10e 0e01 	add.w	lr, lr, #1
 801a416:	f802 3008 	strb.w	r3, [r2, r8]
 801a41a:	9b04      	ldr	r3, [sp, #16]
 801a41c:	fa0f fe8e 	sxth.w	lr, lr
 801a420:	459e      	cmp	lr, r3
 801a422:	46f0      	mov	r8, lr
 801a424:	db9c      	blt.n	801a360 <st_int8_avepool+0x29c>
 801a426:	9a08      	ldr	r2, [sp, #32]
 801a428:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a42a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a42c:	440a      	add	r2, r1
 801a42e:	f103 0801 	add.w	r8, r3, #1
 801a432:	b292      	uxth	r2, r2
 801a434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a436:	9208      	str	r2, [sp, #32]
 801a438:	9a05      	ldr	r2, [sp, #20]
 801a43a:	fa0f f888 	sxth.w	r8, r8
 801a43e:	440b      	add	r3, r1
 801a440:	b29b      	uxth	r3, r3
 801a442:	4590      	cmp	r8, r2
 801a444:	9309      	str	r3, [sp, #36]	; 0x24
 801a446:	4643      	mov	r3, r8
 801a448:	f6ff af74 	blt.w	801a334 <st_int8_avepool+0x270>
 801a44c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a44e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a450:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a452:	440b      	add	r3, r1
 801a454:	3201      	adds	r2, #1
 801a456:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801a458:	b212      	sxth	r2, r2
 801a45a:	b29b      	uxth	r3, r3
 801a45c:	4291      	cmp	r1, r2
 801a45e:	930a      	str	r3, [sp, #40]	; 0x28
 801a460:	4613      	mov	r3, r2
 801a462:	f77f af04 	ble.w	801a26e <st_int8_avepool+0x1aa>
 801a466:	9905      	ldr	r1, [sp, #20]
 801a468:	2900      	cmp	r1, #0
 801a46a:	f47f af47 	bne.w	801a2fc <st_int8_avepool+0x238>
 801a46e:	b293      	uxth	r3, r2
 801a470:	930e      	str	r3, [sp, #56]	; 0x38
 801a472:	e7eb      	b.n	801a44c <st_int8_avepool+0x388>
 801a474:	3301      	adds	r3, #1
 801a476:	b21b      	sxth	r3, r3
 801a478:	4298      	cmp	r0, r3
 801a47a:	dcfb      	bgt.n	801a474 <st_int8_avepool+0x3b0>
 801a47c:	428b      	cmp	r3, r1
 801a47e:	db83      	blt.n	801a388 <st_int8_avepool+0x2c4>
 801a480:	e794      	b.n	801a3ac <st_int8_avepool+0x2e8>
 801a482:	2e00      	cmp	r6, #0
 801a484:	db10      	blt.n	801a4a8 <st_int8_avepool+0x3e4>
 801a486:	eb06 0665 	add.w	r6, r6, r5, asr #1
 801a48a:	fbb6 f3f5 	udiv	r3, r6, r5
 801a48e:	e7bb      	b.n	801a408 <st_int8_avepool+0x344>
 801a490:	eeb4 0a60 	vcmp.f32	s0, s1
 801a494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a498:	d103      	bne.n	801a4a2 <st_int8_avepool+0x3de>
 801a49a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a49e:	4293      	cmp	r3, r2
 801a4a0:	d00d      	beq.n	801a4be <st_int8_avepool+0x3fa>
 801a4a2:	eef0 7a65 	vmov.f32	s15, s11
 801a4a6:	e798      	b.n	801a3da <st_int8_avepool+0x316>
 801a4a8:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
 801a4ac:	eba6 0363 	sub.w	r3, r6, r3, asr #1
 801a4b0:	fb93 f3f5 	sdiv	r3, r3, r5
 801a4b4:	e7a8      	b.n	801a408 <st_int8_avepool+0x344>
 801a4b6:	fa1f f388 	uxth.w	r3, r8
 801a4ba:	930d      	str	r3, [sp, #52]	; 0x34
 801a4bc:	e7b3      	b.n	801a426 <st_int8_avepool+0x362>
 801a4be:	deff      	udf	#255	; 0xff

0801a4c0 <arm_fill_q15>:
 801a4c0:	b510      	push	{r4, lr}
 801a4c2:	eac0 4400 	pkhbt	r4, r0, r0, lsl #16
 801a4c6:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 801a4ca:	d013      	beq.n	801a4f4 <arm_fill_q15+0x34>
 801a4cc:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 801a4d0:	2b09      	cmp	r3, #9
 801a4d2:	460b      	mov	r3, r1
 801a4d4:	d919      	bls.n	801a50a <arm_fill_q15+0x4a>
 801a4d6:	f011 0f07 	tst.w	r1, #7
 801a4da:	d116      	bne.n	801a50a <arm_fill_q15+0x4a>
 801a4dc:	f04f 0c00 	mov.w	ip, #0
 801a4e0:	f10c 0c01 	add.w	ip, ip, #1
 801a4e4:	45e6      	cmp	lr, ip
 801a4e6:	e9c3 4400 	strd	r4, r4, [r3]
 801a4ea:	f103 0308 	add.w	r3, r3, #8
 801a4ee:	d1f7      	bne.n	801a4e0 <arm_fill_q15+0x20>
 801a4f0:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 801a4f4:	f012 0203 	ands.w	r2, r2, #3
 801a4f8:	d006      	beq.n	801a508 <arm_fill_q15+0x48>
 801a4fa:	3a01      	subs	r2, #1
 801a4fc:	8008      	strh	r0, [r1, #0]
 801a4fe:	d003      	beq.n	801a508 <arm_fill_q15+0x48>
 801a500:	2a01      	cmp	r2, #1
 801a502:	8048      	strh	r0, [r1, #2]
 801a504:	bf18      	it	ne
 801a506:	8088      	strhne	r0, [r1, #4]
 801a508:	bd10      	pop	{r4, pc}
 801a50a:	46f4      	mov	ip, lr
 801a50c:	f1bc 0c01 	subs.w	ip, ip, #1
 801a510:	601c      	str	r4, [r3, #0]
 801a512:	605c      	str	r4, [r3, #4]
 801a514:	f103 0308 	add.w	r3, r3, #8
 801a518:	d1f8      	bne.n	801a50c <arm_fill_q15+0x4c>
 801a51a:	e7e9      	b.n	801a4f0 <arm_fill_q15+0x30>

0801a51c <arm_float_to_q15>:
 801a51c:	b530      	push	{r4, r5, lr}
 801a51e:	0895      	lsrs	r5, r2, #2
 801a520:	d072      	beq.n	801a608 <arm_float_to_q15+0xec>
 801a522:	eddf 5a60 	vldr	s11, [pc, #384]	; 801a6a4 <arm_float_to_q15+0x188>
 801a526:	f100 0c10 	add.w	ip, r0, #16
 801a52a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801a52e:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 801a532:	f101 0e08 	add.w	lr, r1, #8
 801a536:	462c      	mov	r4, r5
 801a538:	ed5c 7a04 	vldr	s15, [ip, #-16]
 801a53c:	ee67 6aa5 	vmul.f32	s13, s15, s11
 801a540:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a548:	bfd4      	ite	le
 801a54a:	eef0 7a45 	vmovle.f32	s15, s10
 801a54e:	eef0 7a47 	vmovgt.f32	s15, s14
 801a552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a55a:	ee17 3a90 	vmov	r3, s15
 801a55e:	f303 030f 	ssat	r3, #16, r3
 801a562:	f82e 3c08 	strh.w	r3, [lr, #-8]
 801a566:	ed5c 7a03 	vldr	s15, [ip, #-12]
 801a56a:	ee67 6aa5 	vmul.f32	s13, s15, s11
 801a56e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a576:	bfd4      	ite	le
 801a578:	eef0 7a45 	vmovle.f32	s15, s10
 801a57c:	eef0 7a47 	vmovgt.f32	s15, s14
 801a580:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a584:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a588:	ee17 3a90 	vmov	r3, s15
 801a58c:	f303 030f 	ssat	r3, #16, r3
 801a590:	f82e 3c06 	strh.w	r3, [lr, #-6]
 801a594:	ed5c 7a02 	vldr	s15, [ip, #-8]
 801a598:	ee67 6aa5 	vmul.f32	s13, s15, s11
 801a59c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5a4:	bfd4      	ite	le
 801a5a6:	eef0 7a45 	vmovle.f32	s15, s10
 801a5aa:	eef0 7a47 	vmovgt.f32	s15, s14
 801a5ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a5b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a5b6:	ee17 3a90 	vmov	r3, s15
 801a5ba:	f303 030f 	ssat	r3, #16, r3
 801a5be:	f82e 3c04 	strh.w	r3, [lr, #-4]
 801a5c2:	ed5c 7a01 	vldr	s15, [ip, #-4]
 801a5c6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801a5ca:	ee77 6a87 	vadd.f32	s13, s15, s14
 801a5ce:	ee37 6ac7 	vsub.f32	s12, s15, s14
 801a5d2:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801a5d6:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 801a5da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a5de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5e2:	bfcc      	ite	gt
 801a5e4:	ee16 3a90 	vmovgt	r3, s13
 801a5e8:	ee16 3a10 	vmovle	r3, s12
 801a5ec:	f303 030f 	ssat	r3, #16, r3
 801a5f0:	3c01      	subs	r4, #1
 801a5f2:	f82e 3c02 	strh.w	r3, [lr, #-2]
 801a5f6:	f10c 0c10 	add.w	ip, ip, #16
 801a5fa:	f10e 0e08 	add.w	lr, lr, #8
 801a5fe:	d19b      	bne.n	801a538 <arm_float_to_q15+0x1c>
 801a600:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801a604:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 801a608:	f012 0203 	ands.w	r2, r2, #3
 801a60c:	d049      	beq.n	801a6a2 <arm_float_to_q15+0x186>
 801a60e:	edd0 7a00 	vldr	s15, [r0]
 801a612:	eddf 5a24 	vldr	s11, [pc, #144]	; 801a6a4 <arm_float_to_q15+0x188>
 801a616:	ee67 6aa5 	vmul.f32	s13, s15, s11
 801a61a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801a61e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a622:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 801a626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a62a:	bfd4      	ite	le
 801a62c:	eef0 7a46 	vmovle.f32	s15, s12
 801a630:	eef0 7a47 	vmovgt.f32	s15, s14
 801a634:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a63c:	ee17 3a90 	vmov	r3, s15
 801a640:	f303 030f 	ssat	r3, #16, r3
 801a644:	3a01      	subs	r2, #1
 801a646:	800b      	strh	r3, [r1, #0]
 801a648:	d02b      	beq.n	801a6a2 <arm_float_to_q15+0x186>
 801a64a:	edd0 7a01 	vldr	s15, [r0, #4]
 801a64e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801a652:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a65a:	bfd4      	ite	le
 801a65c:	eef0 6a46 	vmovle.f32	s13, s12
 801a660:	eef0 6a47 	vmovgt.f32	s13, s14
 801a664:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a668:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a66c:	ee17 3a90 	vmov	r3, s15
 801a670:	f303 030f 	ssat	r3, #16, r3
 801a674:	2a01      	cmp	r2, #1
 801a676:	804b      	strh	r3, [r1, #2]
 801a678:	d013      	beq.n	801a6a2 <arm_float_to_q15+0x186>
 801a67a:	edd0 7a02 	vldr	s15, [r0, #8]
 801a67e:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801a682:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801a686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a68a:	bfd8      	it	le
 801a68c:	eeb0 7a46 	vmovle.f32	s14, s12
 801a690:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a694:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801a698:	ee17 3a10 	vmov	r3, s14
 801a69c:	f303 030f 	ssat	r3, #16, r3
 801a6a0:	808b      	strh	r3, [r1, #4]
 801a6a2:	bd30      	pop	{r4, r5, pc}
 801a6a4:	47000000 	.word	0x47000000

0801a6a8 <arm_float_to_q7>:
 801a6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a6aa:	0895      	lsrs	r5, r2, #2
 801a6ac:	d078      	beq.n	801a7a0 <arm_float_to_q7+0xf8>
 801a6ae:	f101 0c04 	add.w	ip, r1, #4
 801a6b2:	eddf 5a6b 	vldr	s11, [pc, #428]	; 801a860 <arm_float_to_q7+0x1b8>
 801a6b6:	f100 0e10 	add.w	lr, r0, #16
 801a6ba:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801a6be:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 801a6c2:	00ae      	lsls	r6, r5, #2
 801a6c4:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 801a6c8:	ed5e 7a04 	vldr	s15, [lr, #-16]
 801a6cc:	ee27 7aa5 	vmul.f32	s14, s15, s11
 801a6d0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801a6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6d8:	bfd4      	ite	le
 801a6da:	eef0 7a45 	vmovle.f32	s15, s10
 801a6de:	eef0 7a46 	vmovgt.f32	s15, s12
 801a6e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a6e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a6ea:	ee17 3a90 	vmov	r3, s15
 801a6ee:	b21b      	sxth	r3, r3
 801a6f0:	f303 0307 	ssat	r3, #8, r3
 801a6f4:	f80c 3c04 	strb.w	r3, [ip, #-4]
 801a6f8:	ed5e 7a03 	vldr	s15, [lr, #-12]
 801a6fc:	ee27 7aa5 	vmul.f32	s14, s15, s11
 801a700:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801a704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a708:	bfd4      	ite	le
 801a70a:	eef0 7a45 	vmovle.f32	s15, s10
 801a70e:	eef0 7a46 	vmovgt.f32	s15, s12
 801a712:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a71a:	ee17 3a90 	vmov	r3, s15
 801a71e:	b21b      	sxth	r3, r3
 801a720:	f303 0307 	ssat	r3, #8, r3
 801a724:	f80c 3c03 	strb.w	r3, [ip, #-3]
 801a728:	ed5e 7a02 	vldr	s15, [lr, #-8]
 801a72c:	ee27 7aa5 	vmul.f32	s14, s15, s11
 801a730:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801a734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a738:	bfd4      	ite	le
 801a73a:	eef0 7a45 	vmovle.f32	s15, s10
 801a73e:	eef0 7a46 	vmovgt.f32	s15, s12
 801a742:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a746:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a74a:	ee17 3a90 	vmov	r3, s15
 801a74e:	b21b      	sxth	r3, r3
 801a750:	f303 0307 	ssat	r3, #8, r3
 801a754:	f80c 3c02 	strb.w	r3, [ip, #-2]
 801a758:	ed5e 6a01 	vldr	s13, [lr, #-4]
 801a75c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801a760:	ee76 7a86 	vadd.f32	s15, s13, s12
 801a764:	ee36 7ac6 	vsub.f32	s14, s13, s12
 801a768:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a76c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801a770:	ee17 3a90 	vmov	r3, s15
 801a774:	ee17 7a10 	vmov	r7, s14
 801a778:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a780:	b21b      	sxth	r3, r3
 801a782:	b23f      	sxth	r7, r7
 801a784:	dd5f      	ble.n	801a846 <arm_float_to_q7+0x19e>
 801a786:	f303 0307 	ssat	r3, #8, r3
 801a78a:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801a78e:	f10c 0c04 	add.w	ip, ip, #4
 801a792:	4564      	cmp	r4, ip
 801a794:	f10e 0e10 	add.w	lr, lr, #16
 801a798:	d196      	bne.n	801a6c8 <arm_float_to_q7+0x20>
 801a79a:	4431      	add	r1, r6
 801a79c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 801a7a0:	f012 0203 	ands.w	r2, r2, #3
 801a7a4:	d04e      	beq.n	801a844 <arm_float_to_q7+0x19c>
 801a7a6:	edd0 7a00 	vldr	s15, [r0]
 801a7aa:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 801a860 <arm_float_to_q7+0x1b8>
 801a7ae:	ee67 6a85 	vmul.f32	s13, s15, s10
 801a7b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801a7b6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a7ba:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 801a7be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7c2:	bfd4      	ite	le
 801a7c4:	eef0 7a65 	vmovle.f32	s15, s11
 801a7c8:	eef0 7a47 	vmovgt.f32	s15, s14
 801a7cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a7d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a7d4:	ee17 3a90 	vmov	r3, s15
 801a7d8:	b21b      	sxth	r3, r3
 801a7da:	f303 0307 	ssat	r3, #8, r3
 801a7de:	3a01      	subs	r2, #1
 801a7e0:	700b      	strb	r3, [r1, #0]
 801a7e2:	d02f      	beq.n	801a844 <arm_float_to_q7+0x19c>
 801a7e4:	edd0 6a01 	vldr	s13, [r0, #4]
 801a7e8:	ee26 6a85 	vmul.f32	s12, s13, s10
 801a7ec:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801a7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7f4:	bfd4      	ite	le
 801a7f6:	eef0 6a65 	vmovle.f32	s13, s11
 801a7fa:	eef0 6a47 	vmovgt.f32	s13, s14
 801a7fe:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a802:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801a806:	ee16 3a90 	vmov	r3, s13
 801a80a:	b21b      	sxth	r3, r3
 801a80c:	f303 0307 	ssat	r3, #8, r3
 801a810:	2a01      	cmp	r2, #1
 801a812:	704b      	strb	r3, [r1, #1]
 801a814:	d016      	beq.n	801a844 <arm_float_to_q7+0x19c>
 801a816:	edd0 7a02 	vldr	s15, [r0, #8]
 801a81a:	ee27 5a85 	vmul.f32	s10, s15, s10
 801a81e:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801a822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a826:	bfd4      	ite	le
 801a828:	eef0 7a65 	vmovle.f32	s15, s11
 801a82c:	eef0 7a47 	vmovgt.f32	s15, s14
 801a830:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a834:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a838:	ee17 3a90 	vmov	r3, s15
 801a83c:	b21b      	sxth	r3, r3
 801a83e:	f303 0307 	ssat	r3, #8, r3
 801a842:	708b      	strb	r3, [r1, #2]
 801a844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a846:	f307 0707 	ssat	r7, #8, r7
 801a84a:	f80c 7c01 	strb.w	r7, [ip, #-1]
 801a84e:	f10c 0c04 	add.w	ip, ip, #4
 801a852:	45a4      	cmp	ip, r4
 801a854:	f10e 0e10 	add.w	lr, lr, #16
 801a858:	f47f af36 	bne.w	801a6c8 <arm_float_to_q7+0x20>
 801a85c:	e79d      	b.n	801a79a <arm_float_to_q7+0xf2>
 801a85e:	bf00      	nop
 801a860:	43000000 	.word	0x43000000

0801a864 <arm_q15_to_float>:
 801a864:	b530      	push	{r4, r5, lr}
 801a866:	0894      	lsrs	r4, r2, #2
 801a868:	d038      	beq.n	801a8dc <arm_q15_to_float+0x78>
 801a86a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801a92c <arm_q15_to_float+0xc8>
 801a86e:	f100 0c08 	add.w	ip, r0, #8
 801a872:	f101 0310 	add.w	r3, r1, #16
 801a876:	46a6      	mov	lr, r4
 801a878:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 801a87c:	ee07 5a90 	vmov	s15, r5
 801a880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a884:	3310      	adds	r3, #16
 801a886:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a88a:	f10c 0c08 	add.w	ip, ip, #8
 801a88e:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 801a892:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 801a896:	ee07 5a90 	vmov	s15, r5
 801a89a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a89e:	f1be 0e01 	subs.w	lr, lr, #1
 801a8a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a8a6:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 801a8aa:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 801a8ae:	ee07 5a90 	vmov	s15, r5
 801a8b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a8b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a8ba:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 801a8be:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 801a8c2:	ee07 5a90 	vmov	s15, r5
 801a8c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a8ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a8ce:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 801a8d2:	d1d1      	bne.n	801a878 <arm_q15_to_float+0x14>
 801a8d4:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 801a8d8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 801a8dc:	f012 0203 	ands.w	r2, r2, #3
 801a8e0:	d023      	beq.n	801a92a <arm_q15_to_float+0xc6>
 801a8e2:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a8e6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 801a92c <arm_q15_to_float+0xc8>
 801a8ea:	ee07 3a90 	vmov	s15, r3
 801a8ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a8f2:	3a01      	subs	r2, #1
 801a8f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a8f8:	edc1 7a00 	vstr	s15, [r1]
 801a8fc:	d015      	beq.n	801a92a <arm_q15_to_float+0xc6>
 801a8fe:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a902:	ee07 3a90 	vmov	s15, r3
 801a906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a90a:	2a01      	cmp	r2, #1
 801a90c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a910:	edc1 7a01 	vstr	s15, [r1, #4]
 801a914:	d009      	beq.n	801a92a <arm_q15_to_float+0xc6>
 801a916:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a91a:	ee07 3a90 	vmov	s15, r3
 801a91e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a922:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a926:	edc1 7a02 	vstr	s15, [r1, #8]
 801a92a:	bd30      	pop	{r4, r5, pc}
 801a92c:	38000000 	.word	0x38000000

0801a930 <arm_q7_to_float>:
 801a930:	b530      	push	{r4, r5, lr}
 801a932:	0894      	lsrs	r4, r2, #2
 801a934:	d037      	beq.n	801a9a6 <arm_q7_to_float+0x76>
 801a936:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801a9f8 <arm_q7_to_float+0xc8>
 801a93a:	1d03      	adds	r3, r0, #4
 801a93c:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 801a940:	f101 0010 	add.w	r0, r1, #16
 801a944:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 801a948:	ee07 ea90 	vmov	s15, lr
 801a94c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a950:	469e      	mov	lr, r3
 801a952:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a956:	3304      	adds	r3, #4
 801a958:	ed40 7a04 	vstr	s15, [r0, #-16]
 801a95c:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 801a960:	ee07 5a90 	vmov	s15, r5
 801a964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a968:	45e6      	cmp	lr, ip
 801a96a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a96e:	f100 0010 	add.w	r0, r0, #16
 801a972:	ed40 7a07 	vstr	s15, [r0, #-28]	; 0xffffffe4
 801a976:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 801a97a:	ee07 5a90 	vmov	s15, r5
 801a97e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a982:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a986:	ed40 7a06 	vstr	s15, [r0, #-24]	; 0xffffffe8
 801a98a:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 801a98e:	ee07 5a90 	vmov	s15, r5
 801a992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a996:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a99a:	ed40 7a05 	vstr	s15, [r0, #-20]	; 0xffffffec
 801a99e:	d1d1      	bne.n	801a944 <arm_q7_to_float+0x14>
 801a9a0:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 801a9a4:	4660      	mov	r0, ip
 801a9a6:	f012 0203 	ands.w	r2, r2, #3
 801a9aa:	d023      	beq.n	801a9f4 <arm_q7_to_float+0xc4>
 801a9ac:	f990 3000 	ldrsb.w	r3, [r0]
 801a9b0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 801a9f8 <arm_q7_to_float+0xc8>
 801a9b4:	ee07 3a90 	vmov	s15, r3
 801a9b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a9bc:	3a01      	subs	r2, #1
 801a9be:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a9c2:	edc1 7a00 	vstr	s15, [r1]
 801a9c6:	d015      	beq.n	801a9f4 <arm_q7_to_float+0xc4>
 801a9c8:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801a9cc:	ee07 3a90 	vmov	s15, r3
 801a9d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a9d4:	2a01      	cmp	r2, #1
 801a9d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a9da:	edc1 7a01 	vstr	s15, [r1, #4]
 801a9de:	d009      	beq.n	801a9f4 <arm_q7_to_float+0xc4>
 801a9e0:	f990 3002 	ldrsb.w	r3, [r0, #2]
 801a9e4:	ee07 3a90 	vmov	s15, r3
 801a9e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a9ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a9f0:	edc1 7a02 	vstr	s15, [r1, #8]
 801a9f4:	bd30      	pop	{r4, r5, pc}
 801a9f6:	bf00      	nop
 801a9f8:	3c000000 	.word	0x3c000000

0801a9fc <ai_array_to_buffer_fmt>:
 801a9fc:	f3c0 4343 	ubfx	r3, r0, #17, #4
 801aa00:	2b02      	cmp	r3, #2
 801aa02:	d050      	beq.n	801aaa6 <ai_array_to_buffer_fmt+0xaa>
 801aa04:	4b2a      	ldr	r3, [pc, #168]	; (801aab0 <ai_array_to_buffer_fmt+0xb4>)
 801aa06:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 801aa0a:	429a      	cmp	r2, r3
 801aa0c:	d00b      	beq.n	801aa26 <ai_array_to_buffer_fmt+0x2a>
 801aa0e:	dc1c      	bgt.n	801aa4a <ai_array_to_buffer_fmt+0x4e>
 801aa10:	4b28      	ldr	r3, [pc, #160]	; (801aab4 <ai_array_to_buffer_fmt+0xb8>)
 801aa12:	429a      	cmp	r2, r3
 801aa14:	d007      	beq.n	801aa26 <ai_array_to_buffer_fmt+0x2a>
 801aa16:	dd0b      	ble.n	801aa30 <ai_array_to_buffer_fmt+0x34>
 801aa18:	4b27      	ldr	r3, [pc, #156]	; (801aab8 <ai_array_to_buffer_fmt+0xbc>)
 801aa1a:	429a      	cmp	r2, r3
 801aa1c:	d003      	beq.n	801aa26 <ai_array_to_buffer_fmt+0x2a>
 801aa1e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 801aa22:	429a      	cmp	r2, r3
 801aa24:	d131      	bne.n	801aa8a <ai_array_to_buffer_fmt+0x8e>
 801aa26:	4613      	mov	r3, r2
 801aa28:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801aa2c:	4318      	orrs	r0, r3
 801aa2e:	4770      	bx	lr
 801aa30:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801aa34:	429a      	cmp	r2, r3
 801aa36:	d0f6      	beq.n	801aa26 <ai_array_to_buffer_fmt+0x2a>
 801aa38:	dd2c      	ble.n	801aa94 <ai_array_to_buffer_fmt+0x98>
 801aa3a:	4b20      	ldr	r3, [pc, #128]	; (801aabc <ai_array_to_buffer_fmt+0xc0>)
 801aa3c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801aa40:	429a      	cmp	r2, r3
 801aa42:	bf18      	it	ne
 801aa44:	2340      	movne	r3, #64	; 0x40
 801aa46:	4318      	orrs	r0, r3
 801aa48:	4770      	bx	lr
 801aa4a:	4b1d      	ldr	r3, [pc, #116]	; (801aac0 <ai_array_to_buffer_fmt+0xc4>)
 801aa4c:	429a      	cmp	r2, r3
 801aa4e:	d0ea      	beq.n	801aa26 <ai_array_to_buffer_fmt+0x2a>
 801aa50:	dd0e      	ble.n	801aa70 <ai_array_to_buffer_fmt+0x74>
 801aa52:	4b1c      	ldr	r3, [pc, #112]	; (801aac4 <ai_array_to_buffer_fmt+0xc8>)
 801aa54:	429a      	cmp	r2, r3
 801aa56:	d0e6      	beq.n	801aa26 <ai_array_to_buffer_fmt+0x2a>
 801aa58:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 801aa5c:	429a      	cmp	r2, r3
 801aa5e:	d0e2      	beq.n	801aa26 <ai_array_to_buffer_fmt+0x2a>
 801aa60:	4b19      	ldr	r3, [pc, #100]	; (801aac8 <ai_array_to_buffer_fmt+0xcc>)
 801aa62:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801aa66:	429a      	cmp	r2, r3
 801aa68:	bf18      	it	ne
 801aa6a:	2340      	movne	r3, #64	; 0x40
 801aa6c:	4318      	orrs	r0, r3
 801aa6e:	4770      	bx	lr
 801aa70:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801aa74:	429a      	cmp	r2, r3
 801aa76:	d0d6      	beq.n	801aa26 <ai_array_to_buffer_fmt+0x2a>
 801aa78:	3307      	adds	r3, #7
 801aa7a:	429a      	cmp	r2, r3
 801aa7c:	d0d3      	beq.n	801aa26 <ai_array_to_buffer_fmt+0x2a>
 801aa7e:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 801aa82:	429a      	cmp	r2, r3
 801aa84:	bf18      	it	ne
 801aa86:	2340      	movne	r3, #64	; 0x40
 801aa88:	e7ce      	b.n	801aa28 <ai_array_to_buffer_fmt+0x2c>
 801aa8a:	4b10      	ldr	r3, [pc, #64]	; (801aacc <ai_array_to_buffer_fmt+0xd0>)
 801aa8c:	429a      	cmp	r2, r3
 801aa8e:	bf18      	it	ne
 801aa90:	2340      	movne	r3, #64	; 0x40
 801aa92:	e7c9      	b.n	801aa28 <ai_array_to_buffer_fmt+0x2c>
 801aa94:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801aa98:	429a      	cmp	r2, r3
 801aa9a:	d0c4      	beq.n	801aa26 <ai_array_to_buffer_fmt+0x2a>
 801aa9c:	3380      	adds	r3, #128	; 0x80
 801aa9e:	429a      	cmp	r2, r3
 801aaa0:	bf18      	it	ne
 801aaa2:	2340      	movne	r3, #64	; 0x40
 801aaa4:	e7c0      	b.n	801aa28 <ai_array_to_buffer_fmt+0x2c>
 801aaa6:	4b0a      	ldr	r3, [pc, #40]	; (801aad0 <ai_array_to_buffer_fmt+0xd4>)
 801aaa8:	4003      	ands	r3, r0
 801aaaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801aaae:	e7bb      	b.n	801aa28 <ai_array_to_buffer_fmt+0x2c>
 801aab0:	00840040 	.word	0x00840040
 801aab4:	00040840 	.word	0x00040840
 801aab8:	00041040 	.word	0x00041040
 801aabc:	00040447 	.word	0x00040447
 801aac0:	00840840 	.word	0x00840840
 801aac4:	00841040 	.word	0x00841040
 801aac8:	0084084f 	.word	0x0084084f
 801aacc:	0004084f 	.word	0x0004084f
 801aad0:	00803fff 	.word	0x00803fff

0801aad4 <ai_array_get_byte_size>:
 801aad4:	b319      	cbz	r1, 801ab1e <ai_array_get_byte_size+0x4a>
 801aad6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801aada:	fb03 f101 	mul.w	r1, r3, r1
 801aade:	3107      	adds	r1, #7
 801aae0:	f3c0 4243 	ubfx	r2, r0, #17, #4
 801aae4:	f021 0307 	bic.w	r3, r1, #7
 801aae8:	2a04      	cmp	r2, #4
 801aaea:	f3c0 5141 	ubfx	r1, r0, #21, #2
 801aaee:	fa23 f101 	lsr.w	r1, r3, r1
 801aaf2:	ea4f 10e0 	mov.w	r0, r0, asr #7
 801aaf6:	d00b      	beq.n	801ab10 <ai_array_get_byte_size+0x3c>
 801aaf8:	2a08      	cmp	r2, #8
 801aafa:	d002      	beq.n	801ab02 <ai_array_get_byte_size+0x2e>
 801aafc:	3107      	adds	r1, #7
 801aafe:	08c8      	lsrs	r0, r1, #3
 801ab00:	4770      	bx	lr
 801ab02:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801ab06:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 801ab0a:	3107      	adds	r1, #7
 801ab0c:	08c8      	lsrs	r0, r1, #3
 801ab0e:	4770      	bx	lr
 801ab10:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801ab14:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 801ab18:	3107      	adds	r1, #7
 801ab1a:	08c8      	lsrs	r0, r1, #3
 801ab1c:	4770      	bx	lr
 801ab1e:	4608      	mov	r0, r1
 801ab20:	4770      	bx	lr
 801ab22:	bf00      	nop

0801ab24 <ai_array_get_data_byte_size>:
 801ab24:	b169      	cbz	r1, 801ab42 <ai_array_get_data_byte_size+0x1e>
 801ab26:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 801ab2a:	fb02 f101 	mul.w	r1, r2, r1
 801ab2e:	1dcb      	adds	r3, r1, #7
 801ab30:	f023 0307 	bic.w	r3, r3, #7
 801ab34:	f3c0 5041 	ubfx	r0, r0, #21, #2
 801ab38:	fa23 f000 	lsr.w	r0, r3, r0
 801ab3c:	3007      	adds	r0, #7
 801ab3e:	08c0      	lsrs	r0, r0, #3
 801ab40:	4770      	bx	lr
 801ab42:	4608      	mov	r0, r1
 801ab44:	4770      	bx	lr
 801ab46:	bf00      	nop

0801ab48 <ai_version_get>:
 801ab48:	0212      	lsls	r2, r2, #8
 801ab4a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801ab4e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 801ab52:	4770      	bx	lr

0801ab54 <get_tensor_byte_size>:
 801ab54:	b410      	push	{r4}
 801ab56:	6983      	ldr	r3, [r0, #24]
 801ab58:	68c4      	ldr	r4, [r0, #12]
 801ab5a:	6941      	ldr	r1, [r0, #20]
 801ab5c:	681b      	ldr	r3, [r3, #0]
 801ab5e:	68e0      	ldr	r0, [r4, #12]
 801ab60:	4a07      	ldr	r2, [pc, #28]	; (801ab80 <get_tensor_byte_size+0x2c>)
 801ab62:	68c9      	ldr	r1, [r1, #12]
 801ab64:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab68:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 801ab6c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801ab70:	fb01 f000 	mul.w	r0, r1, r0
 801ab74:	4293      	cmp	r3, r2
 801ab76:	bf04      	itt	eq
 801ab78:	3007      	addeq	r0, #7
 801ab7a:	08c0      	lsreq	r0, r0, #3
 801ab7c:	4770      	bx	lr
 801ab7e:	bf00      	nop
 801ab80:	000400c0 	.word	0x000400c0

0801ab84 <core_tensor_clone>:
 801ab84:	680b      	ldr	r3, [r1, #0]
 801ab86:	6003      	str	r3, [r0, #0]
 801ab88:	684b      	ldr	r3, [r1, #4]
 801ab8a:	6043      	str	r3, [r0, #4]
 801ab8c:	698b      	ldr	r3, [r1, #24]
 801ab8e:	6183      	str	r3, [r0, #24]
 801ab90:	688b      	ldr	r3, [r1, #8]
 801ab92:	6882      	ldr	r2, [r0, #8]
 801ab94:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801ab98:	f363 221f 	bfi	r2, r3, #8, #24
 801ab9c:	b410      	push	{r4}
 801ab9e:	6082      	str	r2, [r0, #8]
 801aba0:	b15b      	cbz	r3, 801abba <core_tensor_clone+0x36>
 801aba2:	2300      	movs	r3, #0
 801aba4:	68cc      	ldr	r4, [r1, #12]
 801aba6:	68c2      	ldr	r2, [r0, #12]
 801aba8:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 801abac:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 801abb0:	6882      	ldr	r2, [r0, #8]
 801abb2:	3301      	adds	r3, #1
 801abb4:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 801abb8:	d3f4      	bcc.n	801aba4 <core_tensor_clone+0x20>
 801abba:	690b      	ldr	r3, [r1, #16]
 801abbc:	6902      	ldr	r2, [r0, #16]
 801abbe:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801abc2:	f363 221f 	bfi	r2, r3, #8, #24
 801abc6:	6102      	str	r2, [r0, #16]
 801abc8:	b15b      	cbz	r3, 801abe2 <core_tensor_clone+0x5e>
 801abca:	2300      	movs	r3, #0
 801abcc:	694c      	ldr	r4, [r1, #20]
 801abce:	6942      	ldr	r2, [r0, #20]
 801abd0:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 801abd4:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 801abd8:	6902      	ldr	r2, [r0, #16]
 801abda:	3301      	adds	r3, #1
 801abdc:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 801abe0:	d3f4      	bcc.n	801abcc <core_tensor_clone+0x48>
 801abe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801abe6:	4770      	bx	lr

0801abe8 <core_array_clone>:
 801abe8:	4684      	mov	ip, r0
 801abea:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 801abec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 801abf0:	4770      	bx	lr
 801abf2:	bf00      	nop

0801abf4 <sbrk_aligned>:
 801abf4:	b570      	push	{r4, r5, r6, lr}
 801abf6:	4e0e      	ldr	r6, [pc, #56]	; (801ac30 <sbrk_aligned+0x3c>)
 801abf8:	460c      	mov	r4, r1
 801abfa:	6831      	ldr	r1, [r6, #0]
 801abfc:	4605      	mov	r5, r0
 801abfe:	b911      	cbnz	r1, 801ac06 <sbrk_aligned+0x12>
 801ac00:	f000 f916 	bl	801ae30 <_sbrk_r>
 801ac04:	6030      	str	r0, [r6, #0]
 801ac06:	4621      	mov	r1, r4
 801ac08:	4628      	mov	r0, r5
 801ac0a:	f000 f911 	bl	801ae30 <_sbrk_r>
 801ac0e:	1c43      	adds	r3, r0, #1
 801ac10:	d00a      	beq.n	801ac28 <sbrk_aligned+0x34>
 801ac12:	1cc4      	adds	r4, r0, #3
 801ac14:	f024 0403 	bic.w	r4, r4, #3
 801ac18:	42a0      	cmp	r0, r4
 801ac1a:	d007      	beq.n	801ac2c <sbrk_aligned+0x38>
 801ac1c:	1a21      	subs	r1, r4, r0
 801ac1e:	4628      	mov	r0, r5
 801ac20:	f000 f906 	bl	801ae30 <_sbrk_r>
 801ac24:	3001      	adds	r0, #1
 801ac26:	d101      	bne.n	801ac2c <sbrk_aligned+0x38>
 801ac28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801ac2c:	4620      	mov	r0, r4
 801ac2e:	bd70      	pop	{r4, r5, r6, pc}
 801ac30:	200061ac 	.word	0x200061ac

0801ac34 <_malloc_r>:
 801ac34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ac38:	1ccd      	adds	r5, r1, #3
 801ac3a:	f025 0503 	bic.w	r5, r5, #3
 801ac3e:	3508      	adds	r5, #8
 801ac40:	2d0c      	cmp	r5, #12
 801ac42:	bf38      	it	cc
 801ac44:	250c      	movcc	r5, #12
 801ac46:	2d00      	cmp	r5, #0
 801ac48:	4607      	mov	r7, r0
 801ac4a:	db01      	blt.n	801ac50 <_malloc_r+0x1c>
 801ac4c:	42a9      	cmp	r1, r5
 801ac4e:	d905      	bls.n	801ac5c <_malloc_r+0x28>
 801ac50:	230c      	movs	r3, #12
 801ac52:	603b      	str	r3, [r7, #0]
 801ac54:	2600      	movs	r6, #0
 801ac56:	4630      	mov	r0, r6
 801ac58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801ad30 <_malloc_r+0xfc>
 801ac60:	f000 f868 	bl	801ad34 <__malloc_lock>
 801ac64:	f8d8 3000 	ldr.w	r3, [r8]
 801ac68:	461c      	mov	r4, r3
 801ac6a:	bb5c      	cbnz	r4, 801acc4 <_malloc_r+0x90>
 801ac6c:	4629      	mov	r1, r5
 801ac6e:	4638      	mov	r0, r7
 801ac70:	f7ff ffc0 	bl	801abf4 <sbrk_aligned>
 801ac74:	1c43      	adds	r3, r0, #1
 801ac76:	4604      	mov	r4, r0
 801ac78:	d155      	bne.n	801ad26 <_malloc_r+0xf2>
 801ac7a:	f8d8 4000 	ldr.w	r4, [r8]
 801ac7e:	4626      	mov	r6, r4
 801ac80:	2e00      	cmp	r6, #0
 801ac82:	d145      	bne.n	801ad10 <_malloc_r+0xdc>
 801ac84:	2c00      	cmp	r4, #0
 801ac86:	d048      	beq.n	801ad1a <_malloc_r+0xe6>
 801ac88:	6823      	ldr	r3, [r4, #0]
 801ac8a:	4631      	mov	r1, r6
 801ac8c:	4638      	mov	r0, r7
 801ac8e:	eb04 0903 	add.w	r9, r4, r3
 801ac92:	f000 f8cd 	bl	801ae30 <_sbrk_r>
 801ac96:	4581      	cmp	r9, r0
 801ac98:	d13f      	bne.n	801ad1a <_malloc_r+0xe6>
 801ac9a:	6821      	ldr	r1, [r4, #0]
 801ac9c:	1a6d      	subs	r5, r5, r1
 801ac9e:	4629      	mov	r1, r5
 801aca0:	4638      	mov	r0, r7
 801aca2:	f7ff ffa7 	bl	801abf4 <sbrk_aligned>
 801aca6:	3001      	adds	r0, #1
 801aca8:	d037      	beq.n	801ad1a <_malloc_r+0xe6>
 801acaa:	6823      	ldr	r3, [r4, #0]
 801acac:	442b      	add	r3, r5
 801acae:	6023      	str	r3, [r4, #0]
 801acb0:	f8d8 3000 	ldr.w	r3, [r8]
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	d038      	beq.n	801ad2a <_malloc_r+0xf6>
 801acb8:	685a      	ldr	r2, [r3, #4]
 801acba:	42a2      	cmp	r2, r4
 801acbc:	d12b      	bne.n	801ad16 <_malloc_r+0xe2>
 801acbe:	2200      	movs	r2, #0
 801acc0:	605a      	str	r2, [r3, #4]
 801acc2:	e00f      	b.n	801ace4 <_malloc_r+0xb0>
 801acc4:	6822      	ldr	r2, [r4, #0]
 801acc6:	1b52      	subs	r2, r2, r5
 801acc8:	d41f      	bmi.n	801ad0a <_malloc_r+0xd6>
 801acca:	2a0b      	cmp	r2, #11
 801accc:	d917      	bls.n	801acfe <_malloc_r+0xca>
 801acce:	1961      	adds	r1, r4, r5
 801acd0:	42a3      	cmp	r3, r4
 801acd2:	6025      	str	r5, [r4, #0]
 801acd4:	bf18      	it	ne
 801acd6:	6059      	strne	r1, [r3, #4]
 801acd8:	6863      	ldr	r3, [r4, #4]
 801acda:	bf08      	it	eq
 801acdc:	f8c8 1000 	streq.w	r1, [r8]
 801ace0:	5162      	str	r2, [r4, r5]
 801ace2:	604b      	str	r3, [r1, #4]
 801ace4:	4638      	mov	r0, r7
 801ace6:	f104 060b 	add.w	r6, r4, #11
 801acea:	f000 f829 	bl	801ad40 <__malloc_unlock>
 801acee:	f026 0607 	bic.w	r6, r6, #7
 801acf2:	1d23      	adds	r3, r4, #4
 801acf4:	1af2      	subs	r2, r6, r3
 801acf6:	d0ae      	beq.n	801ac56 <_malloc_r+0x22>
 801acf8:	1b9b      	subs	r3, r3, r6
 801acfa:	50a3      	str	r3, [r4, r2]
 801acfc:	e7ab      	b.n	801ac56 <_malloc_r+0x22>
 801acfe:	42a3      	cmp	r3, r4
 801ad00:	6862      	ldr	r2, [r4, #4]
 801ad02:	d1dd      	bne.n	801acc0 <_malloc_r+0x8c>
 801ad04:	f8c8 2000 	str.w	r2, [r8]
 801ad08:	e7ec      	b.n	801ace4 <_malloc_r+0xb0>
 801ad0a:	4623      	mov	r3, r4
 801ad0c:	6864      	ldr	r4, [r4, #4]
 801ad0e:	e7ac      	b.n	801ac6a <_malloc_r+0x36>
 801ad10:	4634      	mov	r4, r6
 801ad12:	6876      	ldr	r6, [r6, #4]
 801ad14:	e7b4      	b.n	801ac80 <_malloc_r+0x4c>
 801ad16:	4613      	mov	r3, r2
 801ad18:	e7cc      	b.n	801acb4 <_malloc_r+0x80>
 801ad1a:	230c      	movs	r3, #12
 801ad1c:	603b      	str	r3, [r7, #0]
 801ad1e:	4638      	mov	r0, r7
 801ad20:	f000 f80e 	bl	801ad40 <__malloc_unlock>
 801ad24:	e797      	b.n	801ac56 <_malloc_r+0x22>
 801ad26:	6025      	str	r5, [r4, #0]
 801ad28:	e7dc      	b.n	801ace4 <_malloc_r+0xb0>
 801ad2a:	605b      	str	r3, [r3, #4]
 801ad2c:	deff      	udf	#255	; 0xff
 801ad2e:	bf00      	nop
 801ad30:	200061a8 	.word	0x200061a8

0801ad34 <__malloc_lock>:
 801ad34:	4801      	ldr	r0, [pc, #4]	; (801ad3c <__malloc_lock+0x8>)
 801ad36:	f000 b8b5 	b.w	801aea4 <__retarget_lock_acquire_recursive>
 801ad3a:	bf00      	nop
 801ad3c:	200062ec 	.word	0x200062ec

0801ad40 <__malloc_unlock>:
 801ad40:	4801      	ldr	r0, [pc, #4]	; (801ad48 <__malloc_unlock+0x8>)
 801ad42:	f000 b8b0 	b.w	801aea6 <__retarget_lock_release_recursive>
 801ad46:	bf00      	nop
 801ad48:	200062ec 	.word	0x200062ec

0801ad4c <_realloc_r>:
 801ad4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad50:	4680      	mov	r8, r0
 801ad52:	4614      	mov	r4, r2
 801ad54:	460e      	mov	r6, r1
 801ad56:	b921      	cbnz	r1, 801ad62 <_realloc_r+0x16>
 801ad58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ad5c:	4611      	mov	r1, r2
 801ad5e:	f7ff bf69 	b.w	801ac34 <_malloc_r>
 801ad62:	b92a      	cbnz	r2, 801ad70 <_realloc_r+0x24>
 801ad64:	f000 f8ae 	bl	801aec4 <_free_r>
 801ad68:	4625      	mov	r5, r4
 801ad6a:	4628      	mov	r0, r5
 801ad6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad70:	f000 f8f4 	bl	801af5c <_malloc_usable_size_r>
 801ad74:	4284      	cmp	r4, r0
 801ad76:	4607      	mov	r7, r0
 801ad78:	d802      	bhi.n	801ad80 <_realloc_r+0x34>
 801ad7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801ad7e:	d812      	bhi.n	801ada6 <_realloc_r+0x5a>
 801ad80:	4621      	mov	r1, r4
 801ad82:	4640      	mov	r0, r8
 801ad84:	f7ff ff56 	bl	801ac34 <_malloc_r>
 801ad88:	4605      	mov	r5, r0
 801ad8a:	2800      	cmp	r0, #0
 801ad8c:	d0ed      	beq.n	801ad6a <_realloc_r+0x1e>
 801ad8e:	42bc      	cmp	r4, r7
 801ad90:	4622      	mov	r2, r4
 801ad92:	4631      	mov	r1, r6
 801ad94:	bf28      	it	cs
 801ad96:	463a      	movcs	r2, r7
 801ad98:	f000 f886 	bl	801aea8 <memcpy>
 801ad9c:	4631      	mov	r1, r6
 801ad9e:	4640      	mov	r0, r8
 801ada0:	f000 f890 	bl	801aec4 <_free_r>
 801ada4:	e7e1      	b.n	801ad6a <_realloc_r+0x1e>
 801ada6:	4635      	mov	r5, r6
 801ada8:	e7df      	b.n	801ad6a <_realloc_r+0x1e>
	...

0801adac <siprintf>:
 801adac:	b40e      	push	{r1, r2, r3}
 801adae:	b500      	push	{lr}
 801adb0:	b09c      	sub	sp, #112	; 0x70
 801adb2:	ab1d      	add	r3, sp, #116	; 0x74
 801adb4:	9002      	str	r0, [sp, #8]
 801adb6:	9006      	str	r0, [sp, #24]
 801adb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801adbc:	4809      	ldr	r0, [pc, #36]	; (801ade4 <siprintf+0x38>)
 801adbe:	9107      	str	r1, [sp, #28]
 801adc0:	9104      	str	r1, [sp, #16]
 801adc2:	4909      	ldr	r1, [pc, #36]	; (801ade8 <siprintf+0x3c>)
 801adc4:	f853 2b04 	ldr.w	r2, [r3], #4
 801adc8:	9105      	str	r1, [sp, #20]
 801adca:	6800      	ldr	r0, [r0, #0]
 801adcc:	9301      	str	r3, [sp, #4]
 801adce:	a902      	add	r1, sp, #8
 801add0:	f000 f926 	bl	801b020 <_svfiprintf_r>
 801add4:	9b02      	ldr	r3, [sp, #8]
 801add6:	2200      	movs	r2, #0
 801add8:	701a      	strb	r2, [r3, #0]
 801adda:	b01c      	add	sp, #112	; 0x70
 801addc:	f85d eb04 	ldr.w	lr, [sp], #4
 801ade0:	b003      	add	sp, #12
 801ade2:	4770      	bx	lr
 801ade4:	20003ed0 	.word	0x20003ed0
 801ade8:	ffff0208 	.word	0xffff0208

0801adec <memmove>:
 801adec:	4288      	cmp	r0, r1
 801adee:	b510      	push	{r4, lr}
 801adf0:	eb01 0402 	add.w	r4, r1, r2
 801adf4:	d902      	bls.n	801adfc <memmove+0x10>
 801adf6:	4284      	cmp	r4, r0
 801adf8:	4623      	mov	r3, r4
 801adfa:	d807      	bhi.n	801ae0c <memmove+0x20>
 801adfc:	1e43      	subs	r3, r0, #1
 801adfe:	42a1      	cmp	r1, r4
 801ae00:	d008      	beq.n	801ae14 <memmove+0x28>
 801ae02:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ae06:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ae0a:	e7f8      	b.n	801adfe <memmove+0x12>
 801ae0c:	4402      	add	r2, r0
 801ae0e:	4601      	mov	r1, r0
 801ae10:	428a      	cmp	r2, r1
 801ae12:	d100      	bne.n	801ae16 <memmove+0x2a>
 801ae14:	bd10      	pop	{r4, pc}
 801ae16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ae1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ae1e:	e7f7      	b.n	801ae10 <memmove+0x24>

0801ae20 <memset>:
 801ae20:	4402      	add	r2, r0
 801ae22:	4603      	mov	r3, r0
 801ae24:	4293      	cmp	r3, r2
 801ae26:	d100      	bne.n	801ae2a <memset+0xa>
 801ae28:	4770      	bx	lr
 801ae2a:	f803 1b01 	strb.w	r1, [r3], #1
 801ae2e:	e7f9      	b.n	801ae24 <memset+0x4>

0801ae30 <_sbrk_r>:
 801ae30:	b538      	push	{r3, r4, r5, lr}
 801ae32:	4d06      	ldr	r5, [pc, #24]	; (801ae4c <_sbrk_r+0x1c>)
 801ae34:	2300      	movs	r3, #0
 801ae36:	4604      	mov	r4, r0
 801ae38:	4608      	mov	r0, r1
 801ae3a:	602b      	str	r3, [r5, #0]
 801ae3c:	f7e7 fbd4 	bl	80025e8 <_sbrk>
 801ae40:	1c43      	adds	r3, r0, #1
 801ae42:	d102      	bne.n	801ae4a <_sbrk_r+0x1a>
 801ae44:	682b      	ldr	r3, [r5, #0]
 801ae46:	b103      	cbz	r3, 801ae4a <_sbrk_r+0x1a>
 801ae48:	6023      	str	r3, [r4, #0]
 801ae4a:	bd38      	pop	{r3, r4, r5, pc}
 801ae4c:	200062e8 	.word	0x200062e8

0801ae50 <__errno>:
 801ae50:	4b01      	ldr	r3, [pc, #4]	; (801ae58 <__errno+0x8>)
 801ae52:	6818      	ldr	r0, [r3, #0]
 801ae54:	4770      	bx	lr
 801ae56:	bf00      	nop
 801ae58:	20003ed0 	.word	0x20003ed0

0801ae5c <__libc_init_array>:
 801ae5c:	b570      	push	{r4, r5, r6, lr}
 801ae5e:	4d0d      	ldr	r5, [pc, #52]	; (801ae94 <__libc_init_array+0x38>)
 801ae60:	4c0d      	ldr	r4, [pc, #52]	; (801ae98 <__libc_init_array+0x3c>)
 801ae62:	1b64      	subs	r4, r4, r5
 801ae64:	10a4      	asrs	r4, r4, #2
 801ae66:	2600      	movs	r6, #0
 801ae68:	42a6      	cmp	r6, r4
 801ae6a:	d109      	bne.n	801ae80 <__libc_init_array+0x24>
 801ae6c:	4d0b      	ldr	r5, [pc, #44]	; (801ae9c <__libc_init_array+0x40>)
 801ae6e:	4c0c      	ldr	r4, [pc, #48]	; (801aea0 <__libc_init_array+0x44>)
 801ae70:	f000 ff26 	bl	801bcc0 <_init>
 801ae74:	1b64      	subs	r4, r4, r5
 801ae76:	10a4      	asrs	r4, r4, #2
 801ae78:	2600      	movs	r6, #0
 801ae7a:	42a6      	cmp	r6, r4
 801ae7c:	d105      	bne.n	801ae8a <__libc_init_array+0x2e>
 801ae7e:	bd70      	pop	{r4, r5, r6, pc}
 801ae80:	f855 3b04 	ldr.w	r3, [r5], #4
 801ae84:	4798      	blx	r3
 801ae86:	3601      	adds	r6, #1
 801ae88:	e7ee      	b.n	801ae68 <__libc_init_array+0xc>
 801ae8a:	f855 3b04 	ldr.w	r3, [r5], #4
 801ae8e:	4798      	blx	r3
 801ae90:	3601      	adds	r6, #1
 801ae92:	e7f2      	b.n	801ae7a <__libc_init_array+0x1e>
 801ae94:	0802220c 	.word	0x0802220c
 801ae98:	0802220c 	.word	0x0802220c
 801ae9c:	0802220c 	.word	0x0802220c
 801aea0:	08022210 	.word	0x08022210

0801aea4 <__retarget_lock_acquire_recursive>:
 801aea4:	4770      	bx	lr

0801aea6 <__retarget_lock_release_recursive>:
 801aea6:	4770      	bx	lr

0801aea8 <memcpy>:
 801aea8:	440a      	add	r2, r1
 801aeaa:	4291      	cmp	r1, r2
 801aeac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801aeb0:	d100      	bne.n	801aeb4 <memcpy+0xc>
 801aeb2:	4770      	bx	lr
 801aeb4:	b510      	push	{r4, lr}
 801aeb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801aeba:	f803 4f01 	strb.w	r4, [r3, #1]!
 801aebe:	4291      	cmp	r1, r2
 801aec0:	d1f9      	bne.n	801aeb6 <memcpy+0xe>
 801aec2:	bd10      	pop	{r4, pc}

0801aec4 <_free_r>:
 801aec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801aec6:	2900      	cmp	r1, #0
 801aec8:	d044      	beq.n	801af54 <_free_r+0x90>
 801aeca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aece:	9001      	str	r0, [sp, #4]
 801aed0:	2b00      	cmp	r3, #0
 801aed2:	f1a1 0404 	sub.w	r4, r1, #4
 801aed6:	bfb8      	it	lt
 801aed8:	18e4      	addlt	r4, r4, r3
 801aeda:	f7ff ff2b 	bl	801ad34 <__malloc_lock>
 801aede:	4a1e      	ldr	r2, [pc, #120]	; (801af58 <_free_r+0x94>)
 801aee0:	9801      	ldr	r0, [sp, #4]
 801aee2:	6813      	ldr	r3, [r2, #0]
 801aee4:	b933      	cbnz	r3, 801aef4 <_free_r+0x30>
 801aee6:	6063      	str	r3, [r4, #4]
 801aee8:	6014      	str	r4, [r2, #0]
 801aeea:	b003      	add	sp, #12
 801aeec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801aef0:	f7ff bf26 	b.w	801ad40 <__malloc_unlock>
 801aef4:	42a3      	cmp	r3, r4
 801aef6:	d908      	bls.n	801af0a <_free_r+0x46>
 801aef8:	6825      	ldr	r5, [r4, #0]
 801aefa:	1961      	adds	r1, r4, r5
 801aefc:	428b      	cmp	r3, r1
 801aefe:	bf01      	itttt	eq
 801af00:	6819      	ldreq	r1, [r3, #0]
 801af02:	685b      	ldreq	r3, [r3, #4]
 801af04:	1949      	addeq	r1, r1, r5
 801af06:	6021      	streq	r1, [r4, #0]
 801af08:	e7ed      	b.n	801aee6 <_free_r+0x22>
 801af0a:	461a      	mov	r2, r3
 801af0c:	685b      	ldr	r3, [r3, #4]
 801af0e:	b10b      	cbz	r3, 801af14 <_free_r+0x50>
 801af10:	42a3      	cmp	r3, r4
 801af12:	d9fa      	bls.n	801af0a <_free_r+0x46>
 801af14:	6811      	ldr	r1, [r2, #0]
 801af16:	1855      	adds	r5, r2, r1
 801af18:	42a5      	cmp	r5, r4
 801af1a:	d10b      	bne.n	801af34 <_free_r+0x70>
 801af1c:	6824      	ldr	r4, [r4, #0]
 801af1e:	4421      	add	r1, r4
 801af20:	1854      	adds	r4, r2, r1
 801af22:	42a3      	cmp	r3, r4
 801af24:	6011      	str	r1, [r2, #0]
 801af26:	d1e0      	bne.n	801aeea <_free_r+0x26>
 801af28:	681c      	ldr	r4, [r3, #0]
 801af2a:	685b      	ldr	r3, [r3, #4]
 801af2c:	6053      	str	r3, [r2, #4]
 801af2e:	440c      	add	r4, r1
 801af30:	6014      	str	r4, [r2, #0]
 801af32:	e7da      	b.n	801aeea <_free_r+0x26>
 801af34:	d902      	bls.n	801af3c <_free_r+0x78>
 801af36:	230c      	movs	r3, #12
 801af38:	6003      	str	r3, [r0, #0]
 801af3a:	e7d6      	b.n	801aeea <_free_r+0x26>
 801af3c:	6825      	ldr	r5, [r4, #0]
 801af3e:	1961      	adds	r1, r4, r5
 801af40:	428b      	cmp	r3, r1
 801af42:	bf04      	itt	eq
 801af44:	6819      	ldreq	r1, [r3, #0]
 801af46:	685b      	ldreq	r3, [r3, #4]
 801af48:	6063      	str	r3, [r4, #4]
 801af4a:	bf04      	itt	eq
 801af4c:	1949      	addeq	r1, r1, r5
 801af4e:	6021      	streq	r1, [r4, #0]
 801af50:	6054      	str	r4, [r2, #4]
 801af52:	e7ca      	b.n	801aeea <_free_r+0x26>
 801af54:	b003      	add	sp, #12
 801af56:	bd30      	pop	{r4, r5, pc}
 801af58:	200061a8 	.word	0x200061a8

0801af5c <_malloc_usable_size_r>:
 801af5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801af60:	1f18      	subs	r0, r3, #4
 801af62:	2b00      	cmp	r3, #0
 801af64:	bfbc      	itt	lt
 801af66:	580b      	ldrlt	r3, [r1, r0]
 801af68:	18c0      	addlt	r0, r0, r3
 801af6a:	4770      	bx	lr

0801af6c <__ssputs_r>:
 801af6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af70:	688e      	ldr	r6, [r1, #8]
 801af72:	461f      	mov	r7, r3
 801af74:	42be      	cmp	r6, r7
 801af76:	680b      	ldr	r3, [r1, #0]
 801af78:	4682      	mov	sl, r0
 801af7a:	460c      	mov	r4, r1
 801af7c:	4690      	mov	r8, r2
 801af7e:	d82c      	bhi.n	801afda <__ssputs_r+0x6e>
 801af80:	898a      	ldrh	r2, [r1, #12]
 801af82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801af86:	d026      	beq.n	801afd6 <__ssputs_r+0x6a>
 801af88:	6965      	ldr	r5, [r4, #20]
 801af8a:	6909      	ldr	r1, [r1, #16]
 801af8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801af90:	eba3 0901 	sub.w	r9, r3, r1
 801af94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801af98:	1c7b      	adds	r3, r7, #1
 801af9a:	444b      	add	r3, r9
 801af9c:	106d      	asrs	r5, r5, #1
 801af9e:	429d      	cmp	r5, r3
 801afa0:	bf38      	it	cc
 801afa2:	461d      	movcc	r5, r3
 801afa4:	0553      	lsls	r3, r2, #21
 801afa6:	d527      	bpl.n	801aff8 <__ssputs_r+0x8c>
 801afa8:	4629      	mov	r1, r5
 801afaa:	f7ff fe43 	bl	801ac34 <_malloc_r>
 801afae:	4606      	mov	r6, r0
 801afb0:	b360      	cbz	r0, 801b00c <__ssputs_r+0xa0>
 801afb2:	6921      	ldr	r1, [r4, #16]
 801afb4:	464a      	mov	r2, r9
 801afb6:	f7ff ff77 	bl	801aea8 <memcpy>
 801afba:	89a3      	ldrh	r3, [r4, #12]
 801afbc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801afc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801afc4:	81a3      	strh	r3, [r4, #12]
 801afc6:	6126      	str	r6, [r4, #16]
 801afc8:	6165      	str	r5, [r4, #20]
 801afca:	444e      	add	r6, r9
 801afcc:	eba5 0509 	sub.w	r5, r5, r9
 801afd0:	6026      	str	r6, [r4, #0]
 801afd2:	60a5      	str	r5, [r4, #8]
 801afd4:	463e      	mov	r6, r7
 801afd6:	42be      	cmp	r6, r7
 801afd8:	d900      	bls.n	801afdc <__ssputs_r+0x70>
 801afda:	463e      	mov	r6, r7
 801afdc:	6820      	ldr	r0, [r4, #0]
 801afde:	4632      	mov	r2, r6
 801afe0:	4641      	mov	r1, r8
 801afe2:	f7ff ff03 	bl	801adec <memmove>
 801afe6:	68a3      	ldr	r3, [r4, #8]
 801afe8:	1b9b      	subs	r3, r3, r6
 801afea:	60a3      	str	r3, [r4, #8]
 801afec:	6823      	ldr	r3, [r4, #0]
 801afee:	4433      	add	r3, r6
 801aff0:	6023      	str	r3, [r4, #0]
 801aff2:	2000      	movs	r0, #0
 801aff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aff8:	462a      	mov	r2, r5
 801affa:	f7ff fea7 	bl	801ad4c <_realloc_r>
 801affe:	4606      	mov	r6, r0
 801b000:	2800      	cmp	r0, #0
 801b002:	d1e0      	bne.n	801afc6 <__ssputs_r+0x5a>
 801b004:	6921      	ldr	r1, [r4, #16]
 801b006:	4650      	mov	r0, sl
 801b008:	f7ff ff5c 	bl	801aec4 <_free_r>
 801b00c:	230c      	movs	r3, #12
 801b00e:	f8ca 3000 	str.w	r3, [sl]
 801b012:	89a3      	ldrh	r3, [r4, #12]
 801b014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b018:	81a3      	strh	r3, [r4, #12]
 801b01a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b01e:	e7e9      	b.n	801aff4 <__ssputs_r+0x88>

0801b020 <_svfiprintf_r>:
 801b020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b024:	4698      	mov	r8, r3
 801b026:	898b      	ldrh	r3, [r1, #12]
 801b028:	061b      	lsls	r3, r3, #24
 801b02a:	b09d      	sub	sp, #116	; 0x74
 801b02c:	4607      	mov	r7, r0
 801b02e:	460d      	mov	r5, r1
 801b030:	4614      	mov	r4, r2
 801b032:	d50e      	bpl.n	801b052 <_svfiprintf_r+0x32>
 801b034:	690b      	ldr	r3, [r1, #16]
 801b036:	b963      	cbnz	r3, 801b052 <_svfiprintf_r+0x32>
 801b038:	2140      	movs	r1, #64	; 0x40
 801b03a:	f7ff fdfb 	bl	801ac34 <_malloc_r>
 801b03e:	6028      	str	r0, [r5, #0]
 801b040:	6128      	str	r0, [r5, #16]
 801b042:	b920      	cbnz	r0, 801b04e <_svfiprintf_r+0x2e>
 801b044:	230c      	movs	r3, #12
 801b046:	603b      	str	r3, [r7, #0]
 801b048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b04c:	e0d0      	b.n	801b1f0 <_svfiprintf_r+0x1d0>
 801b04e:	2340      	movs	r3, #64	; 0x40
 801b050:	616b      	str	r3, [r5, #20]
 801b052:	2300      	movs	r3, #0
 801b054:	9309      	str	r3, [sp, #36]	; 0x24
 801b056:	2320      	movs	r3, #32
 801b058:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b05c:	f8cd 800c 	str.w	r8, [sp, #12]
 801b060:	2330      	movs	r3, #48	; 0x30
 801b062:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801b208 <_svfiprintf_r+0x1e8>
 801b066:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b06a:	f04f 0901 	mov.w	r9, #1
 801b06e:	4623      	mov	r3, r4
 801b070:	469a      	mov	sl, r3
 801b072:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b076:	b10a      	cbz	r2, 801b07c <_svfiprintf_r+0x5c>
 801b078:	2a25      	cmp	r2, #37	; 0x25
 801b07a:	d1f9      	bne.n	801b070 <_svfiprintf_r+0x50>
 801b07c:	ebba 0b04 	subs.w	fp, sl, r4
 801b080:	d00b      	beq.n	801b09a <_svfiprintf_r+0x7a>
 801b082:	465b      	mov	r3, fp
 801b084:	4622      	mov	r2, r4
 801b086:	4629      	mov	r1, r5
 801b088:	4638      	mov	r0, r7
 801b08a:	f7ff ff6f 	bl	801af6c <__ssputs_r>
 801b08e:	3001      	adds	r0, #1
 801b090:	f000 80a9 	beq.w	801b1e6 <_svfiprintf_r+0x1c6>
 801b094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b096:	445a      	add	r2, fp
 801b098:	9209      	str	r2, [sp, #36]	; 0x24
 801b09a:	f89a 3000 	ldrb.w	r3, [sl]
 801b09e:	2b00      	cmp	r3, #0
 801b0a0:	f000 80a1 	beq.w	801b1e6 <_svfiprintf_r+0x1c6>
 801b0a4:	2300      	movs	r3, #0
 801b0a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b0aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b0ae:	f10a 0a01 	add.w	sl, sl, #1
 801b0b2:	9304      	str	r3, [sp, #16]
 801b0b4:	9307      	str	r3, [sp, #28]
 801b0b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b0ba:	931a      	str	r3, [sp, #104]	; 0x68
 801b0bc:	4654      	mov	r4, sl
 801b0be:	2205      	movs	r2, #5
 801b0c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b0c4:	4850      	ldr	r0, [pc, #320]	; (801b208 <_svfiprintf_r+0x1e8>)
 801b0c6:	f7e5 f89b 	bl	8000200 <memchr>
 801b0ca:	9a04      	ldr	r2, [sp, #16]
 801b0cc:	b9d8      	cbnz	r0, 801b106 <_svfiprintf_r+0xe6>
 801b0ce:	06d0      	lsls	r0, r2, #27
 801b0d0:	bf44      	itt	mi
 801b0d2:	2320      	movmi	r3, #32
 801b0d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b0d8:	0711      	lsls	r1, r2, #28
 801b0da:	bf44      	itt	mi
 801b0dc:	232b      	movmi	r3, #43	; 0x2b
 801b0de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b0e2:	f89a 3000 	ldrb.w	r3, [sl]
 801b0e6:	2b2a      	cmp	r3, #42	; 0x2a
 801b0e8:	d015      	beq.n	801b116 <_svfiprintf_r+0xf6>
 801b0ea:	9a07      	ldr	r2, [sp, #28]
 801b0ec:	4654      	mov	r4, sl
 801b0ee:	2000      	movs	r0, #0
 801b0f0:	f04f 0c0a 	mov.w	ip, #10
 801b0f4:	4621      	mov	r1, r4
 801b0f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b0fa:	3b30      	subs	r3, #48	; 0x30
 801b0fc:	2b09      	cmp	r3, #9
 801b0fe:	d94d      	bls.n	801b19c <_svfiprintf_r+0x17c>
 801b100:	b1b0      	cbz	r0, 801b130 <_svfiprintf_r+0x110>
 801b102:	9207      	str	r2, [sp, #28]
 801b104:	e014      	b.n	801b130 <_svfiprintf_r+0x110>
 801b106:	eba0 0308 	sub.w	r3, r0, r8
 801b10a:	fa09 f303 	lsl.w	r3, r9, r3
 801b10e:	4313      	orrs	r3, r2
 801b110:	9304      	str	r3, [sp, #16]
 801b112:	46a2      	mov	sl, r4
 801b114:	e7d2      	b.n	801b0bc <_svfiprintf_r+0x9c>
 801b116:	9b03      	ldr	r3, [sp, #12]
 801b118:	1d19      	adds	r1, r3, #4
 801b11a:	681b      	ldr	r3, [r3, #0]
 801b11c:	9103      	str	r1, [sp, #12]
 801b11e:	2b00      	cmp	r3, #0
 801b120:	bfbb      	ittet	lt
 801b122:	425b      	neglt	r3, r3
 801b124:	f042 0202 	orrlt.w	r2, r2, #2
 801b128:	9307      	strge	r3, [sp, #28]
 801b12a:	9307      	strlt	r3, [sp, #28]
 801b12c:	bfb8      	it	lt
 801b12e:	9204      	strlt	r2, [sp, #16]
 801b130:	7823      	ldrb	r3, [r4, #0]
 801b132:	2b2e      	cmp	r3, #46	; 0x2e
 801b134:	d10c      	bne.n	801b150 <_svfiprintf_r+0x130>
 801b136:	7863      	ldrb	r3, [r4, #1]
 801b138:	2b2a      	cmp	r3, #42	; 0x2a
 801b13a:	d134      	bne.n	801b1a6 <_svfiprintf_r+0x186>
 801b13c:	9b03      	ldr	r3, [sp, #12]
 801b13e:	1d1a      	adds	r2, r3, #4
 801b140:	681b      	ldr	r3, [r3, #0]
 801b142:	9203      	str	r2, [sp, #12]
 801b144:	2b00      	cmp	r3, #0
 801b146:	bfb8      	it	lt
 801b148:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b14c:	3402      	adds	r4, #2
 801b14e:	9305      	str	r3, [sp, #20]
 801b150:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801b218 <_svfiprintf_r+0x1f8>
 801b154:	7821      	ldrb	r1, [r4, #0]
 801b156:	2203      	movs	r2, #3
 801b158:	4650      	mov	r0, sl
 801b15a:	f7e5 f851 	bl	8000200 <memchr>
 801b15e:	b138      	cbz	r0, 801b170 <_svfiprintf_r+0x150>
 801b160:	9b04      	ldr	r3, [sp, #16]
 801b162:	eba0 000a 	sub.w	r0, r0, sl
 801b166:	2240      	movs	r2, #64	; 0x40
 801b168:	4082      	lsls	r2, r0
 801b16a:	4313      	orrs	r3, r2
 801b16c:	3401      	adds	r4, #1
 801b16e:	9304      	str	r3, [sp, #16]
 801b170:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b174:	4825      	ldr	r0, [pc, #148]	; (801b20c <_svfiprintf_r+0x1ec>)
 801b176:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b17a:	2206      	movs	r2, #6
 801b17c:	f7e5 f840 	bl	8000200 <memchr>
 801b180:	2800      	cmp	r0, #0
 801b182:	d038      	beq.n	801b1f6 <_svfiprintf_r+0x1d6>
 801b184:	4b22      	ldr	r3, [pc, #136]	; (801b210 <_svfiprintf_r+0x1f0>)
 801b186:	bb1b      	cbnz	r3, 801b1d0 <_svfiprintf_r+0x1b0>
 801b188:	9b03      	ldr	r3, [sp, #12]
 801b18a:	3307      	adds	r3, #7
 801b18c:	f023 0307 	bic.w	r3, r3, #7
 801b190:	3308      	adds	r3, #8
 801b192:	9303      	str	r3, [sp, #12]
 801b194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b196:	4433      	add	r3, r6
 801b198:	9309      	str	r3, [sp, #36]	; 0x24
 801b19a:	e768      	b.n	801b06e <_svfiprintf_r+0x4e>
 801b19c:	fb0c 3202 	mla	r2, ip, r2, r3
 801b1a0:	460c      	mov	r4, r1
 801b1a2:	2001      	movs	r0, #1
 801b1a4:	e7a6      	b.n	801b0f4 <_svfiprintf_r+0xd4>
 801b1a6:	2300      	movs	r3, #0
 801b1a8:	3401      	adds	r4, #1
 801b1aa:	9305      	str	r3, [sp, #20]
 801b1ac:	4619      	mov	r1, r3
 801b1ae:	f04f 0c0a 	mov.w	ip, #10
 801b1b2:	4620      	mov	r0, r4
 801b1b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b1b8:	3a30      	subs	r2, #48	; 0x30
 801b1ba:	2a09      	cmp	r2, #9
 801b1bc:	d903      	bls.n	801b1c6 <_svfiprintf_r+0x1a6>
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	d0c6      	beq.n	801b150 <_svfiprintf_r+0x130>
 801b1c2:	9105      	str	r1, [sp, #20]
 801b1c4:	e7c4      	b.n	801b150 <_svfiprintf_r+0x130>
 801b1c6:	fb0c 2101 	mla	r1, ip, r1, r2
 801b1ca:	4604      	mov	r4, r0
 801b1cc:	2301      	movs	r3, #1
 801b1ce:	e7f0      	b.n	801b1b2 <_svfiprintf_r+0x192>
 801b1d0:	ab03      	add	r3, sp, #12
 801b1d2:	9300      	str	r3, [sp, #0]
 801b1d4:	462a      	mov	r2, r5
 801b1d6:	4b0f      	ldr	r3, [pc, #60]	; (801b214 <_svfiprintf_r+0x1f4>)
 801b1d8:	a904      	add	r1, sp, #16
 801b1da:	4638      	mov	r0, r7
 801b1dc:	f3af 8000 	nop.w
 801b1e0:	1c42      	adds	r2, r0, #1
 801b1e2:	4606      	mov	r6, r0
 801b1e4:	d1d6      	bne.n	801b194 <_svfiprintf_r+0x174>
 801b1e6:	89ab      	ldrh	r3, [r5, #12]
 801b1e8:	065b      	lsls	r3, r3, #25
 801b1ea:	f53f af2d 	bmi.w	801b048 <_svfiprintf_r+0x28>
 801b1ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b1f0:	b01d      	add	sp, #116	; 0x74
 801b1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1f6:	ab03      	add	r3, sp, #12
 801b1f8:	9300      	str	r3, [sp, #0]
 801b1fa:	462a      	mov	r2, r5
 801b1fc:	4b05      	ldr	r3, [pc, #20]	; (801b214 <_svfiprintf_r+0x1f4>)
 801b1fe:	a904      	add	r1, sp, #16
 801b200:	4638      	mov	r0, r7
 801b202:	f000 f879 	bl	801b2f8 <_printf_i>
 801b206:	e7eb      	b.n	801b1e0 <_svfiprintf_r+0x1c0>
 801b208:	080221b8 	.word	0x080221b8
 801b20c:	080221c2 	.word	0x080221c2
 801b210:	00000000 	.word	0x00000000
 801b214:	0801af6d 	.word	0x0801af6d
 801b218:	080221be 	.word	0x080221be

0801b21c <_printf_common>:
 801b21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b220:	4616      	mov	r6, r2
 801b222:	4699      	mov	r9, r3
 801b224:	688a      	ldr	r2, [r1, #8]
 801b226:	690b      	ldr	r3, [r1, #16]
 801b228:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b22c:	4293      	cmp	r3, r2
 801b22e:	bfb8      	it	lt
 801b230:	4613      	movlt	r3, r2
 801b232:	6033      	str	r3, [r6, #0]
 801b234:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b238:	4607      	mov	r7, r0
 801b23a:	460c      	mov	r4, r1
 801b23c:	b10a      	cbz	r2, 801b242 <_printf_common+0x26>
 801b23e:	3301      	adds	r3, #1
 801b240:	6033      	str	r3, [r6, #0]
 801b242:	6823      	ldr	r3, [r4, #0]
 801b244:	0699      	lsls	r1, r3, #26
 801b246:	bf42      	ittt	mi
 801b248:	6833      	ldrmi	r3, [r6, #0]
 801b24a:	3302      	addmi	r3, #2
 801b24c:	6033      	strmi	r3, [r6, #0]
 801b24e:	6825      	ldr	r5, [r4, #0]
 801b250:	f015 0506 	ands.w	r5, r5, #6
 801b254:	d106      	bne.n	801b264 <_printf_common+0x48>
 801b256:	f104 0a19 	add.w	sl, r4, #25
 801b25a:	68e3      	ldr	r3, [r4, #12]
 801b25c:	6832      	ldr	r2, [r6, #0]
 801b25e:	1a9b      	subs	r3, r3, r2
 801b260:	42ab      	cmp	r3, r5
 801b262:	dc26      	bgt.n	801b2b2 <_printf_common+0x96>
 801b264:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b268:	1e13      	subs	r3, r2, #0
 801b26a:	6822      	ldr	r2, [r4, #0]
 801b26c:	bf18      	it	ne
 801b26e:	2301      	movne	r3, #1
 801b270:	0692      	lsls	r2, r2, #26
 801b272:	d42b      	bmi.n	801b2cc <_printf_common+0xb0>
 801b274:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b278:	4649      	mov	r1, r9
 801b27a:	4638      	mov	r0, r7
 801b27c:	47c0      	blx	r8
 801b27e:	3001      	adds	r0, #1
 801b280:	d01e      	beq.n	801b2c0 <_printf_common+0xa4>
 801b282:	6823      	ldr	r3, [r4, #0]
 801b284:	6922      	ldr	r2, [r4, #16]
 801b286:	f003 0306 	and.w	r3, r3, #6
 801b28a:	2b04      	cmp	r3, #4
 801b28c:	bf02      	ittt	eq
 801b28e:	68e5      	ldreq	r5, [r4, #12]
 801b290:	6833      	ldreq	r3, [r6, #0]
 801b292:	1aed      	subeq	r5, r5, r3
 801b294:	68a3      	ldr	r3, [r4, #8]
 801b296:	bf0c      	ite	eq
 801b298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b29c:	2500      	movne	r5, #0
 801b29e:	4293      	cmp	r3, r2
 801b2a0:	bfc4      	itt	gt
 801b2a2:	1a9b      	subgt	r3, r3, r2
 801b2a4:	18ed      	addgt	r5, r5, r3
 801b2a6:	2600      	movs	r6, #0
 801b2a8:	341a      	adds	r4, #26
 801b2aa:	42b5      	cmp	r5, r6
 801b2ac:	d11a      	bne.n	801b2e4 <_printf_common+0xc8>
 801b2ae:	2000      	movs	r0, #0
 801b2b0:	e008      	b.n	801b2c4 <_printf_common+0xa8>
 801b2b2:	2301      	movs	r3, #1
 801b2b4:	4652      	mov	r2, sl
 801b2b6:	4649      	mov	r1, r9
 801b2b8:	4638      	mov	r0, r7
 801b2ba:	47c0      	blx	r8
 801b2bc:	3001      	adds	r0, #1
 801b2be:	d103      	bne.n	801b2c8 <_printf_common+0xac>
 801b2c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b2c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b2c8:	3501      	adds	r5, #1
 801b2ca:	e7c6      	b.n	801b25a <_printf_common+0x3e>
 801b2cc:	18e1      	adds	r1, r4, r3
 801b2ce:	1c5a      	adds	r2, r3, #1
 801b2d0:	2030      	movs	r0, #48	; 0x30
 801b2d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b2d6:	4422      	add	r2, r4
 801b2d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b2dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b2e0:	3302      	adds	r3, #2
 801b2e2:	e7c7      	b.n	801b274 <_printf_common+0x58>
 801b2e4:	2301      	movs	r3, #1
 801b2e6:	4622      	mov	r2, r4
 801b2e8:	4649      	mov	r1, r9
 801b2ea:	4638      	mov	r0, r7
 801b2ec:	47c0      	blx	r8
 801b2ee:	3001      	adds	r0, #1
 801b2f0:	d0e6      	beq.n	801b2c0 <_printf_common+0xa4>
 801b2f2:	3601      	adds	r6, #1
 801b2f4:	e7d9      	b.n	801b2aa <_printf_common+0x8e>
	...

0801b2f8 <_printf_i>:
 801b2f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b2fc:	7e0f      	ldrb	r7, [r1, #24]
 801b2fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b300:	2f78      	cmp	r7, #120	; 0x78
 801b302:	4691      	mov	r9, r2
 801b304:	4680      	mov	r8, r0
 801b306:	460c      	mov	r4, r1
 801b308:	469a      	mov	sl, r3
 801b30a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b30e:	d807      	bhi.n	801b320 <_printf_i+0x28>
 801b310:	2f62      	cmp	r7, #98	; 0x62
 801b312:	d80a      	bhi.n	801b32a <_printf_i+0x32>
 801b314:	2f00      	cmp	r7, #0
 801b316:	f000 80d4 	beq.w	801b4c2 <_printf_i+0x1ca>
 801b31a:	2f58      	cmp	r7, #88	; 0x58
 801b31c:	f000 80c0 	beq.w	801b4a0 <_printf_i+0x1a8>
 801b320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b324:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b328:	e03a      	b.n	801b3a0 <_printf_i+0xa8>
 801b32a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b32e:	2b15      	cmp	r3, #21
 801b330:	d8f6      	bhi.n	801b320 <_printf_i+0x28>
 801b332:	a101      	add	r1, pc, #4	; (adr r1, 801b338 <_printf_i+0x40>)
 801b334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b338:	0801b391 	.word	0x0801b391
 801b33c:	0801b3a5 	.word	0x0801b3a5
 801b340:	0801b321 	.word	0x0801b321
 801b344:	0801b321 	.word	0x0801b321
 801b348:	0801b321 	.word	0x0801b321
 801b34c:	0801b321 	.word	0x0801b321
 801b350:	0801b3a5 	.word	0x0801b3a5
 801b354:	0801b321 	.word	0x0801b321
 801b358:	0801b321 	.word	0x0801b321
 801b35c:	0801b321 	.word	0x0801b321
 801b360:	0801b321 	.word	0x0801b321
 801b364:	0801b4a9 	.word	0x0801b4a9
 801b368:	0801b3d1 	.word	0x0801b3d1
 801b36c:	0801b463 	.word	0x0801b463
 801b370:	0801b321 	.word	0x0801b321
 801b374:	0801b321 	.word	0x0801b321
 801b378:	0801b4cb 	.word	0x0801b4cb
 801b37c:	0801b321 	.word	0x0801b321
 801b380:	0801b3d1 	.word	0x0801b3d1
 801b384:	0801b321 	.word	0x0801b321
 801b388:	0801b321 	.word	0x0801b321
 801b38c:	0801b46b 	.word	0x0801b46b
 801b390:	682b      	ldr	r3, [r5, #0]
 801b392:	1d1a      	adds	r2, r3, #4
 801b394:	681b      	ldr	r3, [r3, #0]
 801b396:	602a      	str	r2, [r5, #0]
 801b398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b39c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b3a0:	2301      	movs	r3, #1
 801b3a2:	e09f      	b.n	801b4e4 <_printf_i+0x1ec>
 801b3a4:	6820      	ldr	r0, [r4, #0]
 801b3a6:	682b      	ldr	r3, [r5, #0]
 801b3a8:	0607      	lsls	r7, r0, #24
 801b3aa:	f103 0104 	add.w	r1, r3, #4
 801b3ae:	6029      	str	r1, [r5, #0]
 801b3b0:	d501      	bpl.n	801b3b6 <_printf_i+0xbe>
 801b3b2:	681e      	ldr	r6, [r3, #0]
 801b3b4:	e003      	b.n	801b3be <_printf_i+0xc6>
 801b3b6:	0646      	lsls	r6, r0, #25
 801b3b8:	d5fb      	bpl.n	801b3b2 <_printf_i+0xba>
 801b3ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b3be:	2e00      	cmp	r6, #0
 801b3c0:	da03      	bge.n	801b3ca <_printf_i+0xd2>
 801b3c2:	232d      	movs	r3, #45	; 0x2d
 801b3c4:	4276      	negs	r6, r6
 801b3c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b3ca:	485a      	ldr	r0, [pc, #360]	; (801b534 <_printf_i+0x23c>)
 801b3cc:	230a      	movs	r3, #10
 801b3ce:	e012      	b.n	801b3f6 <_printf_i+0xfe>
 801b3d0:	682b      	ldr	r3, [r5, #0]
 801b3d2:	6820      	ldr	r0, [r4, #0]
 801b3d4:	1d19      	adds	r1, r3, #4
 801b3d6:	6029      	str	r1, [r5, #0]
 801b3d8:	0605      	lsls	r5, r0, #24
 801b3da:	d501      	bpl.n	801b3e0 <_printf_i+0xe8>
 801b3dc:	681e      	ldr	r6, [r3, #0]
 801b3de:	e002      	b.n	801b3e6 <_printf_i+0xee>
 801b3e0:	0641      	lsls	r1, r0, #25
 801b3e2:	d5fb      	bpl.n	801b3dc <_printf_i+0xe4>
 801b3e4:	881e      	ldrh	r6, [r3, #0]
 801b3e6:	4853      	ldr	r0, [pc, #332]	; (801b534 <_printf_i+0x23c>)
 801b3e8:	2f6f      	cmp	r7, #111	; 0x6f
 801b3ea:	bf0c      	ite	eq
 801b3ec:	2308      	moveq	r3, #8
 801b3ee:	230a      	movne	r3, #10
 801b3f0:	2100      	movs	r1, #0
 801b3f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b3f6:	6865      	ldr	r5, [r4, #4]
 801b3f8:	60a5      	str	r5, [r4, #8]
 801b3fa:	2d00      	cmp	r5, #0
 801b3fc:	bfa2      	ittt	ge
 801b3fe:	6821      	ldrge	r1, [r4, #0]
 801b400:	f021 0104 	bicge.w	r1, r1, #4
 801b404:	6021      	strge	r1, [r4, #0]
 801b406:	b90e      	cbnz	r6, 801b40c <_printf_i+0x114>
 801b408:	2d00      	cmp	r5, #0
 801b40a:	d04b      	beq.n	801b4a4 <_printf_i+0x1ac>
 801b40c:	4615      	mov	r5, r2
 801b40e:	fbb6 f1f3 	udiv	r1, r6, r3
 801b412:	fb03 6711 	mls	r7, r3, r1, r6
 801b416:	5dc7      	ldrb	r7, [r0, r7]
 801b418:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b41c:	4637      	mov	r7, r6
 801b41e:	42bb      	cmp	r3, r7
 801b420:	460e      	mov	r6, r1
 801b422:	d9f4      	bls.n	801b40e <_printf_i+0x116>
 801b424:	2b08      	cmp	r3, #8
 801b426:	d10b      	bne.n	801b440 <_printf_i+0x148>
 801b428:	6823      	ldr	r3, [r4, #0]
 801b42a:	07de      	lsls	r6, r3, #31
 801b42c:	d508      	bpl.n	801b440 <_printf_i+0x148>
 801b42e:	6923      	ldr	r3, [r4, #16]
 801b430:	6861      	ldr	r1, [r4, #4]
 801b432:	4299      	cmp	r1, r3
 801b434:	bfde      	ittt	le
 801b436:	2330      	movle	r3, #48	; 0x30
 801b438:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b43c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801b440:	1b52      	subs	r2, r2, r5
 801b442:	6122      	str	r2, [r4, #16]
 801b444:	f8cd a000 	str.w	sl, [sp]
 801b448:	464b      	mov	r3, r9
 801b44a:	aa03      	add	r2, sp, #12
 801b44c:	4621      	mov	r1, r4
 801b44e:	4640      	mov	r0, r8
 801b450:	f7ff fee4 	bl	801b21c <_printf_common>
 801b454:	3001      	adds	r0, #1
 801b456:	d14a      	bne.n	801b4ee <_printf_i+0x1f6>
 801b458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b45c:	b004      	add	sp, #16
 801b45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b462:	6823      	ldr	r3, [r4, #0]
 801b464:	f043 0320 	orr.w	r3, r3, #32
 801b468:	6023      	str	r3, [r4, #0]
 801b46a:	4833      	ldr	r0, [pc, #204]	; (801b538 <_printf_i+0x240>)
 801b46c:	2778      	movs	r7, #120	; 0x78
 801b46e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b472:	6823      	ldr	r3, [r4, #0]
 801b474:	6829      	ldr	r1, [r5, #0]
 801b476:	061f      	lsls	r7, r3, #24
 801b478:	f851 6b04 	ldr.w	r6, [r1], #4
 801b47c:	d402      	bmi.n	801b484 <_printf_i+0x18c>
 801b47e:	065f      	lsls	r7, r3, #25
 801b480:	bf48      	it	mi
 801b482:	b2b6      	uxthmi	r6, r6
 801b484:	07df      	lsls	r7, r3, #31
 801b486:	bf48      	it	mi
 801b488:	f043 0320 	orrmi.w	r3, r3, #32
 801b48c:	6029      	str	r1, [r5, #0]
 801b48e:	bf48      	it	mi
 801b490:	6023      	strmi	r3, [r4, #0]
 801b492:	b91e      	cbnz	r6, 801b49c <_printf_i+0x1a4>
 801b494:	6823      	ldr	r3, [r4, #0]
 801b496:	f023 0320 	bic.w	r3, r3, #32
 801b49a:	6023      	str	r3, [r4, #0]
 801b49c:	2310      	movs	r3, #16
 801b49e:	e7a7      	b.n	801b3f0 <_printf_i+0xf8>
 801b4a0:	4824      	ldr	r0, [pc, #144]	; (801b534 <_printf_i+0x23c>)
 801b4a2:	e7e4      	b.n	801b46e <_printf_i+0x176>
 801b4a4:	4615      	mov	r5, r2
 801b4a6:	e7bd      	b.n	801b424 <_printf_i+0x12c>
 801b4a8:	682b      	ldr	r3, [r5, #0]
 801b4aa:	6826      	ldr	r6, [r4, #0]
 801b4ac:	6961      	ldr	r1, [r4, #20]
 801b4ae:	1d18      	adds	r0, r3, #4
 801b4b0:	6028      	str	r0, [r5, #0]
 801b4b2:	0635      	lsls	r5, r6, #24
 801b4b4:	681b      	ldr	r3, [r3, #0]
 801b4b6:	d501      	bpl.n	801b4bc <_printf_i+0x1c4>
 801b4b8:	6019      	str	r1, [r3, #0]
 801b4ba:	e002      	b.n	801b4c2 <_printf_i+0x1ca>
 801b4bc:	0670      	lsls	r0, r6, #25
 801b4be:	d5fb      	bpl.n	801b4b8 <_printf_i+0x1c0>
 801b4c0:	8019      	strh	r1, [r3, #0]
 801b4c2:	2300      	movs	r3, #0
 801b4c4:	6123      	str	r3, [r4, #16]
 801b4c6:	4615      	mov	r5, r2
 801b4c8:	e7bc      	b.n	801b444 <_printf_i+0x14c>
 801b4ca:	682b      	ldr	r3, [r5, #0]
 801b4cc:	1d1a      	adds	r2, r3, #4
 801b4ce:	602a      	str	r2, [r5, #0]
 801b4d0:	681d      	ldr	r5, [r3, #0]
 801b4d2:	6862      	ldr	r2, [r4, #4]
 801b4d4:	2100      	movs	r1, #0
 801b4d6:	4628      	mov	r0, r5
 801b4d8:	f7e4 fe92 	bl	8000200 <memchr>
 801b4dc:	b108      	cbz	r0, 801b4e2 <_printf_i+0x1ea>
 801b4de:	1b40      	subs	r0, r0, r5
 801b4e0:	6060      	str	r0, [r4, #4]
 801b4e2:	6863      	ldr	r3, [r4, #4]
 801b4e4:	6123      	str	r3, [r4, #16]
 801b4e6:	2300      	movs	r3, #0
 801b4e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b4ec:	e7aa      	b.n	801b444 <_printf_i+0x14c>
 801b4ee:	6923      	ldr	r3, [r4, #16]
 801b4f0:	462a      	mov	r2, r5
 801b4f2:	4649      	mov	r1, r9
 801b4f4:	4640      	mov	r0, r8
 801b4f6:	47d0      	blx	sl
 801b4f8:	3001      	adds	r0, #1
 801b4fa:	d0ad      	beq.n	801b458 <_printf_i+0x160>
 801b4fc:	6823      	ldr	r3, [r4, #0]
 801b4fe:	079b      	lsls	r3, r3, #30
 801b500:	d413      	bmi.n	801b52a <_printf_i+0x232>
 801b502:	68e0      	ldr	r0, [r4, #12]
 801b504:	9b03      	ldr	r3, [sp, #12]
 801b506:	4298      	cmp	r0, r3
 801b508:	bfb8      	it	lt
 801b50a:	4618      	movlt	r0, r3
 801b50c:	e7a6      	b.n	801b45c <_printf_i+0x164>
 801b50e:	2301      	movs	r3, #1
 801b510:	4632      	mov	r2, r6
 801b512:	4649      	mov	r1, r9
 801b514:	4640      	mov	r0, r8
 801b516:	47d0      	blx	sl
 801b518:	3001      	adds	r0, #1
 801b51a:	d09d      	beq.n	801b458 <_printf_i+0x160>
 801b51c:	3501      	adds	r5, #1
 801b51e:	68e3      	ldr	r3, [r4, #12]
 801b520:	9903      	ldr	r1, [sp, #12]
 801b522:	1a5b      	subs	r3, r3, r1
 801b524:	42ab      	cmp	r3, r5
 801b526:	dcf2      	bgt.n	801b50e <_printf_i+0x216>
 801b528:	e7eb      	b.n	801b502 <_printf_i+0x20a>
 801b52a:	2500      	movs	r5, #0
 801b52c:	f104 0619 	add.w	r6, r4, #25
 801b530:	e7f5      	b.n	801b51e <_printf_i+0x226>
 801b532:	bf00      	nop
 801b534:	080221c9 	.word	0x080221c9
 801b538:	080221da 	.word	0x080221da

0801b53c <powf>:
 801b53c:	b508      	push	{r3, lr}
 801b53e:	ed2d 8b04 	vpush	{d8-d9}
 801b542:	eeb0 8a60 	vmov.f32	s16, s1
 801b546:	eeb0 9a40 	vmov.f32	s18, s0
 801b54a:	f000 f885 	bl	801b658 <__ieee754_powf>
 801b54e:	eeb4 8a48 	vcmp.f32	s16, s16
 801b552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b556:	eef0 8a40 	vmov.f32	s17, s0
 801b55a:	d63e      	bvs.n	801b5da <powf+0x9e>
 801b55c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801b560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b564:	d112      	bne.n	801b58c <powf+0x50>
 801b566:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b56e:	d039      	beq.n	801b5e4 <powf+0xa8>
 801b570:	eeb0 0a48 	vmov.f32	s0, s16
 801b574:	f000 f840 	bl	801b5f8 <finitef>
 801b578:	b378      	cbz	r0, 801b5da <powf+0x9e>
 801b57a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801b57e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b582:	d52a      	bpl.n	801b5da <powf+0x9e>
 801b584:	f7ff fc64 	bl	801ae50 <__errno>
 801b588:	2322      	movs	r3, #34	; 0x22
 801b58a:	e014      	b.n	801b5b6 <powf+0x7a>
 801b58c:	f000 f834 	bl	801b5f8 <finitef>
 801b590:	b998      	cbnz	r0, 801b5ba <powf+0x7e>
 801b592:	eeb0 0a49 	vmov.f32	s0, s18
 801b596:	f000 f82f 	bl	801b5f8 <finitef>
 801b59a:	b170      	cbz	r0, 801b5ba <powf+0x7e>
 801b59c:	eeb0 0a48 	vmov.f32	s0, s16
 801b5a0:	f000 f82a 	bl	801b5f8 <finitef>
 801b5a4:	b148      	cbz	r0, 801b5ba <powf+0x7e>
 801b5a6:	eef4 8a68 	vcmp.f32	s17, s17
 801b5aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5ae:	d7e9      	bvc.n	801b584 <powf+0x48>
 801b5b0:	f7ff fc4e 	bl	801ae50 <__errno>
 801b5b4:	2321      	movs	r3, #33	; 0x21
 801b5b6:	6003      	str	r3, [r0, #0]
 801b5b8:	e00f      	b.n	801b5da <powf+0x9e>
 801b5ba:	eef5 8a40 	vcmp.f32	s17, #0.0
 801b5be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5c2:	d10a      	bne.n	801b5da <powf+0x9e>
 801b5c4:	eeb0 0a49 	vmov.f32	s0, s18
 801b5c8:	f000 f816 	bl	801b5f8 <finitef>
 801b5cc:	b128      	cbz	r0, 801b5da <powf+0x9e>
 801b5ce:	eeb0 0a48 	vmov.f32	s0, s16
 801b5d2:	f000 f811 	bl	801b5f8 <finitef>
 801b5d6:	2800      	cmp	r0, #0
 801b5d8:	d1d4      	bne.n	801b584 <powf+0x48>
 801b5da:	eeb0 0a68 	vmov.f32	s0, s17
 801b5de:	ecbd 8b04 	vpop	{d8-d9}
 801b5e2:	bd08      	pop	{r3, pc}
 801b5e4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801b5e8:	e7f7      	b.n	801b5da <powf+0x9e>

0801b5ea <fabsf>:
 801b5ea:	ee10 3a10 	vmov	r3, s0
 801b5ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b5f2:	ee00 3a10 	vmov	s0, r3
 801b5f6:	4770      	bx	lr

0801b5f8 <finitef>:
 801b5f8:	b082      	sub	sp, #8
 801b5fa:	ed8d 0a01 	vstr	s0, [sp, #4]
 801b5fe:	9801      	ldr	r0, [sp, #4]
 801b600:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801b604:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801b608:	bfac      	ite	ge
 801b60a:	2000      	movge	r0, #0
 801b60c:	2001      	movlt	r0, #1
 801b60e:	b002      	add	sp, #8
 801b610:	4770      	bx	lr

0801b612 <with_errnof>:
 801b612:	b513      	push	{r0, r1, r4, lr}
 801b614:	4604      	mov	r4, r0
 801b616:	ed8d 0a01 	vstr	s0, [sp, #4]
 801b61a:	f7ff fc19 	bl	801ae50 <__errno>
 801b61e:	ed9d 0a01 	vldr	s0, [sp, #4]
 801b622:	6004      	str	r4, [r0, #0]
 801b624:	b002      	add	sp, #8
 801b626:	bd10      	pop	{r4, pc}

0801b628 <xflowf>:
 801b628:	b130      	cbz	r0, 801b638 <xflowf+0x10>
 801b62a:	eef1 7a40 	vneg.f32	s15, s0
 801b62e:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b632:	2022      	movs	r0, #34	; 0x22
 801b634:	f7ff bfed 	b.w	801b612 <with_errnof>
 801b638:	eef0 7a40 	vmov.f32	s15, s0
 801b63c:	e7f7      	b.n	801b62e <xflowf+0x6>
	...

0801b640 <__math_uflowf>:
 801b640:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b648 <__math_uflowf+0x8>
 801b644:	f7ff bff0 	b.w	801b628 <xflowf>
 801b648:	10000000 	.word	0x10000000

0801b64c <__math_oflowf>:
 801b64c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b654 <__math_oflowf+0x8>
 801b650:	f7ff bfea 	b.w	801b628 <xflowf>
 801b654:	70000000 	.word	0x70000000

0801b658 <__ieee754_powf>:
 801b658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b65c:	ee10 4a90 	vmov	r4, s1
 801b660:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 801b664:	ed2d 8b02 	vpush	{d8}
 801b668:	ee10 7a10 	vmov	r7, s0
 801b66c:	eeb0 8a40 	vmov.f32	s16, s0
 801b670:	eef0 8a60 	vmov.f32	s17, s1
 801b674:	d10c      	bne.n	801b690 <__ieee754_powf+0x38>
 801b676:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 801b67a:	007f      	lsls	r7, r7, #1
 801b67c:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 801b680:	f240 8292 	bls.w	801bba8 <__ieee754_powf+0x550>
 801b684:	ee38 0a28 	vadd.f32	s0, s16, s17
 801b688:	ecbd 8b02 	vpop	{d8}
 801b68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b690:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 801b694:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801b698:	dcf4      	bgt.n	801b684 <__ieee754_powf+0x2c>
 801b69a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801b69e:	dd08      	ble.n	801b6b2 <__ieee754_powf+0x5a>
 801b6a0:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801b6a4:	d1ee      	bne.n	801b684 <__ieee754_powf+0x2c>
 801b6a6:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801b6aa:	0064      	lsls	r4, r4, #1
 801b6ac:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 801b6b0:	e7e6      	b.n	801b680 <__ieee754_powf+0x28>
 801b6b2:	2f00      	cmp	r7, #0
 801b6b4:	da20      	bge.n	801b6f8 <__ieee754_powf+0xa0>
 801b6b6:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 801b6ba:	da2d      	bge.n	801b718 <__ieee754_powf+0xc0>
 801b6bc:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801b6c0:	f2c0 827b 	blt.w	801bbba <__ieee754_powf+0x562>
 801b6c4:	ea4f 53e8 	mov.w	r3, r8, asr #23
 801b6c8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801b6cc:	fa48 f603 	asr.w	r6, r8, r3
 801b6d0:	fa06 f303 	lsl.w	r3, r6, r3
 801b6d4:	4543      	cmp	r3, r8
 801b6d6:	f040 8270 	bne.w	801bbba <__ieee754_powf+0x562>
 801b6da:	f006 0601 	and.w	r6, r6, #1
 801b6de:	f1c6 0602 	rsb	r6, r6, #2
 801b6e2:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801b6e6:	d11f      	bne.n	801b728 <__ieee754_powf+0xd0>
 801b6e8:	2c00      	cmp	r4, #0
 801b6ea:	f280 8263 	bge.w	801bbb4 <__ieee754_powf+0x55c>
 801b6ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b6f2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801b6f6:	e7c7      	b.n	801b688 <__ieee754_powf+0x30>
 801b6f8:	2600      	movs	r6, #0
 801b6fa:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801b6fe:	d1f0      	bne.n	801b6e2 <__ieee754_powf+0x8a>
 801b700:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 801b704:	f000 8250 	beq.w	801bba8 <__ieee754_powf+0x550>
 801b708:	dd08      	ble.n	801b71c <__ieee754_powf+0xc4>
 801b70a:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 801ba10 <__ieee754_powf+0x3b8>
 801b70e:	2c00      	cmp	r4, #0
 801b710:	bfa8      	it	ge
 801b712:	eeb0 0a68 	vmovge.f32	s0, s17
 801b716:	e7b7      	b.n	801b688 <__ieee754_powf+0x30>
 801b718:	2602      	movs	r6, #2
 801b71a:	e7ee      	b.n	801b6fa <__ieee754_powf+0xa2>
 801b71c:	2c00      	cmp	r4, #0
 801b71e:	f280 8246 	bge.w	801bbae <__ieee754_powf+0x556>
 801b722:	eeb1 0a68 	vneg.f32	s0, s17
 801b726:	e7af      	b.n	801b688 <__ieee754_powf+0x30>
 801b728:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801b72c:	d102      	bne.n	801b734 <__ieee754_powf+0xdc>
 801b72e:	ee28 0a08 	vmul.f32	s0, s16, s16
 801b732:	e7a9      	b.n	801b688 <__ieee754_powf+0x30>
 801b734:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801b738:	eeb0 0a48 	vmov.f32	s0, s16
 801b73c:	d107      	bne.n	801b74e <__ieee754_powf+0xf6>
 801b73e:	2f00      	cmp	r7, #0
 801b740:	db05      	blt.n	801b74e <__ieee754_powf+0xf6>
 801b742:	ecbd 8b02 	vpop	{d8}
 801b746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b74a:	f000 bab5 	b.w	801bcb8 <__ieee754_sqrtf>
 801b74e:	f7ff ff4c 	bl	801b5ea <fabsf>
 801b752:	b125      	cbz	r5, 801b75e <__ieee754_powf+0x106>
 801b754:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 801b758:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801b75c:	d115      	bne.n	801b78a <__ieee754_powf+0x132>
 801b75e:	2c00      	cmp	r4, #0
 801b760:	bfbc      	itt	lt
 801b762:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801b766:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801b76a:	2f00      	cmp	r7, #0
 801b76c:	da8c      	bge.n	801b688 <__ieee754_powf+0x30>
 801b76e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 801b772:	4335      	orrs	r5, r6
 801b774:	d104      	bne.n	801b780 <__ieee754_powf+0x128>
 801b776:	ee70 7a40 	vsub.f32	s15, s0, s0
 801b77a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801b77e:	e783      	b.n	801b688 <__ieee754_powf+0x30>
 801b780:	2e01      	cmp	r6, #1
 801b782:	d181      	bne.n	801b688 <__ieee754_powf+0x30>
 801b784:	eeb1 0a40 	vneg.f32	s0, s0
 801b788:	e77e      	b.n	801b688 <__ieee754_powf+0x30>
 801b78a:	0ff8      	lsrs	r0, r7, #31
 801b78c:	3801      	subs	r0, #1
 801b78e:	ea56 0300 	orrs.w	r3, r6, r0
 801b792:	d104      	bne.n	801b79e <__ieee754_powf+0x146>
 801b794:	ee38 8a48 	vsub.f32	s16, s16, s16
 801b798:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801b79c:	e774      	b.n	801b688 <__ieee754_powf+0x30>
 801b79e:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 801b7a2:	dd73      	ble.n	801b88c <__ieee754_powf+0x234>
 801b7a4:	4b9b      	ldr	r3, [pc, #620]	; (801ba14 <__ieee754_powf+0x3bc>)
 801b7a6:	429d      	cmp	r5, r3
 801b7a8:	dc08      	bgt.n	801b7bc <__ieee754_powf+0x164>
 801b7aa:	2c00      	cmp	r4, #0
 801b7ac:	da0b      	bge.n	801b7c6 <__ieee754_powf+0x16e>
 801b7ae:	2000      	movs	r0, #0
 801b7b0:	ecbd 8b02 	vpop	{d8}
 801b7b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b7b8:	f7ff bf48 	b.w	801b64c <__math_oflowf>
 801b7bc:	4b96      	ldr	r3, [pc, #600]	; (801ba18 <__ieee754_powf+0x3c0>)
 801b7be:	429d      	cmp	r5, r3
 801b7c0:	dd08      	ble.n	801b7d4 <__ieee754_powf+0x17c>
 801b7c2:	2c00      	cmp	r4, #0
 801b7c4:	dcf3      	bgt.n	801b7ae <__ieee754_powf+0x156>
 801b7c6:	2000      	movs	r0, #0
 801b7c8:	ecbd 8b02 	vpop	{d8}
 801b7cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b7d0:	f7ff bf36 	b.w	801b640 <__math_uflowf>
 801b7d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b7d8:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b7dc:	eddf 6a8f 	vldr	s13, [pc, #572]	; 801ba1c <__ieee754_powf+0x3c4>
 801b7e0:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801b7e4:	eee0 6a67 	vfms.f32	s13, s0, s15
 801b7e8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b7ec:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801b7f0:	ee20 7a00 	vmul.f32	s14, s0, s0
 801b7f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 801b7f8:	eddf 7a89 	vldr	s15, [pc, #548]	; 801ba20 <__ieee754_powf+0x3c8>
 801b7fc:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801b800:	ed9f 7a88 	vldr	s14, [pc, #544]	; 801ba24 <__ieee754_powf+0x3cc>
 801b804:	eee0 7a07 	vfma.f32	s15, s0, s14
 801b808:	ed9f 7a87 	vldr	s14, [pc, #540]	; 801ba28 <__ieee754_powf+0x3d0>
 801b80c:	eef0 6a67 	vmov.f32	s13, s15
 801b810:	eee0 6a07 	vfma.f32	s13, s0, s14
 801b814:	ee16 3a90 	vmov	r3, s13
 801b818:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801b81c:	f023 030f 	bic.w	r3, r3, #15
 801b820:	ee06 3a90 	vmov	s13, r3
 801b824:	eee0 6a47 	vfms.f32	s13, s0, s14
 801b828:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b82c:	3e01      	subs	r6, #1
 801b82e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 801b832:	4306      	orrs	r6, r0
 801b834:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801b838:	f024 040f 	bic.w	r4, r4, #15
 801b83c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801b840:	bf08      	it	eq
 801b842:	eeb0 8a47 	vmoveq.f32	s16, s14
 801b846:	ee07 4a10 	vmov	s14, r4
 801b84a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801b84e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801b852:	ee07 3a90 	vmov	s15, r3
 801b856:	eee7 0a27 	vfma.f32	s1, s14, s15
 801b85a:	ee07 4a10 	vmov	s14, r4
 801b85e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b862:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801b866:	ee17 1a10 	vmov	r1, s14
 801b86a:	2900      	cmp	r1, #0
 801b86c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b870:	f340 817c 	ble.w	801bb6c <__ieee754_powf+0x514>
 801b874:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801b878:	f340 80f8 	ble.w	801ba6c <__ieee754_powf+0x414>
 801b87c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801b880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b884:	bf4c      	ite	mi
 801b886:	2001      	movmi	r0, #1
 801b888:	2000      	movpl	r0, #0
 801b88a:	e791      	b.n	801b7b0 <__ieee754_powf+0x158>
 801b88c:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 801b890:	bf01      	itttt	eq
 801b892:	eddf 7a66 	vldreq	s15, [pc, #408]	; 801ba2c <__ieee754_powf+0x3d4>
 801b896:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801b89a:	f06f 0317 	mvneq.w	r3, #23
 801b89e:	ee17 5a90 	vmoveq	r5, s15
 801b8a2:	ea4f 52e5 	mov.w	r2, r5, asr #23
 801b8a6:	bf18      	it	ne
 801b8a8:	2300      	movne	r3, #0
 801b8aa:	3a7f      	subs	r2, #127	; 0x7f
 801b8ac:	441a      	add	r2, r3
 801b8ae:	4b60      	ldr	r3, [pc, #384]	; (801ba30 <__ieee754_powf+0x3d8>)
 801b8b0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 801b8b4:	429d      	cmp	r5, r3
 801b8b6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 801b8ba:	dd06      	ble.n	801b8ca <__ieee754_powf+0x272>
 801b8bc:	4b5d      	ldr	r3, [pc, #372]	; (801ba34 <__ieee754_powf+0x3dc>)
 801b8be:	429d      	cmp	r5, r3
 801b8c0:	f340 80a4 	ble.w	801ba0c <__ieee754_powf+0x3b4>
 801b8c4:	3201      	adds	r2, #1
 801b8c6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801b8ca:	2500      	movs	r5, #0
 801b8cc:	4b5a      	ldr	r3, [pc, #360]	; (801ba38 <__ieee754_powf+0x3e0>)
 801b8ce:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801b8d2:	ee07 1a10 	vmov	s14, r1
 801b8d6:	edd3 5a00 	vldr	s11, [r3]
 801b8da:	4b58      	ldr	r3, [pc, #352]	; (801ba3c <__ieee754_powf+0x3e4>)
 801b8dc:	ee75 7a87 	vadd.f32	s15, s11, s14
 801b8e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b8e4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 801b8e8:	1049      	asrs	r1, r1, #1
 801b8ea:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801b8ee:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801b8f2:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 801b8f6:	ee37 6a65 	vsub.f32	s12, s14, s11
 801b8fa:	ee07 1a90 	vmov	s15, r1
 801b8fe:	ee26 5a24 	vmul.f32	s10, s12, s9
 801b902:	ee77 5ae5 	vsub.f32	s11, s15, s11
 801b906:	ee15 7a10 	vmov	r7, s10
 801b90a:	401f      	ands	r7, r3
 801b90c:	ee06 7a90 	vmov	s13, r7
 801b910:	eea6 6ae7 	vfms.f32	s12, s13, s15
 801b914:	ee37 7a65 	vsub.f32	s14, s14, s11
 801b918:	ee65 7a05 	vmul.f32	s15, s10, s10
 801b91c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801b920:	eddf 5a47 	vldr	s11, [pc, #284]	; 801ba40 <__ieee754_powf+0x3e8>
 801b924:	ed9f 7a47 	vldr	s14, [pc, #284]	; 801ba44 <__ieee754_powf+0x3ec>
 801b928:	eee7 5a87 	vfma.f32	s11, s15, s14
 801b92c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801ba48 <__ieee754_powf+0x3f0>
 801b930:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801b934:	eddf 5a39 	vldr	s11, [pc, #228]	; 801ba1c <__ieee754_powf+0x3c4>
 801b938:	eee7 5a27 	vfma.f32	s11, s14, s15
 801b93c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 801ba4c <__ieee754_powf+0x3f4>
 801b940:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801b944:	eddf 5a42 	vldr	s11, [pc, #264]	; 801ba50 <__ieee754_powf+0x3f8>
 801b948:	ee26 6a24 	vmul.f32	s12, s12, s9
 801b94c:	eee7 5a27 	vfma.f32	s11, s14, s15
 801b950:	ee35 7a26 	vadd.f32	s14, s10, s13
 801b954:	ee67 4aa7 	vmul.f32	s9, s15, s15
 801b958:	ee27 7a06 	vmul.f32	s14, s14, s12
 801b95c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801b960:	eea4 7aa5 	vfma.f32	s14, s9, s11
 801b964:	eef0 5a67 	vmov.f32	s11, s15
 801b968:	eee6 5aa6 	vfma.f32	s11, s13, s13
 801b96c:	ee75 5a87 	vadd.f32	s11, s11, s14
 801b970:	ee15 1a90 	vmov	r1, s11
 801b974:	4019      	ands	r1, r3
 801b976:	ee05 1a90 	vmov	s11, r1
 801b97a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801b97e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801b982:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b986:	ee67 7a85 	vmul.f32	s15, s15, s10
 801b98a:	eee6 7a25 	vfma.f32	s15, s12, s11
 801b98e:	eeb0 6a67 	vmov.f32	s12, s15
 801b992:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b996:	ee16 1a10 	vmov	r1, s12
 801b99a:	4019      	ands	r1, r3
 801b99c:	ee07 1a10 	vmov	s14, r1
 801b9a0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 801b9a4:	ee06 1a10 	vmov	s12, r1
 801b9a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b9ac:	ed9f 7a29 	vldr	s14, [pc, #164]	; 801ba54 <__ieee754_powf+0x3fc>
 801b9b0:	4929      	ldr	r1, [pc, #164]	; (801ba58 <__ieee754_powf+0x400>)
 801b9b2:	eddf 5a2a 	vldr	s11, [pc, #168]	; 801ba5c <__ieee754_powf+0x404>
 801b9b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b9ba:	ed9f 7a29 	vldr	s14, [pc, #164]	; 801ba60 <__ieee754_powf+0x408>
 801b9be:	eee6 7a07 	vfma.f32	s15, s12, s14
 801b9c2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801b9c6:	ed91 7a00 	vldr	s14, [r1]
 801b9ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b9ce:	ee07 2a10 	vmov	s14, r2
 801b9d2:	eef0 6a67 	vmov.f32	s13, s15
 801b9d6:	4a23      	ldr	r2, [pc, #140]	; (801ba64 <__ieee754_powf+0x40c>)
 801b9d8:	eee6 6a25 	vfma.f32	s13, s12, s11
 801b9dc:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 801b9e0:	ed92 5a00 	vldr	s10, [r2]
 801b9e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b9e8:	ee76 6a85 	vadd.f32	s13, s13, s10
 801b9ec:	ee76 6a87 	vadd.f32	s13, s13, s14
 801b9f0:	ee16 2a90 	vmov	r2, s13
 801b9f4:	4013      	ands	r3, r2
 801b9f6:	ee06 3a90 	vmov	s13, r3
 801b9fa:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801b9fe:	ee37 7a45 	vsub.f32	s14, s14, s10
 801ba02:	eea6 7a65 	vfms.f32	s14, s12, s11
 801ba06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ba0a:	e70f      	b.n	801b82c <__ieee754_powf+0x1d4>
 801ba0c:	2501      	movs	r5, #1
 801ba0e:	e75d      	b.n	801b8cc <__ieee754_powf+0x274>
 801ba10:	00000000 	.word	0x00000000
 801ba14:	3f7ffff3 	.word	0x3f7ffff3
 801ba18:	3f800007 	.word	0x3f800007
 801ba1c:	3eaaaaab 	.word	0x3eaaaaab
 801ba20:	3fb8aa3b 	.word	0x3fb8aa3b
 801ba24:	36eca570 	.word	0x36eca570
 801ba28:	3fb8aa00 	.word	0x3fb8aa00
 801ba2c:	4b800000 	.word	0x4b800000
 801ba30:	001cc471 	.word	0x001cc471
 801ba34:	005db3d6 	.word	0x005db3d6
 801ba38:	080221ec 	.word	0x080221ec
 801ba3c:	fffff000 	.word	0xfffff000
 801ba40:	3e6c3255 	.word	0x3e6c3255
 801ba44:	3e53f142 	.word	0x3e53f142
 801ba48:	3e8ba305 	.word	0x3e8ba305
 801ba4c:	3edb6db7 	.word	0x3edb6db7
 801ba50:	3f19999a 	.word	0x3f19999a
 801ba54:	3f76384f 	.word	0x3f76384f
 801ba58:	080221fc 	.word	0x080221fc
 801ba5c:	3f763800 	.word	0x3f763800
 801ba60:	369dc3a0 	.word	0x369dc3a0
 801ba64:	080221f4 	.word	0x080221f4
 801ba68:	3338aa3c 	.word	0x3338aa3c
 801ba6c:	f040 8093 	bne.w	801bb96 <__ieee754_powf+0x53e>
 801ba70:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801ba68 <__ieee754_powf+0x410>
 801ba74:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ba78:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801ba7c:	eef4 6ac7 	vcmpe.f32	s13, s14
 801ba80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba84:	f73f aefa 	bgt.w	801b87c <__ieee754_powf+0x224>
 801ba88:	15db      	asrs	r3, r3, #23
 801ba8a:	3b7e      	subs	r3, #126	; 0x7e
 801ba8c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 801ba90:	4118      	asrs	r0, r3
 801ba92:	4408      	add	r0, r1
 801ba94:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801ba98:	4a49      	ldr	r2, [pc, #292]	; (801bbc0 <__ieee754_powf+0x568>)
 801ba9a:	3b7f      	subs	r3, #127	; 0x7f
 801ba9c:	411a      	asrs	r2, r3
 801ba9e:	4002      	ands	r2, r0
 801baa0:	ee07 2a10 	vmov	s14, r2
 801baa4:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801baa8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801baac:	f1c3 0317 	rsb	r3, r3, #23
 801bab0:	4118      	asrs	r0, r3
 801bab2:	2900      	cmp	r1, #0
 801bab4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bab8:	bfb8      	it	lt
 801baba:	4240      	neglt	r0, r0
 801babc:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801bac0:	eddf 6a40 	vldr	s13, [pc, #256]	; 801bbc4 <__ieee754_powf+0x56c>
 801bac4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 801bbc8 <__ieee754_powf+0x570>
 801bac8:	ee17 3a10 	vmov	r3, s14
 801bacc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801bad0:	f023 030f 	bic.w	r3, r3, #15
 801bad4:	ee07 3a10 	vmov	s14, r3
 801bad8:	ee77 7a67 	vsub.f32	s15, s14, s15
 801badc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801bae0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801bae4:	eddf 7a39 	vldr	s15, [pc, #228]	; 801bbcc <__ieee754_powf+0x574>
 801bae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801baec:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801baf0:	eef0 6a67 	vmov.f32	s13, s15
 801baf4:	eee7 6a06 	vfma.f32	s13, s14, s12
 801baf8:	eef0 5a66 	vmov.f32	s11, s13
 801bafc:	eee7 5a46 	vfms.f32	s11, s14, s12
 801bb00:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801bb04:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801bb08:	ed9f 6a31 	vldr	s12, [pc, #196]	; 801bbd0 <__ieee754_powf+0x578>
 801bb0c:	eddf 5a31 	vldr	s11, [pc, #196]	; 801bbd4 <__ieee754_powf+0x57c>
 801bb10:	eea7 6a25 	vfma.f32	s12, s14, s11
 801bb14:	eddf 5a30 	vldr	s11, [pc, #192]	; 801bbd8 <__ieee754_powf+0x580>
 801bb18:	eee6 5a07 	vfma.f32	s11, s12, s14
 801bb1c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801bbdc <__ieee754_powf+0x584>
 801bb20:	eea5 6a87 	vfma.f32	s12, s11, s14
 801bb24:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801bbe0 <__ieee754_powf+0x588>
 801bb28:	eee6 5a07 	vfma.f32	s11, s12, s14
 801bb2c:	eeb0 6a66 	vmov.f32	s12, s13
 801bb30:	eea5 6ac7 	vfms.f32	s12, s11, s14
 801bb34:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801bb38:	ee66 5a86 	vmul.f32	s11, s13, s12
 801bb3c:	ee36 6a47 	vsub.f32	s12, s12, s14
 801bb40:	eee6 7aa7 	vfma.f32	s15, s13, s15
 801bb44:	ee85 7a86 	vdiv.f32	s14, s11, s12
 801bb48:	ee77 7a67 	vsub.f32	s15, s14, s15
 801bb4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801bb50:	ee30 0a67 	vsub.f32	s0, s0, s15
 801bb54:	ee10 3a10 	vmov	r3, s0
 801bb58:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801bb5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801bb60:	da1f      	bge.n	801bba2 <__ieee754_powf+0x54a>
 801bb62:	f000 f843 	bl	801bbec <scalbnf>
 801bb66:	ee20 0a08 	vmul.f32	s0, s0, s16
 801bb6a:	e58d      	b.n	801b688 <__ieee754_powf+0x30>
 801bb6c:	4a1d      	ldr	r2, [pc, #116]	; (801bbe4 <__ieee754_powf+0x58c>)
 801bb6e:	4293      	cmp	r3, r2
 801bb70:	dd07      	ble.n	801bb82 <__ieee754_powf+0x52a>
 801bb72:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801bb76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb7a:	bf4c      	ite	mi
 801bb7c:	2001      	movmi	r0, #1
 801bb7e:	2000      	movpl	r0, #0
 801bb80:	e622      	b.n	801b7c8 <__ieee754_powf+0x170>
 801bb82:	d108      	bne.n	801bb96 <__ieee754_powf+0x53e>
 801bb84:	ee37 7a67 	vsub.f32	s14, s14, s15
 801bb88:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801bb8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb90:	f6ff af7a 	blt.w	801ba88 <__ieee754_powf+0x430>
 801bb94:	e7ed      	b.n	801bb72 <__ieee754_powf+0x51a>
 801bb96:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801bb9a:	f73f af75 	bgt.w	801ba88 <__ieee754_powf+0x430>
 801bb9e:	2000      	movs	r0, #0
 801bba0:	e78c      	b.n	801babc <__ieee754_powf+0x464>
 801bba2:	ee00 3a10 	vmov	s0, r3
 801bba6:	e7de      	b.n	801bb66 <__ieee754_powf+0x50e>
 801bba8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801bbac:	e56c      	b.n	801b688 <__ieee754_powf+0x30>
 801bbae:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801bbe8 <__ieee754_powf+0x590>
 801bbb2:	e569      	b.n	801b688 <__ieee754_powf+0x30>
 801bbb4:	eeb0 0a48 	vmov.f32	s0, s16
 801bbb8:	e566      	b.n	801b688 <__ieee754_powf+0x30>
 801bbba:	2600      	movs	r6, #0
 801bbbc:	e591      	b.n	801b6e2 <__ieee754_powf+0x8a>
 801bbbe:	bf00      	nop
 801bbc0:	ff800000 	.word	0xff800000
 801bbc4:	3f317218 	.word	0x3f317218
 801bbc8:	3f317200 	.word	0x3f317200
 801bbcc:	35bfbe8c 	.word	0x35bfbe8c
 801bbd0:	b5ddea0e 	.word	0xb5ddea0e
 801bbd4:	3331bb4c 	.word	0x3331bb4c
 801bbd8:	388ab355 	.word	0x388ab355
 801bbdc:	bb360b61 	.word	0xbb360b61
 801bbe0:	3e2aaaab 	.word	0x3e2aaaab
 801bbe4:	43160000 	.word	0x43160000
 801bbe8:	00000000 	.word	0x00000000

0801bbec <scalbnf>:
 801bbec:	ee10 3a10 	vmov	r3, s0
 801bbf0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801bbf4:	d02b      	beq.n	801bc4e <scalbnf+0x62>
 801bbf6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801bbfa:	d302      	bcc.n	801bc02 <scalbnf+0x16>
 801bbfc:	ee30 0a00 	vadd.f32	s0, s0, s0
 801bc00:	4770      	bx	lr
 801bc02:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801bc06:	d123      	bne.n	801bc50 <scalbnf+0x64>
 801bc08:	4b24      	ldr	r3, [pc, #144]	; (801bc9c <scalbnf+0xb0>)
 801bc0a:	eddf 7a25 	vldr	s15, [pc, #148]	; 801bca0 <scalbnf+0xb4>
 801bc0e:	4298      	cmp	r0, r3
 801bc10:	ee20 0a27 	vmul.f32	s0, s0, s15
 801bc14:	db17      	blt.n	801bc46 <scalbnf+0x5a>
 801bc16:	ee10 3a10 	vmov	r3, s0
 801bc1a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801bc1e:	3a19      	subs	r2, #25
 801bc20:	f24c 3150 	movw	r1, #50000	; 0xc350
 801bc24:	4288      	cmp	r0, r1
 801bc26:	dd15      	ble.n	801bc54 <scalbnf+0x68>
 801bc28:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801bca4 <scalbnf+0xb8>
 801bc2c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 801bca8 <scalbnf+0xbc>
 801bc30:	ee10 3a10 	vmov	r3, s0
 801bc34:	eeb0 7a67 	vmov.f32	s14, s15
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	bfb8      	it	lt
 801bc3c:	eef0 7a66 	vmovlt.f32	s15, s13
 801bc40:	ee27 0a87 	vmul.f32	s0, s15, s14
 801bc44:	4770      	bx	lr
 801bc46:	eddf 7a19 	vldr	s15, [pc, #100]	; 801bcac <scalbnf+0xc0>
 801bc4a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801bc4e:	4770      	bx	lr
 801bc50:	0dd2      	lsrs	r2, r2, #23
 801bc52:	e7e5      	b.n	801bc20 <scalbnf+0x34>
 801bc54:	4410      	add	r0, r2
 801bc56:	28fe      	cmp	r0, #254	; 0xfe
 801bc58:	dce6      	bgt.n	801bc28 <scalbnf+0x3c>
 801bc5a:	2800      	cmp	r0, #0
 801bc5c:	dd06      	ble.n	801bc6c <scalbnf+0x80>
 801bc5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801bc62:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801bc66:	ee00 3a10 	vmov	s0, r3
 801bc6a:	4770      	bx	lr
 801bc6c:	f110 0f16 	cmn.w	r0, #22
 801bc70:	da09      	bge.n	801bc86 <scalbnf+0x9a>
 801bc72:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801bcac <scalbnf+0xc0>
 801bc76:	eddf 6a0e 	vldr	s13, [pc, #56]	; 801bcb0 <scalbnf+0xc4>
 801bc7a:	ee10 3a10 	vmov	r3, s0
 801bc7e:	eeb0 7a67 	vmov.f32	s14, s15
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	e7d9      	b.n	801bc3a <scalbnf+0x4e>
 801bc86:	3019      	adds	r0, #25
 801bc88:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801bc8c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801bc90:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801bcb4 <scalbnf+0xc8>
 801bc94:	ee07 3a90 	vmov	s15, r3
 801bc98:	e7d7      	b.n	801bc4a <scalbnf+0x5e>
 801bc9a:	bf00      	nop
 801bc9c:	ffff3cb0 	.word	0xffff3cb0
 801bca0:	4c000000 	.word	0x4c000000
 801bca4:	7149f2ca 	.word	0x7149f2ca
 801bca8:	f149f2ca 	.word	0xf149f2ca
 801bcac:	0da24260 	.word	0x0da24260
 801bcb0:	8da24260 	.word	0x8da24260
 801bcb4:	33000000 	.word	0x33000000

0801bcb8 <__ieee754_sqrtf>:
 801bcb8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801bcbc:	4770      	bx	lr
	...

0801bcc0 <_init>:
 801bcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bcc2:	bf00      	nop
 801bcc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bcc6:	bc08      	pop	{r3}
 801bcc8:	469e      	mov	lr, r3
 801bcca:	4770      	bx	lr

0801bccc <_fini>:
 801bccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bcce:	bf00      	nop
 801bcd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bcd2:	bc08      	pop	{r3}
 801bcd4:	469e      	mov	lr, r3
 801bcd6:	4770      	bx	lr
